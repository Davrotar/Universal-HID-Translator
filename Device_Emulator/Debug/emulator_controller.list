
emulator_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2a4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800a474  0800a474  0001a474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4ec  0800a4ec  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4ec  0800a4ec  0001a4ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4f4  0800a4f4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4f4  0800a4f4  0001a4f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4f8  0800a4f8  0001a4f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a4fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005320  200001dc  0800a6d8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200054fc  0800a6d8  000254fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025ae5  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004cbe  00000000  00000000  00045cf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019c8  00000000  00000000  0004a9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017d0  00000000  00000000  0004c378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000069c3  00000000  00000000  0004db48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d2f0  00000000  00000000  0005450b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd6e9  00000000  00000000  000717fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014eee4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006df4  00000000  00000000  0014ef38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a45c 	.word	0x0800a45c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	0800a45c 	.word	0x0800a45c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fb6e 	bl	8000bec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f81c 	bl	800054c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f8f8 	bl	8000708 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000518:	f000 f8a2 	bl	8000660 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800051c:	f000 f8ca 	bl	80006b4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 8000520:	f009 fa04 	bl	800992c <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000524:	f006 fce2 	bl	8006eec <osKernelInitialize>
  /* creation of defaultTask */
  //defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadNew(threadLed,NULL,NULL);
 8000528:	2200      	movs	r2, #0
 800052a:	2100      	movs	r1, #0
 800052c:	4805      	ldr	r0, [pc, #20]	; (8000544 <main+0x3c>)
 800052e:	f006 fd47 	bl	8006fc0 <osThreadNew>
  osThreadNew(threadOne,NULL,NULL);
 8000532:	2200      	movs	r2, #0
 8000534:	2100      	movs	r1, #0
 8000536:	4804      	ldr	r0, [pc, #16]	; (8000548 <main+0x40>)
 8000538:	f006 fd42 	bl	8006fc0 <osThreadNew>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800053c:	f006 fd0a 	bl	8006f54 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000540:	e7fe      	b.n	8000540 <main+0x38>
 8000542:	bf00      	nop
 8000544:	080007e9 	.word	0x080007e9
 8000548:	08000809 	.word	0x08000809

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b0ac      	sub	sp, #176	; 0xb0
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000556:	2234      	movs	r2, #52	; 0x34
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f009 feae 	bl	800a2bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
 800056e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000570:	f107 030c 	add.w	r3, r7, #12
 8000574:	225c      	movs	r2, #92	; 0x5c
 8000576:	2100      	movs	r1, #0
 8000578:	4618      	mov	r0, r3
 800057a:	f009 fe9f 	bl	800a2bc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	4b35      	ldr	r3, [pc, #212]	; (8000658 <SystemClock_Config+0x10c>)
 8000584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000586:	4a34      	ldr	r2, [pc, #208]	; (8000658 <SystemClock_Config+0x10c>)
 8000588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058c:	6413      	str	r3, [r2, #64]	; 0x40
 800058e:	4b32      	ldr	r3, [pc, #200]	; (8000658 <SystemClock_Config+0x10c>)
 8000590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800059a:	2300      	movs	r3, #0
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	4b2f      	ldr	r3, [pc, #188]	; (800065c <SystemClock_Config+0x110>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005a6:	4a2d      	ldr	r2, [pc, #180]	; (800065c <SystemClock_Config+0x110>)
 80005a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ac:	6013      	str	r3, [r2, #0]
 80005ae:	4b2b      	ldr	r3, [pc, #172]	; (800065c <SystemClock_Config+0x110>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ba:	2301      	movs	r3, #1
 80005bc:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c6:	2302      	movs	r3, #2
 80005c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005d4:	2304      	movs	r3, #4
 80005d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005da:	2348      	movs	r3, #72	; 0x48
 80005dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005e6:	2303      	movs	r3, #3
 80005e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80005f6:	4618      	mov	r0, r3
 80005f8:	f002 fde8 	bl	80031cc <HAL_RCC_OscConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000602:	f000 f92a 	bl	800085a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000606:	230f      	movs	r3, #15
 8000608:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060a:	2302      	movs	r3, #2
 800060c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000612:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000616:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800061c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000620:	2102      	movs	r1, #2
 8000622:	4618      	mov	r0, r3
 8000624:	f001 ffaa 	bl	800257c <HAL_RCC_ClockConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800062e:	f000 f914 	bl	800085a <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000632:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000636:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000638:	2300      	movs	r3, #0
 800063a:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	4618      	mov	r0, r3
 8000642:	f002 f8e7 	bl	8002814 <HAL_RCCEx_PeriphCLKConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x104>
  {
    Error_Handler();
 800064c:	f000 f905 	bl	800085a <Error_Handler>
  }
}
 8000650:	bf00      	nop
 8000652:	37b0      	adds	r7, #176	; 0xb0
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40023800 	.word	0x40023800
 800065c:	40007000 	.word	0x40007000

08000660 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000664:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 8000666:	4a12      	ldr	r2, [pc, #72]	; (80006b0 <MX_USART2_UART_Init+0x50>)
 8000668:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800066a:	4b10      	ldr	r3, [pc, #64]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 800066c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000670:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000678:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800067e:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000684:	4b09      	ldr	r3, [pc, #36]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 8000686:	220c      	movs	r2, #12
 8000688:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068a:	4b08      	ldr	r3, [pc, #32]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 8000692:	2200      	movs	r2, #0
 8000694:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000696:	4805      	ldr	r0, [pc, #20]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 8000698:	f003 fa30 	bl	8003afc <HAL_UART_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006a2:	f000 f8da 	bl	800085a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20004b50 	.word	0x20004b50
 80006b0:	40004400 	.word	0x40004400

080006b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006b8:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_USART3_UART_Init+0x4c>)
 80006ba:	4a12      	ldr	r2, [pc, #72]	; (8000704 <MX_USART3_UART_Init+0x50>)
 80006bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <MX_USART3_UART_Init+0x4c>)
 80006c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <MX_USART3_UART_Init+0x4c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MX_USART3_UART_Init+0x4c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <MX_USART3_UART_Init+0x4c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006d8:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_USART3_UART_Init+0x4c>)
 80006da:	220c      	movs	r2, #12
 80006dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006de:	4b08      	ldr	r3, [pc, #32]	; (8000700 <MX_USART3_UART_Init+0x4c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_USART3_UART_Init+0x4c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006ea:	4805      	ldr	r0, [pc, #20]	; (8000700 <MX_USART3_UART_Init+0x4c>)
 80006ec:	f003 fa06 	bl	8003afc <HAL_UART_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006f6:	f000 f8b0 	bl	800085a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20004b10 	.word	0x20004b10
 8000704:	40004800 	.word	0x40004800

08000708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08a      	sub	sp, #40	; 0x28
 800070c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070e:	f107 0314 	add.w	r3, r7, #20
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	613b      	str	r3, [r7, #16]
 8000722:	4b2d      	ldr	r3, [pc, #180]	; (80007d8 <MX_GPIO_Init+0xd0>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a2c      	ldr	r2, [pc, #176]	; (80007d8 <MX_GPIO_Init+0xd0>)
 8000728:	f043 0304 	orr.w	r3, r3, #4
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b2a      	ldr	r3, [pc, #168]	; (80007d8 <MX_GPIO_Init+0xd0>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0304 	and.w	r3, r3, #4
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	4b26      	ldr	r3, [pc, #152]	; (80007d8 <MX_GPIO_Init+0xd0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a25      	ldr	r2, [pc, #148]	; (80007d8 <MX_GPIO_Init+0xd0>)
 8000744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b23      	ldr	r3, [pc, #140]	; (80007d8 <MX_GPIO_Init+0xd0>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	4b1f      	ldr	r3, [pc, #124]	; (80007d8 <MX_GPIO_Init+0xd0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a1e      	ldr	r2, [pc, #120]	; (80007d8 <MX_GPIO_Init+0xd0>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b1c      	ldr	r3, [pc, #112]	; (80007d8 <MX_GPIO_Init+0xd0>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <MX_GPIO_Init+0xd0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a17      	ldr	r2, [pc, #92]	; (80007d8 <MX_GPIO_Init+0xd0>)
 800077c:	f043 0302 	orr.w	r3, r3, #2
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <MX_GPIO_Init+0xd0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0302 	and.w	r3, r3, #2
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	2120      	movs	r1, #32
 8000792:	4812      	ldr	r0, [pc, #72]	; (80007dc <MX_GPIO_Init+0xd4>)
 8000794:	f000 fd06 	bl	80011a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000798:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800079c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800079e:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <MX_GPIO_Init+0xd8>)
 80007a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	4619      	mov	r1, r3
 80007ac:	480d      	ldr	r0, [pc, #52]	; (80007e4 <MX_GPIO_Init+0xdc>)
 80007ae:	f000 fb65 	bl	8000e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007b2:	2320      	movs	r3, #32
 80007b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b6:	2301      	movs	r3, #1
 80007b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007be:	2300      	movs	r3, #0
 80007c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	4619      	mov	r1, r3
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <MX_GPIO_Init+0xd4>)
 80007ca:	f000 fb57 	bl	8000e7c <HAL_GPIO_Init>

}
 80007ce:	bf00      	nop
 80007d0:	3728      	adds	r7, #40	; 0x28
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40020000 	.word	0x40020000
 80007e0:	10210000 	.word	0x10210000
 80007e4:	40020800 	.word	0x40020800

080007e8 <threadLed>:

/* USER CODE BEGIN 4 */
void threadLed(void *argument){
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	while(1){
		HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 80007f0:	2120      	movs	r1, #32
 80007f2:	4804      	ldr	r0, [pc, #16]	; (8000804 <threadLed+0x1c>)
 80007f4:	f000 fcef 	bl	80011d6 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80007f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007fc:	f000 fa38 	bl	8000c70 <HAL_Delay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8000800:	e7f6      	b.n	80007f0 <threadLed+0x8>
 8000802:	bf00      	nop
 8000804:	40020000 	.word	0x40020000

08000808 <threadOne>:
	}
}

void threadOne(void *argument){
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	struct mouseHID_t mouseHID;
	while(1){
		mouseHID.buttons = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	733b      	strb	r3, [r7, #12]
		mouseHID.x = 10;
 8000814:	230a      	movs	r3, #10
 8000816:	737b      	strb	r3, [r7, #13]
		mouseHID.y = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	73bb      	strb	r3, [r7, #14]
		mouseHID.wheel = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	73fb      	strb	r3, [r7, #15]
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&mouseHID, sizeof(struct mouseHID_t));
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	2204      	movs	r2, #4
 8000826:	4619      	mov	r1, r3
 8000828:	4803      	ldr	r0, [pc, #12]	; (8000838 <threadOne+0x30>)
 800082a:	f005 f9c3 	bl	8005bb4 <USBD_HID_SendReport>
		HAL_Delay(1000);
 800082e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000832:	f000 fa1d 	bl	8000c70 <HAL_Delay>
		mouseHID.buttons = 0;
 8000836:	e7eb      	b.n	8000810 <threadOne+0x8>
 8000838:	20004c14 	.word	0x20004c14

0800083c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800084c:	d101      	bne.n	8000852 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800084e:	f000 f9ef 	bl	8000c30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085e:	b672      	cpsid	i
}
 8000860:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000862:	e7fe      	b.n	8000862 <Error_Handler+0x8>

08000864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <HAL_MspInit+0x54>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000872:	4a11      	ldr	r2, [pc, #68]	; (80008b8 <HAL_MspInit+0x54>)
 8000874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000878:	6453      	str	r3, [r2, #68]	; 0x44
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <HAL_MspInit+0x54>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <HAL_MspInit+0x54>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088e:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <HAL_MspInit+0x54>)
 8000890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000894:	6413      	str	r3, [r2, #64]	; 0x40
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <HAL_MspInit+0x54>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	210f      	movs	r1, #15
 80008a6:	f06f 0001 	mvn.w	r0, #1
 80008aa:	f000 fabd 	bl	8000e28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800

080008bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08c      	sub	sp, #48	; 0x30
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a41      	ldr	r2, [pc, #260]	; (80009e0 <HAL_UART_MspInit+0x124>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d12c      	bne.n	8000938 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	61bb      	str	r3, [r7, #24]
 80008e2:	4b40      	ldr	r3, [pc, #256]	; (80009e4 <HAL_UART_MspInit+0x128>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	4a3f      	ldr	r2, [pc, #252]	; (80009e4 <HAL_UART_MspInit+0x128>)
 80008e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ec:	6413      	str	r3, [r2, #64]	; 0x40
 80008ee:	4b3d      	ldr	r3, [pc, #244]	; (80009e4 <HAL_UART_MspInit+0x128>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008f6:	61bb      	str	r3, [r7, #24]
 80008f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	617b      	str	r3, [r7, #20]
 80008fe:	4b39      	ldr	r3, [pc, #228]	; (80009e4 <HAL_UART_MspInit+0x128>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a38      	ldr	r2, [pc, #224]	; (80009e4 <HAL_UART_MspInit+0x128>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b36      	ldr	r3, [pc, #216]	; (80009e4 <HAL_UART_MspInit+0x128>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	617b      	str	r3, [r7, #20]
 8000914:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000916:	230c      	movs	r3, #12
 8000918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000922:	2303      	movs	r3, #3
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000926:	2307      	movs	r3, #7
 8000928:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	482d      	ldr	r0, [pc, #180]	; (80009e8 <HAL_UART_MspInit+0x12c>)
 8000932:	f000 faa3 	bl	8000e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000936:	e04f      	b.n	80009d8 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART3)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a2b      	ldr	r2, [pc, #172]	; (80009ec <HAL_UART_MspInit+0x130>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d14a      	bne.n	80009d8 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
 8000946:	4b27      	ldr	r3, [pc, #156]	; (80009e4 <HAL_UART_MspInit+0x128>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	4a26      	ldr	r2, [pc, #152]	; (80009e4 <HAL_UART_MspInit+0x128>)
 800094c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000950:	6413      	str	r3, [r2, #64]	; 0x40
 8000952:	4b24      	ldr	r3, [pc, #144]	; (80009e4 <HAL_UART_MspInit+0x128>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	4b20      	ldr	r3, [pc, #128]	; (80009e4 <HAL_UART_MspInit+0x128>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a1f      	ldr	r2, [pc, #124]	; (80009e4 <HAL_UART_MspInit+0x128>)
 8000968:	f043 0304 	orr.w	r3, r3, #4
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b1d      	ldr	r3, [pc, #116]	; (80009e4 <HAL_UART_MspInit+0x128>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0304 	and.w	r3, r3, #4
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <HAL_UART_MspInit+0x128>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a18      	ldr	r2, [pc, #96]	; (80009e4 <HAL_UART_MspInit+0x128>)
 8000984:	f043 0302 	orr.w	r3, r3, #2
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <HAL_UART_MspInit+0x128>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0302 	and.w	r3, r3, #2
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000996:	2320      	movs	r3, #32
 8000998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a2:	2303      	movs	r3, #3
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009a6:	2307      	movs	r3, #7
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	480f      	ldr	r0, [pc, #60]	; (80009f0 <HAL_UART_MspInit+0x134>)
 80009b2:	f000 fa63 	bl	8000e7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	2302      	movs	r3, #2
 80009be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c4:	2303      	movs	r3, #3
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009c8:	2307      	movs	r3, #7
 80009ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	4808      	ldr	r0, [pc, #32]	; (80009f4 <HAL_UART_MspInit+0x138>)
 80009d4:	f000 fa52 	bl	8000e7c <HAL_GPIO_Init>
}
 80009d8:	bf00      	nop
 80009da:	3730      	adds	r7, #48	; 0x30
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40004400 	.word	0x40004400
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40020000 	.word	0x40020000
 80009ec:	40004800 	.word	0x40004800
 80009f0:	40020800 	.word	0x40020800
 80009f4:	40020400 	.word	0x40020400

080009f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08c      	sub	sp, #48	; 0x30
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	6879      	ldr	r1, [r7, #4]
 8000a0c:	201c      	movs	r0, #28
 8000a0e:	f000 fa0b 	bl	8000e28 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a12:	201c      	movs	r0, #28
 8000a14:	f000 fa24 	bl	8000e60 <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	4b20      	ldr	r3, [pc, #128]	; (8000aa0 <HAL_InitTick+0xa8>)
 8000a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a20:	4a1f      	ldr	r2, [pc, #124]	; (8000aa0 <HAL_InitTick+0xa8>)
 8000a22:	f043 0301 	orr.w	r3, r3, #1
 8000a26:	6413      	str	r3, [r2, #64]	; 0x40
 8000a28:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <HAL_InitTick+0xa8>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2c:	f003 0301 	and.w	r3, r3, #1
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a34:	f107 0210 	add.w	r2, r7, #16
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4611      	mov	r1, r2
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f001 feb6 	bl	80027b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a44:	f001 fe8c 	bl	8002760 <HAL_RCC_GetPCLK1Freq>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a50:	4a14      	ldr	r2, [pc, #80]	; (8000aa4 <HAL_InitTick+0xac>)
 8000a52:	fba2 2303 	umull	r2, r3, r2, r3
 8000a56:	0c9b      	lsrs	r3, r3, #18
 8000a58:	3b01      	subs	r3, #1
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <HAL_InitTick+0xb0>)
 8000a5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a62:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000a64:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <HAL_InitTick+0xb0>)
 8000a66:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a6a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000a6c:	4a0e      	ldr	r2, [pc, #56]	; (8000aa8 <HAL_InitTick+0xb0>)
 8000a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a70:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000a72:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <HAL_InitTick+0xb0>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a78:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <HAL_InitTick+0xb0>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000a7e:	480a      	ldr	r0, [pc, #40]	; (8000aa8 <HAL_InitTick+0xb0>)
 8000a80:	f002 fdfe 	bl	8003680 <HAL_TIM_Base_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d104      	bne.n	8000a94 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8000a8a:	4807      	ldr	r0, [pc, #28]	; (8000aa8 <HAL_InitTick+0xb0>)
 8000a8c:	f002 fe2d 	bl	80036ea <HAL_TIM_Base_Start_IT>
 8000a90:	4603      	mov	r3, r0
 8000a92:	e000      	b.n	8000a96 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a94:	2301      	movs	r3, #1
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3730      	adds	r7, #48	; 0x30
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	431bde83 	.word	0x431bde83
 8000aa8:	20004b90 	.word	0x20004b90

08000aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <NMI_Handler+0x4>

08000ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <HardFault_Handler+0x4>

08000ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <MemManage_Handler+0x4>

08000abe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <BusFault_Handler+0x4>

08000ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <UsageFault_Handler+0x4>

08000aca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000adc:	4802      	ldr	r0, [pc, #8]	; (8000ae8 <TIM2_IRQHandler+0x10>)
 8000ade:	f002 fe28 	bl	8003732 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20004b90 	.word	0x20004b90

08000aec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000af0:	4802      	ldr	r0, [pc, #8]	; (8000afc <OTG_FS_IRQHandler+0x10>)
 8000af2:	f000 fce2 	bl	80014ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	200050e4 	.word	0x200050e4

08000b00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b08:	4a14      	ldr	r2, [pc, #80]	; (8000b5c <_sbrk+0x5c>)
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <_sbrk+0x60>)
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b14:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <_sbrk+0x64>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d102      	bne.n	8000b22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b1c:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <_sbrk+0x64>)
 8000b1e:	4a12      	ldr	r2, [pc, #72]	; (8000b68 <_sbrk+0x68>)
 8000b20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b22:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <_sbrk+0x64>)
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4413      	add	r3, r2
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d207      	bcs.n	8000b40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b30:	f009 fb7c 	bl	800a22c <__errno>
 8000b34:	4603      	mov	r3, r0
 8000b36:	220c      	movs	r2, #12
 8000b38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3e:	e009      	b.n	8000b54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <_sbrk+0x64>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b46:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <_sbrk+0x64>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	4a05      	ldr	r2, [pc, #20]	; (8000b64 <_sbrk+0x64>)
 8000b50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b52:	68fb      	ldr	r3, [r7, #12]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3718      	adds	r7, #24
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20020000 	.word	0x20020000
 8000b60:	00000400 	.word	0x00000400
 8000b64:	200001f8 	.word	0x200001f8
 8000b68:	20005500 	.word	0x20005500

08000b6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b70:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <SystemInit+0x28>)
 8000b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b76:	4a07      	ldr	r2, [pc, #28]	; (8000b94 <SystemInit+0x28>)
 8000b78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b80:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <SystemInit+0x28>)
 8000b82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b86:	609a      	str	r2, [r3, #8]
#endif
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b9e:	e003      	b.n	8000ba8 <LoopCopyDataInit>

08000ba0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ba2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ba4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ba6:	3104      	adds	r1, #4

08000ba8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ba8:	480b      	ldr	r0, [pc, #44]	; (8000bd8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000baa:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000bac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000bae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000bb0:	d3f6      	bcc.n	8000ba0 <CopyDataInit>
  ldr  r2, =_sbss
 8000bb2:	4a0b      	ldr	r2, [pc, #44]	; (8000be0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000bb4:	e002      	b.n	8000bbc <LoopFillZerobss>

08000bb6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000bb6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000bb8:	f842 3b04 	str.w	r3, [r2], #4

08000bbc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000bbc:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000bbe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000bc0:	d3f9      	bcc.n	8000bb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bc2:	f7ff ffd3 	bl	8000b6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bc6:	f009 fb37 	bl	800a238 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bca:	f7ff fc9d 	bl	8000508 <main>
  bx  lr    
 8000bce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bd0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000bd4:	0800a4fc 	.word	0x0800a4fc
  ldr  r0, =_sdata
 8000bd8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000bdc:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8000be0:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8000be4:	200054fc 	.word	0x200054fc

08000be8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000be8:	e7fe      	b.n	8000be8 <ADC_IRQHandler>
	...

08000bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bf0:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <HAL_Init+0x40>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a0d      	ldr	r2, [pc, #52]	; (8000c2c <HAL_Init+0x40>)
 8000bf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <HAL_Init+0x40>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a0a      	ldr	r2, [pc, #40]	; (8000c2c <HAL_Init+0x40>)
 8000c02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <HAL_Init+0x40>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <HAL_Init+0x40>)
 8000c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c14:	2003      	movs	r0, #3
 8000c16:	f000 f8fc 	bl	8000e12 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	f7ff feec 	bl	80009f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c20:	f7ff fe20 	bl	8000864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40023c00 	.word	0x40023c00

08000c30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_IncTick+0x20>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_IncTick+0x24>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4413      	add	r3, r2
 8000c40:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <HAL_IncTick+0x24>)
 8000c42:	6013      	str	r3, [r2, #0]
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	20000008 	.word	0x20000008
 8000c54:	20004bd0 	.word	0x20004bd0

08000c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c5c:	4b03      	ldr	r3, [pc, #12]	; (8000c6c <HAL_GetTick+0x14>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	20004bd0 	.word	0x20004bd0

08000c70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c78:	f7ff ffee 	bl	8000c58 <HAL_GetTick>
 8000c7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c88:	d005      	beq.n	8000c96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <HAL_Delay+0x44>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	461a      	mov	r2, r3
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	4413      	add	r3, r2
 8000c94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c96:	bf00      	nop
 8000c98:	f7ff ffde 	bl	8000c58 <HAL_GetTick>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d8f7      	bhi.n	8000c98 <HAL_Delay+0x28>
  {
  }
}
 8000ca8:	bf00      	nop
 8000caa:	bf00      	nop
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000008 	.word	0x20000008

08000cb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <__NVIC_SetPriorityGrouping+0x44>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cce:	68ba      	ldr	r2, [r7, #8]
 8000cd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cea:	4a04      	ldr	r2, [pc, #16]	; (8000cfc <__NVIC_SetPriorityGrouping+0x44>)
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	60d3      	str	r3, [r2, #12]
}
 8000cf0:	bf00      	nop
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d04:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <__NVIC_GetPriorityGrouping+0x18>)
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	0a1b      	lsrs	r3, r3, #8
 8000d0a:	f003 0307 	and.w	r3, r3, #7
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	db0b      	blt.n	8000d46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	f003 021f 	and.w	r2, r3, #31
 8000d34:	4907      	ldr	r1, [pc, #28]	; (8000d54 <__NVIC_EnableIRQ+0x38>)
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	095b      	lsrs	r3, r3, #5
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000e100 	.word	0xe000e100

08000d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	6039      	str	r1, [r7, #0]
 8000d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	db0a      	blt.n	8000d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	490c      	ldr	r1, [pc, #48]	; (8000da4 <__NVIC_SetPriority+0x4c>)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	0112      	lsls	r2, r2, #4
 8000d78:	b2d2      	uxtb	r2, r2
 8000d7a:	440b      	add	r3, r1
 8000d7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d80:	e00a      	b.n	8000d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	4908      	ldr	r1, [pc, #32]	; (8000da8 <__NVIC_SetPriority+0x50>)
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	f003 030f 	and.w	r3, r3, #15
 8000d8e:	3b04      	subs	r3, #4
 8000d90:	0112      	lsls	r2, r2, #4
 8000d92:	b2d2      	uxtb	r2, r2
 8000d94:	440b      	add	r3, r1
 8000d96:	761a      	strb	r2, [r3, #24]
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000e100 	.word	0xe000e100
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b089      	sub	sp, #36	; 0x24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	f1c3 0307 	rsb	r3, r3, #7
 8000dc6:	2b04      	cmp	r3, #4
 8000dc8:	bf28      	it	cs
 8000dca:	2304      	movcs	r3, #4
 8000dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	3304      	adds	r3, #4
 8000dd2:	2b06      	cmp	r3, #6
 8000dd4:	d902      	bls.n	8000ddc <NVIC_EncodePriority+0x30>
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3b03      	subs	r3, #3
 8000dda:	e000      	b.n	8000dde <NVIC_EncodePriority+0x32>
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	f04f 32ff 	mov.w	r2, #4294967295
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43da      	mvns	r2, r3
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	401a      	ands	r2, r3
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df4:	f04f 31ff 	mov.w	r1, #4294967295
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfe:	43d9      	mvns	r1, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e04:	4313      	orrs	r3, r2
         );
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3724      	adds	r7, #36	; 0x24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff ff4c 	bl	8000cb8 <__NVIC_SetPriorityGrouping>
}
 8000e20:	bf00      	nop
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
 8000e34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e3a:	f7ff ff61 	bl	8000d00 <__NVIC_GetPriorityGrouping>
 8000e3e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	68b9      	ldr	r1, [r7, #8]
 8000e44:	6978      	ldr	r0, [r7, #20]
 8000e46:	f7ff ffb1 	bl	8000dac <NVIC_EncodePriority>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e50:	4611      	mov	r1, r2
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff ff80 	bl	8000d58 <__NVIC_SetPriority>
}
 8000e58:	bf00      	nop
 8000e5a:	3718      	adds	r7, #24
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff ff54 	bl	8000d1c <__NVIC_EnableIRQ>
}
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b089      	sub	sp, #36	; 0x24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
 8000e96:	e165      	b.n	8001164 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e98:	2201      	movs	r2, #1
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	697a      	ldr	r2, [r7, #20]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	f040 8154 	bne.w	800115e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d00b      	beq.n	8000ed6 <HAL_GPIO_Init+0x5a>
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d007      	beq.n	8000ed6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eca:	2b11      	cmp	r3, #17
 8000ecc:	d003      	beq.n	8000ed6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	2b12      	cmp	r3, #18
 8000ed4:	d130      	bne.n	8000f38 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4013      	ands	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	68da      	ldr	r2, [r3, #12]
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	091b      	lsrs	r3, r3, #4
 8000f22:	f003 0201 	and.w	r2, r3, #1
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	2203      	movs	r2, #3
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	689a      	ldr	r2, [r3, #8]
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d003      	beq.n	8000f78 <HAL_GPIO_Init+0xfc>
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	2b12      	cmp	r3, #18
 8000f76:	d123      	bne.n	8000fc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	08da      	lsrs	r2, r3, #3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3208      	adds	r2, #8
 8000f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	f003 0307 	and.w	r3, r3, #7
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	220f      	movs	r2, #15
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	691a      	ldr	r2, [r3, #16]
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	08da      	lsrs	r2, r3, #3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	3208      	adds	r2, #8
 8000fba:	69b9      	ldr	r1, [r7, #24]
 8000fbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	2203      	movs	r2, #3
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 0203 	and.w	r2, r3, #3
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	f000 80ae 	beq.w	800115e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	4b5d      	ldr	r3, [pc, #372]	; (800117c <HAL_GPIO_Init+0x300>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	4a5c      	ldr	r2, [pc, #368]	; (800117c <HAL_GPIO_Init+0x300>)
 800100c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001010:	6453      	str	r3, [r2, #68]	; 0x44
 8001012:	4b5a      	ldr	r3, [pc, #360]	; (800117c <HAL_GPIO_Init+0x300>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800101e:	4a58      	ldr	r2, [pc, #352]	; (8001180 <HAL_GPIO_Init+0x304>)
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	089b      	lsrs	r3, r3, #2
 8001024:	3302      	adds	r3, #2
 8001026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	f003 0303 	and.w	r3, r3, #3
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	220f      	movs	r2, #15
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4013      	ands	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a4f      	ldr	r2, [pc, #316]	; (8001184 <HAL_GPIO_Init+0x308>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d025      	beq.n	8001096 <HAL_GPIO_Init+0x21a>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a4e      	ldr	r2, [pc, #312]	; (8001188 <HAL_GPIO_Init+0x30c>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d01f      	beq.n	8001092 <HAL_GPIO_Init+0x216>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a4d      	ldr	r2, [pc, #308]	; (800118c <HAL_GPIO_Init+0x310>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d019      	beq.n	800108e <HAL_GPIO_Init+0x212>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a4c      	ldr	r2, [pc, #304]	; (8001190 <HAL_GPIO_Init+0x314>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d013      	beq.n	800108a <HAL_GPIO_Init+0x20e>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a4b      	ldr	r2, [pc, #300]	; (8001194 <HAL_GPIO_Init+0x318>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d00d      	beq.n	8001086 <HAL_GPIO_Init+0x20a>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a4a      	ldr	r2, [pc, #296]	; (8001198 <HAL_GPIO_Init+0x31c>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d007      	beq.n	8001082 <HAL_GPIO_Init+0x206>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a49      	ldr	r2, [pc, #292]	; (800119c <HAL_GPIO_Init+0x320>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d101      	bne.n	800107e <HAL_GPIO_Init+0x202>
 800107a:	2306      	movs	r3, #6
 800107c:	e00c      	b.n	8001098 <HAL_GPIO_Init+0x21c>
 800107e:	2307      	movs	r3, #7
 8001080:	e00a      	b.n	8001098 <HAL_GPIO_Init+0x21c>
 8001082:	2305      	movs	r3, #5
 8001084:	e008      	b.n	8001098 <HAL_GPIO_Init+0x21c>
 8001086:	2304      	movs	r3, #4
 8001088:	e006      	b.n	8001098 <HAL_GPIO_Init+0x21c>
 800108a:	2303      	movs	r3, #3
 800108c:	e004      	b.n	8001098 <HAL_GPIO_Init+0x21c>
 800108e:	2302      	movs	r3, #2
 8001090:	e002      	b.n	8001098 <HAL_GPIO_Init+0x21c>
 8001092:	2301      	movs	r3, #1
 8001094:	e000      	b.n	8001098 <HAL_GPIO_Init+0x21c>
 8001096:	2300      	movs	r3, #0
 8001098:	69fa      	ldr	r2, [r7, #28]
 800109a:	f002 0203 	and.w	r2, r2, #3
 800109e:	0092      	lsls	r2, r2, #2
 80010a0:	4093      	lsls	r3, r2
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010a8:	4935      	ldr	r1, [pc, #212]	; (8001180 <HAL_GPIO_Init+0x304>)
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	089b      	lsrs	r3, r3, #2
 80010ae:	3302      	adds	r3, #2
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010b6:	4b3a      	ldr	r3, [pc, #232]	; (80011a0 <HAL_GPIO_Init+0x324>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	43db      	mvns	r3, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4013      	ands	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010da:	4a31      	ldr	r2, [pc, #196]	; (80011a0 <HAL_GPIO_Init+0x324>)
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010e0:	4b2f      	ldr	r3, [pc, #188]	; (80011a0 <HAL_GPIO_Init+0x324>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d003      	beq.n	8001104 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001104:	4a26      	ldr	r2, [pc, #152]	; (80011a0 <HAL_GPIO_Init+0x324>)
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800110a:	4b25      	ldr	r3, [pc, #148]	; (80011a0 <HAL_GPIO_Init+0x324>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800112e:	4a1c      	ldr	r2, [pc, #112]	; (80011a0 <HAL_GPIO_Init+0x324>)
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001134:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <HAL_GPIO_Init+0x324>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	4313      	orrs	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001158:	4a11      	ldr	r2, [pc, #68]	; (80011a0 <HAL_GPIO_Init+0x324>)
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3301      	adds	r3, #1
 8001162:	61fb      	str	r3, [r7, #28]
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	2b0f      	cmp	r3, #15
 8001168:	f67f ae96 	bls.w	8000e98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	3724      	adds	r7, #36	; 0x24
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	40023800 	.word	0x40023800
 8001180:	40013800 	.word	0x40013800
 8001184:	40020000 	.word	0x40020000
 8001188:	40020400 	.word	0x40020400
 800118c:	40020800 	.word	0x40020800
 8001190:	40020c00 	.word	0x40020c00
 8001194:	40021000 	.word	0x40021000
 8001198:	40021400 	.word	0x40021400
 800119c:	40021800 	.word	0x40021800
 80011a0:	40013c00 	.word	0x40013c00

080011a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	807b      	strh	r3, [r7, #2]
 80011b0:	4613      	mov	r3, r2
 80011b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011b4:	787b      	ldrb	r3, [r7, #1]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ba:	887a      	ldrh	r2, [r7, #2]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011c0:	e003      	b.n	80011ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011c2:	887b      	ldrh	r3, [r7, #2]
 80011c4:	041a      	lsls	r2, r3, #16
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	619a      	str	r2, [r3, #24]
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b083      	sub	sp, #12
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
 80011de:	460b      	mov	r3, r1
 80011e0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	695a      	ldr	r2, [r3, #20]
 80011e6:	887b      	ldrh	r3, [r7, #2]
 80011e8:	401a      	ands	r2, r3
 80011ea:	887b      	ldrh	r3, [r7, #2]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d104      	bne.n	80011fa <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80011f0:	887b      	ldrh	r3, [r7, #2]
 80011f2:	041a      	lsls	r2, r3, #16
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80011f8:	e002      	b.n	8001200 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80011fa:	887a      	ldrh	r2, [r7, #2]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	619a      	str	r2, [r3, #24]
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800120c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800120e:	b08f      	sub	sp, #60	; 0x3c
 8001210:	af0a      	add	r7, sp, #40	; 0x28
 8001212:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d101      	bne.n	800121e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e116      	b.n	800144c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800122a:	b2db      	uxtb	r3, r3
 800122c:	2b00      	cmp	r3, #0
 800122e:	d106      	bne.n	800123e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f008 fcbf 	bl	8009bbc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2203      	movs	r2, #3
 8001242:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800124a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800124e:	2b00      	cmp	r3, #0
 8001250:	d102      	bne.n	8001258 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f003 f94c 	bl	80044fa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	603b      	str	r3, [r7, #0]
 8001268:	687e      	ldr	r6, [r7, #4]
 800126a:	466d      	mov	r5, sp
 800126c:	f106 0410 	add.w	r4, r6, #16
 8001270:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001272:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001274:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001276:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001278:	e894 0003 	ldmia.w	r4, {r0, r1}
 800127c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001280:	1d33      	adds	r3, r6, #4
 8001282:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001284:	6838      	ldr	r0, [r7, #0]
 8001286:	f003 f823 	bl	80042d0 <USB_CoreInit>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d005      	beq.n	800129c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2202      	movs	r2, #2
 8001294:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e0d7      	b.n	800144c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2100      	movs	r1, #0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f003 f93a 	bl	800451c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012a8:	2300      	movs	r3, #0
 80012aa:	73fb      	strb	r3, [r7, #15]
 80012ac:	e04a      	b.n	8001344 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80012ae:	7bfa      	ldrb	r2, [r7, #15]
 80012b0:	6879      	ldr	r1, [r7, #4]
 80012b2:	4613      	mov	r3, r2
 80012b4:	00db      	lsls	r3, r3, #3
 80012b6:	1a9b      	subs	r3, r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	440b      	add	r3, r1
 80012bc:	333d      	adds	r3, #61	; 0x3d
 80012be:	2201      	movs	r2, #1
 80012c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80012c2:	7bfa      	ldrb	r2, [r7, #15]
 80012c4:	6879      	ldr	r1, [r7, #4]
 80012c6:	4613      	mov	r3, r2
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	1a9b      	subs	r3, r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	440b      	add	r3, r1
 80012d0:	333c      	adds	r3, #60	; 0x3c
 80012d2:	7bfa      	ldrb	r2, [r7, #15]
 80012d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80012d6:	7bfa      	ldrb	r2, [r7, #15]
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	b298      	uxth	r0, r3
 80012dc:	6879      	ldr	r1, [r7, #4]
 80012de:	4613      	mov	r3, r2
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	1a9b      	subs	r3, r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	440b      	add	r3, r1
 80012e8:	3342      	adds	r3, #66	; 0x42
 80012ea:	4602      	mov	r2, r0
 80012ec:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80012ee:	7bfa      	ldrb	r2, [r7, #15]
 80012f0:	6879      	ldr	r1, [r7, #4]
 80012f2:	4613      	mov	r3, r2
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	1a9b      	subs	r3, r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	440b      	add	r3, r1
 80012fc:	333f      	adds	r3, #63	; 0x3f
 80012fe:	2200      	movs	r2, #0
 8001300:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001302:	7bfa      	ldrb	r2, [r7, #15]
 8001304:	6879      	ldr	r1, [r7, #4]
 8001306:	4613      	mov	r3, r2
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	1a9b      	subs	r3, r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	440b      	add	r3, r1
 8001310:	3344      	adds	r3, #68	; 0x44
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001316:	7bfa      	ldrb	r2, [r7, #15]
 8001318:	6879      	ldr	r1, [r7, #4]
 800131a:	4613      	mov	r3, r2
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	1a9b      	subs	r3, r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	440b      	add	r3, r1
 8001324:	3348      	adds	r3, #72	; 0x48
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800132a:	7bfa      	ldrb	r2, [r7, #15]
 800132c:	6879      	ldr	r1, [r7, #4]
 800132e:	4613      	mov	r3, r2
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	1a9b      	subs	r3, r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	440b      	add	r3, r1
 8001338:	3350      	adds	r3, #80	; 0x50
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800133e:	7bfb      	ldrb	r3, [r7, #15]
 8001340:	3301      	adds	r3, #1
 8001342:	73fb      	strb	r3, [r7, #15]
 8001344:	7bfa      	ldrb	r2, [r7, #15]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	429a      	cmp	r2, r3
 800134c:	d3af      	bcc.n	80012ae <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800134e:	2300      	movs	r3, #0
 8001350:	73fb      	strb	r3, [r7, #15]
 8001352:	e044      	b.n	80013de <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001354:	7bfa      	ldrb	r2, [r7, #15]
 8001356:	6879      	ldr	r1, [r7, #4]
 8001358:	4613      	mov	r3, r2
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	1a9b      	subs	r3, r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	440b      	add	r3, r1
 8001362:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001366:	2200      	movs	r2, #0
 8001368:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800136a:	7bfa      	ldrb	r2, [r7, #15]
 800136c:	6879      	ldr	r1, [r7, #4]
 800136e:	4613      	mov	r3, r2
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	1a9b      	subs	r3, r3, r2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	440b      	add	r3, r1
 8001378:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800137c:	7bfa      	ldrb	r2, [r7, #15]
 800137e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001380:	7bfa      	ldrb	r2, [r7, #15]
 8001382:	6879      	ldr	r1, [r7, #4]
 8001384:	4613      	mov	r3, r2
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	1a9b      	subs	r3, r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	440b      	add	r3, r1
 800138e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001392:	2200      	movs	r2, #0
 8001394:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001396:	7bfa      	ldrb	r2, [r7, #15]
 8001398:	6879      	ldr	r1, [r7, #4]
 800139a:	4613      	mov	r3, r2
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	1a9b      	subs	r3, r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	440b      	add	r3, r1
 80013a4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80013ac:	7bfa      	ldrb	r2, [r7, #15]
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	4613      	mov	r3, r2
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	1a9b      	subs	r3, r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	440b      	add	r3, r1
 80013ba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013c2:	7bfa      	ldrb	r2, [r7, #15]
 80013c4:	6879      	ldr	r1, [r7, #4]
 80013c6:	4613      	mov	r3, r2
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	1a9b      	subs	r3, r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	440b      	add	r3, r1
 80013d0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
 80013da:	3301      	adds	r3, #1
 80013dc:	73fb      	strb	r3, [r7, #15]
 80013de:	7bfa      	ldrb	r2, [r7, #15]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d3b5      	bcc.n	8001354 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	603b      	str	r3, [r7, #0]
 80013ee:	687e      	ldr	r6, [r7, #4]
 80013f0:	466d      	mov	r5, sp
 80013f2:	f106 0410 	add.w	r4, r6, #16
 80013f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001402:	e885 0003 	stmia.w	r5, {r0, r1}
 8001406:	1d33      	adds	r3, r6, #4
 8001408:	cb0e      	ldmia	r3, {r1, r2, r3}
 800140a:	6838      	ldr	r0, [r7, #0]
 800140c:	f003 f8b0 	bl	8004570 <USB_DevInit>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d005      	beq.n	8001422 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2202      	movs	r2, #2
 800141a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e014      	b.n	800144c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2201      	movs	r2, #1
 800142e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001436:	2b01      	cmp	r3, #1
 8001438:	d102      	bne.n	8001440 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f001 f87a 	bl	8002534 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f004 f8eb 	bl	8005620 <USB_DevDisconnect>

  return HAL_OK;
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001454 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001468:	2b01      	cmp	r3, #1
 800146a:	d101      	bne.n	8001470 <HAL_PCD_Start+0x1c>
 800146c:	2302      	movs	r3, #2
 800146e:	e020      	b.n	80014b2 <HAL_PCD_Start+0x5e>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2201      	movs	r2, #1
 8001474:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147c:	2b01      	cmp	r3, #1
 800147e:	d109      	bne.n	8001494 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001484:	2b01      	cmp	r3, #1
 8001486:	d005      	beq.n	8001494 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800148c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4618      	mov	r0, r3
 800149a:	f003 f81d 	bl	80044d8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f004 f89b 	bl	80055de <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80014ba:	b590      	push	{r4, r7, lr}
 80014bc:	b08d      	sub	sp, #52	; 0x34
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80014c8:	6a3b      	ldr	r3, [r7, #32]
 80014ca:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f004 f959 	bl	8005788 <USB_GetMode>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f040 83ca 	bne.w	8001c72 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f004 f8bd 	bl	8005662 <USB_ReadInterrupts>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f000 83c0 	beq.w	8001c70 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f004 f8b4 	bl	8005662 <USB_ReadInterrupts>
 80014fa:	4603      	mov	r3, r0
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	2b02      	cmp	r3, #2
 8001502:	d107      	bne.n	8001514 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	695a      	ldr	r2, [r3, #20]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f002 0202 	and.w	r2, r2, #2
 8001512:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	f004 f8a2 	bl	8005662 <USB_ReadInterrupts>
 800151e:	4603      	mov	r3, r0
 8001520:	f003 0310 	and.w	r3, r3, #16
 8001524:	2b10      	cmp	r3, #16
 8001526:	d161      	bne.n	80015ec <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	699a      	ldr	r2, [r3, #24]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 0210 	bic.w	r2, r2, #16
 8001536:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001538:	6a3b      	ldr	r3, [r7, #32]
 800153a:	6a1b      	ldr	r3, [r3, #32]
 800153c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	f003 020f 	and.w	r2, r3, #15
 8001544:	4613      	mov	r3, r2
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	1a9b      	subs	r3, r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	4413      	add	r3, r2
 8001554:	3304      	adds	r3, #4
 8001556:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	0c5b      	lsrs	r3, r3, #17
 800155c:	f003 030f 	and.w	r3, r3, #15
 8001560:	2b02      	cmp	r3, #2
 8001562:	d124      	bne.n	80015ae <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800156a:	4013      	ands	r3, r2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d035      	beq.n	80015dc <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	091b      	lsrs	r3, r3, #4
 8001578:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800157a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800157e:	b29b      	uxth	r3, r3
 8001580:	461a      	mov	r2, r3
 8001582:	6a38      	ldr	r0, [r7, #32]
 8001584:	f003 ff08 	bl	8005398 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	68da      	ldr	r2, [r3, #12]
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	091b      	lsrs	r3, r3, #4
 8001590:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001594:	441a      	add	r2, r3
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	699a      	ldr	r2, [r3, #24]
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	091b      	lsrs	r3, r3, #4
 80015a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015a6:	441a      	add	r2, r3
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	619a      	str	r2, [r3, #24]
 80015ac:	e016      	b.n	80015dc <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	0c5b      	lsrs	r3, r3, #17
 80015b2:	f003 030f 	and.w	r3, r3, #15
 80015b6:	2b06      	cmp	r3, #6
 80015b8:	d110      	bne.n	80015dc <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80015c0:	2208      	movs	r2, #8
 80015c2:	4619      	mov	r1, r3
 80015c4:	6a38      	ldr	r0, [r7, #32]
 80015c6:	f003 fee7 	bl	8005398 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	699a      	ldr	r2, [r3, #24]
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	091b      	lsrs	r3, r3, #4
 80015d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015d6:	441a      	add	r2, r3
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	699a      	ldr	r2, [r3, #24]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f042 0210 	orr.w	r2, r2, #16
 80015ea:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f004 f836 	bl	8005662 <USB_ReadInterrupts>
 80015f6:	4603      	mov	r3, r0
 80015f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001600:	d16e      	bne.n	80016e0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001602:	2300      	movs	r3, #0
 8001604:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f004 f83c 	bl	8005688 <USB_ReadDevAllOutEpInterrupt>
 8001610:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001612:	e062      	b.n	80016da <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b00      	cmp	r3, #0
 800161c:	d057      	beq.n	80016ce <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001624:	b2d2      	uxtb	r2, r2
 8001626:	4611      	mov	r1, r2
 8001628:	4618      	mov	r0, r3
 800162a:	f004 f861 	bl	80056f0 <USB_ReadDevOutEPInterrupt>
 800162e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00c      	beq.n	8001654 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163c:	015a      	lsls	r2, r3, #5
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	4413      	add	r3, r2
 8001642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001646:	461a      	mov	r2, r3
 8001648:	2301      	movs	r3, #1
 800164a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800164c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 fdc6 	bl	80021e0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	f003 0308 	and.w	r3, r3, #8
 800165a:	2b00      	cmp	r3, #0
 800165c:	d00c      	beq.n	8001678 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	015a      	lsls	r2, r3, #5
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	4413      	add	r3, r2
 8001666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800166a:	461a      	mov	r2, r3
 800166c:	2308      	movs	r3, #8
 800166e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001670:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 fec0 	bl	80023f8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	f003 0310 	and.w	r3, r3, #16
 800167e:	2b00      	cmp	r3, #0
 8001680:	d008      	beq.n	8001694 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	015a      	lsls	r2, r3, #5
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	4413      	add	r3, r2
 800168a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800168e:	461a      	mov	r2, r3
 8001690:	2310      	movs	r3, #16
 8001692:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	f003 0320 	and.w	r3, r3, #32
 800169a:	2b00      	cmp	r3, #0
 800169c:	d008      	beq.n	80016b0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a0:	015a      	lsls	r2, r3, #5
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	4413      	add	r3, r2
 80016a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016aa:	461a      	mov	r2, r3
 80016ac:	2320      	movs	r3, #32
 80016ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d009      	beq.n	80016ce <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	015a      	lsls	r2, r3, #5
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	4413      	add	r3, r2
 80016c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016c6:	461a      	mov	r2, r3
 80016c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016cc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	3301      	adds	r3, #1
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80016d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d6:	085b      	lsrs	r3, r3, #1
 80016d8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80016da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d199      	bne.n	8001614 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f003 ffbc 	bl	8005662 <USB_ReadInterrupts>
 80016ea:	4603      	mov	r3, r0
 80016ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80016f4:	f040 80c0 	bne.w	8001878 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f003 ffdd 	bl	80056bc <USB_ReadDevAllInEpInterrupt>
 8001702:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001704:	2300      	movs	r3, #0
 8001706:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001708:	e0b2      	b.n	8001870 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800170a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	2b00      	cmp	r3, #0
 8001712:	f000 80a7 	beq.w	8001864 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800171c:	b2d2      	uxtb	r2, r2
 800171e:	4611      	mov	r1, r2
 8001720:	4618      	mov	r0, r3
 8001722:	f004 f803 	bl	800572c <USB_ReadDevInEPInterrupt>
 8001726:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b00      	cmp	r3, #0
 8001730:	d057      	beq.n	80017e2 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001734:	f003 030f 	and.w	r3, r3, #15
 8001738:	2201      	movs	r2, #1
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001746:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	43db      	mvns	r3, r3
 800174c:	69f9      	ldr	r1, [r7, #28]
 800174e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001752:	4013      	ands	r3, r2
 8001754:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	015a      	lsls	r2, r3, #5
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	4413      	add	r3, r2
 800175e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001762:	461a      	mov	r2, r3
 8001764:	2301      	movs	r3, #1
 8001766:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d132      	bne.n	80017d6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001774:	4613      	mov	r3, r2
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	1a9b      	subs	r3, r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	440b      	add	r3, r1
 800177e:	3348      	adds	r3, #72	; 0x48
 8001780:	6819      	ldr	r1, [r3, #0]
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001786:	4613      	mov	r3, r2
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	1a9b      	subs	r3, r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4403      	add	r3, r0
 8001790:	3344      	adds	r3, #68	; 0x44
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4419      	add	r1, r3
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800179a:	4613      	mov	r3, r2
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	1a9b      	subs	r3, r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4403      	add	r3, r0
 80017a4:	3348      	adds	r3, #72	; 0x48
 80017a6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d113      	bne.n	80017d6 <HAL_PCD_IRQHandler+0x31c>
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017b2:	4613      	mov	r3, r2
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	1a9b      	subs	r3, r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	440b      	add	r3, r1
 80017bc:	3350      	adds	r3, #80	; 0x50
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d108      	bne.n	80017d6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6818      	ldr	r0, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80017ce:	461a      	mov	r2, r3
 80017d0:	2101      	movs	r1, #1
 80017d2:	f004 f80b 	bl	80057ec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	4619      	mov	r1, r3
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f008 fa6e 	bl	8009cbe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	f003 0308 	and.w	r3, r3, #8
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d008      	beq.n	80017fe <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80017ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ee:	015a      	lsls	r2, r3, #5
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	4413      	add	r3, r2
 80017f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017f8:	461a      	mov	r2, r3
 80017fa:	2308      	movs	r3, #8
 80017fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	f003 0310 	and.w	r3, r3, #16
 8001804:	2b00      	cmp	r3, #0
 8001806:	d008      	beq.n	800181a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180a:	015a      	lsls	r2, r3, #5
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	4413      	add	r3, r2
 8001810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001814:	461a      	mov	r2, r3
 8001816:	2310      	movs	r3, #16
 8001818:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001820:	2b00      	cmp	r3, #0
 8001822:	d008      	beq.n	8001836 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001826:	015a      	lsls	r2, r3, #5
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	4413      	add	r3, r2
 800182c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001830:	461a      	mov	r2, r3
 8001832:	2340      	movs	r3, #64	; 0x40
 8001834:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d008      	beq.n	8001852 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001842:	015a      	lsls	r2, r3, #5
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	4413      	add	r3, r2
 8001848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800184c:	461a      	mov	r2, r3
 800184e:	2302      	movs	r3, #2
 8001850:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800185c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 fc30 	bl	80020c4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001866:	3301      	adds	r3, #1
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800186a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800186c:	085b      	lsrs	r3, r3, #1
 800186e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001872:	2b00      	cmp	r3, #0
 8001874:	f47f af49 	bne.w	800170a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f003 fef0 	bl	8005662 <USB_ReadInterrupts>
 8001882:	4603      	mov	r3, r0
 8001884:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001888:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800188c:	d122      	bne.n	80018d4 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	69fa      	ldr	r2, [r7, #28]
 8001898:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800189c:	f023 0301 	bic.w	r3, r3, #1
 80018a0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d108      	bne.n	80018be <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80018b4:	2100      	movs	r1, #0
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f008 fc3e 	bl	800a138 <HAL_PCDEx_LPM_Callback>
 80018bc:	e002      	b.n	80018c4 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f008 fa74 	bl	8009dac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	695a      	ldr	r2, [r3, #20]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80018d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f003 fec2 	bl	8005662 <USB_ReadInterrupts>
 80018de:	4603      	mov	r3, r0
 80018e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018e8:	d112      	bne.n	8001910 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d102      	bne.n	8001900 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f008 fa30 	bl	8009d60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	695a      	ldr	r2, [r3, #20]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800190e:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f003 fea4 	bl	8005662 <USB_ReadInterrupts>
 800191a:	4603      	mov	r3, r0
 800191c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001920:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001924:	d121      	bne.n	800196a <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	695a      	ldr	r2, [r3, #20]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001934:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800193c:	2b00      	cmp	r3, #0
 800193e:	d111      	bne.n	8001964 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800194e:	089b      	lsrs	r3, r3, #2
 8001950:	f003 020f 	and.w	r2, r3, #15
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800195a:	2101      	movs	r1, #1
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f008 fbeb 	bl	800a138 <HAL_PCDEx_LPM_Callback>
 8001962:	e002      	b.n	800196a <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f008 f9fb 	bl	8009d60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f003 fe77 	bl	8005662 <USB_ReadInterrupts>
 8001974:	4603      	mov	r3, r0
 8001976:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800197a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800197e:	f040 80c7 	bne.w	8001b10 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	69fa      	ldr	r2, [r7, #28]
 800198c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001990:	f023 0301 	bic.w	r3, r3, #1
 8001994:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2110      	movs	r1, #16
 800199c:	4618      	mov	r0, r3
 800199e:	f002 ff45 	bl	800482c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019a2:	2300      	movs	r3, #0
 80019a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019a6:	e056      	b.n	8001a56 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80019a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019aa:	015a      	lsls	r2, r3, #5
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	4413      	add	r3, r2
 80019b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019b4:	461a      	mov	r2, r3
 80019b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80019ba:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80019bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019be:	015a      	lsls	r2, r3, #5
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	4413      	add	r3, r2
 80019c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019cc:	0151      	lsls	r1, r2, #5
 80019ce:	69fa      	ldr	r2, [r7, #28]
 80019d0:	440a      	add	r2, r1
 80019d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80019d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80019da:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80019dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019de:	015a      	lsls	r2, r3, #5
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	4413      	add	r3, r2
 80019e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019ec:	0151      	lsls	r1, r2, #5
 80019ee:	69fa      	ldr	r2, [r7, #28]
 80019f0:	440a      	add	r2, r1
 80019f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80019f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80019fa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80019fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019fe:	015a      	lsls	r2, r3, #5
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	4413      	add	r3, r2
 8001a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a08:	461a      	mov	r2, r3
 8001a0a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001a0e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a12:	015a      	lsls	r2, r3, #5
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	4413      	add	r3, r2
 8001a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a20:	0151      	lsls	r1, r2, #5
 8001a22:	69fa      	ldr	r2, [r7, #28]
 8001a24:	440a      	add	r2, r1
 8001a26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001a2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a2e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a32:	015a      	lsls	r2, r3, #5
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	4413      	add	r3, r2
 8001a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a40:	0151      	lsls	r1, r2, #5
 8001a42:	69fa      	ldr	r2, [r7, #28]
 8001a44:	440a      	add	r2, r1
 8001a46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001a4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a4e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a52:	3301      	adds	r3, #1
 8001a54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d3a3      	bcc.n	80019a8 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a66:	69db      	ldr	r3, [r3, #28]
 8001a68:	69fa      	ldr	r2, [r7, #28]
 8001a6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a6e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001a72:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d016      	beq.n	8001aaa <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a86:	69fa      	ldr	r2, [r7, #28]
 8001a88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a8c:	f043 030b 	orr.w	r3, r3, #11
 8001a90:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9c:	69fa      	ldr	r2, [r7, #28]
 8001a9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001aa2:	f043 030b 	orr.w	r3, r3, #11
 8001aa6:	6453      	str	r3, [r2, #68]	; 0x44
 8001aa8:	e015      	b.n	8001ad6 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	69fa      	ldr	r2, [r7, #28]
 8001ab4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ab8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001abc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001ac0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	69fa      	ldr	r2, [r7, #28]
 8001acc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ad0:	f043 030b 	orr.w	r3, r3, #11
 8001ad4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	69fa      	ldr	r2, [r7, #28]
 8001ae0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ae4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001ae8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6818      	ldr	r0, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001afa:	461a      	mov	r2, r3
 8001afc:	f003 fe76 	bl	80057ec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	695a      	ldr	r2, [r3, #20]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001b0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f003 fda4 	bl	8005662 <USB_ReadInterrupts>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b24:	d124      	bne.n	8001b70 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f003 fe3a 	bl	80057a4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f002 feda 	bl	80048ee <USB_GetDevSpeed>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681c      	ldr	r4, [r3, #0]
 8001b46:	f000 fdff 	bl	8002748 <HAL_RCC_GetHCLKFreq>
 8001b4a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	461a      	mov	r2, r3
 8001b54:	4620      	mov	r0, r4
 8001b56:	f002 fc1d 	bl	8004394 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f008 f8d7 	bl	8009d0e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	695a      	ldr	r2, [r3, #20]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001b6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f003 fd74 	bl	8005662 <USB_ReadInterrupts>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	f003 0308 	and.w	r3, r3, #8
 8001b80:	2b08      	cmp	r3, #8
 8001b82:	d10a      	bne.n	8001b9a <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f008 f8b4 	bl	8009cf2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	695a      	ldr	r2, [r3, #20]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f002 0208 	and.w	r2, r2, #8
 8001b98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f003 fd5f 	bl	8005662 <USB_ReadInterrupts>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001baa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001bae:	d10f      	bne.n	8001bd0 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	4619      	mov	r1, r3
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f008 f916 	bl	8009dec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	695a      	ldr	r2, [r3, #20]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001bce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f003 fd44 	bl	8005662 <USB_ReadInterrupts>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001be0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001be4:	d10f      	bne.n	8001c06 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	4619      	mov	r1, r3
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f008 f8e9 	bl	8009dc8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	695a      	ldr	r2, [r3, #20]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001c04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f003 fd29 	bl	8005662 <USB_ReadInterrupts>
 8001c10:	4603      	mov	r3, r0
 8001c12:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c1a:	d10a      	bne.n	8001c32 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f008 f8f7 	bl	8009e10 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	695a      	ldr	r2, [r3, #20]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001c30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f003 fd13 	bl	8005662 <USB_ReadInterrupts>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	f003 0304 	and.w	r3, r3, #4
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	d115      	bne.n	8001c72 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d002      	beq.n	8001c5e <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f008 f8e7 	bl	8009e2c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6859      	ldr	r1, [r3, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	e000      	b.n	8001c72 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8001c70:	bf00      	nop
    }
  }
}
 8001c72:	3734      	adds	r7, #52	; 0x34
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd90      	pop	{r4, r7, pc}

08001c78 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	460b      	mov	r3, r1
 8001c82:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d101      	bne.n	8001c92 <HAL_PCD_SetAddress+0x1a>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e013      	b.n	8001cba <HAL_PCD_SetAddress+0x42>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	78fa      	ldrb	r2, [r7, #3]
 8001c9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	78fa      	ldrb	r2, [r7, #3]
 8001ca8:	4611      	mov	r1, r2
 8001caa:	4618      	mov	r0, r3
 8001cac:	f003 fc71 	bl	8005592 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b084      	sub	sp, #16
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
 8001cca:	4608      	mov	r0, r1
 8001ccc:	4611      	mov	r1, r2
 8001cce:	461a      	mov	r2, r3
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	70fb      	strb	r3, [r7, #3]
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	803b      	strh	r3, [r7, #0]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ce0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	da0f      	bge.n	8001d08 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ce8:	78fb      	ldrb	r3, [r7, #3]
 8001cea:	f003 020f 	and.w	r2, r3, #15
 8001cee:	4613      	mov	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	1a9b      	subs	r3, r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	3338      	adds	r3, #56	; 0x38
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2201      	movs	r2, #1
 8001d04:	705a      	strb	r2, [r3, #1]
 8001d06:	e00f      	b.n	8001d28 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d08:	78fb      	ldrb	r3, [r7, #3]
 8001d0a:	f003 020f 	and.w	r2, r3, #15
 8001d0e:	4613      	mov	r3, r2
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	1a9b      	subs	r3, r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	3304      	adds	r3, #4
 8001d20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2200      	movs	r2, #0
 8001d26:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d28:	78fb      	ldrb	r3, [r7, #3]
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d34:	883a      	ldrh	r2, [r7, #0]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	78ba      	ldrb	r2, [r7, #2]
 8001d3e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	785b      	ldrb	r3, [r3, #1]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d004      	beq.n	8001d52 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d52:	78bb      	ldrb	r3, [r7, #2]
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d102      	bne.n	8001d5e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d101      	bne.n	8001d6c <HAL_PCD_EP_Open+0xaa>
 8001d68:	2302      	movs	r3, #2
 8001d6a:	e00e      	b.n	8001d8a <HAL_PCD_EP_Open+0xc8>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68f9      	ldr	r1, [r7, #12]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f002 fddc 	bl	8004938 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001d88:	7afb      	ldrb	r3, [r7, #11]
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b084      	sub	sp, #16
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	da0f      	bge.n	8001dc6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001da6:	78fb      	ldrb	r3, [r7, #3]
 8001da8:	f003 020f 	and.w	r2, r3, #15
 8001dac:	4613      	mov	r3, r2
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	1a9b      	subs	r3, r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	3338      	adds	r3, #56	; 0x38
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	4413      	add	r3, r2
 8001dba:	3304      	adds	r3, #4
 8001dbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	705a      	strb	r2, [r3, #1]
 8001dc4:	e00f      	b.n	8001de6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dc6:	78fb      	ldrb	r3, [r7, #3]
 8001dc8:	f003 020f 	and.w	r2, r3, #15
 8001dcc:	4613      	mov	r3, r2
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	1a9b      	subs	r3, r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	4413      	add	r3, r2
 8001ddc:	3304      	adds	r3, #4
 8001dde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2200      	movs	r2, #0
 8001de4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001de6:	78fb      	ldrb	r3, [r7, #3]
 8001de8:	f003 030f 	and.w	r3, r3, #15
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d101      	bne.n	8001e00 <HAL_PCD_EP_Close+0x6e>
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	e00e      	b.n	8001e1e <HAL_PCD_EP_Close+0x8c>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68f9      	ldr	r1, [r7, #12]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f002 fe1a 	bl	8004a48 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b086      	sub	sp, #24
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	60f8      	str	r0, [r7, #12]
 8001e2e:	607a      	str	r2, [r7, #4]
 8001e30:	603b      	str	r3, [r7, #0]
 8001e32:	460b      	mov	r3, r1
 8001e34:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e36:	7afb      	ldrb	r3, [r7, #11]
 8001e38:	f003 020f 	and.w	r2, r3, #15
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	1a9b      	subs	r3, r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	2200      	movs	r2, #0
 8001e66:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e68:	7afb      	ldrb	r3, [r7, #11]
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	b2da      	uxtb	r2, r3
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d102      	bne.n	8001e82 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e82:	7afb      	ldrb	r3, [r7, #11]
 8001e84:	f003 030f 	and.w	r3, r3, #15
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d109      	bne.n	8001ea0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6818      	ldr	r0, [r3, #0]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	461a      	mov	r2, r3
 8001e98:	6979      	ldr	r1, [r7, #20]
 8001e9a:	f003 f8f5 	bl	8005088 <USB_EP0StartXfer>
 8001e9e:	e008      	b.n	8001eb2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6818      	ldr	r0, [r3, #0]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	461a      	mov	r2, r3
 8001eac:	6979      	ldr	r1, [r7, #20]
 8001eae:	f002 fea7 	bl	8004c00 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3718      	adds	r7, #24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	607a      	str	r2, [r7, #4]
 8001ec6:	603b      	str	r3, [r7, #0]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ecc:	7afb      	ldrb	r3, [r7, #11]
 8001ece:	f003 020f 	and.w	r2, r3, #15
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	1a9b      	subs	r3, r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	3338      	adds	r3, #56	; 0x38
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	4413      	add	r3, r2
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001efc:	7afb      	ldrb	r3, [r7, #11]
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d102      	bne.n	8001f16 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f16:	7afb      	ldrb	r3, [r7, #11]
 8001f18:	f003 030f 	and.w	r3, r3, #15
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d109      	bne.n	8001f34 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6818      	ldr	r0, [r3, #0]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	6979      	ldr	r1, [r7, #20]
 8001f2e:	f003 f8ab 	bl	8005088 <USB_EP0StartXfer>
 8001f32:	e008      	b.n	8001f46 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6818      	ldr	r0, [r3, #0]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	461a      	mov	r2, r3
 8001f40:	6979      	ldr	r1, [r7, #20]
 8001f42:	f002 fe5d 	bl	8004c00 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3718      	adds	r7, #24
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f5c:	78fb      	ldrb	r3, [r7, #3]
 8001f5e:	f003 020f 	and.w	r2, r3, #15
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d901      	bls.n	8001f6e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e050      	b.n	8002010 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	da0f      	bge.n	8001f96 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f76:	78fb      	ldrb	r3, [r7, #3]
 8001f78:	f003 020f 	and.w	r2, r3, #15
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	1a9b      	subs	r3, r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	3338      	adds	r3, #56	; 0x38
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	4413      	add	r3, r2
 8001f8a:	3304      	adds	r3, #4
 8001f8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2201      	movs	r2, #1
 8001f92:	705a      	strb	r2, [r3, #1]
 8001f94:	e00d      	b.n	8001fb2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f96:	78fa      	ldrb	r2, [r7, #3]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	1a9b      	subs	r3, r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	3304      	adds	r3, #4
 8001faa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fb8:	78fb      	ldrb	r3, [r7, #3]
 8001fba:	f003 030f 	and.w	r3, r3, #15
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d101      	bne.n	8001fd2 <HAL_PCD_EP_SetStall+0x82>
 8001fce:	2302      	movs	r3, #2
 8001fd0:	e01e      	b.n	8002010 <HAL_PCD_EP_SetStall+0xc0>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68f9      	ldr	r1, [r7, #12]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f003 fa02 	bl	80053ea <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fe6:	78fb      	ldrb	r3, [r7, #3]
 8001fe8:	f003 030f 	and.w	r3, r3, #15
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d10a      	bne.n	8002006 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6818      	ldr	r0, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	b2d9      	uxtb	r1, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002000:	461a      	mov	r2, r3
 8002002:	f003 fbf3 	bl	80057ec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3710      	adds	r7, #16
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	460b      	mov	r3, r1
 8002022:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002024:	78fb      	ldrb	r3, [r7, #3]
 8002026:	f003 020f 	and.w	r2, r3, #15
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	429a      	cmp	r2, r3
 8002030:	d901      	bls.n	8002036 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e042      	b.n	80020bc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002036:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800203a:	2b00      	cmp	r3, #0
 800203c:	da0f      	bge.n	800205e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800203e:	78fb      	ldrb	r3, [r7, #3]
 8002040:	f003 020f 	and.w	r2, r3, #15
 8002044:	4613      	mov	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	1a9b      	subs	r3, r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	3338      	adds	r3, #56	; 0x38
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	4413      	add	r3, r2
 8002052:	3304      	adds	r3, #4
 8002054:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2201      	movs	r2, #1
 800205a:	705a      	strb	r2, [r3, #1]
 800205c:	e00f      	b.n	800207e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800205e:	78fb      	ldrb	r3, [r7, #3]
 8002060:	f003 020f 	and.w	r2, r3, #15
 8002064:	4613      	mov	r3, r2
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	1a9b      	subs	r3, r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	4413      	add	r3, r2
 8002074:	3304      	adds	r3, #4
 8002076:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2200      	movs	r2, #0
 800207c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002084:	78fb      	ldrb	r3, [r7, #3]
 8002086:	f003 030f 	and.w	r3, r3, #15
 800208a:	b2da      	uxtb	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002096:	2b01      	cmp	r3, #1
 8002098:	d101      	bne.n	800209e <HAL_PCD_EP_ClrStall+0x86>
 800209a:	2302      	movs	r3, #2
 800209c:	e00e      	b.n	80020bc <HAL_PCD_EP_ClrStall+0xa4>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68f9      	ldr	r1, [r7, #12]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f003 fa0a 	bl	80054c6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3710      	adds	r7, #16
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08a      	sub	sp, #40	; 0x28
 80020c8:	af02      	add	r7, sp, #8
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	4613      	mov	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	1a9b      	subs	r3, r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	3338      	adds	r3, #56	; 0x38
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	4413      	add	r3, r2
 80020e8:	3304      	adds	r3, #4
 80020ea:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	699a      	ldr	r2, [r3, #24]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d901      	bls.n	80020fc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e06c      	b.n	80021d6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	695a      	ldr	r2, [r3, #20]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	69fa      	ldr	r2, [r7, #28]
 800210e:	429a      	cmp	r2, r3
 8002110:	d902      	bls.n	8002118 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	3303      	adds	r3, #3
 800211c:	089b      	lsrs	r3, r3, #2
 800211e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002120:	e02b      	b.n	800217a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	695a      	ldr	r2, [r3, #20]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	69fa      	ldr	r2, [r7, #28]
 8002134:	429a      	cmp	r2, r3
 8002136:	d902      	bls.n	800213e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	3303      	adds	r3, #3
 8002142:	089b      	lsrs	r3, r3, #2
 8002144:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	68d9      	ldr	r1, [r3, #12]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	b2da      	uxtb	r2, r3
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002156:	b2db      	uxtb	r3, r3
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	4603      	mov	r3, r0
 800215c:	6978      	ldr	r0, [r7, #20]
 800215e:	f003 f8e6 	bl	800532e <USB_WritePacket>

    ep->xfer_buff  += len;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	68da      	ldr	r2, [r3, #12]
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	441a      	add	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	699a      	ldr	r2, [r3, #24]
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	441a      	add	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	015a      	lsls	r2, r3, #5
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	4413      	add	r3, r2
 8002182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	b29b      	uxth	r3, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	429a      	cmp	r2, r3
 800218e:	d809      	bhi.n	80021a4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	699a      	ldr	r2, [r3, #24]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002198:	429a      	cmp	r2, r3
 800219a:	d203      	bcs.n	80021a4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1be      	bne.n	8002122 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	695a      	ldr	r2, [r3, #20]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d811      	bhi.n	80021d4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	2201      	movs	r2, #1
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	43db      	mvns	r3, r3
 80021ca:	6939      	ldr	r1, [r7, #16]
 80021cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80021d0:	4013      	ands	r3, r2
 80021d2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3720      	adds	r7, #32
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	333c      	adds	r3, #60	; 0x3c
 80021f8:	3304      	adds	r3, #4
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	015a      	lsls	r2, r3, #5
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	4413      	add	r3, r2
 8002206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	2b01      	cmp	r3, #1
 8002214:	f040 80a0 	bne.w	8002358 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	2b00      	cmp	r3, #0
 8002220:	d015      	beq.n	800224e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4a72      	ldr	r2, [pc, #456]	; (80023f0 <PCD_EP_OutXfrComplete_int+0x210>)
 8002226:	4293      	cmp	r3, r2
 8002228:	f240 80dd 	bls.w	80023e6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 80d7 	beq.w	80023e6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	015a      	lsls	r2, r3, #5
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	4413      	add	r3, r2
 8002240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002244:	461a      	mov	r2, r3
 8002246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800224a:	6093      	str	r3, [r2, #8]
 800224c:	e0cb      	b.n	80023e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	f003 0320 	and.w	r3, r3, #32
 8002254:	2b00      	cmp	r3, #0
 8002256:	d009      	beq.n	800226c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	015a      	lsls	r2, r3, #5
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4413      	add	r3, r2
 8002260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002264:	461a      	mov	r2, r3
 8002266:	2320      	movs	r3, #32
 8002268:	6093      	str	r3, [r2, #8]
 800226a:	e0bc      	b.n	80023e6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002272:	2b00      	cmp	r3, #0
 8002274:	f040 80b7 	bne.w	80023e6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4a5d      	ldr	r2, [pc, #372]	; (80023f0 <PCD_EP_OutXfrComplete_int+0x210>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d90f      	bls.n	80022a0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00a      	beq.n	80022a0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	015a      	lsls	r2, r3, #5
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	4413      	add	r3, r2
 8002292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002296:	461a      	mov	r2, r3
 8002298:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800229c:	6093      	str	r3, [r2, #8]
 800229e:	e0a2      	b.n	80023e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	4613      	mov	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	1a9b      	subs	r3, r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	440b      	add	r3, r1
 80022ae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80022b2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	0159      	lsls	r1, r3, #5
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	440b      	add	r3, r1
 80022bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80022c6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	4613      	mov	r3, r2
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	1a9b      	subs	r3, r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4403      	add	r3, r0
 80022d6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80022da:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	4613      	mov	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	1a9b      	subs	r3, r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	440b      	add	r3, r1
 80022ea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80022ee:	6819      	ldr	r1, [r3, #0]
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	4613      	mov	r3, r2
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	1a9b      	subs	r3, r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4403      	add	r3, r0
 80022fe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4419      	add	r1, r3
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	4613      	mov	r3, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	1a9b      	subs	r3, r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4403      	add	r3, r0
 8002314:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002318:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d114      	bne.n	800234a <PCD_EP_OutXfrComplete_int+0x16a>
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	4613      	mov	r3, r2
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	1a9b      	subs	r3, r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d108      	bne.n	800234a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6818      	ldr	r0, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002342:	461a      	mov	r2, r3
 8002344:	2101      	movs	r1, #1
 8002346:	f003 fa51 	bl	80057ec <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	b2db      	uxtb	r3, r3
 800234e:	4619      	mov	r1, r3
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f007 fc99 	bl	8009c88 <HAL_PCD_DataOutStageCallback>
 8002356:	e046      	b.n	80023e6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4a26      	ldr	r2, [pc, #152]	; (80023f4 <PCD_EP_OutXfrComplete_int+0x214>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d124      	bne.n	80023aa <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00a      	beq.n	8002380 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	015a      	lsls	r2, r3, #5
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	4413      	add	r3, r2
 8002372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002376:	461a      	mov	r2, r3
 8002378:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800237c:	6093      	str	r3, [r2, #8]
 800237e:	e032      	b.n	80023e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	f003 0320 	and.w	r3, r3, #32
 8002386:	2b00      	cmp	r3, #0
 8002388:	d008      	beq.n	800239c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	015a      	lsls	r2, r3, #5
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	4413      	add	r3, r2
 8002392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002396:	461a      	mov	r2, r3
 8002398:	2320      	movs	r3, #32
 800239a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	4619      	mov	r1, r3
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f007 fc70 	bl	8009c88 <HAL_PCD_DataOutStageCallback>
 80023a8:	e01d      	b.n	80023e6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d114      	bne.n	80023da <PCD_EP_OutXfrComplete_int+0x1fa>
 80023b0:	6879      	ldr	r1, [r7, #4]
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	4613      	mov	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	1a9b      	subs	r3, r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d108      	bne.n	80023da <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6818      	ldr	r0, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80023d2:	461a      	mov	r2, r3
 80023d4:	2100      	movs	r1, #0
 80023d6:	f003 fa09 	bl	80057ec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	4619      	mov	r1, r3
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f007 fc51 	bl	8009c88 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	4f54300a 	.word	0x4f54300a
 80023f4:	4f54310a 	.word	0x4f54310a

080023f8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	333c      	adds	r3, #60	; 0x3c
 8002410:	3304      	adds	r3, #4
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	015a      	lsls	r2, r3, #5
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	4413      	add	r3, r2
 800241e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4a15      	ldr	r2, [pc, #84]	; (8002480 <PCD_EP_OutSetupPacket_int+0x88>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d90e      	bls.n	800244c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002434:	2b00      	cmp	r3, #0
 8002436:	d009      	beq.n	800244c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	015a      	lsls	r2, r3, #5
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	4413      	add	r3, r2
 8002440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002444:	461a      	mov	r2, r3
 8002446:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800244a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f007 fc09 	bl	8009c64 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	4a0a      	ldr	r2, [pc, #40]	; (8002480 <PCD_EP_OutSetupPacket_int+0x88>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d90c      	bls.n	8002474 <PCD_EP_OutSetupPacket_int+0x7c>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d108      	bne.n	8002474 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6818      	ldr	r0, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800246c:	461a      	mov	r2, r3
 800246e:	2101      	movs	r1, #1
 8002470:	f003 f9bc 	bl	80057ec <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	4f54300a 	.word	0x4f54300a

08002484 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	460b      	mov	r3, r1
 800248e:	70fb      	strb	r3, [r7, #3]
 8002490:	4613      	mov	r3, r2
 8002492:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800249c:	78fb      	ldrb	r3, [r7, #3]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d107      	bne.n	80024b2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80024a2:	883b      	ldrh	r3, [r7, #0]
 80024a4:	0419      	lsls	r1, r3, #16
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	629a      	str	r2, [r3, #40]	; 0x28
 80024b0:	e028      	b.n	8002504 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b8:	0c1b      	lsrs	r3, r3, #16
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	4413      	add	r3, r2
 80024be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80024c0:	2300      	movs	r3, #0
 80024c2:	73fb      	strb	r3, [r7, #15]
 80024c4:	e00d      	b.n	80024e2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	3340      	adds	r3, #64	; 0x40
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	0c1b      	lsrs	r3, r3, #16
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	4413      	add	r3, r2
 80024da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80024dc:	7bfb      	ldrb	r3, [r7, #15]
 80024de:	3301      	adds	r3, #1
 80024e0:	73fb      	strb	r3, [r7, #15]
 80024e2:	7bfa      	ldrb	r2, [r7, #15]
 80024e4:	78fb      	ldrb	r3, [r7, #3]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d3ec      	bcc.n	80024c6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80024ec:	883b      	ldrh	r3, [r7, #0]
 80024ee:	0418      	lsls	r0, r3, #16
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6819      	ldr	r1, [r3, #0]
 80024f4:	78fb      	ldrb	r3, [r7, #3]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	4302      	orrs	r2, r0
 80024fc:	3340      	adds	r3, #64	; 0x40
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr

08002512 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002512:	b480      	push	{r7}
 8002514:	b083      	sub	sp, #12
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
 800251a:	460b      	mov	r3, r1
 800251c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	887a      	ldrh	r2, [r7, #2]
 8002524:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002566:	f043 0303 	orr.w	r3, r3, #3
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e0cc      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002590:	4b68      	ldr	r3, [pc, #416]	; (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 030f 	and.w	r3, r3, #15
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	429a      	cmp	r2, r3
 800259c:	d90c      	bls.n	80025b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259e:	4b65      	ldr	r3, [pc, #404]	; (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a6:	4b63      	ldr	r3, [pc, #396]	; (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 030f 	and.w	r3, r3, #15
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d001      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e0b8      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d020      	beq.n	8002606 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d005      	beq.n	80025dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025d0:	4b59      	ldr	r3, [pc, #356]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	4a58      	ldr	r2, [pc, #352]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80025d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0308 	and.w	r3, r3, #8
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d005      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025e8:	4b53      	ldr	r3, [pc, #332]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	4a52      	ldr	r2, [pc, #328]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80025ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025f4:	4b50      	ldr	r3, [pc, #320]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	494d      	ldr	r1, [pc, #308]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 8002602:	4313      	orrs	r3, r2
 8002604:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d044      	beq.n	800269c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d107      	bne.n	800262a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261a:	4b47      	ldr	r3, [pc, #284]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d119      	bne.n	800265a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e07f      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b02      	cmp	r3, #2
 8002630:	d003      	beq.n	800263a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002636:	2b03      	cmp	r3, #3
 8002638:	d107      	bne.n	800264a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800263a:	4b3f      	ldr	r3, [pc, #252]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d109      	bne.n	800265a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e06f      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264a:	4b3b      	ldr	r3, [pc, #236]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e067      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800265a:	4b37      	ldr	r3, [pc, #220]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f023 0203 	bic.w	r2, r3, #3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	4934      	ldr	r1, [pc, #208]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 8002668:	4313      	orrs	r3, r2
 800266a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800266c:	f7fe faf4 	bl	8000c58 <HAL_GetTick>
 8002670:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002672:	e00a      	b.n	800268a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002674:	f7fe faf0 	bl	8000c58 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002682:	4293      	cmp	r3, r2
 8002684:	d901      	bls.n	800268a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e04f      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800268a:	4b2b      	ldr	r3, [pc, #172]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 020c 	and.w	r2, r3, #12
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	429a      	cmp	r2, r3
 800269a:	d1eb      	bne.n	8002674 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800269c:	4b25      	ldr	r3, [pc, #148]	; (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 030f 	and.w	r3, r3, #15
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d20c      	bcs.n	80026c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026aa:	4b22      	ldr	r3, [pc, #136]	; (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b2:	4b20      	ldr	r3, [pc, #128]	; (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d001      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e032      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d008      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026d0:	4b19      	ldr	r3, [pc, #100]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	4916      	ldr	r1, [pc, #88]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d009      	beq.n	8002702 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026ee:	4b12      	ldr	r3, [pc, #72]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	490e      	ldr	r1, [pc, #56]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002702:	f000 fbb1 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 8002706:	4602      	mov	r2, r0
 8002708:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	091b      	lsrs	r3, r3, #4
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	490a      	ldr	r1, [pc, #40]	; (800273c <HAL_RCC_ClockConfig+0x1c0>)
 8002714:	5ccb      	ldrb	r3, [r1, r3]
 8002716:	fa22 f303 	lsr.w	r3, r2, r3
 800271a:	4a09      	ldr	r2, [pc, #36]	; (8002740 <HAL_RCC_ClockConfig+0x1c4>)
 800271c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800271e:	4b09      	ldr	r3, [pc, #36]	; (8002744 <HAL_RCC_ClockConfig+0x1c8>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f7fe f968 	bl	80009f8 <HAL_InitTick>

  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40023c00 	.word	0x40023c00
 8002738:	40023800 	.word	0x40023800
 800273c:	0800a4d4 	.word	0x0800a4d4
 8002740:	20000000 	.word	0x20000000
 8002744:	20000004 	.word	0x20000004

08002748 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800274c:	4b03      	ldr	r3, [pc, #12]	; (800275c <HAL_RCC_GetHCLKFreq+0x14>)
 800274e:	681b      	ldr	r3, [r3, #0]
}
 8002750:	4618      	mov	r0, r3
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	20000000 	.word	0x20000000

08002760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002764:	f7ff fff0 	bl	8002748 <HAL_RCC_GetHCLKFreq>
 8002768:	4602      	mov	r2, r0
 800276a:	4b05      	ldr	r3, [pc, #20]	; (8002780 <HAL_RCC_GetPCLK1Freq+0x20>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	0a9b      	lsrs	r3, r3, #10
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	4903      	ldr	r1, [pc, #12]	; (8002784 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002776:	5ccb      	ldrb	r3, [r1, r3]
 8002778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800277c:	4618      	mov	r0, r3
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40023800 	.word	0x40023800
 8002784:	0800a4e4 	.word	0x0800a4e4

08002788 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800278c:	f7ff ffdc 	bl	8002748 <HAL_RCC_GetHCLKFreq>
 8002790:	4602      	mov	r2, r0
 8002792:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	0b5b      	lsrs	r3, r3, #13
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	4903      	ldr	r1, [pc, #12]	; (80027ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800279e:	5ccb      	ldrb	r3, [r1, r3]
 80027a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40023800 	.word	0x40023800
 80027ac:	0800a4e4 	.word	0x0800a4e4

080027b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	220f      	movs	r2, #15
 80027be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027c0:	4b12      	ldr	r3, [pc, #72]	; (800280c <HAL_RCC_GetClockConfig+0x5c>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f003 0203 	and.w	r2, r3, #3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80027cc:	4b0f      	ldr	r3, [pc, #60]	; (800280c <HAL_RCC_GetClockConfig+0x5c>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80027d8:	4b0c      	ldr	r3, [pc, #48]	; (800280c <HAL_RCC_GetClockConfig+0x5c>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80027e4:	4b09      	ldr	r3, [pc, #36]	; (800280c <HAL_RCC_GetClockConfig+0x5c>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	08db      	lsrs	r3, r3, #3
 80027ea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80027f2:	4b07      	ldr	r3, [pc, #28]	; (8002810 <HAL_RCC_GetClockConfig+0x60>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 020f 	and.w	r2, r3, #15
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	601a      	str	r2, [r3, #0]
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	40023800 	.word	0x40023800
 8002810:	40023c00 	.word	0x40023c00

08002814 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b08c      	sub	sp, #48	; 0x30
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800281c:	2300      	movs	r3, #0
 800281e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002820:	2300      	movs	r3, #0
 8002822:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002824:	2300      	movs	r3, #0
 8002826:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002828:	2300      	movs	r3, #0
 800282a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002830:	2300      	movs	r3, #0
 8002832:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002834:	2300      	movs	r3, #0
 8002836:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002838:	2300      	movs	r3, #0
 800283a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b00      	cmp	r3, #0
 800284a:	d010      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800284c:	4b6f      	ldr	r3, [pc, #444]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800284e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002852:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285a:	496c      	ldr	r1, [pc, #432]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800285c:	4313      	orrs	r3, r2
 800285e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800286a:	2301      	movs	r3, #1
 800286c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d010      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800287a:	4b64      	ldr	r3, [pc, #400]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800287c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002880:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002888:	4960      	ldr	r1, [pc, #384]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800288a:	4313      	orrs	r3, r2
 800288c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002898:	2301      	movs	r3, #1
 800289a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d017      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028a8:	4b58      	ldr	r3, [pc, #352]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	4955      	ldr	r1, [pc, #340]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028c6:	d101      	bne.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80028c8:	2301      	movs	r3, #1
 80028ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80028d4:	2301      	movs	r3, #1
 80028d6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0308 	and.w	r3, r3, #8
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d017      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028e4:	4b49      	ldr	r3, [pc, #292]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f2:	4946      	ldr	r1, [pc, #280]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002902:	d101      	bne.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002904:	2301      	movs	r3, #1
 8002906:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002910:	2301      	movs	r3, #1
 8002912:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0320 	and.w	r3, r3, #32
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 808a 	beq.w	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	4b39      	ldr	r3, [pc, #228]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	4a38      	ldr	r2, [pc, #224]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800292c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002930:	6413      	str	r3, [r2, #64]	; 0x40
 8002932:	4b36      	ldr	r3, [pc, #216]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293a:	60bb      	str	r3, [r7, #8]
 800293c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800293e:	4b34      	ldr	r3, [pc, #208]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a33      	ldr	r2, [pc, #204]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002948:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800294a:	f7fe f985 	bl	8000c58 <HAL_GetTick>
 800294e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002950:	e008      	b.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002952:	f7fe f981 	bl	8000c58 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e278      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002964:	4b2a      	ldr	r3, [pc, #168]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0f0      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002970:	4b26      	ldr	r3, [pc, #152]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002974:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002978:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800297a:	6a3b      	ldr	r3, [r7, #32]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d02f      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002988:	6a3a      	ldr	r2, [r7, #32]
 800298a:	429a      	cmp	r2, r3
 800298c:	d028      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800298e:	4b1f      	ldr	r3, [pc, #124]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002992:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002996:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002998:	4b1e      	ldr	r3, [pc, #120]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800299a:	2201      	movs	r2, #1
 800299c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800299e:	4b1d      	ldr	r3, [pc, #116]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80029a4:	4a19      	ldr	r2, [pc, #100]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029a6:	6a3b      	ldr	r3, [r7, #32]
 80029a8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80029aa:	4b18      	ldr	r3, [pc, #96]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d114      	bne.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80029b6:	f7fe f94f 	bl	8000c58 <HAL_GetTick>
 80029ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029bc:	e00a      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029be:	f7fe f94b 	bl	8000c58 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e240      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d4:	4b0d      	ldr	r3, [pc, #52]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0ee      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029ec:	d114      	bne.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80029ee:	4b07      	ldr	r3, [pc, #28]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80029fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a02:	4902      	ldr	r1, [pc, #8]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	608b      	str	r3, [r1, #8]
 8002a08:	e00c      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002a0a:	bf00      	nop
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	40007000 	.word	0x40007000
 8002a14:	42470e40 	.word	0x42470e40
 8002a18:	4b4a      	ldr	r3, [pc, #296]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	4a49      	ldr	r2, [pc, #292]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a1e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002a22:	6093      	str	r3, [r2, #8]
 8002a24:	4b47      	ldr	r3, [pc, #284]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a30:	4944      	ldr	r1, [pc, #272]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0310 	and.w	r3, r3, #16
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d004      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002a48:	4b3f      	ldr	r3, [pc, #252]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002a4a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00a      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002a58:	4b3a      	ldr	r3, [pc, #232]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a5e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a66:	4937      	ldr	r1, [pc, #220]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00a      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a7a:	4b32      	ldr	r3, [pc, #200]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a80:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a88:	492e      	ldr	r1, [pc, #184]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d011      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002a9c:	4b29      	ldr	r3, [pc, #164]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aa2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aaa:	4926      	ldr	r1, [pc, #152]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aba:	d101      	bne.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002abc:	2301      	movs	r3, #1
 8002abe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00a      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002acc:	4b1d      	ldr	r3, [pc, #116]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ad2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ada:	491a      	ldr	r1, [pc, #104]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d011      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002aee:	4b15      	ldr	r3, [pc, #84]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002af0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002af4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002afc:	4911      	ldr	r1, [pc, #68]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b0c:	d101      	bne.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d005      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b20:	f040 80ff 	bne.w	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b24:	4b09      	ldr	r3, [pc, #36]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b2a:	f7fe f895 	bl	8000c58 <HAL_GetTick>
 8002b2e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b30:	e00e      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002b32:	f7fe f891 	bl	8000c58 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d907      	bls.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e188      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002b44:	40023800 	.word	0x40023800
 8002b48:	424711e0 	.word	0x424711e0
 8002b4c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b50:	4b7e      	ldr	r3, [pc, #504]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1ea      	bne.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d009      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d028      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d124      	bne.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002b84:	4b71      	ldr	r3, [pc, #452]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b8a:	0c1b      	lsrs	r3, r3, #16
 8002b8c:	f003 0303 	and.w	r3, r3, #3
 8002b90:	3301      	adds	r3, #1
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b96:	4b6d      	ldr	r3, [pc, #436]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b9c:	0e1b      	lsrs	r3, r3, #24
 8002b9e:	f003 030f 	and.w	r3, r3, #15
 8002ba2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	019b      	lsls	r3, r3, #6
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	085b      	lsrs	r3, r3, #1
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	041b      	lsls	r3, r3, #16
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	061b      	lsls	r3, r3, #24
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	071b      	lsls	r3, r3, #28
 8002bc6:	4961      	ldr	r1, [pc, #388]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0304 	and.w	r3, r3, #4
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d004      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002be2:	d00a      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d035      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bf8:	d130      	bne.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002bfa:	4b54      	ldr	r3, [pc, #336]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c00:	0c1b      	lsrs	r3, r3, #16
 8002c02:	f003 0303 	and.w	r3, r3, #3
 8002c06:	3301      	adds	r3, #1
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c0c:	4b4f      	ldr	r3, [pc, #316]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c12:	0f1b      	lsrs	r3, r3, #28
 8002c14:	f003 0307 	and.w	r3, r3, #7
 8002c18:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	019b      	lsls	r3, r3, #6
 8002c24:	431a      	orrs	r2, r3
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	085b      	lsrs	r3, r3, #1
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	041b      	lsls	r3, r3, #16
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	061b      	lsls	r3, r3, #24
 8002c36:	431a      	orrs	r2, r3
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	071b      	lsls	r3, r3, #28
 8002c3c:	4943      	ldr	r1, [pc, #268]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002c44:	4b41      	ldr	r3, [pc, #260]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c4a:	f023 021f 	bic.w	r2, r3, #31
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c52:	3b01      	subs	r3, #1
 8002c54:	493d      	ldr	r1, [pc, #244]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d029      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c70:	d124      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002c72:	4b36      	ldr	r3, [pc, #216]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c78:	0c1b      	lsrs	r3, r3, #16
 8002c7a:	f003 0303 	and.w	r3, r3, #3
 8002c7e:	3301      	adds	r3, #1
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c84:	4b31      	ldr	r3, [pc, #196]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c8a:	0f1b      	lsrs	r3, r3, #28
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	019b      	lsls	r3, r3, #6
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	085b      	lsrs	r3, r3, #1
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	041b      	lsls	r3, r3, #16
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	061b      	lsls	r3, r3, #24
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	071b      	lsls	r3, r3, #28
 8002cb4:	4925      	ldr	r1, [pc, #148]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d016      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	019b      	lsls	r3, r3, #6
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	085b      	lsrs	r3, r3, #1
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	041b      	lsls	r3, r3, #16
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	061b      	lsls	r3, r3, #24
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	071b      	lsls	r3, r3, #28
 8002cee:	4917      	ldr	r1, [pc, #92]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002cf6:	4b16      	ldr	r3, [pc, #88]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002cfc:	f7fd ffac 	bl	8000c58 <HAL_GetTick>
 8002d00:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d02:	e008      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002d04:	f7fd ffa8 	bl	8000c58 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e09f      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d16:	4b0d      	ldr	r3, [pc, #52]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0f0      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	f040 8095 	bne.w	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002d2a:	4b0a      	ldr	r3, [pc, #40]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d30:	f7fd ff92 	bl	8000c58 <HAL_GetTick>
 8002d34:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d36:	e00f      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002d38:	f7fd ff8e 	bl	8000c58 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d908      	bls.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e085      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002d4a:	bf00      	nop
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	42470068 	.word	0x42470068
 8002d54:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d58:	4b41      	ldr	r3, [pc, #260]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d64:	d0e8      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0304 	and.w	r3, r3, #4
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d009      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d02b      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d127      	bne.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002d8e:	4b34      	ldr	r3, [pc, #208]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d94:	0c1b      	lsrs	r3, r3, #16
 8002d96:	f003 0303 	and.w	r3, r3, #3
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	699a      	ldr	r2, [r3, #24]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	019b      	lsls	r3, r3, #6
 8002daa:	431a      	orrs	r2, r3
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	085b      	lsrs	r3, r3, #1
 8002db0:	3b01      	subs	r3, #1
 8002db2:	041b      	lsls	r3, r3, #16
 8002db4:	431a      	orrs	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	061b      	lsls	r3, r3, #24
 8002dbc:	4928      	ldr	r1, [pc, #160]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002dc4:	4b26      	ldr	r3, [pc, #152]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002dc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dca:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	021b      	lsls	r3, r3, #8
 8002dd6:	4922      	ldr	r1, [pc, #136]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d01d      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002df2:	d118      	bne.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002df4:	4b1a      	ldr	r3, [pc, #104]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfa:	0e1b      	lsrs	r3, r3, #24
 8002dfc:	f003 030f 	and.w	r3, r3, #15
 8002e00:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	699a      	ldr	r2, [r3, #24]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	019b      	lsls	r3, r3, #6
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	085b      	lsrs	r3, r3, #1
 8002e14:	3b01      	subs	r3, #1
 8002e16:	041b      	lsls	r3, r3, #16
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	061b      	lsls	r3, r3, #24
 8002e1e:	4910      	ldr	r1, [pc, #64]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002e26:	4b0f      	ldr	r3, [pc, #60]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002e28:	2201      	movs	r2, #1
 8002e2a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e2c:	f7fd ff14 	bl	8000c58 <HAL_GetTick>
 8002e30:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e32:	e008      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002e34:	f7fd ff10 	bl	8000c58 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e007      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e46:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e52:	d1ef      	bne.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3730      	adds	r7, #48	; 0x30
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	40023800 	.word	0x40023800
 8002e64:	42470070 	.word	0x42470070

08002e68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e6c:	b088      	sub	sp, #32
 8002e6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8002e74:	2300      	movs	r3, #0
 8002e76:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8002e80:	2300      	movs	r3, #0
 8002e82:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e84:	4bce      	ldr	r3, [pc, #824]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f003 030c 	and.w	r3, r3, #12
 8002e8c:	2b0c      	cmp	r3, #12
 8002e8e:	f200 818d 	bhi.w	80031ac <HAL_RCC_GetSysClockFreq+0x344>
 8002e92:	a201      	add	r2, pc, #4	; (adr r2, 8002e98 <HAL_RCC_GetSysClockFreq+0x30>)
 8002e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e98:	08002ecd 	.word	0x08002ecd
 8002e9c:	080031ad 	.word	0x080031ad
 8002ea0:	080031ad 	.word	0x080031ad
 8002ea4:	080031ad 	.word	0x080031ad
 8002ea8:	08002ed3 	.word	0x08002ed3
 8002eac:	080031ad 	.word	0x080031ad
 8002eb0:	080031ad 	.word	0x080031ad
 8002eb4:	080031ad 	.word	0x080031ad
 8002eb8:	08002ed9 	.word	0x08002ed9
 8002ebc:	080031ad 	.word	0x080031ad
 8002ec0:	080031ad 	.word	0x080031ad
 8002ec4:	080031ad 	.word	0x080031ad
 8002ec8:	0800304d 	.word	0x0800304d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ecc:	4bbd      	ldr	r3, [pc, #756]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002ece:	61bb      	str	r3, [r7, #24]
       break;
 8002ed0:	e16f      	b.n	80031b2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ed2:	4bbd      	ldr	r3, [pc, #756]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x360>)
 8002ed4:	61bb      	str	r3, [r7, #24]
      break;
 8002ed6:	e16c      	b.n	80031b2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ed8:	4bb9      	ldr	r3, [pc, #740]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ee0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ee2:	4bb7      	ldr	r3, [pc, #732]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d053      	beq.n	8002f96 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eee:	4bb4      	ldr	r3, [pc, #720]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	099b      	lsrs	r3, r3, #6
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	f04f 0300 	mov.w	r3, #0
 8002efa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002efe:	f04f 0100 	mov.w	r1, #0
 8002f02:	ea02 0400 	and.w	r4, r2, r0
 8002f06:	603c      	str	r4, [r7, #0]
 8002f08:	400b      	ands	r3, r1
 8002f0a:	607b      	str	r3, [r7, #4]
 8002f0c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f10:	4620      	mov	r0, r4
 8002f12:	4629      	mov	r1, r5
 8002f14:	f04f 0200 	mov.w	r2, #0
 8002f18:	f04f 0300 	mov.w	r3, #0
 8002f1c:	014b      	lsls	r3, r1, #5
 8002f1e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f22:	0142      	lsls	r2, r0, #5
 8002f24:	4610      	mov	r0, r2
 8002f26:	4619      	mov	r1, r3
 8002f28:	4623      	mov	r3, r4
 8002f2a:	1ac0      	subs	r0, r0, r3
 8002f2c:	462b      	mov	r3, r5
 8002f2e:	eb61 0103 	sbc.w	r1, r1, r3
 8002f32:	f04f 0200 	mov.w	r2, #0
 8002f36:	f04f 0300 	mov.w	r3, #0
 8002f3a:	018b      	lsls	r3, r1, #6
 8002f3c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f40:	0182      	lsls	r2, r0, #6
 8002f42:	1a12      	subs	r2, r2, r0
 8002f44:	eb63 0301 	sbc.w	r3, r3, r1
 8002f48:	f04f 0000 	mov.w	r0, #0
 8002f4c:	f04f 0100 	mov.w	r1, #0
 8002f50:	00d9      	lsls	r1, r3, #3
 8002f52:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f56:	00d0      	lsls	r0, r2, #3
 8002f58:	4602      	mov	r2, r0
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	4621      	mov	r1, r4
 8002f5e:	1852      	adds	r2, r2, r1
 8002f60:	4629      	mov	r1, r5
 8002f62:	eb43 0101 	adc.w	r1, r3, r1
 8002f66:	460b      	mov	r3, r1
 8002f68:	f04f 0000 	mov.w	r0, #0
 8002f6c:	f04f 0100 	mov.w	r1, #0
 8002f70:	0259      	lsls	r1, r3, #9
 8002f72:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002f76:	0250      	lsls	r0, r2, #9
 8002f78:	4602      	mov	r2, r0
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	4610      	mov	r0, r2
 8002f7e:	4619      	mov	r1, r3
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	461a      	mov	r2, r3
 8002f84:	f04f 0300 	mov.w	r3, #0
 8002f88:	f7fd f942 	bl	8000210 <__aeabi_uldivmod>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	4613      	mov	r3, r2
 8002f92:	61fb      	str	r3, [r7, #28]
 8002f94:	e04c      	b.n	8003030 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f96:	4b8a      	ldr	r3, [pc, #552]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	099b      	lsrs	r3, r3, #6
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	f04f 0300 	mov.w	r3, #0
 8002fa2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002fa6:	f04f 0100 	mov.w	r1, #0
 8002faa:	ea02 0a00 	and.w	sl, r2, r0
 8002fae:	ea03 0b01 	and.w	fp, r3, r1
 8002fb2:	4650      	mov	r0, sl
 8002fb4:	4659      	mov	r1, fp
 8002fb6:	f04f 0200 	mov.w	r2, #0
 8002fba:	f04f 0300 	mov.w	r3, #0
 8002fbe:	014b      	lsls	r3, r1, #5
 8002fc0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002fc4:	0142      	lsls	r2, r0, #5
 8002fc6:	4610      	mov	r0, r2
 8002fc8:	4619      	mov	r1, r3
 8002fca:	ebb0 000a 	subs.w	r0, r0, sl
 8002fce:	eb61 010b 	sbc.w	r1, r1, fp
 8002fd2:	f04f 0200 	mov.w	r2, #0
 8002fd6:	f04f 0300 	mov.w	r3, #0
 8002fda:	018b      	lsls	r3, r1, #6
 8002fdc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002fe0:	0182      	lsls	r2, r0, #6
 8002fe2:	1a12      	subs	r2, r2, r0
 8002fe4:	eb63 0301 	sbc.w	r3, r3, r1
 8002fe8:	f04f 0000 	mov.w	r0, #0
 8002fec:	f04f 0100 	mov.w	r1, #0
 8002ff0:	00d9      	lsls	r1, r3, #3
 8002ff2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ff6:	00d0      	lsls	r0, r2, #3
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	eb12 020a 	adds.w	r2, r2, sl
 8003000:	eb43 030b 	adc.w	r3, r3, fp
 8003004:	f04f 0000 	mov.w	r0, #0
 8003008:	f04f 0100 	mov.w	r1, #0
 800300c:	0299      	lsls	r1, r3, #10
 800300e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003012:	0290      	lsls	r0, r2, #10
 8003014:	4602      	mov	r2, r0
 8003016:	460b      	mov	r3, r1
 8003018:	4610      	mov	r0, r2
 800301a:	4619      	mov	r1, r3
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	461a      	mov	r2, r3
 8003020:	f04f 0300 	mov.w	r3, #0
 8003024:	f7fd f8f4 	bl	8000210 <__aeabi_uldivmod>
 8003028:	4602      	mov	r2, r0
 800302a:	460b      	mov	r3, r1
 800302c:	4613      	mov	r3, r2
 800302e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003030:	4b63      	ldr	r3, [pc, #396]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	0c1b      	lsrs	r3, r3, #16
 8003036:	f003 0303 	and.w	r3, r3, #3
 800303a:	3301      	adds	r3, #1
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8003040:	69fa      	ldr	r2, [r7, #28]
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	fbb2 f3f3 	udiv	r3, r2, r3
 8003048:	61bb      	str	r3, [r7, #24]
      break;
 800304a:	e0b2      	b.n	80031b2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800304c:	4b5c      	ldr	r3, [pc, #368]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x358>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003054:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003056:	4b5a      	ldr	r3, [pc, #360]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d04d      	beq.n	80030fe <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003062:	4b57      	ldr	r3, [pc, #348]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	099b      	lsrs	r3, r3, #6
 8003068:	461a      	mov	r2, r3
 800306a:	f04f 0300 	mov.w	r3, #0
 800306e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003072:	f04f 0100 	mov.w	r1, #0
 8003076:	ea02 0800 	and.w	r8, r2, r0
 800307a:	ea03 0901 	and.w	r9, r3, r1
 800307e:	4640      	mov	r0, r8
 8003080:	4649      	mov	r1, r9
 8003082:	f04f 0200 	mov.w	r2, #0
 8003086:	f04f 0300 	mov.w	r3, #0
 800308a:	014b      	lsls	r3, r1, #5
 800308c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003090:	0142      	lsls	r2, r0, #5
 8003092:	4610      	mov	r0, r2
 8003094:	4619      	mov	r1, r3
 8003096:	ebb0 0008 	subs.w	r0, r0, r8
 800309a:	eb61 0109 	sbc.w	r1, r1, r9
 800309e:	f04f 0200 	mov.w	r2, #0
 80030a2:	f04f 0300 	mov.w	r3, #0
 80030a6:	018b      	lsls	r3, r1, #6
 80030a8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80030ac:	0182      	lsls	r2, r0, #6
 80030ae:	1a12      	subs	r2, r2, r0
 80030b0:	eb63 0301 	sbc.w	r3, r3, r1
 80030b4:	f04f 0000 	mov.w	r0, #0
 80030b8:	f04f 0100 	mov.w	r1, #0
 80030bc:	00d9      	lsls	r1, r3, #3
 80030be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030c2:	00d0      	lsls	r0, r2, #3
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	eb12 0208 	adds.w	r2, r2, r8
 80030cc:	eb43 0309 	adc.w	r3, r3, r9
 80030d0:	f04f 0000 	mov.w	r0, #0
 80030d4:	f04f 0100 	mov.w	r1, #0
 80030d8:	0259      	lsls	r1, r3, #9
 80030da:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80030de:	0250      	lsls	r0, r2, #9
 80030e0:	4602      	mov	r2, r0
 80030e2:	460b      	mov	r3, r1
 80030e4:	4610      	mov	r0, r2
 80030e6:	4619      	mov	r1, r3
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	461a      	mov	r2, r3
 80030ec:	f04f 0300 	mov.w	r3, #0
 80030f0:	f7fd f88e 	bl	8000210 <__aeabi_uldivmod>
 80030f4:	4602      	mov	r2, r0
 80030f6:	460b      	mov	r3, r1
 80030f8:	4613      	mov	r3, r2
 80030fa:	61fb      	str	r3, [r7, #28]
 80030fc:	e04a      	b.n	8003194 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030fe:	4b30      	ldr	r3, [pc, #192]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	099b      	lsrs	r3, r3, #6
 8003104:	461a      	mov	r2, r3
 8003106:	f04f 0300 	mov.w	r3, #0
 800310a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800310e:	f04f 0100 	mov.w	r1, #0
 8003112:	ea02 0400 	and.w	r4, r2, r0
 8003116:	ea03 0501 	and.w	r5, r3, r1
 800311a:	4620      	mov	r0, r4
 800311c:	4629      	mov	r1, r5
 800311e:	f04f 0200 	mov.w	r2, #0
 8003122:	f04f 0300 	mov.w	r3, #0
 8003126:	014b      	lsls	r3, r1, #5
 8003128:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800312c:	0142      	lsls	r2, r0, #5
 800312e:	4610      	mov	r0, r2
 8003130:	4619      	mov	r1, r3
 8003132:	1b00      	subs	r0, r0, r4
 8003134:	eb61 0105 	sbc.w	r1, r1, r5
 8003138:	f04f 0200 	mov.w	r2, #0
 800313c:	f04f 0300 	mov.w	r3, #0
 8003140:	018b      	lsls	r3, r1, #6
 8003142:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003146:	0182      	lsls	r2, r0, #6
 8003148:	1a12      	subs	r2, r2, r0
 800314a:	eb63 0301 	sbc.w	r3, r3, r1
 800314e:	f04f 0000 	mov.w	r0, #0
 8003152:	f04f 0100 	mov.w	r1, #0
 8003156:	00d9      	lsls	r1, r3, #3
 8003158:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800315c:	00d0      	lsls	r0, r2, #3
 800315e:	4602      	mov	r2, r0
 8003160:	460b      	mov	r3, r1
 8003162:	1912      	adds	r2, r2, r4
 8003164:	eb45 0303 	adc.w	r3, r5, r3
 8003168:	f04f 0000 	mov.w	r0, #0
 800316c:	f04f 0100 	mov.w	r1, #0
 8003170:	0299      	lsls	r1, r3, #10
 8003172:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003176:	0290      	lsls	r0, r2, #10
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	4610      	mov	r0, r2
 800317e:	4619      	mov	r1, r3
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	461a      	mov	r2, r3
 8003184:	f04f 0300 	mov.w	r3, #0
 8003188:	f7fd f842 	bl	8000210 <__aeabi_uldivmod>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	4613      	mov	r3, r2
 8003192:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003194:	4b0a      	ldr	r3, [pc, #40]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	0f1b      	lsrs	r3, r3, #28
 800319a:	f003 0307 	and.w	r3, r3, #7
 800319e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80031a0:	69fa      	ldr	r2, [r7, #28]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a8:	61bb      	str	r3, [r7, #24]
      break;
 80031aa:	e002      	b.n	80031b2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031ac:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80031ae:	61bb      	str	r3, [r7, #24]
      break;
 80031b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031b2:	69bb      	ldr	r3, [r7, #24]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3720      	adds	r7, #32
 80031b8:	46bd      	mov	sp, r7
 80031ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031be:	bf00      	nop
 80031c0:	40023800 	.word	0x40023800
 80031c4:	00f42400 	.word	0x00f42400
 80031c8:	007a1200 	.word	0x007a1200

080031cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 8083 	beq.w	80032ec <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031e6:	4b95      	ldr	r3, [pc, #596]	; (800343c <HAL_RCC_OscConfig+0x270>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 030c 	and.w	r3, r3, #12
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	d019      	beq.n	8003226 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031f2:	4b92      	ldr	r3, [pc, #584]	; (800343c <HAL_RCC_OscConfig+0x270>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031fa:	2b08      	cmp	r3, #8
 80031fc:	d106      	bne.n	800320c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031fe:	4b8f      	ldr	r3, [pc, #572]	; (800343c <HAL_RCC_OscConfig+0x270>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003206:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800320a:	d00c      	beq.n	8003226 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800320c:	4b8b      	ldr	r3, [pc, #556]	; (800343c <HAL_RCC_OscConfig+0x270>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003214:	2b0c      	cmp	r3, #12
 8003216:	d112      	bne.n	800323e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003218:	4b88      	ldr	r3, [pc, #544]	; (800343c <HAL_RCC_OscConfig+0x270>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003220:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003224:	d10b      	bne.n	800323e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003226:	4b85      	ldr	r3, [pc, #532]	; (800343c <HAL_RCC_OscConfig+0x270>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d05b      	beq.n	80032ea <HAL_RCC_OscConfig+0x11e>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d157      	bne.n	80032ea <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e216      	b.n	800366c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003246:	d106      	bne.n	8003256 <HAL_RCC_OscConfig+0x8a>
 8003248:	4b7c      	ldr	r3, [pc, #496]	; (800343c <HAL_RCC_OscConfig+0x270>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a7b      	ldr	r2, [pc, #492]	; (800343c <HAL_RCC_OscConfig+0x270>)
 800324e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003252:	6013      	str	r3, [r2, #0]
 8003254:	e01d      	b.n	8003292 <HAL_RCC_OscConfig+0xc6>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800325e:	d10c      	bne.n	800327a <HAL_RCC_OscConfig+0xae>
 8003260:	4b76      	ldr	r3, [pc, #472]	; (800343c <HAL_RCC_OscConfig+0x270>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a75      	ldr	r2, [pc, #468]	; (800343c <HAL_RCC_OscConfig+0x270>)
 8003266:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800326a:	6013      	str	r3, [r2, #0]
 800326c:	4b73      	ldr	r3, [pc, #460]	; (800343c <HAL_RCC_OscConfig+0x270>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a72      	ldr	r2, [pc, #456]	; (800343c <HAL_RCC_OscConfig+0x270>)
 8003272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003276:	6013      	str	r3, [r2, #0]
 8003278:	e00b      	b.n	8003292 <HAL_RCC_OscConfig+0xc6>
 800327a:	4b70      	ldr	r3, [pc, #448]	; (800343c <HAL_RCC_OscConfig+0x270>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a6f      	ldr	r2, [pc, #444]	; (800343c <HAL_RCC_OscConfig+0x270>)
 8003280:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003284:	6013      	str	r3, [r2, #0]
 8003286:	4b6d      	ldr	r3, [pc, #436]	; (800343c <HAL_RCC_OscConfig+0x270>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a6c      	ldr	r2, [pc, #432]	; (800343c <HAL_RCC_OscConfig+0x270>)
 800328c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003290:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d013      	beq.n	80032c2 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329a:	f7fd fcdd 	bl	8000c58 <HAL_GetTick>
 800329e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032a0:	e008      	b.n	80032b4 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032a2:	f7fd fcd9 	bl	8000c58 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b64      	cmp	r3, #100	; 0x64
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e1db      	b.n	800366c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b4:	4b61      	ldr	r3, [pc, #388]	; (800343c <HAL_RCC_OscConfig+0x270>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d0f0      	beq.n	80032a2 <HAL_RCC_OscConfig+0xd6>
 80032c0:	e014      	b.n	80032ec <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c2:	f7fd fcc9 	bl	8000c58 <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032ca:	f7fd fcc5 	bl	8000c58 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b64      	cmp	r3, #100	; 0x64
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e1c7      	b.n	800366c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032dc:	4b57      	ldr	r3, [pc, #348]	; (800343c <HAL_RCC_OscConfig+0x270>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1f0      	bne.n	80032ca <HAL_RCC_OscConfig+0xfe>
 80032e8:	e000      	b.n	80032ec <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d06f      	beq.n	80033d8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80032f8:	4b50      	ldr	r3, [pc, #320]	; (800343c <HAL_RCC_OscConfig+0x270>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f003 030c 	and.w	r3, r3, #12
 8003300:	2b00      	cmp	r3, #0
 8003302:	d017      	beq.n	8003334 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003304:	4b4d      	ldr	r3, [pc, #308]	; (800343c <HAL_RCC_OscConfig+0x270>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800330c:	2b08      	cmp	r3, #8
 800330e:	d105      	bne.n	800331c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003310:	4b4a      	ldr	r3, [pc, #296]	; (800343c <HAL_RCC_OscConfig+0x270>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00b      	beq.n	8003334 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800331c:	4b47      	ldr	r3, [pc, #284]	; (800343c <HAL_RCC_OscConfig+0x270>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003324:	2b0c      	cmp	r3, #12
 8003326:	d11c      	bne.n	8003362 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003328:	4b44      	ldr	r3, [pc, #272]	; (800343c <HAL_RCC_OscConfig+0x270>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d116      	bne.n	8003362 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003334:	4b41      	ldr	r3, [pc, #260]	; (800343c <HAL_RCC_OscConfig+0x270>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d005      	beq.n	800334c <HAL_RCC_OscConfig+0x180>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d001      	beq.n	800334c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e18f      	b.n	800366c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800334c:	4b3b      	ldr	r3, [pc, #236]	; (800343c <HAL_RCC_OscConfig+0x270>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	4938      	ldr	r1, [pc, #224]	; (800343c <HAL_RCC_OscConfig+0x270>)
 800335c:	4313      	orrs	r3, r2
 800335e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003360:	e03a      	b.n	80033d8 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d020      	beq.n	80033ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800336a:	4b35      	ldr	r3, [pc, #212]	; (8003440 <HAL_RCC_OscConfig+0x274>)
 800336c:	2201      	movs	r2, #1
 800336e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003370:	f7fd fc72 	bl	8000c58 <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003378:	f7fd fc6e 	bl	8000c58 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e170      	b.n	800366c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800338a:	4b2c      	ldr	r3, [pc, #176]	; (800343c <HAL_RCC_OscConfig+0x270>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0f0      	beq.n	8003378 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003396:	4b29      	ldr	r3, [pc, #164]	; (800343c <HAL_RCC_OscConfig+0x270>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	4925      	ldr	r1, [pc, #148]	; (800343c <HAL_RCC_OscConfig+0x270>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	600b      	str	r3, [r1, #0]
 80033aa:	e015      	b.n	80033d8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033ac:	4b24      	ldr	r3, [pc, #144]	; (8003440 <HAL_RCC_OscConfig+0x274>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b2:	f7fd fc51 	bl	8000c58 <HAL_GetTick>
 80033b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033b8:	e008      	b.n	80033cc <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033ba:	f7fd fc4d 	bl	8000c58 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e14f      	b.n	800366c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033cc:	4b1b      	ldr	r3, [pc, #108]	; (800343c <HAL_RCC_OscConfig+0x270>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1f0      	bne.n	80033ba <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0308 	and.w	r3, r3, #8
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d037      	beq.n	8003454 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d016      	beq.n	800341a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ec:	4b15      	ldr	r3, [pc, #84]	; (8003444 <HAL_RCC_OscConfig+0x278>)
 80033ee:	2201      	movs	r2, #1
 80033f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f2:	f7fd fc31 	bl	8000c58 <HAL_GetTick>
 80033f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033f8:	e008      	b.n	800340c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033fa:	f7fd fc2d 	bl	8000c58 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d901      	bls.n	800340c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e12f      	b.n	800366c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800340c:	4b0b      	ldr	r3, [pc, #44]	; (800343c <HAL_RCC_OscConfig+0x270>)
 800340e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d0f0      	beq.n	80033fa <HAL_RCC_OscConfig+0x22e>
 8003418:	e01c      	b.n	8003454 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800341a:	4b0a      	ldr	r3, [pc, #40]	; (8003444 <HAL_RCC_OscConfig+0x278>)
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003420:	f7fd fc1a 	bl	8000c58 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003426:	e00f      	b.n	8003448 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003428:	f7fd fc16 	bl	8000c58 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d908      	bls.n	8003448 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e118      	b.n	800366c <HAL_RCC_OscConfig+0x4a0>
 800343a:	bf00      	nop
 800343c:	40023800 	.word	0x40023800
 8003440:	42470000 	.word	0x42470000
 8003444:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003448:	4b8a      	ldr	r3, [pc, #552]	; (8003674 <HAL_RCC_OscConfig+0x4a8>)
 800344a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1e9      	bne.n	8003428 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b00      	cmp	r3, #0
 800345e:	f000 8097 	beq.w	8003590 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003462:	2300      	movs	r3, #0
 8003464:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003466:	4b83      	ldr	r3, [pc, #524]	; (8003674 <HAL_RCC_OscConfig+0x4a8>)
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10f      	bne.n	8003492 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003472:	2300      	movs	r3, #0
 8003474:	60fb      	str	r3, [r7, #12]
 8003476:	4b7f      	ldr	r3, [pc, #508]	; (8003674 <HAL_RCC_OscConfig+0x4a8>)
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	4a7e      	ldr	r2, [pc, #504]	; (8003674 <HAL_RCC_OscConfig+0x4a8>)
 800347c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003480:	6413      	str	r3, [r2, #64]	; 0x40
 8003482:	4b7c      	ldr	r3, [pc, #496]	; (8003674 <HAL_RCC_OscConfig+0x4a8>)
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800348e:	2301      	movs	r3, #1
 8003490:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003492:	4b79      	ldr	r3, [pc, #484]	; (8003678 <HAL_RCC_OscConfig+0x4ac>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349a:	2b00      	cmp	r3, #0
 800349c:	d118      	bne.n	80034d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800349e:	4b76      	ldr	r3, [pc, #472]	; (8003678 <HAL_RCC_OscConfig+0x4ac>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a75      	ldr	r2, [pc, #468]	; (8003678 <HAL_RCC_OscConfig+0x4ac>)
 80034a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034aa:	f7fd fbd5 	bl	8000c58 <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034b2:	f7fd fbd1 	bl	8000c58 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e0d3      	b.n	800366c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c4:	4b6c      	ldr	r3, [pc, #432]	; (8003678 <HAL_RCC_OscConfig+0x4ac>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0f0      	beq.n	80034b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d106      	bne.n	80034e6 <HAL_RCC_OscConfig+0x31a>
 80034d8:	4b66      	ldr	r3, [pc, #408]	; (8003674 <HAL_RCC_OscConfig+0x4a8>)
 80034da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034dc:	4a65      	ldr	r2, [pc, #404]	; (8003674 <HAL_RCC_OscConfig+0x4a8>)
 80034de:	f043 0301 	orr.w	r3, r3, #1
 80034e2:	6713      	str	r3, [r2, #112]	; 0x70
 80034e4:	e01c      	b.n	8003520 <HAL_RCC_OscConfig+0x354>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	2b05      	cmp	r3, #5
 80034ec:	d10c      	bne.n	8003508 <HAL_RCC_OscConfig+0x33c>
 80034ee:	4b61      	ldr	r3, [pc, #388]	; (8003674 <HAL_RCC_OscConfig+0x4a8>)
 80034f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f2:	4a60      	ldr	r2, [pc, #384]	; (8003674 <HAL_RCC_OscConfig+0x4a8>)
 80034f4:	f043 0304 	orr.w	r3, r3, #4
 80034f8:	6713      	str	r3, [r2, #112]	; 0x70
 80034fa:	4b5e      	ldr	r3, [pc, #376]	; (8003674 <HAL_RCC_OscConfig+0x4a8>)
 80034fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fe:	4a5d      	ldr	r2, [pc, #372]	; (8003674 <HAL_RCC_OscConfig+0x4a8>)
 8003500:	f043 0301 	orr.w	r3, r3, #1
 8003504:	6713      	str	r3, [r2, #112]	; 0x70
 8003506:	e00b      	b.n	8003520 <HAL_RCC_OscConfig+0x354>
 8003508:	4b5a      	ldr	r3, [pc, #360]	; (8003674 <HAL_RCC_OscConfig+0x4a8>)
 800350a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350c:	4a59      	ldr	r2, [pc, #356]	; (8003674 <HAL_RCC_OscConfig+0x4a8>)
 800350e:	f023 0301 	bic.w	r3, r3, #1
 8003512:	6713      	str	r3, [r2, #112]	; 0x70
 8003514:	4b57      	ldr	r3, [pc, #348]	; (8003674 <HAL_RCC_OscConfig+0x4a8>)
 8003516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003518:	4a56      	ldr	r2, [pc, #344]	; (8003674 <HAL_RCC_OscConfig+0x4a8>)
 800351a:	f023 0304 	bic.w	r3, r3, #4
 800351e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d015      	beq.n	8003554 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003528:	f7fd fb96 	bl	8000c58 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800352e:	e00a      	b.n	8003546 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003530:	f7fd fb92 	bl	8000c58 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	f241 3288 	movw	r2, #5000	; 0x1388
 800353e:	4293      	cmp	r3, r2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e092      	b.n	800366c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003546:	4b4b      	ldr	r3, [pc, #300]	; (8003674 <HAL_RCC_OscConfig+0x4a8>)
 8003548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d0ee      	beq.n	8003530 <HAL_RCC_OscConfig+0x364>
 8003552:	e014      	b.n	800357e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003554:	f7fd fb80 	bl	8000c58 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800355a:	e00a      	b.n	8003572 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800355c:	f7fd fb7c 	bl	8000c58 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	f241 3288 	movw	r2, #5000	; 0x1388
 800356a:	4293      	cmp	r3, r2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e07c      	b.n	800366c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003572:	4b40      	ldr	r3, [pc, #256]	; (8003674 <HAL_RCC_OscConfig+0x4a8>)
 8003574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1ee      	bne.n	800355c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800357e:	7dfb      	ldrb	r3, [r7, #23]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d105      	bne.n	8003590 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003584:	4b3b      	ldr	r3, [pc, #236]	; (8003674 <HAL_RCC_OscConfig+0x4a8>)
 8003586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003588:	4a3a      	ldr	r2, [pc, #232]	; (8003674 <HAL_RCC_OscConfig+0x4a8>)
 800358a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800358e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d068      	beq.n	800366a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003598:	4b36      	ldr	r3, [pc, #216]	; (8003674 <HAL_RCC_OscConfig+0x4a8>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f003 030c 	and.w	r3, r3, #12
 80035a0:	2b08      	cmp	r3, #8
 80035a2:	d060      	beq.n	8003666 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d145      	bne.n	8003638 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ac:	4b33      	ldr	r3, [pc, #204]	; (800367c <HAL_RCC_OscConfig+0x4b0>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b2:	f7fd fb51 	bl	8000c58 <HAL_GetTick>
 80035b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035b8:	e008      	b.n	80035cc <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ba:	f7fd fb4d 	bl	8000c58 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d901      	bls.n	80035cc <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e04f      	b.n	800366c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035cc:	4b29      	ldr	r3, [pc, #164]	; (8003674 <HAL_RCC_OscConfig+0x4a8>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1f0      	bne.n	80035ba <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	69da      	ldr	r2, [r3, #28]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a1b      	ldr	r3, [r3, #32]
 80035e0:	431a      	orrs	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e6:	019b      	lsls	r3, r3, #6
 80035e8:	431a      	orrs	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ee:	085b      	lsrs	r3, r3, #1
 80035f0:	3b01      	subs	r3, #1
 80035f2:	041b      	lsls	r3, r3, #16
 80035f4:	431a      	orrs	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fa:	061b      	lsls	r3, r3, #24
 80035fc:	431a      	orrs	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003602:	071b      	lsls	r3, r3, #28
 8003604:	491b      	ldr	r1, [pc, #108]	; (8003674 <HAL_RCC_OscConfig+0x4a8>)
 8003606:	4313      	orrs	r3, r2
 8003608:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800360a:	4b1c      	ldr	r3, [pc, #112]	; (800367c <HAL_RCC_OscConfig+0x4b0>)
 800360c:	2201      	movs	r2, #1
 800360e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003610:	f7fd fb22 	bl	8000c58 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003616:	e008      	b.n	800362a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003618:	f7fd fb1e 	bl	8000c58 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e020      	b.n	800366c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800362a:	4b12      	ldr	r3, [pc, #72]	; (8003674 <HAL_RCC_OscConfig+0x4a8>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d0f0      	beq.n	8003618 <HAL_RCC_OscConfig+0x44c>
 8003636:	e018      	b.n	800366a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003638:	4b10      	ldr	r3, [pc, #64]	; (800367c <HAL_RCC_OscConfig+0x4b0>)
 800363a:	2200      	movs	r2, #0
 800363c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363e:	f7fd fb0b 	bl	8000c58 <HAL_GetTick>
 8003642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003644:	e008      	b.n	8003658 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003646:	f7fd fb07 	bl	8000c58 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d901      	bls.n	8003658 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e009      	b.n	800366c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003658:	4b06      	ldr	r3, [pc, #24]	; (8003674 <HAL_RCC_OscConfig+0x4a8>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1f0      	bne.n	8003646 <HAL_RCC_OscConfig+0x47a>
 8003664:	e001      	b.n	800366a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e000      	b.n	800366c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3718      	adds	r7, #24
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40023800 	.word	0x40023800
 8003678:	40007000 	.word	0x40007000
 800367c:	42470060 	.word	0x42470060

08003680 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e01d      	b.n	80036ce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d106      	bne.n	80036ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f815 	bl	80036d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2202      	movs	r2, #2
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	3304      	adds	r3, #4
 80036bc:	4619      	mov	r1, r3
 80036be:	4610      	mov	r0, r2
 80036c0:	f000 f968 	bl	8003994 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b083      	sub	sp, #12
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80036de:	bf00      	nop
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr

080036ea <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036ea:	b480      	push	{r7}
 80036ec:	b085      	sub	sp, #20
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68da      	ldr	r2, [r3, #12]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f042 0201 	orr.w	r2, r2, #1
 8003700:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f003 0307 	and.w	r3, r3, #7
 800370c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2b06      	cmp	r3, #6
 8003712:	d007      	beq.n	8003724 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f042 0201 	orr.w	r2, r2, #1
 8003722:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b082      	sub	sp, #8
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b02      	cmp	r3, #2
 8003746:	d122      	bne.n	800378e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b02      	cmp	r3, #2
 8003754:	d11b      	bne.n	800378e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f06f 0202 	mvn.w	r2, #2
 800375e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	f003 0303 	and.w	r3, r3, #3
 8003770:	2b00      	cmp	r3, #0
 8003772:	d003      	beq.n	800377c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 f8ee 	bl	8003956 <HAL_TIM_IC_CaptureCallback>
 800377a:	e005      	b.n	8003788 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 f8e0 	bl	8003942 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f8f1 	bl	800396a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b04      	cmp	r3, #4
 800379a:	d122      	bne.n	80037e2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f003 0304 	and.w	r3, r3, #4
 80037a6:	2b04      	cmp	r3, #4
 80037a8:	d11b      	bne.n	80037e2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f06f 0204 	mvn.w	r2, #4
 80037b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2202      	movs	r2, #2
 80037b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d003      	beq.n	80037d0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f8c4 	bl	8003956 <HAL_TIM_IC_CaptureCallback>
 80037ce:	e005      	b.n	80037dc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 f8b6 	bl	8003942 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f8c7 	bl	800396a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	f003 0308 	and.w	r3, r3, #8
 80037ec:	2b08      	cmp	r3, #8
 80037ee:	d122      	bne.n	8003836 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	f003 0308 	and.w	r3, r3, #8
 80037fa:	2b08      	cmp	r3, #8
 80037fc:	d11b      	bne.n	8003836 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f06f 0208 	mvn.w	r2, #8
 8003806:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2204      	movs	r2, #4
 800380c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	69db      	ldr	r3, [r3, #28]
 8003814:	f003 0303 	and.w	r3, r3, #3
 8003818:	2b00      	cmp	r3, #0
 800381a:	d003      	beq.n	8003824 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 f89a 	bl	8003956 <HAL_TIM_IC_CaptureCallback>
 8003822:	e005      	b.n	8003830 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 f88c 	bl	8003942 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f89d 	bl	800396a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	f003 0310 	and.w	r3, r3, #16
 8003840:	2b10      	cmp	r3, #16
 8003842:	d122      	bne.n	800388a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	f003 0310 	and.w	r3, r3, #16
 800384e:	2b10      	cmp	r3, #16
 8003850:	d11b      	bne.n	800388a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f06f 0210 	mvn.w	r2, #16
 800385a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2208      	movs	r2, #8
 8003860:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	69db      	ldr	r3, [r3, #28]
 8003868:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800386c:	2b00      	cmp	r3, #0
 800386e:	d003      	beq.n	8003878 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f870 	bl	8003956 <HAL_TIM_IC_CaptureCallback>
 8003876:	e005      	b.n	8003884 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 f862 	bl	8003942 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f873 	bl	800396a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b01      	cmp	r3, #1
 8003896:	d10e      	bne.n	80038b6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d107      	bne.n	80038b6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f06f 0201 	mvn.w	r2, #1
 80038ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7fc ffc3 	bl	800083c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c0:	2b80      	cmp	r3, #128	; 0x80
 80038c2:	d10e      	bne.n	80038e2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ce:	2b80      	cmp	r3, #128	; 0x80
 80038d0:	d107      	bne.n	80038e2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 f903 	bl	8003ae8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ec:	2b40      	cmp	r3, #64	; 0x40
 80038ee:	d10e      	bne.n	800390e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fa:	2b40      	cmp	r3, #64	; 0x40
 80038fc:	d107      	bne.n	800390e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003906:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 f838 	bl	800397e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	f003 0320 	and.w	r3, r3, #32
 8003918:	2b20      	cmp	r3, #32
 800391a:	d10e      	bne.n	800393a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	f003 0320 	and.w	r3, r3, #32
 8003926:	2b20      	cmp	r3, #32
 8003928:	d107      	bne.n	800393a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f06f 0220 	mvn.w	r2, #32
 8003932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 f8cd 	bl	8003ad4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800393a:	bf00      	nop
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003942:	b480      	push	{r7}
 8003944:	b083      	sub	sp, #12
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003956:	b480      	push	{r7}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800395e:	bf00      	nop
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr

0800396a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800396a:	b480      	push	{r7}
 800396c:	b083      	sub	sp, #12
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003972:	bf00      	nop
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800397e:	b480      	push	{r7}
 8003980:	b083      	sub	sp, #12
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
	...

08003994 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a40      	ldr	r2, [pc, #256]	; (8003aa8 <TIM_Base_SetConfig+0x114>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d013      	beq.n	80039d4 <TIM_Base_SetConfig+0x40>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b2:	d00f      	beq.n	80039d4 <TIM_Base_SetConfig+0x40>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a3d      	ldr	r2, [pc, #244]	; (8003aac <TIM_Base_SetConfig+0x118>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d00b      	beq.n	80039d4 <TIM_Base_SetConfig+0x40>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a3c      	ldr	r2, [pc, #240]	; (8003ab0 <TIM_Base_SetConfig+0x11c>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d007      	beq.n	80039d4 <TIM_Base_SetConfig+0x40>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a3b      	ldr	r2, [pc, #236]	; (8003ab4 <TIM_Base_SetConfig+0x120>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d003      	beq.n	80039d4 <TIM_Base_SetConfig+0x40>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a3a      	ldr	r2, [pc, #232]	; (8003ab8 <TIM_Base_SetConfig+0x124>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d108      	bne.n	80039e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a2f      	ldr	r2, [pc, #188]	; (8003aa8 <TIM_Base_SetConfig+0x114>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d02b      	beq.n	8003a46 <TIM_Base_SetConfig+0xb2>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039f4:	d027      	beq.n	8003a46 <TIM_Base_SetConfig+0xb2>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a2c      	ldr	r2, [pc, #176]	; (8003aac <TIM_Base_SetConfig+0x118>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d023      	beq.n	8003a46 <TIM_Base_SetConfig+0xb2>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a2b      	ldr	r2, [pc, #172]	; (8003ab0 <TIM_Base_SetConfig+0x11c>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d01f      	beq.n	8003a46 <TIM_Base_SetConfig+0xb2>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a2a      	ldr	r2, [pc, #168]	; (8003ab4 <TIM_Base_SetConfig+0x120>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d01b      	beq.n	8003a46 <TIM_Base_SetConfig+0xb2>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a29      	ldr	r2, [pc, #164]	; (8003ab8 <TIM_Base_SetConfig+0x124>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d017      	beq.n	8003a46 <TIM_Base_SetConfig+0xb2>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a28      	ldr	r2, [pc, #160]	; (8003abc <TIM_Base_SetConfig+0x128>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d013      	beq.n	8003a46 <TIM_Base_SetConfig+0xb2>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a27      	ldr	r2, [pc, #156]	; (8003ac0 <TIM_Base_SetConfig+0x12c>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d00f      	beq.n	8003a46 <TIM_Base_SetConfig+0xb2>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a26      	ldr	r2, [pc, #152]	; (8003ac4 <TIM_Base_SetConfig+0x130>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d00b      	beq.n	8003a46 <TIM_Base_SetConfig+0xb2>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a25      	ldr	r2, [pc, #148]	; (8003ac8 <TIM_Base_SetConfig+0x134>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d007      	beq.n	8003a46 <TIM_Base_SetConfig+0xb2>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a24      	ldr	r2, [pc, #144]	; (8003acc <TIM_Base_SetConfig+0x138>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d003      	beq.n	8003a46 <TIM_Base_SetConfig+0xb2>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a23      	ldr	r2, [pc, #140]	; (8003ad0 <TIM_Base_SetConfig+0x13c>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d108      	bne.n	8003a58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a0a      	ldr	r2, [pc, #40]	; (8003aa8 <TIM_Base_SetConfig+0x114>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d003      	beq.n	8003a8c <TIM_Base_SetConfig+0xf8>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a0c      	ldr	r2, [pc, #48]	; (8003ab8 <TIM_Base_SetConfig+0x124>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d103      	bne.n	8003a94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	691a      	ldr	r2, [r3, #16]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	615a      	str	r2, [r3, #20]
}
 8003a9a:	bf00      	nop
 8003a9c:	3714      	adds	r7, #20
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	40010000 	.word	0x40010000
 8003aac:	40000400 	.word	0x40000400
 8003ab0:	40000800 	.word	0x40000800
 8003ab4:	40000c00 	.word	0x40000c00
 8003ab8:	40010400 	.word	0x40010400
 8003abc:	40014000 	.word	0x40014000
 8003ac0:	40014400 	.word	0x40014400
 8003ac4:	40014800 	.word	0x40014800
 8003ac8:	40001800 	.word	0x40001800
 8003acc:	40001c00 	.word	0x40001c00
 8003ad0:	40002000 	.word	0x40002000

08003ad4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e03f      	b.n	8003b8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d106      	bne.n	8003b28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7fc feca 	bl	80008bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2224      	movs	r2, #36	; 0x24
 8003b2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 f829 	bl	8003b98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	691a      	ldr	r2, [r3, #16]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	695a      	ldr	r2, [r3, #20]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68da      	ldr	r2, [r3, #12]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2220      	movs	r2, #32
 8003b88:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3708      	adds	r7, #8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
	...

08003b98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b9c:	b0bd      	sub	sp, #244	; 0xf4
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bb4:	68d9      	ldr	r1, [r3, #12]
 8003bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	ea40 0301 	orr.w	r3, r0, r1
 8003bc0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8003be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003bf0:	f021 010c 	bic.w	r1, r1, #12
 8003bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003bfe:	430b      	orrs	r3, r1
 8003c00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c12:	6999      	ldr	r1, [r3, #24]
 8003c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	ea40 0301 	orr.w	r3, r0, r1
 8003c1e:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c2a:	f040 81a5 	bne.w	8003f78 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	4bcd      	ldr	r3, [pc, #820]	; (8003f6c <UART_SetConfig+0x3d4>)
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d006      	beq.n	8003c48 <UART_SetConfig+0xb0>
 8003c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	4bcb      	ldr	r3, [pc, #812]	; (8003f70 <UART_SetConfig+0x3d8>)
 8003c42:	429a      	cmp	r2, r3
 8003c44:	f040 80cb 	bne.w	8003dde <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c48:	f7fe fd9e 	bl	8002788 <HAL_RCC_GetPCLK2Freq>
 8003c4c:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c50:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003c54:	461c      	mov	r4, r3
 8003c56:	f04f 0500 	mov.w	r5, #0
 8003c5a:	4622      	mov	r2, r4
 8003c5c:	462b      	mov	r3, r5
 8003c5e:	1891      	adds	r1, r2, r2
 8003c60:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8003c64:	415b      	adcs	r3, r3
 8003c66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003c6a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003c6e:	1912      	adds	r2, r2, r4
 8003c70:	eb45 0303 	adc.w	r3, r5, r3
 8003c74:	f04f 0000 	mov.w	r0, #0
 8003c78:	f04f 0100 	mov.w	r1, #0
 8003c7c:	00d9      	lsls	r1, r3, #3
 8003c7e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c82:	00d0      	lsls	r0, r2, #3
 8003c84:	4602      	mov	r2, r0
 8003c86:	460b      	mov	r3, r1
 8003c88:	1911      	adds	r1, r2, r4
 8003c8a:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8003c8e:	416b      	adcs	r3, r5
 8003c90:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	f04f 0300 	mov.w	r3, #0
 8003ca0:	1891      	adds	r1, r2, r2
 8003ca2:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8003ca6:	415b      	adcs	r3, r3
 8003ca8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003cac:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003cb0:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8003cb4:	f7fc faac 	bl	8000210 <__aeabi_uldivmod>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	460b      	mov	r3, r1
 8003cbc:	4bad      	ldr	r3, [pc, #692]	; (8003f74 <UART_SetConfig+0x3dc>)
 8003cbe:	fba3 2302 	umull	r2, r3, r3, r2
 8003cc2:	095b      	lsrs	r3, r3, #5
 8003cc4:	011e      	lsls	r6, r3, #4
 8003cc6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003cca:	461c      	mov	r4, r3
 8003ccc:	f04f 0500 	mov.w	r5, #0
 8003cd0:	4622      	mov	r2, r4
 8003cd2:	462b      	mov	r3, r5
 8003cd4:	1891      	adds	r1, r2, r2
 8003cd6:	67b9      	str	r1, [r7, #120]	; 0x78
 8003cd8:	415b      	adcs	r3, r3
 8003cda:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003cdc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003ce0:	1912      	adds	r2, r2, r4
 8003ce2:	eb45 0303 	adc.w	r3, r5, r3
 8003ce6:	f04f 0000 	mov.w	r0, #0
 8003cea:	f04f 0100 	mov.w	r1, #0
 8003cee:	00d9      	lsls	r1, r3, #3
 8003cf0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003cf4:	00d0      	lsls	r0, r2, #3
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	1911      	adds	r1, r2, r4
 8003cfc:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8003d00:	416b      	adcs	r3, r5
 8003d02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	f04f 0300 	mov.w	r3, #0
 8003d12:	1891      	adds	r1, r2, r2
 8003d14:	6739      	str	r1, [r7, #112]	; 0x70
 8003d16:	415b      	adcs	r3, r3
 8003d18:	677b      	str	r3, [r7, #116]	; 0x74
 8003d1a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003d1e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8003d22:	f7fc fa75 	bl	8000210 <__aeabi_uldivmod>
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	4b92      	ldr	r3, [pc, #584]	; (8003f74 <UART_SetConfig+0x3dc>)
 8003d2c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d30:	095b      	lsrs	r3, r3, #5
 8003d32:	2164      	movs	r1, #100	; 0x64
 8003d34:	fb01 f303 	mul.w	r3, r1, r3
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	3332      	adds	r3, #50	; 0x32
 8003d3e:	4a8d      	ldr	r2, [pc, #564]	; (8003f74 <UART_SetConfig+0x3dc>)
 8003d40:	fba2 2303 	umull	r2, r3, r2, r3
 8003d44:	095b      	lsrs	r3, r3, #5
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d4c:	441e      	add	r6, r3
 8003d4e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003d52:	4618      	mov	r0, r3
 8003d54:	f04f 0100 	mov.w	r1, #0
 8003d58:	4602      	mov	r2, r0
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	1894      	adds	r4, r2, r2
 8003d5e:	66bc      	str	r4, [r7, #104]	; 0x68
 8003d60:	415b      	adcs	r3, r3
 8003d62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d64:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003d68:	1812      	adds	r2, r2, r0
 8003d6a:	eb41 0303 	adc.w	r3, r1, r3
 8003d6e:	f04f 0400 	mov.w	r4, #0
 8003d72:	f04f 0500 	mov.w	r5, #0
 8003d76:	00dd      	lsls	r5, r3, #3
 8003d78:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003d7c:	00d4      	lsls	r4, r2, #3
 8003d7e:	4622      	mov	r2, r4
 8003d80:	462b      	mov	r3, r5
 8003d82:	1814      	adds	r4, r2, r0
 8003d84:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8003d88:	414b      	adcs	r3, r1
 8003d8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	461a      	mov	r2, r3
 8003d96:	f04f 0300 	mov.w	r3, #0
 8003d9a:	1891      	adds	r1, r2, r2
 8003d9c:	6639      	str	r1, [r7, #96]	; 0x60
 8003d9e:	415b      	adcs	r3, r3
 8003da0:	667b      	str	r3, [r7, #100]	; 0x64
 8003da2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003da6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003daa:	f7fc fa31 	bl	8000210 <__aeabi_uldivmod>
 8003dae:	4602      	mov	r2, r0
 8003db0:	460b      	mov	r3, r1
 8003db2:	4b70      	ldr	r3, [pc, #448]	; (8003f74 <UART_SetConfig+0x3dc>)
 8003db4:	fba3 1302 	umull	r1, r3, r3, r2
 8003db8:	095b      	lsrs	r3, r3, #5
 8003dba:	2164      	movs	r1, #100	; 0x64
 8003dbc:	fb01 f303 	mul.w	r3, r1, r3
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	3332      	adds	r3, #50	; 0x32
 8003dc6:	4a6b      	ldr	r2, [pc, #428]	; (8003f74 <UART_SetConfig+0x3dc>)
 8003dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dcc:	095b      	lsrs	r3, r3, #5
 8003dce:	f003 0207 	and.w	r2, r3, #7
 8003dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4432      	add	r2, r6
 8003dda:	609a      	str	r2, [r3, #8]
 8003ddc:	e26d      	b.n	80042ba <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003dde:	f7fe fcbf 	bl	8002760 <HAL_RCC_GetPCLK1Freq>
 8003de2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003de6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003dea:	461c      	mov	r4, r3
 8003dec:	f04f 0500 	mov.w	r5, #0
 8003df0:	4622      	mov	r2, r4
 8003df2:	462b      	mov	r3, r5
 8003df4:	1891      	adds	r1, r2, r2
 8003df6:	65b9      	str	r1, [r7, #88]	; 0x58
 8003df8:	415b      	adcs	r3, r3
 8003dfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003dfc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e00:	1912      	adds	r2, r2, r4
 8003e02:	eb45 0303 	adc.w	r3, r5, r3
 8003e06:	f04f 0000 	mov.w	r0, #0
 8003e0a:	f04f 0100 	mov.w	r1, #0
 8003e0e:	00d9      	lsls	r1, r3, #3
 8003e10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e14:	00d0      	lsls	r0, r2, #3
 8003e16:	4602      	mov	r2, r0
 8003e18:	460b      	mov	r3, r1
 8003e1a:	1911      	adds	r1, r2, r4
 8003e1c:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8003e20:	416b      	adcs	r3, r5
 8003e22:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	f04f 0300 	mov.w	r3, #0
 8003e32:	1891      	adds	r1, r2, r2
 8003e34:	6539      	str	r1, [r7, #80]	; 0x50
 8003e36:	415b      	adcs	r3, r3
 8003e38:	657b      	str	r3, [r7, #84]	; 0x54
 8003e3a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003e3e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8003e42:	f7fc f9e5 	bl	8000210 <__aeabi_uldivmod>
 8003e46:	4602      	mov	r2, r0
 8003e48:	460b      	mov	r3, r1
 8003e4a:	4b4a      	ldr	r3, [pc, #296]	; (8003f74 <UART_SetConfig+0x3dc>)
 8003e4c:	fba3 2302 	umull	r2, r3, r3, r2
 8003e50:	095b      	lsrs	r3, r3, #5
 8003e52:	011e      	lsls	r6, r3, #4
 8003e54:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003e58:	461c      	mov	r4, r3
 8003e5a:	f04f 0500 	mov.w	r5, #0
 8003e5e:	4622      	mov	r2, r4
 8003e60:	462b      	mov	r3, r5
 8003e62:	1891      	adds	r1, r2, r2
 8003e64:	64b9      	str	r1, [r7, #72]	; 0x48
 8003e66:	415b      	adcs	r3, r3
 8003e68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e6a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e6e:	1912      	adds	r2, r2, r4
 8003e70:	eb45 0303 	adc.w	r3, r5, r3
 8003e74:	f04f 0000 	mov.w	r0, #0
 8003e78:	f04f 0100 	mov.w	r1, #0
 8003e7c:	00d9      	lsls	r1, r3, #3
 8003e7e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e82:	00d0      	lsls	r0, r2, #3
 8003e84:	4602      	mov	r2, r0
 8003e86:	460b      	mov	r3, r1
 8003e88:	1911      	adds	r1, r2, r4
 8003e8a:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8003e8e:	416b      	adcs	r3, r5
 8003e90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	f04f 0300 	mov.w	r3, #0
 8003ea0:	1891      	adds	r1, r2, r2
 8003ea2:	6439      	str	r1, [r7, #64]	; 0x40
 8003ea4:	415b      	adcs	r3, r3
 8003ea6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ea8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003eac:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8003eb0:	f7fc f9ae 	bl	8000210 <__aeabi_uldivmod>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	4b2e      	ldr	r3, [pc, #184]	; (8003f74 <UART_SetConfig+0x3dc>)
 8003eba:	fba3 1302 	umull	r1, r3, r3, r2
 8003ebe:	095b      	lsrs	r3, r3, #5
 8003ec0:	2164      	movs	r1, #100	; 0x64
 8003ec2:	fb01 f303 	mul.w	r3, r1, r3
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	3332      	adds	r3, #50	; 0x32
 8003ecc:	4a29      	ldr	r2, [pc, #164]	; (8003f74 <UART_SetConfig+0x3dc>)
 8003ece:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed2:	095b      	lsrs	r3, r3, #5
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003eda:	441e      	add	r6, r3
 8003edc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f04f 0100 	mov.w	r1, #0
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	460b      	mov	r3, r1
 8003eea:	1894      	adds	r4, r2, r2
 8003eec:	63bc      	str	r4, [r7, #56]	; 0x38
 8003eee:	415b      	adcs	r3, r3
 8003ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ef2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ef6:	1812      	adds	r2, r2, r0
 8003ef8:	eb41 0303 	adc.w	r3, r1, r3
 8003efc:	f04f 0400 	mov.w	r4, #0
 8003f00:	f04f 0500 	mov.w	r5, #0
 8003f04:	00dd      	lsls	r5, r3, #3
 8003f06:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f0a:	00d4      	lsls	r4, r2, #3
 8003f0c:	4622      	mov	r2, r4
 8003f0e:	462b      	mov	r3, r5
 8003f10:	1814      	adds	r4, r2, r0
 8003f12:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8003f16:	414b      	adcs	r3, r1
 8003f18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	461a      	mov	r2, r3
 8003f24:	f04f 0300 	mov.w	r3, #0
 8003f28:	1891      	adds	r1, r2, r2
 8003f2a:	6339      	str	r1, [r7, #48]	; 0x30
 8003f2c:	415b      	adcs	r3, r3
 8003f2e:	637b      	str	r3, [r7, #52]	; 0x34
 8003f30:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003f34:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003f38:	f7fc f96a 	bl	8000210 <__aeabi_uldivmod>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	460b      	mov	r3, r1
 8003f40:	4b0c      	ldr	r3, [pc, #48]	; (8003f74 <UART_SetConfig+0x3dc>)
 8003f42:	fba3 1302 	umull	r1, r3, r3, r2
 8003f46:	095b      	lsrs	r3, r3, #5
 8003f48:	2164      	movs	r1, #100	; 0x64
 8003f4a:	fb01 f303 	mul.w	r3, r1, r3
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	00db      	lsls	r3, r3, #3
 8003f52:	3332      	adds	r3, #50	; 0x32
 8003f54:	4a07      	ldr	r2, [pc, #28]	; (8003f74 <UART_SetConfig+0x3dc>)
 8003f56:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5a:	095b      	lsrs	r3, r3, #5
 8003f5c:	f003 0207 	and.w	r2, r3, #7
 8003f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4432      	add	r2, r6
 8003f68:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003f6a:	e1a6      	b.n	80042ba <UART_SetConfig+0x722>
 8003f6c:	40011000 	.word	0x40011000
 8003f70:	40011400 	.word	0x40011400
 8003f74:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	4bd1      	ldr	r3, [pc, #836]	; (80042c4 <UART_SetConfig+0x72c>)
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d006      	beq.n	8003f92 <UART_SetConfig+0x3fa>
 8003f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	4bcf      	ldr	r3, [pc, #828]	; (80042c8 <UART_SetConfig+0x730>)
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	f040 80ca 	bne.w	8004126 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f92:	f7fe fbf9 	bl	8002788 <HAL_RCC_GetPCLK2Freq>
 8003f96:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f9a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003f9e:	461c      	mov	r4, r3
 8003fa0:	f04f 0500 	mov.w	r5, #0
 8003fa4:	4622      	mov	r2, r4
 8003fa6:	462b      	mov	r3, r5
 8003fa8:	1891      	adds	r1, r2, r2
 8003faa:	62b9      	str	r1, [r7, #40]	; 0x28
 8003fac:	415b      	adcs	r3, r3
 8003fae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fb0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fb4:	1912      	adds	r2, r2, r4
 8003fb6:	eb45 0303 	adc.w	r3, r5, r3
 8003fba:	f04f 0000 	mov.w	r0, #0
 8003fbe:	f04f 0100 	mov.w	r1, #0
 8003fc2:	00d9      	lsls	r1, r3, #3
 8003fc4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fc8:	00d0      	lsls	r0, r2, #3
 8003fca:	4602      	mov	r2, r0
 8003fcc:	460b      	mov	r3, r1
 8003fce:	eb12 0a04 	adds.w	sl, r2, r4
 8003fd2:	eb43 0b05 	adc.w	fp, r3, r5
 8003fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f04f 0100 	mov.w	r1, #0
 8003fe2:	f04f 0200 	mov.w	r2, #0
 8003fe6:	f04f 0300 	mov.w	r3, #0
 8003fea:	008b      	lsls	r3, r1, #2
 8003fec:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003ff0:	0082      	lsls	r2, r0, #2
 8003ff2:	4650      	mov	r0, sl
 8003ff4:	4659      	mov	r1, fp
 8003ff6:	f7fc f90b 	bl	8000210 <__aeabi_uldivmod>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	4bb3      	ldr	r3, [pc, #716]	; (80042cc <UART_SetConfig+0x734>)
 8004000:	fba3 2302 	umull	r2, r3, r3, r2
 8004004:	095b      	lsrs	r3, r3, #5
 8004006:	011e      	lsls	r6, r3, #4
 8004008:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800400c:	4618      	mov	r0, r3
 800400e:	f04f 0100 	mov.w	r1, #0
 8004012:	4602      	mov	r2, r0
 8004014:	460b      	mov	r3, r1
 8004016:	1894      	adds	r4, r2, r2
 8004018:	623c      	str	r4, [r7, #32]
 800401a:	415b      	adcs	r3, r3
 800401c:	627b      	str	r3, [r7, #36]	; 0x24
 800401e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004022:	1812      	adds	r2, r2, r0
 8004024:	eb41 0303 	adc.w	r3, r1, r3
 8004028:	f04f 0400 	mov.w	r4, #0
 800402c:	f04f 0500 	mov.w	r5, #0
 8004030:	00dd      	lsls	r5, r3, #3
 8004032:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004036:	00d4      	lsls	r4, r2, #3
 8004038:	4622      	mov	r2, r4
 800403a:	462b      	mov	r3, r5
 800403c:	1814      	adds	r4, r2, r0
 800403e:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8004042:	414b      	adcs	r3, r1
 8004044:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	4618      	mov	r0, r3
 8004050:	f04f 0100 	mov.w	r1, #0
 8004054:	f04f 0200 	mov.w	r2, #0
 8004058:	f04f 0300 	mov.w	r3, #0
 800405c:	008b      	lsls	r3, r1, #2
 800405e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004062:	0082      	lsls	r2, r0, #2
 8004064:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8004068:	f7fc f8d2 	bl	8000210 <__aeabi_uldivmod>
 800406c:	4602      	mov	r2, r0
 800406e:	460b      	mov	r3, r1
 8004070:	4b96      	ldr	r3, [pc, #600]	; (80042cc <UART_SetConfig+0x734>)
 8004072:	fba3 1302 	umull	r1, r3, r3, r2
 8004076:	095b      	lsrs	r3, r3, #5
 8004078:	2164      	movs	r1, #100	; 0x64
 800407a:	fb01 f303 	mul.w	r3, r1, r3
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	011b      	lsls	r3, r3, #4
 8004082:	3332      	adds	r3, #50	; 0x32
 8004084:	4a91      	ldr	r2, [pc, #580]	; (80042cc <UART_SetConfig+0x734>)
 8004086:	fba2 2303 	umull	r2, r3, r2, r3
 800408a:	095b      	lsrs	r3, r3, #5
 800408c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004090:	441e      	add	r6, r3
 8004092:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004096:	4618      	mov	r0, r3
 8004098:	f04f 0100 	mov.w	r1, #0
 800409c:	4602      	mov	r2, r0
 800409e:	460b      	mov	r3, r1
 80040a0:	1894      	adds	r4, r2, r2
 80040a2:	61bc      	str	r4, [r7, #24]
 80040a4:	415b      	adcs	r3, r3
 80040a6:	61fb      	str	r3, [r7, #28]
 80040a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040ac:	1812      	adds	r2, r2, r0
 80040ae:	eb41 0303 	adc.w	r3, r1, r3
 80040b2:	f04f 0400 	mov.w	r4, #0
 80040b6:	f04f 0500 	mov.w	r5, #0
 80040ba:	00dd      	lsls	r5, r3, #3
 80040bc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80040c0:	00d4      	lsls	r4, r2, #3
 80040c2:	4622      	mov	r2, r4
 80040c4:	462b      	mov	r3, r5
 80040c6:	1814      	adds	r4, r2, r0
 80040c8:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 80040cc:	414b      	adcs	r3, r1
 80040ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80040d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	4618      	mov	r0, r3
 80040da:	f04f 0100 	mov.w	r1, #0
 80040de:	f04f 0200 	mov.w	r2, #0
 80040e2:	f04f 0300 	mov.w	r3, #0
 80040e6:	008b      	lsls	r3, r1, #2
 80040e8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80040ec:	0082      	lsls	r2, r0, #2
 80040ee:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80040f2:	f7fc f88d 	bl	8000210 <__aeabi_uldivmod>
 80040f6:	4602      	mov	r2, r0
 80040f8:	460b      	mov	r3, r1
 80040fa:	4b74      	ldr	r3, [pc, #464]	; (80042cc <UART_SetConfig+0x734>)
 80040fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004100:	095b      	lsrs	r3, r3, #5
 8004102:	2164      	movs	r1, #100	; 0x64
 8004104:	fb01 f303 	mul.w	r3, r1, r3
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	011b      	lsls	r3, r3, #4
 800410c:	3332      	adds	r3, #50	; 0x32
 800410e:	4a6f      	ldr	r2, [pc, #444]	; (80042cc <UART_SetConfig+0x734>)
 8004110:	fba2 2303 	umull	r2, r3, r2, r3
 8004114:	095b      	lsrs	r3, r3, #5
 8004116:	f003 020f 	and.w	r2, r3, #15
 800411a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4432      	add	r2, r6
 8004122:	609a      	str	r2, [r3, #8]
 8004124:	e0c9      	b.n	80042ba <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004126:	f7fe fb1b 	bl	8002760 <HAL_RCC_GetPCLK1Freq>
 800412a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800412e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004132:	461c      	mov	r4, r3
 8004134:	f04f 0500 	mov.w	r5, #0
 8004138:	4622      	mov	r2, r4
 800413a:	462b      	mov	r3, r5
 800413c:	1891      	adds	r1, r2, r2
 800413e:	6139      	str	r1, [r7, #16]
 8004140:	415b      	adcs	r3, r3
 8004142:	617b      	str	r3, [r7, #20]
 8004144:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004148:	1912      	adds	r2, r2, r4
 800414a:	eb45 0303 	adc.w	r3, r5, r3
 800414e:	f04f 0000 	mov.w	r0, #0
 8004152:	f04f 0100 	mov.w	r1, #0
 8004156:	00d9      	lsls	r1, r3, #3
 8004158:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800415c:	00d0      	lsls	r0, r2, #3
 800415e:	4602      	mov	r2, r0
 8004160:	460b      	mov	r3, r1
 8004162:	eb12 0804 	adds.w	r8, r2, r4
 8004166:	eb43 0905 	adc.w	r9, r3, r5
 800416a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	4618      	mov	r0, r3
 8004172:	f04f 0100 	mov.w	r1, #0
 8004176:	f04f 0200 	mov.w	r2, #0
 800417a:	f04f 0300 	mov.w	r3, #0
 800417e:	008b      	lsls	r3, r1, #2
 8004180:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004184:	0082      	lsls	r2, r0, #2
 8004186:	4640      	mov	r0, r8
 8004188:	4649      	mov	r1, r9
 800418a:	f7fc f841 	bl	8000210 <__aeabi_uldivmod>
 800418e:	4602      	mov	r2, r0
 8004190:	460b      	mov	r3, r1
 8004192:	4b4e      	ldr	r3, [pc, #312]	; (80042cc <UART_SetConfig+0x734>)
 8004194:	fba3 2302 	umull	r2, r3, r3, r2
 8004198:	095b      	lsrs	r3, r3, #5
 800419a:	011e      	lsls	r6, r3, #4
 800419c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80041a0:	4618      	mov	r0, r3
 80041a2:	f04f 0100 	mov.w	r1, #0
 80041a6:	4602      	mov	r2, r0
 80041a8:	460b      	mov	r3, r1
 80041aa:	1894      	adds	r4, r2, r2
 80041ac:	60bc      	str	r4, [r7, #8]
 80041ae:	415b      	adcs	r3, r3
 80041b0:	60fb      	str	r3, [r7, #12]
 80041b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041b6:	1812      	adds	r2, r2, r0
 80041b8:	eb41 0303 	adc.w	r3, r1, r3
 80041bc:	f04f 0400 	mov.w	r4, #0
 80041c0:	f04f 0500 	mov.w	r5, #0
 80041c4:	00dd      	lsls	r5, r3, #3
 80041c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80041ca:	00d4      	lsls	r4, r2, #3
 80041cc:	4622      	mov	r2, r4
 80041ce:	462b      	mov	r3, r5
 80041d0:	1814      	adds	r4, r2, r0
 80041d2:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80041d6:	414b      	adcs	r3, r1
 80041d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80041dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f04f 0100 	mov.w	r1, #0
 80041e8:	f04f 0200 	mov.w	r2, #0
 80041ec:	f04f 0300 	mov.w	r3, #0
 80041f0:	008b      	lsls	r3, r1, #2
 80041f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80041f6:	0082      	lsls	r2, r0, #2
 80041f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80041fc:	f7fc f808 	bl	8000210 <__aeabi_uldivmod>
 8004200:	4602      	mov	r2, r0
 8004202:	460b      	mov	r3, r1
 8004204:	4b31      	ldr	r3, [pc, #196]	; (80042cc <UART_SetConfig+0x734>)
 8004206:	fba3 1302 	umull	r1, r3, r3, r2
 800420a:	095b      	lsrs	r3, r3, #5
 800420c:	2164      	movs	r1, #100	; 0x64
 800420e:	fb01 f303 	mul.w	r3, r1, r3
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	011b      	lsls	r3, r3, #4
 8004216:	3332      	adds	r3, #50	; 0x32
 8004218:	4a2c      	ldr	r2, [pc, #176]	; (80042cc <UART_SetConfig+0x734>)
 800421a:	fba2 2303 	umull	r2, r3, r2, r3
 800421e:	095b      	lsrs	r3, r3, #5
 8004220:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004224:	441e      	add	r6, r3
 8004226:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800422a:	4618      	mov	r0, r3
 800422c:	f04f 0100 	mov.w	r1, #0
 8004230:	4602      	mov	r2, r0
 8004232:	460b      	mov	r3, r1
 8004234:	1894      	adds	r4, r2, r2
 8004236:	603c      	str	r4, [r7, #0]
 8004238:	415b      	adcs	r3, r3
 800423a:	607b      	str	r3, [r7, #4]
 800423c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004240:	1812      	adds	r2, r2, r0
 8004242:	eb41 0303 	adc.w	r3, r1, r3
 8004246:	f04f 0400 	mov.w	r4, #0
 800424a:	f04f 0500 	mov.w	r5, #0
 800424e:	00dd      	lsls	r5, r3, #3
 8004250:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004254:	00d4      	lsls	r4, r2, #3
 8004256:	4622      	mov	r2, r4
 8004258:	462b      	mov	r3, r5
 800425a:	1814      	adds	r4, r2, r0
 800425c:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8004260:	414b      	adcs	r3, r1
 8004262:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	4618      	mov	r0, r3
 800426e:	f04f 0100 	mov.w	r1, #0
 8004272:	f04f 0200 	mov.w	r2, #0
 8004276:	f04f 0300 	mov.w	r3, #0
 800427a:	008b      	lsls	r3, r1, #2
 800427c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004280:	0082      	lsls	r2, r0, #2
 8004282:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8004286:	f7fb ffc3 	bl	8000210 <__aeabi_uldivmod>
 800428a:	4602      	mov	r2, r0
 800428c:	460b      	mov	r3, r1
 800428e:	4b0f      	ldr	r3, [pc, #60]	; (80042cc <UART_SetConfig+0x734>)
 8004290:	fba3 1302 	umull	r1, r3, r3, r2
 8004294:	095b      	lsrs	r3, r3, #5
 8004296:	2164      	movs	r1, #100	; 0x64
 8004298:	fb01 f303 	mul.w	r3, r1, r3
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	011b      	lsls	r3, r3, #4
 80042a0:	3332      	adds	r3, #50	; 0x32
 80042a2:	4a0a      	ldr	r2, [pc, #40]	; (80042cc <UART_SetConfig+0x734>)
 80042a4:	fba2 2303 	umull	r2, r3, r2, r3
 80042a8:	095b      	lsrs	r3, r3, #5
 80042aa:	f003 020f 	and.w	r2, r3, #15
 80042ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4432      	add	r2, r6
 80042b6:	609a      	str	r2, [r3, #8]
}
 80042b8:	e7ff      	b.n	80042ba <UART_SetConfig+0x722>
 80042ba:	bf00      	nop
 80042bc:	37f4      	adds	r7, #244	; 0xf4
 80042be:	46bd      	mov	sp, r7
 80042c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042c4:	40011000 	.word	0x40011000
 80042c8:	40011400 	.word	0x40011400
 80042cc:	51eb851f 	.word	0x51eb851f

080042d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80042d0:	b084      	sub	sp, #16
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b084      	sub	sp, #16
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
 80042da:	f107 001c 	add.w	r0, r7, #28
 80042de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80042e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d122      	bne.n	800432e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80042fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004312:	2b01      	cmp	r3, #1
 8004314:	d105      	bne.n	8004322 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f001 fac0 	bl	80058a8 <USB_CoreReset>
 8004328:	4603      	mov	r3, r0
 800432a:	73fb      	strb	r3, [r7, #15]
 800432c:	e01a      	b.n	8004364 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f001 fab4 	bl	80058a8 <USB_CoreReset>
 8004340:	4603      	mov	r3, r0
 8004342:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004346:	2b00      	cmp	r3, #0
 8004348:	d106      	bne.n	8004358 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	639a      	str	r2, [r3, #56]	; 0x38
 8004356:	e005      	b.n	8004364 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004366:	2b01      	cmp	r3, #1
 8004368:	d10b      	bne.n	8004382 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f043 0206 	orr.w	r2, r3, #6
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f043 0220 	orr.w	r2, r3, #32
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004382:	7bfb      	ldrb	r3, [r7, #15]
}
 8004384:	4618      	mov	r0, r3
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800438e:	b004      	add	sp, #16
 8004390:	4770      	bx	lr
	...

08004394 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004394:	b480      	push	{r7}
 8004396:	b087      	sub	sp, #28
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	4613      	mov	r3, r2
 80043a0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80043a2:	79fb      	ldrb	r3, [r7, #7]
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d165      	bne.n	8004474 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	4a41      	ldr	r2, [pc, #260]	; (80044b0 <USB_SetTurnaroundTime+0x11c>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d906      	bls.n	80043be <USB_SetTurnaroundTime+0x2a>
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	4a40      	ldr	r2, [pc, #256]	; (80044b4 <USB_SetTurnaroundTime+0x120>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d202      	bcs.n	80043be <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80043b8:	230f      	movs	r3, #15
 80043ba:	617b      	str	r3, [r7, #20]
 80043bc:	e062      	b.n	8004484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	4a3c      	ldr	r2, [pc, #240]	; (80044b4 <USB_SetTurnaroundTime+0x120>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d306      	bcc.n	80043d4 <USB_SetTurnaroundTime+0x40>
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	4a3b      	ldr	r2, [pc, #236]	; (80044b8 <USB_SetTurnaroundTime+0x124>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d202      	bcs.n	80043d4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80043ce:	230e      	movs	r3, #14
 80043d0:	617b      	str	r3, [r7, #20]
 80043d2:	e057      	b.n	8004484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	4a38      	ldr	r2, [pc, #224]	; (80044b8 <USB_SetTurnaroundTime+0x124>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d306      	bcc.n	80043ea <USB_SetTurnaroundTime+0x56>
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	4a37      	ldr	r2, [pc, #220]	; (80044bc <USB_SetTurnaroundTime+0x128>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d202      	bcs.n	80043ea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80043e4:	230d      	movs	r3, #13
 80043e6:	617b      	str	r3, [r7, #20]
 80043e8:	e04c      	b.n	8004484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	4a33      	ldr	r2, [pc, #204]	; (80044bc <USB_SetTurnaroundTime+0x128>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d306      	bcc.n	8004400 <USB_SetTurnaroundTime+0x6c>
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	4a32      	ldr	r2, [pc, #200]	; (80044c0 <USB_SetTurnaroundTime+0x12c>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d802      	bhi.n	8004400 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80043fa:	230c      	movs	r3, #12
 80043fc:	617b      	str	r3, [r7, #20]
 80043fe:	e041      	b.n	8004484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	4a2f      	ldr	r2, [pc, #188]	; (80044c0 <USB_SetTurnaroundTime+0x12c>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d906      	bls.n	8004416 <USB_SetTurnaroundTime+0x82>
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	4a2e      	ldr	r2, [pc, #184]	; (80044c4 <USB_SetTurnaroundTime+0x130>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d802      	bhi.n	8004416 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004410:	230b      	movs	r3, #11
 8004412:	617b      	str	r3, [r7, #20]
 8004414:	e036      	b.n	8004484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	4a2a      	ldr	r2, [pc, #168]	; (80044c4 <USB_SetTurnaroundTime+0x130>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d906      	bls.n	800442c <USB_SetTurnaroundTime+0x98>
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	4a29      	ldr	r2, [pc, #164]	; (80044c8 <USB_SetTurnaroundTime+0x134>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d802      	bhi.n	800442c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004426:	230a      	movs	r3, #10
 8004428:	617b      	str	r3, [r7, #20]
 800442a:	e02b      	b.n	8004484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	4a26      	ldr	r2, [pc, #152]	; (80044c8 <USB_SetTurnaroundTime+0x134>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d906      	bls.n	8004442 <USB_SetTurnaroundTime+0xae>
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	4a25      	ldr	r2, [pc, #148]	; (80044cc <USB_SetTurnaroundTime+0x138>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d202      	bcs.n	8004442 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800443c:	2309      	movs	r3, #9
 800443e:	617b      	str	r3, [r7, #20]
 8004440:	e020      	b.n	8004484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	4a21      	ldr	r2, [pc, #132]	; (80044cc <USB_SetTurnaroundTime+0x138>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d306      	bcc.n	8004458 <USB_SetTurnaroundTime+0xc4>
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	4a20      	ldr	r2, [pc, #128]	; (80044d0 <USB_SetTurnaroundTime+0x13c>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d802      	bhi.n	8004458 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004452:	2308      	movs	r3, #8
 8004454:	617b      	str	r3, [r7, #20]
 8004456:	e015      	b.n	8004484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	4a1d      	ldr	r2, [pc, #116]	; (80044d0 <USB_SetTurnaroundTime+0x13c>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d906      	bls.n	800446e <USB_SetTurnaroundTime+0xda>
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	4a1c      	ldr	r2, [pc, #112]	; (80044d4 <USB_SetTurnaroundTime+0x140>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d202      	bcs.n	800446e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004468:	2307      	movs	r3, #7
 800446a:	617b      	str	r3, [r7, #20]
 800446c:	e00a      	b.n	8004484 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800446e:	2306      	movs	r3, #6
 8004470:	617b      	str	r3, [r7, #20]
 8004472:	e007      	b.n	8004484 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004474:	79fb      	ldrb	r3, [r7, #7]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d102      	bne.n	8004480 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800447a:	2309      	movs	r3, #9
 800447c:	617b      	str	r3, [r7, #20]
 800447e:	e001      	b.n	8004484 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004480:	2309      	movs	r3, #9
 8004482:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	68da      	ldr	r2, [r3, #12]
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	029b      	lsls	r3, r3, #10
 8004498:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800449c:	431a      	orrs	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	371c      	adds	r7, #28
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr
 80044b0:	00d8acbf 	.word	0x00d8acbf
 80044b4:	00e4e1c0 	.word	0x00e4e1c0
 80044b8:	00f42400 	.word	0x00f42400
 80044bc:	01067380 	.word	0x01067380
 80044c0:	011a499f 	.word	0x011a499f
 80044c4:	01312cff 	.word	0x01312cff
 80044c8:	014ca43f 	.word	0x014ca43f
 80044cc:	016e3600 	.word	0x016e3600
 80044d0:	01a6ab1f 	.word	0x01a6ab1f
 80044d4:	01e84800 	.word	0x01e84800

080044d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f043 0201 	orr.w	r2, r3, #1
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b083      	sub	sp, #12
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f023 0201 	bic.w	r2, r3, #1
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	460b      	mov	r3, r1
 8004526:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004534:	78fb      	ldrb	r3, [r7, #3]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d106      	bne.n	8004548 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	60da      	str	r2, [r3, #12]
 8004546:	e00b      	b.n	8004560 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004548:	78fb      	ldrb	r3, [r7, #3]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d106      	bne.n	800455c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	60da      	str	r2, [r3, #12]
 800455a:	e001      	b.n	8004560 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e003      	b.n	8004568 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004560:	2032      	movs	r0, #50	; 0x32
 8004562:	f7fc fb85 	bl	8000c70 <HAL_Delay>

  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3708      	adds	r7, #8
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004570:	b084      	sub	sp, #16
 8004572:	b580      	push	{r7, lr}
 8004574:	b086      	sub	sp, #24
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
 800457a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800457e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004582:	2300      	movs	r3, #0
 8004584:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800458a:	2300      	movs	r3, #0
 800458c:	613b      	str	r3, [r7, #16]
 800458e:	e009      	b.n	80045a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	3340      	adds	r3, #64	; 0x40
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	4413      	add	r3, r2
 800459a:	2200      	movs	r2, #0
 800459c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	3301      	adds	r3, #1
 80045a2:	613b      	str	r3, [r7, #16]
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	2b0e      	cmp	r3, #14
 80045a8:	d9f2      	bls.n	8004590 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80045aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d11c      	bne.n	80045ea <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045be:	f043 0302 	orr.w	r3, r3, #2
 80045c2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	601a      	str	r2, [r3, #0]
 80045e8:	e005      	b.n	80045f6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80045fc:	461a      	mov	r2, r3
 80045fe:	2300      	movs	r3, #0
 8004600:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004608:	4619      	mov	r1, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004610:	461a      	mov	r2, r3
 8004612:	680b      	ldr	r3, [r1, #0]
 8004614:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004618:	2b01      	cmp	r3, #1
 800461a:	d10c      	bne.n	8004636 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800461c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800461e:	2b00      	cmp	r3, #0
 8004620:	d104      	bne.n	800462c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004622:	2100      	movs	r1, #0
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 f949 	bl	80048bc <USB_SetDevSpeed>
 800462a:	e008      	b.n	800463e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800462c:	2101      	movs	r1, #1
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 f944 	bl	80048bc <USB_SetDevSpeed>
 8004634:	e003      	b.n	800463e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004636:	2103      	movs	r1, #3
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 f93f 	bl	80048bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800463e:	2110      	movs	r1, #16
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 f8f3 	bl	800482c <USB_FlushTxFifo>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d001      	beq.n	8004650 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 f911 	bl	8004878 <USB_FlushRxFifo>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d001      	beq.n	8004660 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004666:	461a      	mov	r2, r3
 8004668:	2300      	movs	r3, #0
 800466a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004672:	461a      	mov	r2, r3
 8004674:	2300      	movs	r3, #0
 8004676:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800467e:	461a      	mov	r2, r3
 8004680:	2300      	movs	r3, #0
 8004682:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004684:	2300      	movs	r3, #0
 8004686:	613b      	str	r3, [r7, #16]
 8004688:	e043      	b.n	8004712 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	015a      	lsls	r2, r3, #5
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	4413      	add	r3, r2
 8004692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800469c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046a0:	d118      	bne.n	80046d4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d10a      	bne.n	80046be <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	015a      	lsls	r2, r3, #5
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	4413      	add	r3, r2
 80046b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b4:	461a      	mov	r2, r3
 80046b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80046ba:	6013      	str	r3, [r2, #0]
 80046bc:	e013      	b.n	80046e6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	015a      	lsls	r2, r3, #5
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ca:	461a      	mov	r2, r3
 80046cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80046d0:	6013      	str	r3, [r2, #0]
 80046d2:	e008      	b.n	80046e6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	015a      	lsls	r2, r3, #5
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	4413      	add	r3, r2
 80046dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e0:	461a      	mov	r2, r3
 80046e2:	2300      	movs	r3, #0
 80046e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	015a      	lsls	r2, r3, #5
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f2:	461a      	mov	r2, r3
 80046f4:	2300      	movs	r3, #0
 80046f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004704:	461a      	mov	r2, r3
 8004706:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800470a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	3301      	adds	r3, #1
 8004710:	613b      	str	r3, [r7, #16]
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	429a      	cmp	r2, r3
 8004718:	d3b7      	bcc.n	800468a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800471a:	2300      	movs	r3, #0
 800471c:	613b      	str	r3, [r7, #16]
 800471e:	e043      	b.n	80047a8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	015a      	lsls	r2, r3, #5
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4413      	add	r3, r2
 8004728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004732:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004736:	d118      	bne.n	800476a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10a      	bne.n	8004754 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	015a      	lsls	r2, r3, #5
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	4413      	add	r3, r2
 8004746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800474a:	461a      	mov	r2, r3
 800474c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004750:	6013      	str	r3, [r2, #0]
 8004752:	e013      	b.n	800477c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	015a      	lsls	r2, r3, #5
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4413      	add	r3, r2
 800475c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004760:	461a      	mov	r2, r3
 8004762:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004766:	6013      	str	r3, [r2, #0]
 8004768:	e008      	b.n	800477c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	015a      	lsls	r2, r3, #5
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4413      	add	r3, r2
 8004772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004776:	461a      	mov	r2, r3
 8004778:	2300      	movs	r3, #0
 800477a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	015a      	lsls	r2, r3, #5
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	4413      	add	r3, r2
 8004784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004788:	461a      	mov	r2, r3
 800478a:	2300      	movs	r3, #0
 800478c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	015a      	lsls	r2, r3, #5
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	4413      	add	r3, r2
 8004796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800479a:	461a      	mov	r2, r3
 800479c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	3301      	adds	r3, #1
 80047a6:	613b      	str	r3, [r7, #16]
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d3b7      	bcc.n	8004720 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047c2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80047d0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80047d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d105      	bne.n	80047e4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	f043 0210 	orr.w	r2, r3, #16
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	699a      	ldr	r2, [r3, #24]
 80047e8:	4b0f      	ldr	r3, [pc, #60]	; (8004828 <USB_DevInit+0x2b8>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80047f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d005      	beq.n	8004802 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	f043 0208 	orr.w	r2, r3, #8
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004804:	2b01      	cmp	r3, #1
 8004806:	d107      	bne.n	8004818 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004810:	f043 0304 	orr.w	r3, r3, #4
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004818:	7dfb      	ldrb	r3, [r7, #23]
}
 800481a:	4618      	mov	r0, r3
 800481c:	3718      	adds	r7, #24
 800481e:	46bd      	mov	sp, r7
 8004820:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004824:	b004      	add	sp, #16
 8004826:	4770      	bx	lr
 8004828:	803c3800 	.word	0x803c3800

0800482c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004836:	2300      	movs	r3, #0
 8004838:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	019b      	lsls	r3, r3, #6
 800483e:	f043 0220 	orr.w	r2, r3, #32
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	3301      	adds	r3, #1
 800484a:	60fb      	str	r3, [r7, #12]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	4a09      	ldr	r2, [pc, #36]	; (8004874 <USB_FlushTxFifo+0x48>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d901      	bls.n	8004858 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e006      	b.n	8004866 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	f003 0320 	and.w	r3, r3, #32
 8004860:	2b20      	cmp	r3, #32
 8004862:	d0f0      	beq.n	8004846 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3714      	adds	r7, #20
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	00030d40 	.word	0x00030d40

08004878 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004880:	2300      	movs	r3, #0
 8004882:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2210      	movs	r2, #16
 8004888:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	3301      	adds	r3, #1
 800488e:	60fb      	str	r3, [r7, #12]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4a09      	ldr	r2, [pc, #36]	; (80048b8 <USB_FlushRxFifo+0x40>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d901      	bls.n	800489c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e006      	b.n	80048aa <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	f003 0310 	and.w	r3, r3, #16
 80048a4:	2b10      	cmp	r3, #16
 80048a6:	d0f0      	beq.n	800488a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3714      	adds	r7, #20
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	00030d40 	.word	0x00030d40

080048bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	460b      	mov	r3, r1
 80048c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	78fb      	ldrb	r3, [r7, #3]
 80048d6:	68f9      	ldr	r1, [r7, #12]
 80048d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048dc:	4313      	orrs	r3, r2
 80048de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3714      	adds	r7, #20
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80048ee:	b480      	push	{r7}
 80048f0:	b087      	sub	sp, #28
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f003 0306 	and.w	r3, r3, #6
 8004906:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d102      	bne.n	8004914 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800490e:	2300      	movs	r3, #0
 8004910:	75fb      	strb	r3, [r7, #23]
 8004912:	e00a      	b.n	800492a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2b02      	cmp	r3, #2
 8004918:	d002      	beq.n	8004920 <USB_GetDevSpeed+0x32>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2b06      	cmp	r3, #6
 800491e:	d102      	bne.n	8004926 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004920:	2302      	movs	r3, #2
 8004922:	75fb      	strb	r3, [r7, #23]
 8004924:	e001      	b.n	800492a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004926:	230f      	movs	r3, #15
 8004928:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800492a:	7dfb      	ldrb	r3, [r7, #23]
}
 800492c:	4618      	mov	r0, r3
 800492e:	371c      	adds	r7, #28
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	785b      	ldrb	r3, [r3, #1]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d13a      	bne.n	80049ca <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800495a:	69da      	ldr	r2, [r3, #28]
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	f003 030f 	and.w	r3, r3, #15
 8004964:	2101      	movs	r1, #1
 8004966:	fa01 f303 	lsl.w	r3, r1, r3
 800496a:	b29b      	uxth	r3, r3
 800496c:	68f9      	ldr	r1, [r7, #12]
 800496e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004972:	4313      	orrs	r3, r2
 8004974:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	015a      	lsls	r2, r3, #5
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	4413      	add	r3, r2
 800497e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d155      	bne.n	8004a38 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	015a      	lsls	r2, r3, #5
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	4413      	add	r3, r2
 8004994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	78db      	ldrb	r3, [r3, #3]
 80049a6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80049a8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	059b      	lsls	r3, r3, #22
 80049ae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80049b0:	4313      	orrs	r3, r2
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	0151      	lsls	r1, r2, #5
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	440a      	add	r2, r1
 80049ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049c6:	6013      	str	r3, [r2, #0]
 80049c8:	e036      	b.n	8004a38 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049d0:	69da      	ldr	r2, [r3, #28]
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	f003 030f 	and.w	r3, r3, #15
 80049da:	2101      	movs	r1, #1
 80049dc:	fa01 f303 	lsl.w	r3, r1, r3
 80049e0:	041b      	lsls	r3, r3, #16
 80049e2:	68f9      	ldr	r1, [r7, #12]
 80049e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049e8:	4313      	orrs	r3, r2
 80049ea:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	015a      	lsls	r2, r3, #5
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d11a      	bne.n	8004a38 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	015a      	lsls	r2, r3, #5
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	4413      	add	r3, r2
 8004a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	78db      	ldrb	r3, [r3, #3]
 8004a1c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a1e:	430b      	orrs	r3, r1
 8004a20:	4313      	orrs	r3, r2
 8004a22:	68ba      	ldr	r2, [r7, #8]
 8004a24:	0151      	lsls	r1, r2, #5
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	440a      	add	r2, r1
 8004a2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a36:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
	...

08004a48 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	785b      	ldrb	r3, [r3, #1]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d161      	bne.n	8004b28 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	015a      	lsls	r2, r3, #5
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a7a:	d11f      	bne.n	8004abc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	015a      	lsls	r2, r3, #5
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	4413      	add	r3, r2
 8004a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68ba      	ldr	r2, [r7, #8]
 8004a8c:	0151      	lsls	r1, r2, #5
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	440a      	add	r2, r1
 8004a92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a96:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a9a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	015a      	lsls	r2, r3, #5
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	0151      	lsls	r1, r2, #5
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	440a      	add	r2, r1
 8004ab2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ab6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004aba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ac2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	f003 030f 	and.w	r3, r3, #15
 8004acc:	2101      	movs	r1, #1
 8004ace:	fa01 f303 	lsl.w	r3, r1, r3
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	43db      	mvns	r3, r3
 8004ad6:	68f9      	ldr	r1, [r7, #12]
 8004ad8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004adc:	4013      	ands	r3, r2
 8004ade:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ae6:	69da      	ldr	r2, [r3, #28]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	f003 030f 	and.w	r3, r3, #15
 8004af0:	2101      	movs	r1, #1
 8004af2:	fa01 f303 	lsl.w	r3, r1, r3
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	43db      	mvns	r3, r3
 8004afa:	68f9      	ldr	r1, [r7, #12]
 8004afc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b00:	4013      	ands	r3, r2
 8004b02:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	015a      	lsls	r2, r3, #5
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	0159      	lsls	r1, r3, #5
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	440b      	add	r3, r1
 8004b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b1e:	4619      	mov	r1, r3
 8004b20:	4b35      	ldr	r3, [pc, #212]	; (8004bf8 <USB_DeactivateEndpoint+0x1b0>)
 8004b22:	4013      	ands	r3, r2
 8004b24:	600b      	str	r3, [r1, #0]
 8004b26:	e060      	b.n	8004bea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	015a      	lsls	r2, r3, #5
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	4413      	add	r3, r2
 8004b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b3e:	d11f      	bne.n	8004b80 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	015a      	lsls	r2, r3, #5
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	4413      	add	r3, r2
 8004b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68ba      	ldr	r2, [r7, #8]
 8004b50:	0151      	lsls	r1, r2, #5
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	440a      	add	r2, r1
 8004b56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b5e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	015a      	lsls	r2, r3, #5
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	0151      	lsls	r1, r2, #5
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	440a      	add	r2, r1
 8004b76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b7e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	f003 030f 	and.w	r3, r3, #15
 8004b90:	2101      	movs	r1, #1
 8004b92:	fa01 f303 	lsl.w	r3, r1, r3
 8004b96:	041b      	lsls	r3, r3, #16
 8004b98:	43db      	mvns	r3, r3
 8004b9a:	68f9      	ldr	r1, [r7, #12]
 8004b9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004baa:	69da      	ldr	r2, [r3, #28]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	f003 030f 	and.w	r3, r3, #15
 8004bb4:	2101      	movs	r1, #1
 8004bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8004bba:	041b      	lsls	r3, r3, #16
 8004bbc:	43db      	mvns	r3, r3
 8004bbe:	68f9      	ldr	r1, [r7, #12]
 8004bc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	015a      	lsls	r2, r3, #5
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	4413      	add	r3, r2
 8004bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	0159      	lsls	r1, r3, #5
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	440b      	add	r3, r1
 8004bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be2:	4619      	mov	r1, r3
 8004be4:	4b05      	ldr	r3, [pc, #20]	; (8004bfc <USB_DeactivateEndpoint+0x1b4>)
 8004be6:	4013      	ands	r3, r2
 8004be8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3714      	adds	r7, #20
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr
 8004bf8:	ec337800 	.word	0xec337800
 8004bfc:	eff37800 	.word	0xeff37800

08004c00 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b08a      	sub	sp, #40	; 0x28
 8004c04:	af02      	add	r7, sp, #8
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	785b      	ldrb	r3, [r3, #1]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	f040 815c 	bne.w	8004eda <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d132      	bne.n	8004c90 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	015a      	lsls	r2, r3, #5
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	4413      	add	r3, r2
 8004c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	69ba      	ldr	r2, [r7, #24]
 8004c3a:	0151      	lsls	r1, r2, #5
 8004c3c:	69fa      	ldr	r2, [r7, #28]
 8004c3e:	440a      	add	r2, r1
 8004c40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c44:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c48:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	015a      	lsls	r2, r3, #5
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	4413      	add	r3, r2
 8004c56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	69ba      	ldr	r2, [r7, #24]
 8004c5e:	0151      	lsls	r1, r2, #5
 8004c60:	69fa      	ldr	r2, [r7, #28]
 8004c62:	440a      	add	r2, r1
 8004c64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c6c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	015a      	lsls	r2, r3, #5
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	4413      	add	r3, r2
 8004c76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	69ba      	ldr	r2, [r7, #24]
 8004c7e:	0151      	lsls	r1, r2, #5
 8004c80:	69fa      	ldr	r2, [r7, #28]
 8004c82:	440a      	add	r2, r1
 8004c84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c88:	0cdb      	lsrs	r3, r3, #19
 8004c8a:	04db      	lsls	r3, r3, #19
 8004c8c:	6113      	str	r3, [r2, #16]
 8004c8e:	e074      	b.n	8004d7a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	015a      	lsls	r2, r3, #5
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	4413      	add	r3, r2
 8004c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	69ba      	ldr	r2, [r7, #24]
 8004ca0:	0151      	lsls	r1, r2, #5
 8004ca2:	69fa      	ldr	r2, [r7, #28]
 8004ca4:	440a      	add	r2, r1
 8004ca6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004caa:	0cdb      	lsrs	r3, r3, #19
 8004cac:	04db      	lsls	r3, r3, #19
 8004cae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	015a      	lsls	r2, r3, #5
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	69ba      	ldr	r2, [r7, #24]
 8004cc0:	0151      	lsls	r1, r2, #5
 8004cc2:	69fa      	ldr	r2, [r7, #28]
 8004cc4:	440a      	add	r2, r1
 8004cc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004cce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004cd2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	015a      	lsls	r2, r3, #5
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce0:	691a      	ldr	r2, [r3, #16]
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	6959      	ldr	r1, [r3, #20]
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	440b      	add	r3, r1
 8004cec:	1e59      	subs	r1, r3, #1
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cf6:	04d9      	lsls	r1, r3, #19
 8004cf8:	4b9d      	ldr	r3, [pc, #628]	; (8004f70 <USB_EPStartXfer+0x370>)
 8004cfa:	400b      	ands	r3, r1
 8004cfc:	69b9      	ldr	r1, [r7, #24]
 8004cfe:	0148      	lsls	r0, r1, #5
 8004d00:	69f9      	ldr	r1, [r7, #28]
 8004d02:	4401      	add	r1, r0
 8004d04:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d18:	691a      	ldr	r2, [r3, #16]
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d22:	69b9      	ldr	r1, [r7, #24]
 8004d24:	0148      	lsls	r0, r1, #5
 8004d26:	69f9      	ldr	r1, [r7, #28]
 8004d28:	4401      	add	r1, r0
 8004d2a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	78db      	ldrb	r3, [r3, #3]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d11f      	bne.n	8004d7a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	015a      	lsls	r2, r3, #5
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	4413      	add	r3, r2
 8004d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	69ba      	ldr	r2, [r7, #24]
 8004d4a:	0151      	lsls	r1, r2, #5
 8004d4c:	69fa      	ldr	r2, [r7, #28]
 8004d4e:	440a      	add	r2, r1
 8004d50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d54:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004d58:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	015a      	lsls	r2, r3, #5
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	4413      	add	r3, r2
 8004d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	69ba      	ldr	r2, [r7, #24]
 8004d6a:	0151      	lsls	r1, r2, #5
 8004d6c:	69fa      	ldr	r2, [r7, #28]
 8004d6e:	440a      	add	r2, r1
 8004d70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d78:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004d7a:	79fb      	ldrb	r3, [r7, #7]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d14b      	bne.n	8004e18 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d009      	beq.n	8004d9c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	015a      	lsls	r2, r3, #5
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	4413      	add	r3, r2
 8004d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d94:	461a      	mov	r2, r3
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	78db      	ldrb	r3, [r3, #3]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d128      	bne.n	8004df6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d110      	bne.n	8004dd6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	69ba      	ldr	r2, [r7, #24]
 8004dc4:	0151      	lsls	r1, r2, #5
 8004dc6:	69fa      	ldr	r2, [r7, #28]
 8004dc8:	440a      	add	r2, r1
 8004dca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004dd2:	6013      	str	r3, [r2, #0]
 8004dd4:	e00f      	b.n	8004df6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	015a      	lsls	r2, r3, #5
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	4413      	add	r3, r2
 8004dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	69ba      	ldr	r2, [r7, #24]
 8004de6:	0151      	lsls	r1, r2, #5
 8004de8:	69fa      	ldr	r2, [r7, #28]
 8004dea:	440a      	add	r2, r1
 8004dec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004df4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	015a      	lsls	r2, r3, #5
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	69ba      	ldr	r2, [r7, #24]
 8004e06:	0151      	lsls	r1, r2, #5
 8004e08:	69fa      	ldr	r2, [r7, #28]
 8004e0a:	440a      	add	r2, r1
 8004e0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e10:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e14:	6013      	str	r3, [r2, #0]
 8004e16:	e12f      	b.n	8005078 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	015a      	lsls	r2, r3, #5
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	4413      	add	r3, r2
 8004e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	69ba      	ldr	r2, [r7, #24]
 8004e28:	0151      	lsls	r1, r2, #5
 8004e2a:	69fa      	ldr	r2, [r7, #28]
 8004e2c:	440a      	add	r2, r1
 8004e2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e36:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	78db      	ldrb	r3, [r3, #3]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d015      	beq.n	8004e6c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	695b      	ldr	r3, [r3, #20]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f000 8117 	beq.w	8005078 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	f003 030f 	and.w	r3, r3, #15
 8004e5a:	2101      	movs	r1, #1
 8004e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e60:	69f9      	ldr	r1, [r7, #28]
 8004e62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e66:	4313      	orrs	r3, r2
 8004e68:	634b      	str	r3, [r1, #52]	; 0x34
 8004e6a:	e105      	b.n	8005078 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d110      	bne.n	8004e9e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	015a      	lsls	r2, r3, #5
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	4413      	add	r3, r2
 8004e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	69ba      	ldr	r2, [r7, #24]
 8004e8c:	0151      	lsls	r1, r2, #5
 8004e8e:	69fa      	ldr	r2, [r7, #28]
 8004e90:	440a      	add	r2, r1
 8004e92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e9a:	6013      	str	r3, [r2, #0]
 8004e9c:	e00f      	b.n	8004ebe <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	015a      	lsls	r2, r3, #5
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	69ba      	ldr	r2, [r7, #24]
 8004eae:	0151      	lsls	r1, r2, #5
 8004eb0:	69fa      	ldr	r2, [r7, #28]
 8004eb2:	440a      	add	r2, r1
 8004eb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ebc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	68d9      	ldr	r1, [r3, #12]
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	781a      	ldrb	r2, [r3, #0]
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	b298      	uxth	r0, r3
 8004ecc:	79fb      	ldrb	r3, [r7, #7]
 8004ece:	9300      	str	r3, [sp, #0]
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f000 fa2b 	bl	800532e <USB_WritePacket>
 8004ed8:	e0ce      	b.n	8005078 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	015a      	lsls	r2, r3, #5
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	0151      	lsls	r1, r2, #5
 8004eec:	69fa      	ldr	r2, [r7, #28]
 8004eee:	440a      	add	r2, r1
 8004ef0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ef4:	0cdb      	lsrs	r3, r3, #19
 8004ef6:	04db      	lsls	r3, r3, #19
 8004ef8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	015a      	lsls	r2, r3, #5
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	4413      	add	r3, r2
 8004f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	69ba      	ldr	r2, [r7, #24]
 8004f0a:	0151      	lsls	r1, r2, #5
 8004f0c:	69fa      	ldr	r2, [r7, #28]
 8004f0e:	440a      	add	r2, r1
 8004f10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f14:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f18:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f1c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d126      	bne.n	8004f74 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	015a      	lsls	r2, r3, #5
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f32:	691a      	ldr	r2, [r3, #16]
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f3c:	69b9      	ldr	r1, [r7, #24]
 8004f3e:	0148      	lsls	r0, r1, #5
 8004f40:	69f9      	ldr	r1, [r7, #28]
 8004f42:	4401      	add	r1, r0
 8004f44:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	015a      	lsls	r2, r3, #5
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	69ba      	ldr	r2, [r7, #24]
 8004f5c:	0151      	lsls	r1, r2, #5
 8004f5e:	69fa      	ldr	r2, [r7, #28]
 8004f60:	440a      	add	r2, r1
 8004f62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f6a:	6113      	str	r3, [r2, #16]
 8004f6c:	e036      	b.n	8004fdc <USB_EPStartXfer+0x3dc>
 8004f6e:	bf00      	nop
 8004f70:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	695a      	ldr	r2, [r3, #20]
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	1e5a      	subs	r2, r3, #1
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f88:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	015a      	lsls	r2, r3, #5
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	4413      	add	r3, r2
 8004f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f96:	691a      	ldr	r2, [r3, #16]
 8004f98:	8afb      	ldrh	r3, [r7, #22]
 8004f9a:	04d9      	lsls	r1, r3, #19
 8004f9c:	4b39      	ldr	r3, [pc, #228]	; (8005084 <USB_EPStartXfer+0x484>)
 8004f9e:	400b      	ands	r3, r1
 8004fa0:	69b9      	ldr	r1, [r7, #24]
 8004fa2:	0148      	lsls	r0, r1, #5
 8004fa4:	69f9      	ldr	r1, [r7, #28]
 8004fa6:	4401      	add	r1, r0
 8004fa8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004fac:	4313      	orrs	r3, r2
 8004fae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	015a      	lsls	r2, r3, #5
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fbc:	691a      	ldr	r2, [r3, #16]
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	8af9      	ldrh	r1, [r7, #22]
 8004fc4:	fb01 f303 	mul.w	r3, r1, r3
 8004fc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fcc:	69b9      	ldr	r1, [r7, #24]
 8004fce:	0148      	lsls	r0, r1, #5
 8004fd0:	69f9      	ldr	r1, [r7, #28]
 8004fd2:	4401      	add	r1, r0
 8004fd4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004fdc:	79fb      	ldrb	r3, [r7, #7]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d10d      	bne.n	8004ffe <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d009      	beq.n	8004ffe <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	68d9      	ldr	r1, [r3, #12]
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	015a      	lsls	r2, r3, #5
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ffa:	460a      	mov	r2, r1
 8004ffc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	78db      	ldrb	r3, [r3, #3]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d128      	bne.n	8005058 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005012:	2b00      	cmp	r3, #0
 8005014:	d110      	bne.n	8005038 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	015a      	lsls	r2, r3, #5
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	4413      	add	r3, r2
 800501e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	0151      	lsls	r1, r2, #5
 8005028:	69fa      	ldr	r2, [r7, #28]
 800502a:	440a      	add	r2, r1
 800502c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005030:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005034:	6013      	str	r3, [r2, #0]
 8005036:	e00f      	b.n	8005058 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	015a      	lsls	r2, r3, #5
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	4413      	add	r3, r2
 8005040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	69ba      	ldr	r2, [r7, #24]
 8005048:	0151      	lsls	r1, r2, #5
 800504a:	69fa      	ldr	r2, [r7, #28]
 800504c:	440a      	add	r2, r1
 800504e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005056:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	4413      	add	r3, r2
 8005060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	69ba      	ldr	r2, [r7, #24]
 8005068:	0151      	lsls	r1, r2, #5
 800506a:	69fa      	ldr	r2, [r7, #28]
 800506c:	440a      	add	r2, r1
 800506e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005072:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005076:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3720      	adds	r7, #32
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	1ff80000 	.word	0x1ff80000

08005088 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	4613      	mov	r3, r2
 8005094:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	785b      	ldrb	r3, [r3, #1]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	f040 80cd 	bne.w	8005244 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d132      	bne.n	8005118 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	015a      	lsls	r2, r3, #5
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	4413      	add	r3, r2
 80050ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	0151      	lsls	r1, r2, #5
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	440a      	add	r2, r1
 80050c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	0151      	lsls	r1, r2, #5
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	440a      	add	r2, r1
 80050ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	015a      	lsls	r2, r3, #5
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	4413      	add	r3, r2
 80050fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	0151      	lsls	r1, r2, #5
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	440a      	add	r2, r1
 800510c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005110:	0cdb      	lsrs	r3, r3, #19
 8005112:	04db      	lsls	r3, r3, #19
 8005114:	6113      	str	r3, [r2, #16]
 8005116:	e04e      	b.n	80051b6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	015a      	lsls	r2, r3, #5
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	4413      	add	r3, r2
 8005120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	0151      	lsls	r1, r2, #5
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	440a      	add	r2, r1
 800512e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005132:	0cdb      	lsrs	r3, r3, #19
 8005134:	04db      	lsls	r3, r3, #19
 8005136:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	015a      	lsls	r2, r3, #5
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	4413      	add	r3, r2
 8005140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	0151      	lsls	r1, r2, #5
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	440a      	add	r2, r1
 800514e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005152:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005156:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800515a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	695a      	ldr	r2, [r3, #20]
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	429a      	cmp	r2, r3
 8005166:	d903      	bls.n	8005170 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	689a      	ldr	r2, [r3, #8]
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	4413      	add	r3, r2
 8005178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	0151      	lsls	r1, r2, #5
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	440a      	add	r2, r1
 8005186:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800518a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800518e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	015a      	lsls	r2, r3, #5
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	4413      	add	r3, r2
 8005198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800519c:	691a      	ldr	r2, [r3, #16]
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051a6:	6939      	ldr	r1, [r7, #16]
 80051a8:	0148      	lsls	r0, r1, #5
 80051aa:	6979      	ldr	r1, [r7, #20]
 80051ac:	4401      	add	r1, r0
 80051ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80051b2:	4313      	orrs	r3, r2
 80051b4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80051b6:	79fb      	ldrb	r3, [r7, #7]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d11e      	bne.n	80051fa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d009      	beq.n	80051d8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	015a      	lsls	r2, r3, #5
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	4413      	add	r3, r2
 80051cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d0:	461a      	mov	r2, r3
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	0151      	lsls	r1, r2, #5
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	440a      	add	r2, r1
 80051ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051f6:	6013      	str	r3, [r2, #0]
 80051f8:	e092      	b.n	8005320 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	4413      	add	r3, r2
 8005202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	0151      	lsls	r1, r2, #5
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	440a      	add	r2, r1
 8005210:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005214:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005218:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d07e      	beq.n	8005320 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005228:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	f003 030f 	and.w	r3, r3, #15
 8005232:	2101      	movs	r1, #1
 8005234:	fa01 f303 	lsl.w	r3, r1, r3
 8005238:	6979      	ldr	r1, [r7, #20]
 800523a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800523e:	4313      	orrs	r3, r2
 8005240:	634b      	str	r3, [r1, #52]	; 0x34
 8005242:	e06d      	b.n	8005320 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	015a      	lsls	r2, r3, #5
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	4413      	add	r3, r2
 800524c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	0151      	lsls	r1, r2, #5
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	440a      	add	r2, r1
 800525a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800525e:	0cdb      	lsrs	r3, r3, #19
 8005260:	04db      	lsls	r3, r3, #19
 8005262:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	4413      	add	r3, r2
 800526c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	0151      	lsls	r1, r2, #5
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	440a      	add	r2, r1
 800527a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800527e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005282:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005286:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d003      	beq.n	8005298 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	689a      	ldr	r2, [r3, #8]
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	015a      	lsls	r2, r3, #5
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	4413      	add	r3, r2
 80052a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	0151      	lsls	r1, r2, #5
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	440a      	add	r2, r1
 80052ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052b6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	015a      	lsls	r2, r3, #5
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	4413      	add	r3, r2
 80052c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c4:	691a      	ldr	r2, [r3, #16]
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052ce:	6939      	ldr	r1, [r7, #16]
 80052d0:	0148      	lsls	r0, r1, #5
 80052d2:	6979      	ldr	r1, [r7, #20]
 80052d4:	4401      	add	r1, r0
 80052d6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80052da:	4313      	orrs	r3, r2
 80052dc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80052de:	79fb      	ldrb	r3, [r7, #7]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d10d      	bne.n	8005300 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d009      	beq.n	8005300 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	68d9      	ldr	r1, [r3, #12]
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	015a      	lsls	r2, r3, #5
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	4413      	add	r3, r2
 80052f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052fc:	460a      	mov	r2, r1
 80052fe:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	015a      	lsls	r2, r3, #5
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	4413      	add	r3, r2
 8005308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	0151      	lsls	r1, r2, #5
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	440a      	add	r2, r1
 8005316:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800531a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800531e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	371c      	adds	r7, #28
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800532e:	b480      	push	{r7}
 8005330:	b089      	sub	sp, #36	; 0x24
 8005332:	af00      	add	r7, sp, #0
 8005334:	60f8      	str	r0, [r7, #12]
 8005336:	60b9      	str	r1, [r7, #8]
 8005338:	4611      	mov	r1, r2
 800533a:	461a      	mov	r2, r3
 800533c:	460b      	mov	r3, r1
 800533e:	71fb      	strb	r3, [r7, #7]
 8005340:	4613      	mov	r3, r2
 8005342:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800534c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005350:	2b00      	cmp	r3, #0
 8005352:	d11a      	bne.n	800538a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005354:	88bb      	ldrh	r3, [r7, #4]
 8005356:	3303      	adds	r3, #3
 8005358:	089b      	lsrs	r3, r3, #2
 800535a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800535c:	2300      	movs	r3, #0
 800535e:	61bb      	str	r3, [r7, #24]
 8005360:	e00f      	b.n	8005382 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005362:	79fb      	ldrb	r3, [r7, #7]
 8005364:	031a      	lsls	r2, r3, #12
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	4413      	add	r3, r2
 800536a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800536e:	461a      	mov	r2, r3
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	3304      	adds	r3, #4
 800537a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	3301      	adds	r3, #1
 8005380:	61bb      	str	r3, [r7, #24]
 8005382:	69ba      	ldr	r2, [r7, #24]
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	429a      	cmp	r2, r3
 8005388:	d3eb      	bcc.n	8005362 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3724      	adds	r7, #36	; 0x24
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005398:	b480      	push	{r7}
 800539a:	b089      	sub	sp, #36	; 0x24
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	4613      	mov	r3, r2
 80053a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80053ae:	88fb      	ldrh	r3, [r7, #6]
 80053b0:	3303      	adds	r3, #3
 80053b2:	089b      	lsrs	r3, r3, #2
 80053b4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80053b6:	2300      	movs	r3, #0
 80053b8:	61bb      	str	r3, [r7, #24]
 80053ba:	e00b      	b.n	80053d4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	601a      	str	r2, [r3, #0]
    pDest++;
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	3304      	adds	r3, #4
 80053cc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	3301      	adds	r3, #1
 80053d2:	61bb      	str	r3, [r7, #24]
 80053d4:	69ba      	ldr	r2, [r7, #24]
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d3ef      	bcc.n	80053bc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80053dc:	69fb      	ldr	r3, [r7, #28]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3724      	adds	r7, #36	; 0x24
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80053ea:	b480      	push	{r7}
 80053ec:	b085      	sub	sp, #20
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
 80053f2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	785b      	ldrb	r3, [r3, #1]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d12c      	bne.n	8005460 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	015a      	lsls	r2, r3, #5
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	4413      	add	r3, r2
 800540e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	db12      	blt.n	800543e <USB_EPSetStall+0x54>
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00f      	beq.n	800543e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	015a      	lsls	r2, r3, #5
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	4413      	add	r3, r2
 8005426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	0151      	lsls	r1, r2, #5
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	440a      	add	r2, r1
 8005434:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005438:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800543c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	015a      	lsls	r2, r3, #5
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	4413      	add	r3, r2
 8005446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	0151      	lsls	r1, r2, #5
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	440a      	add	r2, r1
 8005454:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005458:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800545c:	6013      	str	r3, [r2, #0]
 800545e:	e02b      	b.n	80054b8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	4413      	add	r3, r2
 8005468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	db12      	blt.n	8005498 <USB_EPSetStall+0xae>
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00f      	beq.n	8005498 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	015a      	lsls	r2, r3, #5
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	4413      	add	r3, r2
 8005480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68ba      	ldr	r2, [r7, #8]
 8005488:	0151      	lsls	r1, r2, #5
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	440a      	add	r2, r1
 800548e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005492:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005496:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	015a      	lsls	r2, r3, #5
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	4413      	add	r3, r2
 80054a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	0151      	lsls	r1, r2, #5
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	440a      	add	r2, r1
 80054ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80054b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3714      	adds	r7, #20
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b085      	sub	sp, #20
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
 80054ce:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	785b      	ldrb	r3, [r3, #1]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d128      	bne.n	8005534 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	015a      	lsls	r2, r3, #5
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	4413      	add	r3, r2
 80054ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	0151      	lsls	r1, r2, #5
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	440a      	add	r2, r1
 80054f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005500:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	78db      	ldrb	r3, [r3, #3]
 8005506:	2b03      	cmp	r3, #3
 8005508:	d003      	beq.n	8005512 <USB_EPClearStall+0x4c>
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	78db      	ldrb	r3, [r3, #3]
 800550e:	2b02      	cmp	r3, #2
 8005510:	d138      	bne.n	8005584 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	015a      	lsls	r2, r3, #5
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	4413      	add	r3, r2
 800551a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	0151      	lsls	r1, r2, #5
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	440a      	add	r2, r1
 8005528:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800552c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005530:	6013      	str	r3, [r2, #0]
 8005532:	e027      	b.n	8005584 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	4413      	add	r3, r2
 800553c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68ba      	ldr	r2, [r7, #8]
 8005544:	0151      	lsls	r1, r2, #5
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	440a      	add	r2, r1
 800554a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800554e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005552:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	78db      	ldrb	r3, [r3, #3]
 8005558:	2b03      	cmp	r3, #3
 800555a:	d003      	beq.n	8005564 <USB_EPClearStall+0x9e>
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	78db      	ldrb	r3, [r3, #3]
 8005560:	2b02      	cmp	r3, #2
 8005562:	d10f      	bne.n	8005584 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	015a      	lsls	r2, r3, #5
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4413      	add	r3, r2
 800556c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	0151      	lsls	r1, r2, #5
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	440a      	add	r2, r1
 800557a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800557e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005582:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3714      	adds	r7, #20
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr

08005592 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005592:	b480      	push	{r7}
 8005594:	b085      	sub	sp, #20
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
 800559a:	460b      	mov	r3, r1
 800559c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055b0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80055b4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	78fb      	ldrb	r3, [r7, #3]
 80055c0:	011b      	lsls	r3, r3, #4
 80055c2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80055c6:	68f9      	ldr	r1, [r7, #12]
 80055c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055cc:	4313      	orrs	r3, r2
 80055ce:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3714      	adds	r7, #20
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr

080055de <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80055de:	b480      	push	{r7}
 80055e0:	b085      	sub	sp, #20
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80055f8:	f023 0303 	bic.w	r3, r3, #3
 80055fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800560c:	f023 0302 	bic.w	r3, r3, #2
 8005610:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3714      	adds	r7, #20
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800563a:	f023 0303 	bic.w	r3, r3, #3
 800563e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800564e:	f043 0302 	orr.w	r3, r3, #2
 8005652:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3714      	adds	r7, #20
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr

08005662 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005662:	b480      	push	{r7}
 8005664:	b085      	sub	sp, #20
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	695b      	ldr	r3, [r3, #20]
 800566e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	4013      	ands	r3, r2
 8005678:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800567a:	68fb      	ldr	r3, [r7, #12]
}
 800567c:	4618      	mov	r0, r3
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800569a:	699b      	ldr	r3, [r3, #24]
 800569c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056a4:	69db      	ldr	r3, [r3, #28]
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	4013      	ands	r3, r2
 80056aa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	0c1b      	lsrs	r3, r3, #16
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3714      	adds	r7, #20
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ce:	699b      	ldr	r3, [r3, #24]
 80056d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056d8:	69db      	ldr	r3, [r3, #28]
 80056da:	68ba      	ldr	r2, [r7, #8]
 80056dc:	4013      	ands	r3, r2
 80056de:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	b29b      	uxth	r3, r3
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3714      	adds	r7, #20
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	460b      	mov	r3, r1
 80056fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005700:	78fb      	ldrb	r3, [r7, #3]
 8005702:	015a      	lsls	r2, r3, #5
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	4413      	add	r3, r2
 8005708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	68ba      	ldr	r2, [r7, #8]
 800571a:	4013      	ands	r3, r2
 800571c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800571e:	68bb      	ldr	r3, [r7, #8]
}
 8005720:	4618      	mov	r0, r3
 8005722:	3714      	adds	r7, #20
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800572c:	b480      	push	{r7}
 800572e:	b087      	sub	sp, #28
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	460b      	mov	r3, r1
 8005736:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800574c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800574e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005750:	78fb      	ldrb	r3, [r7, #3]
 8005752:	f003 030f 	and.w	r3, r3, #15
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	fa22 f303 	lsr.w	r3, r2, r3
 800575c:	01db      	lsls	r3, r3, #7
 800575e:	b2db      	uxtb	r3, r3
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	4313      	orrs	r3, r2
 8005764:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005766:	78fb      	ldrb	r3, [r7, #3]
 8005768:	015a      	lsls	r2, r3, #5
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	4413      	add	r3, r2
 800576e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	4013      	ands	r3, r2
 8005778:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800577a:	68bb      	ldr	r3, [r7, #8]
}
 800577c:	4618      	mov	r0, r3
 800577e:	371c      	adds	r7, #28
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	f003 0301 	and.w	r3, r3, #1
}
 8005798:	4618      	mov	r0, r3
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057be:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80057c2:	f023 0307 	bic.w	r3, r3, #7
 80057c6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057da:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3714      	adds	r7, #20
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
	...

080057ec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b087      	sub	sp, #28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	460b      	mov	r3, r1
 80057f6:	607a      	str	r2, [r7, #4]
 80057f8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	333c      	adds	r3, #60	; 0x3c
 8005802:	3304      	adds	r3, #4
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	4a26      	ldr	r2, [pc, #152]	; (80058a4 <USB_EP0_OutStart+0xb8>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d90a      	bls.n	8005826 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800581c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005820:	d101      	bne.n	8005826 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005822:	2300      	movs	r3, #0
 8005824:	e037      	b.n	8005896 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800582c:	461a      	mov	r2, r3
 800582e:	2300      	movs	r3, #0
 8005830:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005840:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005844:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005854:	f043 0318 	orr.w	r3, r3, #24
 8005858:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005868:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800586c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800586e:	7afb      	ldrb	r3, [r7, #11]
 8005870:	2b01      	cmp	r3, #1
 8005872:	d10f      	bne.n	8005894 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800587a:	461a      	mov	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800588e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005892:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	371c      	adds	r7, #28
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	4f54300a 	.word	0x4f54300a

080058a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80058b0:	2300      	movs	r3, #0
 80058b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	3301      	adds	r3, #1
 80058b8:	60fb      	str	r3, [r7, #12]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	4a13      	ldr	r2, [pc, #76]	; (800590c <USB_CoreReset+0x64>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d901      	bls.n	80058c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e01b      	b.n	80058fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	daf2      	bge.n	80058b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80058ce:	2300      	movs	r3, #0
 80058d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	f043 0201 	orr.w	r2, r3, #1
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	3301      	adds	r3, #1
 80058e2:	60fb      	str	r3, [r7, #12]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	4a09      	ldr	r2, [pc, #36]	; (800590c <USB_CoreReset+0x64>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d901      	bls.n	80058f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e006      	b.n	80058fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	f003 0301 	and.w	r3, r3, #1
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d0f0      	beq.n	80058de <USB_CoreReset+0x36>

  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	00030d40 	.word	0x00030d40

08005910 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	460b      	mov	r3, r1
 800591a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800591c:	2010      	movs	r0, #16
 800591e:	f004 fcaf 	bl	800a280 <malloc>
 8005922:	4603      	mov	r3, r0
 8005924:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d105      	bne.n	8005938 <USBD_HID_Init+0x28>
  {
    pdev->pClassData = NULL;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005934:	2302      	movs	r3, #2
 8005936:	e01b      	b.n	8005970 <USBD_HID_Init+0x60>
  }

  pdev->pClassData = (void *)hhid;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	7c1b      	ldrb	r3, [r3, #16]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d103      	bne.n	8005950 <USBD_HID_Init+0x40>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2207      	movs	r2, #7
 800594c:	875a      	strh	r2, [r3, #58]	; 0x3a
 800594e:	e002      	b.n	8005956 <USBD_HID_Init+0x46>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	220a      	movs	r2, #10
 8005954:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

    /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005956:	2304      	movs	r3, #4
 8005958:	2203      	movs	r2, #3
 800595a:	2181      	movs	r1, #129	; 0x81
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f004 fada 	bl	8009f16 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	460b      	mov	r3, r1
 8005982:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8005984:	2181      	movs	r1, #129	; 0x81
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f004 faeb 	bl	8009f62 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d009      	beq.n	80059b6 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059a8:	4618      	mov	r0, r3
 80059aa:	f004 fc71 	bl	800a290 <free>
    pdev->pClassData = NULL;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3708      	adds	r7, #8
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b086      	sub	sp, #24
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059d0:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80059d6:	2300      	movs	r3, #0
 80059d8:	817b      	strh	r3, [r7, #10]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d045      	beq.n	8005a72 <USBD_HID_Setup+0xb2>
 80059e6:	2b20      	cmp	r3, #32
 80059e8:	f040 80d4 	bne.w	8005b94 <USBD_HID_Setup+0x1d4>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	785b      	ldrb	r3, [r3, #1]
 80059f0:	3b02      	subs	r3, #2
 80059f2:	2b09      	cmp	r3, #9
 80059f4:	d835      	bhi.n	8005a62 <USBD_HID_Setup+0xa2>
 80059f6:	a201      	add	r2, pc, #4	; (adr r2, 80059fc <USBD_HID_Setup+0x3c>)
 80059f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059fc:	08005a53 	.word	0x08005a53
 8005a00:	08005a33 	.word	0x08005a33
 8005a04:	08005a63 	.word	0x08005a63
 8005a08:	08005a63 	.word	0x08005a63
 8005a0c:	08005a63 	.word	0x08005a63
 8005a10:	08005a63 	.word	0x08005a63
 8005a14:	08005a63 	.word	0x08005a63
 8005a18:	08005a63 	.word	0x08005a63
 8005a1c:	08005a41 	.word	0x08005a41
 8005a20:	08005a25 	.word	0x08005a25
    {
    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	885b      	ldrh	r3, [r3, #2]
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	601a      	str	r2, [r3, #0]
      break;
 8005a30:	e01e      	b.n	8005a70 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2201      	movs	r2, #1
 8005a36:	4619      	mov	r1, r3
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f001 f9ed 	bl	8006e18 <USBD_CtlSendData>
      break;
 8005a3e:	e017      	b.n	8005a70 <USBD_HID_Setup+0xb0>

    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	885b      	ldrh	r3, [r3, #2]
 8005a44:	0a1b      	lsrs	r3, r3, #8
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	605a      	str	r2, [r3, #4]
      break;
 8005a50:	e00e      	b.n	8005a70 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	3304      	adds	r3, #4
 8005a56:	2201      	movs	r2, #1
 8005a58:	4619      	mov	r1, r3
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f001 f9dc 	bl	8006e18 <USBD_CtlSendData>
      break;
 8005a60:	e006      	b.n	8005a70 <USBD_HID_Setup+0xb0>

    default:
      USBD_CtlError(pdev, req);
 8005a62:	6839      	ldr	r1, [r7, #0]
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f001 f966 	bl	8006d36 <USBD_CtlError>
      ret = USBD_FAIL;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	75fb      	strb	r3, [r7, #23]
      break;
 8005a6e:	bf00      	nop
    }
    break;
 8005a70:	e097      	b.n	8005ba2 <USBD_HID_Setup+0x1e2>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	785b      	ldrb	r3, [r3, #1]
 8005a76:	2b0b      	cmp	r3, #11
 8005a78:	f200 8083 	bhi.w	8005b82 <USBD_HID_Setup+0x1c2>
 8005a7c:	a201      	add	r2, pc, #4	; (adr r2, 8005a84 <USBD_HID_Setup+0xc4>)
 8005a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a82:	bf00      	nop
 8005a84:	08005ab5 	.word	0x08005ab5
 8005a88:	08005b91 	.word	0x08005b91
 8005a8c:	08005b83 	.word	0x08005b83
 8005a90:	08005b83 	.word	0x08005b83
 8005a94:	08005b83 	.word	0x08005b83
 8005a98:	08005b83 	.word	0x08005b83
 8005a9c:	08005add 	.word	0x08005add
 8005aa0:	08005b83 	.word	0x08005b83
 8005aa4:	08005b83 	.word	0x08005b83
 8005aa8:	08005b83 	.word	0x08005b83
 8005aac:	08005b35 	.word	0x08005b35
 8005ab0:	08005b5d 	.word	0x08005b5d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005aba:	2b03      	cmp	r3, #3
 8005abc:	d107      	bne.n	8005ace <USBD_HID_Setup+0x10e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005abe:	f107 030a 	add.w	r3, r7, #10
 8005ac2:	2202      	movs	r2, #2
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f001 f9a6 	bl	8006e18 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005acc:	e061      	b.n	8005b92 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8005ace:	6839      	ldr	r1, [r7, #0]
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f001 f930 	bl	8006d36 <USBD_CtlError>
        ret = USBD_FAIL;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	75fb      	strb	r3, [r7, #23]
      break;
 8005ada:	e05a      	b.n	8005b92 <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == HID_REPORT_DESC)
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	885b      	ldrh	r3, [r3, #2]
 8005ae0:	0a1b      	lsrs	r3, r3, #8
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	2b22      	cmp	r3, #34	; 0x22
 8005ae6:	d108      	bne.n	8005afa <USBD_HID_Setup+0x13a>
      {
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	88db      	ldrh	r3, [r3, #6]
 8005aec:	2b4a      	cmp	r3, #74	; 0x4a
 8005aee:	bf28      	it	cs
 8005af0:	234a      	movcs	r3, #74	; 0x4a
 8005af2:	82bb      	strh	r3, [r7, #20]
        pbuf = HID_MOUSE_ReportDesc;
 8005af4:	4b2d      	ldr	r3, [pc, #180]	; (8005bac <USBD_HID_Setup+0x1ec>)
 8005af6:	613b      	str	r3, [r7, #16]
 8005af8:	e015      	b.n	8005b26 <USBD_HID_Setup+0x166>
      }
      else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	885b      	ldrh	r3, [r3, #2]
 8005afe:	0a1b      	lsrs	r3, r3, #8
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	2b21      	cmp	r3, #33	; 0x21
 8005b04:	d108      	bne.n	8005b18 <USBD_HID_Setup+0x158>
      {
        pbuf = USBD_HID_Desc;
 8005b06:	4b2a      	ldr	r3, [pc, #168]	; (8005bb0 <USBD_HID_Setup+0x1f0>)
 8005b08:	613b      	str	r3, [r7, #16]
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	88db      	ldrh	r3, [r3, #6]
 8005b0e:	2b09      	cmp	r3, #9
 8005b10:	bf28      	it	cs
 8005b12:	2309      	movcs	r3, #9
 8005b14:	82bb      	strh	r3, [r7, #20]
 8005b16:	e006      	b.n	8005b26 <USBD_HID_Setup+0x166>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8005b18:	6839      	ldr	r1, [r7, #0]
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f001 f90b 	bl	8006d36 <USBD_CtlError>
        ret = USBD_FAIL;
 8005b20:	2303      	movs	r3, #3
 8005b22:	75fb      	strb	r3, [r7, #23]
        break;
 8005b24:	e035      	b.n	8005b92 <USBD_HID_Setup+0x1d2>
      }
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005b26:	8abb      	ldrh	r3, [r7, #20]
 8005b28:	461a      	mov	r2, r3
 8005b2a:	6939      	ldr	r1, [r7, #16]
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f001 f973 	bl	8006e18 <USBD_CtlSendData>
      break;
 8005b32:	e02e      	b.n	8005b92 <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b3a:	2b03      	cmp	r3, #3
 8005b3c:	d107      	bne.n	8005b4e <USBD_HID_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	3308      	adds	r3, #8
 8005b42:	2201      	movs	r2, #1
 8005b44:	4619      	mov	r1, r3
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f001 f966 	bl	8006e18 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005b4c:	e021      	b.n	8005b92 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8005b4e:	6839      	ldr	r1, [r7, #0]
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f001 f8f0 	bl	8006d36 <USBD_CtlError>
        ret = USBD_FAIL;
 8005b56:	2303      	movs	r3, #3
 8005b58:	75fb      	strb	r3, [r7, #23]
      break;
 8005b5a:	e01a      	b.n	8005b92 <USBD_HID_Setup+0x1d2>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b62:	2b03      	cmp	r3, #3
 8005b64:	d106      	bne.n	8005b74 <USBD_HID_Setup+0x1b4>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	885b      	ldrh	r3, [r3, #2]
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005b72:	e00e      	b.n	8005b92 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8005b74:	6839      	ldr	r1, [r7, #0]
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f001 f8dd 	bl	8006d36 <USBD_CtlError>
        ret = USBD_FAIL;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b80:	e007      	b.n	8005b92 <USBD_HID_Setup+0x1d2>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8005b82:	6839      	ldr	r1, [r7, #0]
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f001 f8d6 	bl	8006d36 <USBD_CtlError>
      ret = USBD_FAIL;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	75fb      	strb	r3, [r7, #23]
      break;
 8005b8e:	e000      	b.n	8005b92 <USBD_HID_Setup+0x1d2>
      break;
 8005b90:	bf00      	nop
    }
    break;
 8005b92:	e006      	b.n	8005ba2 <USBD_HID_Setup+0x1e2>

  default:
    USBD_CtlError(pdev, req);
 8005b94:	6839      	ldr	r1, [r7, #0]
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f001 f8cd 	bl	8006d36 <USBD_CtlError>
    ret = USBD_FAIL;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	75fb      	strb	r3, [r7, #23]
    break;
 8005ba0:	bf00      	nop
  }

  return (uint8_t)ret;
 8005ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3718      	adds	r7, #24
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	200000c8 	.word	0x200000c8
 8005bb0:	200000b0 	.word	0x200000b0

08005bb4 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bc8:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bd0:	2b03      	cmp	r3, #3
 8005bd2:	d10c      	bne.n	8005bee <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	7b1b      	ldrb	r3, [r3, #12]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d108      	bne.n	8005bee <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	2201      	movs	r2, #1
 8005be0:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8005be2:	88fb      	ldrh	r3, [r7, #6]
 8005be4:	68ba      	ldr	r2, [r7, #8]
 8005be6:	2181      	movs	r1, #129	; 0x81
 8005be8:	68f8      	ldr	r0, [r7, #12]
 8005bea:	f004 fa62 	bl	800a0b2 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3718      	adds	r7, #24
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2222      	movs	r2, #34	; 0x22
 8005c04:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8005c06:	4b03      	ldr	r3, [pc, #12]	; (8005c14 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr
 8005c14:	20000044 	.word	0x20000044

08005c18 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2222      	movs	r2, #34	; 0x22
 8005c24:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8005c26:	4b03      	ldr	r3, [pc, #12]	; (8005c34 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr
 8005c34:	20000068 	.word	0x20000068

08005c38 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2222      	movs	r2, #34	; 0x22
 8005c44:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8005c46:	4b03      	ldr	r3, [pc, #12]	; (8005c54 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr
 8005c54:	2000008c 	.word	0x2000008c

08005c58 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	460b      	mov	r3, r1
 8005c62:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	220a      	movs	r2, #10
 8005c88:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8005c8a:	4b03      	ldr	r3, [pc, #12]	; (8005c98 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr
 8005c98:	200000bc 	.word	0x200000bc

08005c9c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b086      	sub	sp, #24
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d101      	bne.n	8005cb4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e025      	b.n	8005d00 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d003      	beq.n	8005cc6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d003      	beq.n	8005cd8 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d003      	beq.n	8005ce6 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	68ba      	ldr	r2, [r7, #8]
 8005ce2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	79fa      	ldrb	r2, [r7, #7]
 8005cf2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f004 f8a7 	bl	8009e48 <USBD_LL_Init>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3718      	adds	r7, #24
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005d12:	2300      	movs	r3, #0
 8005d14:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d101      	bne.n	8005d20 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	e010      	b.n	8005d42 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	683a      	ldr	r2, [r7, #0]
 8005d24:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d30:	f107 020e 	add.w	r2, r7, #14
 8005d34:	4610      	mov	r0, r2
 8005d36:	4798      	blx	r3
 8005d38:	4602      	mov	r2, r0
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b082      	sub	sp, #8
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f004 f8c4 	bl	8009ee0 <USBD_LL_Start>
 8005d58:	4603      	mov	r3, r0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3708      	adds	r7, #8
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b083      	sub	sp, #12
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	460b      	mov	r3, r1
 8005d82:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005d84:	2303      	movs	r3, #3
 8005d86:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d009      	beq.n	8005da6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	78fa      	ldrb	r2, [r7, #3]
 8005d9c:	4611      	mov	r1, r2
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	4798      	blx	r3
 8005da2:	4603      	mov	r3, r0
 8005da4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	460b      	mov	r3, r1
 8005dba:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d007      	beq.n	8005dd6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	78fa      	ldrb	r2, [r7, #3]
 8005dd0:	4611      	mov	r1, r2
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	4798      	blx	r3
  }

  return USBD_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3708      	adds	r7, #8
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005df0:	6839      	ldr	r1, [r7, #0]
 8005df2:	4618      	mov	r0, r3
 8005df4:	f000 ff65 	bl	8006cc2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005e06:	461a      	mov	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005e14:	f003 031f 	and.w	r3, r3, #31
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d01a      	beq.n	8005e52 <USBD_LL_SetupStage+0x72>
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d822      	bhi.n	8005e66 <USBD_LL_SetupStage+0x86>
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d002      	beq.n	8005e2a <USBD_LL_SetupStage+0x4a>
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d00a      	beq.n	8005e3e <USBD_LL_SetupStage+0x5e>
 8005e28:	e01d      	b.n	8005e66 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e30:	4619      	mov	r1, r3
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 fa18 	bl	8006268 <USBD_StdDevReq>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e3c:	e020      	b.n	8005e80 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e44:	4619      	mov	r1, r3
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fa7c 	bl	8006344 <USBD_StdItfReq>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	73fb      	strb	r3, [r7, #15]
      break;
 8005e50:	e016      	b.n	8005e80 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e58:	4619      	mov	r1, r3
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 faba 	bl	80063d4 <USBD_StdEPReq>
 8005e60:	4603      	mov	r3, r0
 8005e62:	73fb      	strb	r3, [r7, #15]
      break;
 8005e64:	e00c      	b.n	8005e80 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005e6c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	4619      	mov	r1, r3
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f004 f893 	bl	8009fa0 <USBD_LL_StallEP>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	73fb      	strb	r3, [r7, #15]
      break;
 8005e7e:	bf00      	nop
  }

  return ret;
 8005e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3710      	adds	r7, #16
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b086      	sub	sp, #24
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	60f8      	str	r0, [r7, #12]
 8005e92:	460b      	mov	r3, r1
 8005e94:	607a      	str	r2, [r7, #4]
 8005e96:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005e98:	7afb      	ldrb	r3, [r7, #11]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d137      	bne.n	8005f0e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005ea4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005eac:	2b03      	cmp	r3, #3
 8005eae:	d14a      	bne.n	8005f46 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	689a      	ldr	r2, [r3, #8]
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d913      	bls.n	8005ee4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	689a      	ldr	r2, [r3, #8]
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	1ad2      	subs	r2, r2, r3
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	68da      	ldr	r2, [r3, #12]
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	bf28      	it	cs
 8005ed6:	4613      	movcs	r3, r2
 8005ed8:	461a      	mov	r2, r3
 8005eda:	6879      	ldr	r1, [r7, #4]
 8005edc:	68f8      	ldr	r0, [r7, #12]
 8005ede:	f000 ffc7 	bl	8006e70 <USBD_CtlContinueRx>
 8005ee2:	e030      	b.n	8005f46 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00a      	beq.n	8005f06 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005ef6:	2b03      	cmp	r3, #3
 8005ef8:	d105      	bne.n	8005f06 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	68f8      	ldr	r0, [r7, #12]
 8005f04:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8005f06:	68f8      	ldr	r0, [r7, #12]
 8005f08:	f000 ffc3 	bl	8006e92 <USBD_CtlSendStatus>
 8005f0c:	e01b      	b.n	8005f46 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d013      	beq.n	8005f42 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005f20:	2b03      	cmp	r3, #3
 8005f22:	d10e      	bne.n	8005f42 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	7afa      	ldrb	r2, [r7, #11]
 8005f2e:	4611      	mov	r1, r2
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	4798      	blx	r3
 8005f34:	4603      	mov	r3, r0
 8005f36:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005f38:	7dfb      	ldrb	r3, [r7, #23]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d003      	beq.n	8005f46 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8005f3e:	7dfb      	ldrb	r3, [r7, #23]
 8005f40:	e002      	b.n	8005f48 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e000      	b.n	8005f48 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3718      	adds	r7, #24
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	460b      	mov	r3, r1
 8005f5a:	607a      	str	r2, [r7, #4]
 8005f5c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005f5e:	7afb      	ldrb	r3, [r7, #11]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d16a      	bne.n	800603a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	3314      	adds	r3, #20
 8005f68:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	d155      	bne.n	8006020 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	689a      	ldr	r2, [r3, #8]
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d914      	bls.n	8005faa <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	689a      	ldr	r2, [r3, #8]
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	1ad2      	subs	r2, r2, r3
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	461a      	mov	r2, r3
 8005f94:	6879      	ldr	r1, [r7, #4]
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f000 ff59 	bl	8006e4e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	2100      	movs	r1, #0
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	f004 f8a6 	bl	800a0f4 <USBD_LL_PrepareReceive>
 8005fa8:	e03a      	b.n	8006020 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	68da      	ldr	r2, [r3, #12]
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d11c      	bne.n	8005ff0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	685a      	ldr	r2, [r3, #4]
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d316      	bcc.n	8005ff0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	685a      	ldr	r2, [r3, #4]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d20f      	bcs.n	8005ff0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f000 ff3a 	bl	8006e4e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f004 f883 	bl	800a0f4 <USBD_LL_PrepareReceive>
 8005fee:	e017      	b.n	8006020 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00a      	beq.n	8006012 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006002:	2b03      	cmp	r3, #3
 8006004:	d105      	bne.n	8006012 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	68f8      	ldr	r0, [r7, #12]
 8006010:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006012:	2180      	movs	r1, #128	; 0x80
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f003 ffc3 	bl	8009fa0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	f000 ff4c 	bl	8006eb8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006026:	2b01      	cmp	r3, #1
 8006028:	d123      	bne.n	8006072 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f7ff fe99 	bl	8005d62 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006038:	e01b      	b.n	8006072 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d013      	beq.n	800606e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800604c:	2b03      	cmp	r3, #3
 800604e:	d10e      	bne.n	800606e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	7afa      	ldrb	r2, [r7, #11]
 800605a:	4611      	mov	r1, r2
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	4798      	blx	r3
 8006060:	4603      	mov	r3, r0
 8006062:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006064:	7dfb      	ldrb	r3, [r7, #23]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d003      	beq.n	8006072 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800606a:	7dfb      	ldrb	r3, [r7, #23]
 800606c:	e002      	b.n	8006074 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800606e:	2303      	movs	r3, #3
 8006070:	e000      	b.n	8006074 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3718      	adds	r7, #24
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d009      	beq.n	80060c0 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	6852      	ldr	r2, [r2, #4]
 80060b8:	b2d2      	uxtb	r2, r2
 80060ba:	4611      	mov	r1, r2
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80060c0:	2340      	movs	r3, #64	; 0x40
 80060c2:	2200      	movs	r2, #0
 80060c4:	2100      	movs	r1, #0
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f003 ff25 	bl	8009f16 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2240      	movs	r2, #64	; 0x40
 80060d8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80060dc:	2340      	movs	r3, #64	; 0x40
 80060de:	2200      	movs	r2, #0
 80060e0:	2180      	movs	r1, #128	; 0x80
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f003 ff17 	bl	8009f16 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2240      	movs	r2, #64	; 0x40
 80060f2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3708      	adds	r7, #8
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}

080060fe <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80060fe:	b480      	push	{r7}
 8006100:	b083      	sub	sp, #12
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
 8006106:	460b      	mov	r3, r1
 8006108:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	78fa      	ldrb	r2, [r7, #3]
 800610e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800611e:	b480      	push	{r7}
 8006120:	b083      	sub	sp, #12
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2204      	movs	r2, #4
 8006136:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006156:	2b04      	cmp	r3, #4
 8006158:	d105      	bne.n	8006166 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	4618      	mov	r0, r3
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006182:	2b03      	cmp	r3, #3
 8006184:	d10b      	bne.n	800619e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800618c:	69db      	ldr	r3, [r3, #28]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d005      	beq.n	800619e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3708      	adds	r7, #8
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	460b      	mov	r3, r1
 80061b2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr

080061c2 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80061c2:	b480      	push	{r7}
 80061c4:	b083      	sub	sp, #12
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
 80061ca:	460b      	mov	r3, r1
 80061cc:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	370c      	adds	r7, #12
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b082      	sub	sp, #8
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006208:	2b00      	cmp	r3, #0
 800620a:	d009      	beq.n	8006220 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	6852      	ldr	r2, [r2, #4]
 8006218:	b2d2      	uxtb	r2, r2
 800621a:	4611      	mov	r1, r2
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	4798      	blx	r3
  }

  return USBD_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800622a:	b480      	push	{r7}
 800622c:	b087      	sub	sp, #28
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	3301      	adds	r3, #1
 8006240:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006248:	8a3b      	ldrh	r3, [r7, #16]
 800624a:	021b      	lsls	r3, r3, #8
 800624c:	b21a      	sxth	r2, r3
 800624e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006252:	4313      	orrs	r3, r2
 8006254:	b21b      	sxth	r3, r3
 8006256:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006258:	89fb      	ldrh	r3, [r7, #14]
}
 800625a:	4618      	mov	r0, r3
 800625c:	371c      	adds	r7, #28
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
	...

08006268 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006272:	2300      	movs	r3, #0
 8006274:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800627e:	2b40      	cmp	r3, #64	; 0x40
 8006280:	d005      	beq.n	800628e <USBD_StdDevReq+0x26>
 8006282:	2b40      	cmp	r3, #64	; 0x40
 8006284:	d853      	bhi.n	800632e <USBD_StdDevReq+0xc6>
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00b      	beq.n	80062a2 <USBD_StdDevReq+0x3a>
 800628a:	2b20      	cmp	r3, #32
 800628c:	d14f      	bne.n	800632e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	6839      	ldr	r1, [r7, #0]
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	4798      	blx	r3
 800629c:	4603      	mov	r3, r0
 800629e:	73fb      	strb	r3, [r7, #15]
    break;
 80062a0:	e04a      	b.n	8006338 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	785b      	ldrb	r3, [r3, #1]
 80062a6:	2b09      	cmp	r3, #9
 80062a8:	d83b      	bhi.n	8006322 <USBD_StdDevReq+0xba>
 80062aa:	a201      	add	r2, pc, #4	; (adr r2, 80062b0 <USBD_StdDevReq+0x48>)
 80062ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b0:	08006305 	.word	0x08006305
 80062b4:	08006319 	.word	0x08006319
 80062b8:	08006323 	.word	0x08006323
 80062bc:	0800630f 	.word	0x0800630f
 80062c0:	08006323 	.word	0x08006323
 80062c4:	080062e3 	.word	0x080062e3
 80062c8:	080062d9 	.word	0x080062d9
 80062cc:	08006323 	.word	0x08006323
 80062d0:	080062fb 	.word	0x080062fb
 80062d4:	080062ed 	.word	0x080062ed
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80062d8:	6839      	ldr	r1, [r7, #0]
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f9d8 	bl	8006690 <USBD_GetDescriptor>
      break;
 80062e0:	e024      	b.n	800632c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80062e2:	6839      	ldr	r1, [r7, #0]
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 fb67 	bl	80069b8 <USBD_SetAddress>
      break;
 80062ea:	e01f      	b.n	800632c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80062ec:	6839      	ldr	r1, [r7, #0]
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 fba6 	bl	8006a40 <USBD_SetConfig>
 80062f4:	4603      	mov	r3, r0
 80062f6:	73fb      	strb	r3, [r7, #15]
      break;
 80062f8:	e018      	b.n	800632c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80062fa:	6839      	ldr	r1, [r7, #0]
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 fc43 	bl	8006b88 <USBD_GetConfig>
      break;
 8006302:	e013      	b.n	800632c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006304:	6839      	ldr	r1, [r7, #0]
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 fc73 	bl	8006bf2 <USBD_GetStatus>
      break;
 800630c:	e00e      	b.n	800632c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800630e:	6839      	ldr	r1, [r7, #0]
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 fca1 	bl	8006c58 <USBD_SetFeature>
      break;
 8006316:	e009      	b.n	800632c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006318:	6839      	ldr	r1, [r7, #0]
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 fcb0 	bl	8006c80 <USBD_ClrFeature>
      break;
 8006320:	e004      	b.n	800632c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8006322:	6839      	ldr	r1, [r7, #0]
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 fd06 	bl	8006d36 <USBD_CtlError>
      break;
 800632a:	bf00      	nop
    }
    break;
 800632c:	e004      	b.n	8006338 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800632e:	6839      	ldr	r1, [r7, #0]
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 fd00 	bl	8006d36 <USBD_CtlError>
    break;
 8006336:	bf00      	nop
  }

  return ret;
 8006338:	7bfb      	ldrb	r3, [r7, #15]
}
 800633a:	4618      	mov	r0, r3
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop

08006344 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800634e:	2300      	movs	r3, #0
 8006350:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800635a:	2b40      	cmp	r3, #64	; 0x40
 800635c:	d005      	beq.n	800636a <USBD_StdItfReq+0x26>
 800635e:	2b40      	cmp	r3, #64	; 0x40
 8006360:	d82e      	bhi.n	80063c0 <USBD_StdItfReq+0x7c>
 8006362:	2b00      	cmp	r3, #0
 8006364:	d001      	beq.n	800636a <USBD_StdItfReq+0x26>
 8006366:	2b20      	cmp	r3, #32
 8006368:	d12a      	bne.n	80063c0 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006370:	3b01      	subs	r3, #1
 8006372:	2b02      	cmp	r3, #2
 8006374:	d81d      	bhi.n	80063b2 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	889b      	ldrh	r3, [r3, #4]
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b01      	cmp	r3, #1
 800637e:	d813      	bhi.n	80063a8 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	6839      	ldr	r1, [r7, #0]
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	4798      	blx	r3
 800638e:	4603      	mov	r3, r0
 8006390:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	88db      	ldrh	r3, [r3, #6]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d110      	bne.n	80063bc <USBD_StdItfReq+0x78>
 800639a:	7bfb      	ldrb	r3, [r7, #15]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d10d      	bne.n	80063bc <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 fd76 	bl	8006e92 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80063a6:	e009      	b.n	80063bc <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 80063a8:	6839      	ldr	r1, [r7, #0]
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 fcc3 	bl	8006d36 <USBD_CtlError>
      break;
 80063b0:	e004      	b.n	80063bc <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 80063b2:	6839      	ldr	r1, [r7, #0]
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 fcbe 	bl	8006d36 <USBD_CtlError>
      break;
 80063ba:	e000      	b.n	80063be <USBD_StdItfReq+0x7a>
      break;
 80063bc:	bf00      	nop
    }
    break;
 80063be:	e004      	b.n	80063ca <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 80063c0:	6839      	ldr	r1, [r7, #0]
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 fcb7 	bl	8006d36 <USBD_CtlError>
    break;
 80063c8:	bf00      	nop
  }

  return ret;
 80063ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80063de:	2300      	movs	r3, #0
 80063e0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	889b      	ldrh	r3, [r3, #4]
 80063e6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063f0:	2b40      	cmp	r3, #64	; 0x40
 80063f2:	d007      	beq.n	8006404 <USBD_StdEPReq+0x30>
 80063f4:	2b40      	cmp	r3, #64	; 0x40
 80063f6:	f200 8140 	bhi.w	800667a <USBD_StdEPReq+0x2a6>
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00c      	beq.n	8006418 <USBD_StdEPReq+0x44>
 80063fe:	2b20      	cmp	r3, #32
 8006400:	f040 813b 	bne.w	800667a <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	6839      	ldr	r1, [r7, #0]
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	4798      	blx	r3
 8006412:	4603      	mov	r3, r0
 8006414:	73fb      	strb	r3, [r7, #15]
    break;
 8006416:	e135      	b.n	8006684 <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	785b      	ldrb	r3, [r3, #1]
 800641c:	2b03      	cmp	r3, #3
 800641e:	d007      	beq.n	8006430 <USBD_StdEPReq+0x5c>
 8006420:	2b03      	cmp	r3, #3
 8006422:	f300 8124 	bgt.w	800666e <USBD_StdEPReq+0x29a>
 8006426:	2b00      	cmp	r3, #0
 8006428:	d07b      	beq.n	8006522 <USBD_StdEPReq+0x14e>
 800642a:	2b01      	cmp	r3, #1
 800642c:	d03b      	beq.n	80064a6 <USBD_StdEPReq+0xd2>
 800642e:	e11e      	b.n	800666e <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006436:	2b02      	cmp	r3, #2
 8006438:	d002      	beq.n	8006440 <USBD_StdEPReq+0x6c>
 800643a:	2b03      	cmp	r3, #3
 800643c:	d016      	beq.n	800646c <USBD_StdEPReq+0x98>
 800643e:	e02c      	b.n	800649a <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006440:	7bbb      	ldrb	r3, [r7, #14]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00d      	beq.n	8006462 <USBD_StdEPReq+0x8e>
 8006446:	7bbb      	ldrb	r3, [r7, #14]
 8006448:	2b80      	cmp	r3, #128	; 0x80
 800644a:	d00a      	beq.n	8006462 <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800644c:	7bbb      	ldrb	r3, [r7, #14]
 800644e:	4619      	mov	r1, r3
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f003 fda5 	bl	8009fa0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006456:	2180      	movs	r1, #128	; 0x80
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f003 fda1 	bl	8009fa0 <USBD_LL_StallEP>
 800645e:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006460:	e020      	b.n	80064a4 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 8006462:	6839      	ldr	r1, [r7, #0]
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 fc66 	bl	8006d36 <USBD_CtlError>
        break;
 800646a:	e01b      	b.n	80064a4 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	885b      	ldrh	r3, [r3, #2]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d10e      	bne.n	8006492 <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006474:	7bbb      	ldrb	r3, [r7, #14]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00b      	beq.n	8006492 <USBD_StdEPReq+0xbe>
 800647a:	7bbb      	ldrb	r3, [r7, #14]
 800647c:	2b80      	cmp	r3, #128	; 0x80
 800647e:	d008      	beq.n	8006492 <USBD_StdEPReq+0xbe>
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	88db      	ldrh	r3, [r3, #6]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d104      	bne.n	8006492 <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8006488:	7bbb      	ldrb	r3, [r7, #14]
 800648a:	4619      	mov	r1, r3
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f003 fd87 	bl	8009fa0 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 fcfd 	bl	8006e92 <USBD_CtlSendStatus>

        break;
 8006498:	e004      	b.n	80064a4 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 800649a:	6839      	ldr	r1, [r7, #0]
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 fc4a 	bl	8006d36 <USBD_CtlError>
        break;
 80064a2:	bf00      	nop
      }
      break;
 80064a4:	e0e8      	b.n	8006678 <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d002      	beq.n	80064b6 <USBD_StdEPReq+0xe2>
 80064b0:	2b03      	cmp	r3, #3
 80064b2:	d016      	beq.n	80064e2 <USBD_StdEPReq+0x10e>
 80064b4:	e02e      	b.n	8006514 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064b6:	7bbb      	ldrb	r3, [r7, #14]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d00d      	beq.n	80064d8 <USBD_StdEPReq+0x104>
 80064bc:	7bbb      	ldrb	r3, [r7, #14]
 80064be:	2b80      	cmp	r3, #128	; 0x80
 80064c0:	d00a      	beq.n	80064d8 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80064c2:	7bbb      	ldrb	r3, [r7, #14]
 80064c4:	4619      	mov	r1, r3
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f003 fd6a 	bl	8009fa0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80064cc:	2180      	movs	r1, #128	; 0x80
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f003 fd66 	bl	8009fa0 <USBD_LL_StallEP>
 80064d4:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80064d6:	e023      	b.n	8006520 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 80064d8:	6839      	ldr	r1, [r7, #0]
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 fc2b 	bl	8006d36 <USBD_CtlError>
        break;
 80064e0:	e01e      	b.n	8006520 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	885b      	ldrh	r3, [r3, #2]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d119      	bne.n	800651e <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80064ea:	7bbb      	ldrb	r3, [r7, #14]
 80064ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d004      	beq.n	80064fe <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80064f4:	7bbb      	ldrb	r3, [r7, #14]
 80064f6:	4619      	mov	r1, r3
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f003 fd70 	bl	8009fde <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 fcc7 	bl	8006e92 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	6839      	ldr	r1, [r7, #0]
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	4798      	blx	r3
        }
        break;
 8006512:	e004      	b.n	800651e <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8006514:	6839      	ldr	r1, [r7, #0]
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 fc0d 	bl	8006d36 <USBD_CtlError>
        break;
 800651c:	e000      	b.n	8006520 <USBD_StdEPReq+0x14c>
        break;
 800651e:	bf00      	nop
      }
      break;
 8006520:	e0aa      	b.n	8006678 <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006528:	2b02      	cmp	r3, #2
 800652a:	d002      	beq.n	8006532 <USBD_StdEPReq+0x15e>
 800652c:	2b03      	cmp	r3, #3
 800652e:	d032      	beq.n	8006596 <USBD_StdEPReq+0x1c2>
 8006530:	e097      	b.n	8006662 <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006532:	7bbb      	ldrb	r3, [r7, #14]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d007      	beq.n	8006548 <USBD_StdEPReq+0x174>
 8006538:	7bbb      	ldrb	r3, [r7, #14]
 800653a:	2b80      	cmp	r3, #128	; 0x80
 800653c:	d004      	beq.n	8006548 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800653e:	6839      	ldr	r1, [r7, #0]
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 fbf8 	bl	8006d36 <USBD_CtlError>
          break;
 8006546:	e091      	b.n	800666c <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006548:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800654c:	2b00      	cmp	r3, #0
 800654e:	da0b      	bge.n	8006568 <USBD_StdEPReq+0x194>
 8006550:	7bbb      	ldrb	r3, [r7, #14]
 8006552:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006556:	4613      	mov	r3, r2
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	4413      	add	r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	3310      	adds	r3, #16
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	4413      	add	r3, r2
 8006564:	3304      	adds	r3, #4
 8006566:	e00b      	b.n	8006580 <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006568:	7bbb      	ldrb	r3, [r7, #14]
 800656a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800656e:	4613      	mov	r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	4413      	add	r3, r2
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	4413      	add	r3, r2
 800657e:	3304      	adds	r3, #4
 8006580:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	2200      	movs	r2, #0
 8006586:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	2202      	movs	r2, #2
 800658c:	4619      	mov	r1, r3
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 fc42 	bl	8006e18 <USBD_CtlSendData>
        break;
 8006594:	e06a      	b.n	800666c <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8006596:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800659a:	2b00      	cmp	r3, #0
 800659c:	da11      	bge.n	80065c2 <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800659e:	7bbb      	ldrb	r3, [r7, #14]
 80065a0:	f003 020f 	and.w	r2, r3, #15
 80065a4:	6879      	ldr	r1, [r7, #4]
 80065a6:	4613      	mov	r3, r2
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	4413      	add	r3, r2
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	440b      	add	r3, r1
 80065b0:	3324      	adds	r3, #36	; 0x24
 80065b2:	881b      	ldrh	r3, [r3, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d117      	bne.n	80065e8 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 80065b8:	6839      	ldr	r1, [r7, #0]
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 fbbb 	bl	8006d36 <USBD_CtlError>
            break;
 80065c0:	e054      	b.n	800666c <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80065c2:	7bbb      	ldrb	r3, [r7, #14]
 80065c4:	f003 020f 	and.w	r2, r3, #15
 80065c8:	6879      	ldr	r1, [r7, #4]
 80065ca:	4613      	mov	r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	4413      	add	r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	440b      	add	r3, r1
 80065d4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80065d8:	881b      	ldrh	r3, [r3, #0]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d104      	bne.n	80065e8 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 80065de:	6839      	ldr	r1, [r7, #0]
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 fba8 	bl	8006d36 <USBD_CtlError>
            break;
 80065e6:	e041      	b.n	800666c <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	da0b      	bge.n	8006608 <USBD_StdEPReq+0x234>
 80065f0:	7bbb      	ldrb	r3, [r7, #14]
 80065f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065f6:	4613      	mov	r3, r2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	4413      	add	r3, r2
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	3310      	adds	r3, #16
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	4413      	add	r3, r2
 8006604:	3304      	adds	r3, #4
 8006606:	e00b      	b.n	8006620 <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006608:	7bbb      	ldrb	r3, [r7, #14]
 800660a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800660e:	4613      	mov	r3, r2
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	4413      	add	r3, r2
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	4413      	add	r3, r2
 800661e:	3304      	adds	r3, #4
 8006620:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006622:	7bbb      	ldrb	r3, [r7, #14]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d002      	beq.n	800662e <USBD_StdEPReq+0x25a>
 8006628:	7bbb      	ldrb	r3, [r7, #14]
 800662a:	2b80      	cmp	r3, #128	; 0x80
 800662c:	d103      	bne.n	8006636 <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	2200      	movs	r2, #0
 8006632:	601a      	str	r2, [r3, #0]
 8006634:	e00e      	b.n	8006654 <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006636:	7bbb      	ldrb	r3, [r7, #14]
 8006638:	4619      	mov	r1, r3
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f003 fcee 	bl	800a01c <USBD_LL_IsStallEP>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d003      	beq.n	800664e <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	2201      	movs	r2, #1
 800664a:	601a      	str	r2, [r3, #0]
 800664c:	e002      	b.n	8006654 <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	2200      	movs	r2, #0
 8006652:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	2202      	movs	r2, #2
 8006658:	4619      	mov	r1, r3
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 fbdc 	bl	8006e18 <USBD_CtlSendData>
          break;
 8006660:	e004      	b.n	800666c <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 8006662:	6839      	ldr	r1, [r7, #0]
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 fb66 	bl	8006d36 <USBD_CtlError>
        break;
 800666a:	bf00      	nop
      }
      break;
 800666c:	e004      	b.n	8006678 <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 800666e:	6839      	ldr	r1, [r7, #0]
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 fb60 	bl	8006d36 <USBD_CtlError>
      break;
 8006676:	bf00      	nop
    }
    break;
 8006678:	e004      	b.n	8006684 <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 800667a:	6839      	ldr	r1, [r7, #0]
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 fb5a 	bl	8006d36 <USBD_CtlError>
    break;
 8006682:	bf00      	nop
  }

  return ret;
 8006684:	7bfb      	ldrb	r3, [r7, #15]
}
 8006686:	4618      	mov	r0, r3
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
	...

08006690 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800669a:	2300      	movs	r3, #0
 800669c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800669e:	2300      	movs	r3, #0
 80066a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80066a2:	2300      	movs	r3, #0
 80066a4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	885b      	ldrh	r3, [r3, #2]
 80066aa:	0a1b      	lsrs	r3, r3, #8
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	3b01      	subs	r3, #1
 80066b0:	2b0e      	cmp	r3, #14
 80066b2:	f200 8152 	bhi.w	800695a <USBD_GetDescriptor+0x2ca>
 80066b6:	a201      	add	r2, pc, #4	; (adr r2, 80066bc <USBD_GetDescriptor+0x2c>)
 80066b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066bc:	0800672d 	.word	0x0800672d
 80066c0:	08006745 	.word	0x08006745
 80066c4:	08006785 	.word	0x08006785
 80066c8:	0800695b 	.word	0x0800695b
 80066cc:	0800695b 	.word	0x0800695b
 80066d0:	080068fb 	.word	0x080068fb
 80066d4:	08006927 	.word	0x08006927
 80066d8:	0800695b 	.word	0x0800695b
 80066dc:	0800695b 	.word	0x0800695b
 80066e0:	0800695b 	.word	0x0800695b
 80066e4:	0800695b 	.word	0x0800695b
 80066e8:	0800695b 	.word	0x0800695b
 80066ec:	0800695b 	.word	0x0800695b
 80066f0:	0800695b 	.word	0x0800695b
 80066f4:	080066f9 	.word	0x080066f9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066fe:	69db      	ldr	r3, [r3, #28]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00b      	beq.n	800671c <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800670a:	69db      	ldr	r3, [r3, #28]
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	7c12      	ldrb	r2, [r2, #16]
 8006710:	f107 0108 	add.w	r1, r7, #8
 8006714:	4610      	mov	r0, r2
 8006716:	4798      	blx	r3
 8006718:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800671a:	e126      	b.n	800696a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800671c:	6839      	ldr	r1, [r7, #0]
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 fb09 	bl	8006d36 <USBD_CtlError>
      err++;
 8006724:	7afb      	ldrb	r3, [r7, #11]
 8006726:	3301      	adds	r3, #1
 8006728:	72fb      	strb	r3, [r7, #11]
    break;
 800672a:	e11e      	b.n	800696a <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	7c12      	ldrb	r2, [r2, #16]
 8006738:	f107 0108 	add.w	r1, r7, #8
 800673c:	4610      	mov	r0, r2
 800673e:	4798      	blx	r3
 8006740:	60f8      	str	r0, [r7, #12]
    break;
 8006742:	e112      	b.n	800696a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	7c1b      	ldrb	r3, [r3, #16]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10d      	bne.n	8006768 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006754:	f107 0208 	add.w	r2, r7, #8
 8006758:	4610      	mov	r0, r2
 800675a:	4798      	blx	r3
 800675c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	3301      	adds	r3, #1
 8006762:	2202      	movs	r2, #2
 8006764:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006766:	e100      	b.n	800696a <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800676e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006770:	f107 0208 	add.w	r2, r7, #8
 8006774:	4610      	mov	r0, r2
 8006776:	4798      	blx	r3
 8006778:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	3301      	adds	r3, #1
 800677e:	2202      	movs	r2, #2
 8006780:	701a      	strb	r2, [r3, #0]
    break;
 8006782:	e0f2      	b.n	800696a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	885b      	ldrh	r3, [r3, #2]
 8006788:	b2db      	uxtb	r3, r3
 800678a:	2b05      	cmp	r3, #5
 800678c:	f200 80ac 	bhi.w	80068e8 <USBD_GetDescriptor+0x258>
 8006790:	a201      	add	r2, pc, #4	; (adr r2, 8006798 <USBD_GetDescriptor+0x108>)
 8006792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006796:	bf00      	nop
 8006798:	080067b1 	.word	0x080067b1
 800679c:	080067e5 	.word	0x080067e5
 80067a0:	08006819 	.word	0x08006819
 80067a4:	0800684d 	.word	0x0800684d
 80067a8:	08006881 	.word	0x08006881
 80067ac:	080068b5 	.word	0x080068b5
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00b      	beq.n	80067d4 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	7c12      	ldrb	r2, [r2, #16]
 80067c8:	f107 0108 	add.w	r1, r7, #8
 80067cc:	4610      	mov	r0, r2
 80067ce:	4798      	blx	r3
 80067d0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067d2:	e091      	b.n	80068f8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80067d4:	6839      	ldr	r1, [r7, #0]
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 faad 	bl	8006d36 <USBD_CtlError>
        err++;
 80067dc:	7afb      	ldrb	r3, [r7, #11]
 80067de:	3301      	adds	r3, #1
 80067e0:	72fb      	strb	r3, [r7, #11]
      break;
 80067e2:	e089      	b.n	80068f8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00b      	beq.n	8006808 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	7c12      	ldrb	r2, [r2, #16]
 80067fc:	f107 0108 	add.w	r1, r7, #8
 8006800:	4610      	mov	r0, r2
 8006802:	4798      	blx	r3
 8006804:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006806:	e077      	b.n	80068f8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006808:	6839      	ldr	r1, [r7, #0]
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 fa93 	bl	8006d36 <USBD_CtlError>
        err++;
 8006810:	7afb      	ldrb	r3, [r7, #11]
 8006812:	3301      	adds	r3, #1
 8006814:	72fb      	strb	r3, [r7, #11]
      break;
 8006816:	e06f      	b.n	80068f8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d00b      	beq.n	800683c <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	7c12      	ldrb	r2, [r2, #16]
 8006830:	f107 0108 	add.w	r1, r7, #8
 8006834:	4610      	mov	r0, r2
 8006836:	4798      	blx	r3
 8006838:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800683a:	e05d      	b.n	80068f8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800683c:	6839      	ldr	r1, [r7, #0]
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 fa79 	bl	8006d36 <USBD_CtlError>
        err++;
 8006844:	7afb      	ldrb	r3, [r7, #11]
 8006846:	3301      	adds	r3, #1
 8006848:	72fb      	strb	r3, [r7, #11]
      break;
 800684a:	e055      	b.n	80068f8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006852:	691b      	ldr	r3, [r3, #16]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00b      	beq.n	8006870 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	7c12      	ldrb	r2, [r2, #16]
 8006864:	f107 0108 	add.w	r1, r7, #8
 8006868:	4610      	mov	r0, r2
 800686a:	4798      	blx	r3
 800686c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800686e:	e043      	b.n	80068f8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006870:	6839      	ldr	r1, [r7, #0]
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 fa5f 	bl	8006d36 <USBD_CtlError>
        err++;
 8006878:	7afb      	ldrb	r3, [r7, #11]
 800687a:	3301      	adds	r3, #1
 800687c:	72fb      	strb	r3, [r7, #11]
      break;
 800687e:	e03b      	b.n	80068f8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006886:	695b      	ldr	r3, [r3, #20]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d00b      	beq.n	80068a4 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006892:	695b      	ldr	r3, [r3, #20]
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	7c12      	ldrb	r2, [r2, #16]
 8006898:	f107 0108 	add.w	r1, r7, #8
 800689c:	4610      	mov	r0, r2
 800689e:	4798      	blx	r3
 80068a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068a2:	e029      	b.n	80068f8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80068a4:	6839      	ldr	r1, [r7, #0]
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 fa45 	bl	8006d36 <USBD_CtlError>
        err++;
 80068ac:	7afb      	ldrb	r3, [r7, #11]
 80068ae:	3301      	adds	r3, #1
 80068b0:	72fb      	strb	r3, [r7, #11]
      break;
 80068b2:	e021      	b.n	80068f8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ba:	699b      	ldr	r3, [r3, #24]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d00b      	beq.n	80068d8 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068c6:	699b      	ldr	r3, [r3, #24]
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	7c12      	ldrb	r2, [r2, #16]
 80068cc:	f107 0108 	add.w	r1, r7, #8
 80068d0:	4610      	mov	r0, r2
 80068d2:	4798      	blx	r3
 80068d4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068d6:	e00f      	b.n	80068f8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80068d8:	6839      	ldr	r1, [r7, #0]
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 fa2b 	bl	8006d36 <USBD_CtlError>
        err++;
 80068e0:	7afb      	ldrb	r3, [r7, #11]
 80068e2:	3301      	adds	r3, #1
 80068e4:	72fb      	strb	r3, [r7, #11]
      break;
 80068e6:	e007      	b.n	80068f8 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80068e8:	6839      	ldr	r1, [r7, #0]
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 fa23 	bl	8006d36 <USBD_CtlError>
      err++;
 80068f0:	7afb      	ldrb	r3, [r7, #11]
 80068f2:	3301      	adds	r3, #1
 80068f4:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80068f6:	bf00      	nop
    }
    break;
 80068f8:	e037      	b.n	800696a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	7c1b      	ldrb	r3, [r3, #16]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d109      	bne.n	8006916 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800690a:	f107 0208 	add.w	r2, r7, #8
 800690e:	4610      	mov	r0, r2
 8006910:	4798      	blx	r3
 8006912:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006914:	e029      	b.n	800696a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8006916:	6839      	ldr	r1, [r7, #0]
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 fa0c 	bl	8006d36 <USBD_CtlError>
      err++;
 800691e:	7afb      	ldrb	r3, [r7, #11]
 8006920:	3301      	adds	r3, #1
 8006922:	72fb      	strb	r3, [r7, #11]
    break;
 8006924:	e021      	b.n	800696a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	7c1b      	ldrb	r3, [r3, #16]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d10d      	bne.n	800694a <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006936:	f107 0208 	add.w	r2, r7, #8
 800693a:	4610      	mov	r0, r2
 800693c:	4798      	blx	r3
 800693e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	3301      	adds	r3, #1
 8006944:	2207      	movs	r2, #7
 8006946:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006948:	e00f      	b.n	800696a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800694a:	6839      	ldr	r1, [r7, #0]
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 f9f2 	bl	8006d36 <USBD_CtlError>
      err++;
 8006952:	7afb      	ldrb	r3, [r7, #11]
 8006954:	3301      	adds	r3, #1
 8006956:	72fb      	strb	r3, [r7, #11]
    break;
 8006958:	e007      	b.n	800696a <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800695a:	6839      	ldr	r1, [r7, #0]
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 f9ea 	bl	8006d36 <USBD_CtlError>
    err++;
 8006962:	7afb      	ldrb	r3, [r7, #11]
 8006964:	3301      	adds	r3, #1
 8006966:	72fb      	strb	r3, [r7, #11]
    break;
 8006968:	bf00      	nop
  }

  if (err != 0U)
 800696a:	7afb      	ldrb	r3, [r7, #11]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d11e      	bne.n	80069ae <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	88db      	ldrh	r3, [r3, #6]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d016      	beq.n	80069a6 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8006978:	893b      	ldrh	r3, [r7, #8]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d00e      	beq.n	800699c <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	88da      	ldrh	r2, [r3, #6]
 8006982:	893b      	ldrh	r3, [r7, #8]
 8006984:	4293      	cmp	r3, r2
 8006986:	bf28      	it	cs
 8006988:	4613      	movcs	r3, r2
 800698a:	b29b      	uxth	r3, r3
 800698c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800698e:	893b      	ldrh	r3, [r7, #8]
 8006990:	461a      	mov	r2, r3
 8006992:	68f9      	ldr	r1, [r7, #12]
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 fa3f 	bl	8006e18 <USBD_CtlSendData>
 800699a:	e009      	b.n	80069b0 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800699c:	6839      	ldr	r1, [r7, #0]
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 f9c9 	bl	8006d36 <USBD_CtlError>
 80069a4:	e004      	b.n	80069b0 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 fa73 	bl	8006e92 <USBD_CtlSendStatus>
 80069ac:	e000      	b.n	80069b0 <USBD_GetDescriptor+0x320>
    return;
 80069ae:	bf00      	nop
    }
  }
}
 80069b0:	3710      	adds	r7, #16
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop

080069b8 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	889b      	ldrh	r3, [r3, #4]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d130      	bne.n	8006a2c <USBD_SetAddress+0x74>
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	88db      	ldrh	r3, [r3, #6]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d12c      	bne.n	8006a2c <USBD_SetAddress+0x74>
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	885b      	ldrh	r3, [r3, #2]
 80069d6:	2b7f      	cmp	r3, #127	; 0x7f
 80069d8:	d828      	bhi.n	8006a2c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	885b      	ldrh	r3, [r3, #2]
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069ec:	2b03      	cmp	r3, #3
 80069ee:	d104      	bne.n	80069fa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80069f0:	6839      	ldr	r1, [r7, #0]
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 f99f 	bl	8006d36 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069f8:	e01d      	b.n	8006a36 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	7bfa      	ldrb	r2, [r7, #15]
 80069fe:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006a02:	7bfb      	ldrb	r3, [r7, #15]
 8006a04:	4619      	mov	r1, r3
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f003 fb34 	bl	800a074 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 fa40 	bl	8006e92 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006a12:	7bfb      	ldrb	r3, [r7, #15]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d004      	beq.n	8006a22 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2202      	movs	r2, #2
 8006a1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a20:	e009      	b.n	8006a36 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2201      	movs	r2, #1
 8006a26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a2a:	e004      	b.n	8006a36 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006a2c:	6839      	ldr	r1, [r7, #0]
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 f981 	bl	8006d36 <USBD_CtlError>
  }
}
 8006a34:	bf00      	nop
 8006a36:	bf00      	nop
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
	...

08006a40 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	885b      	ldrh	r3, [r3, #2]
 8006a52:	b2da      	uxtb	r2, r3
 8006a54:	4b4b      	ldr	r3, [pc, #300]	; (8006b84 <USBD_SetConfig+0x144>)
 8006a56:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006a58:	4b4a      	ldr	r3, [pc, #296]	; (8006b84 <USBD_SetConfig+0x144>)
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d905      	bls.n	8006a6c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006a60:	6839      	ldr	r1, [r7, #0]
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f967 	bl	8006d36 <USBD_CtlError>
    return USBD_FAIL;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	e087      	b.n	8006b7c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	d002      	beq.n	8006a7c <USBD_SetConfig+0x3c>
 8006a76:	2b03      	cmp	r3, #3
 8006a78:	d025      	beq.n	8006ac6 <USBD_SetConfig+0x86>
 8006a7a:	e071      	b.n	8006b60 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006a7c:	4b41      	ldr	r3, [pc, #260]	; (8006b84 <USBD_SetConfig+0x144>)
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d01c      	beq.n	8006abe <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006a84:	4b3f      	ldr	r3, [pc, #252]	; (8006b84 <USBD_SetConfig+0x144>)
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	461a      	mov	r2, r3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006a8e:	4b3d      	ldr	r3, [pc, #244]	; (8006b84 <USBD_SetConfig+0x144>)
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	4619      	mov	r1, r3
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f7ff f96f 	bl	8005d78 <USBD_SetClassConfig>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8006a9e:	7bfb      	ldrb	r3, [r7, #15]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d004      	beq.n	8006aae <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006aa4:	6839      	ldr	r1, [r7, #0]
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f945 	bl	8006d36 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006aac:	e065      	b.n	8006b7a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f9ef 	bl	8006e92 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2203      	movs	r2, #3
 8006ab8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006abc:	e05d      	b.n	8006b7a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f9e7 	bl	8006e92 <USBD_CtlSendStatus>
    break;
 8006ac4:	e059      	b.n	8006b7a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8006ac6:	4b2f      	ldr	r3, [pc, #188]	; (8006b84 <USBD_SetConfig+0x144>)
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d112      	bne.n	8006af4 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2202      	movs	r2, #2
 8006ad2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006ad6:	4b2b      	ldr	r3, [pc, #172]	; (8006b84 <USBD_SetConfig+0x144>)
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	461a      	mov	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006ae0:	4b28      	ldr	r3, [pc, #160]	; (8006b84 <USBD_SetConfig+0x144>)
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f7ff f962 	bl	8005db0 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 f9d0 	bl	8006e92 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006af2:	e042      	b.n	8006b7a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8006af4:	4b23      	ldr	r3, [pc, #140]	; (8006b84 <USBD_SetConfig+0x144>)
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	461a      	mov	r2, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d02a      	beq.n	8006b58 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	4619      	mov	r1, r3
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f7ff f950 	bl	8005db0 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8006b10:	4b1c      	ldr	r3, [pc, #112]	; (8006b84 <USBD_SetConfig+0x144>)
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	461a      	mov	r2, r3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006b1a:	4b1a      	ldr	r3, [pc, #104]	; (8006b84 <USBD_SetConfig+0x144>)
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	4619      	mov	r1, r3
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f7ff f929 	bl	8005d78 <USBD_SetClassConfig>
 8006b26:	4603      	mov	r3, r0
 8006b28:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006b2a:	7bfb      	ldrb	r3, [r7, #15]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d00f      	beq.n	8006b50 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8006b30:	6839      	ldr	r1, [r7, #0]
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f8ff 	bl	8006d36 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	4619      	mov	r1, r3
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f7ff f935 	bl	8005db0 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2202      	movs	r2, #2
 8006b4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006b4e:	e014      	b.n	8006b7a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 f99e 	bl	8006e92 <USBD_CtlSendStatus>
    break;
 8006b56:	e010      	b.n	8006b7a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 f99a 	bl	8006e92 <USBD_CtlSendStatus>
    break;
 8006b5e:	e00c      	b.n	8006b7a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006b60:	6839      	ldr	r1, [r7, #0]
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 f8e7 	bl	8006d36 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006b68:	4b06      	ldr	r3, [pc, #24]	; (8006b84 <USBD_SetConfig+0x144>)
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f7ff f91e 	bl	8005db0 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006b74:	2303      	movs	r3, #3
 8006b76:	73fb      	strb	r3, [r7, #15]
    break;
 8006b78:	bf00      	nop
  }

  return ret;
 8006b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3710      	adds	r7, #16
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	200001fc 	.word	0x200001fc

08006b88 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	88db      	ldrh	r3, [r3, #6]
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d004      	beq.n	8006ba4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006b9a:	6839      	ldr	r1, [r7, #0]
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 f8ca 	bl	8006d36 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8006ba2:	e022      	b.n	8006bea <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	dc02      	bgt.n	8006bb4 <USBD_GetConfig+0x2c>
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	dc03      	bgt.n	8006bba <USBD_GetConfig+0x32>
 8006bb2:	e015      	b.n	8006be0 <USBD_GetConfig+0x58>
 8006bb4:	2b03      	cmp	r3, #3
 8006bb6:	d00b      	beq.n	8006bd0 <USBD_GetConfig+0x48>
 8006bb8:	e012      	b.n	8006be0 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	3308      	adds	r3, #8
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 f925 	bl	8006e18 <USBD_CtlSendData>
      break;
 8006bce:	e00c      	b.n	8006bea <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	3304      	adds	r3, #4
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 f91d 	bl	8006e18 <USBD_CtlSendData>
      break;
 8006bde:	e004      	b.n	8006bea <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 8006be0:	6839      	ldr	r1, [r7, #0]
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 f8a7 	bl	8006d36 <USBD_CtlError>
      break;
 8006be8:	bf00      	nop
}
 8006bea:	bf00      	nop
 8006bec:	3708      	adds	r7, #8
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b082      	sub	sp, #8
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
 8006bfa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c02:	3b01      	subs	r3, #1
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	d81e      	bhi.n	8006c46 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	88db      	ldrh	r3, [r3, #6]
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	d004      	beq.n	8006c1a <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006c10:	6839      	ldr	r1, [r7, #0]
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f88f 	bl	8006d36 <USBD_CtlError>
      break;
 8006c18:	e01a      	b.n	8006c50 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d005      	beq.n	8006c36 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	f043 0202 	orr.w	r2, r3, #2
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	330c      	adds	r3, #12
 8006c3a:	2202      	movs	r2, #2
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 f8ea 	bl	8006e18 <USBD_CtlSendData>
    break;
 8006c44:	e004      	b.n	8006c50 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8006c46:	6839      	ldr	r1, [r7, #0]
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 f874 	bl	8006d36 <USBD_CtlError>
    break;
 8006c4e:	bf00      	nop
  }
}
 8006c50:	bf00      	nop
 8006c52:	3708      	adds	r7, #8
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	885b      	ldrh	r3, [r3, #2]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d106      	bne.n	8006c78 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f90d 	bl	8006e92 <USBD_CtlSendStatus>
  }
}
 8006c78:	bf00      	nop
 8006c7a:	3708      	adds	r7, #8
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c90:	3b01      	subs	r3, #1
 8006c92:	2b02      	cmp	r3, #2
 8006c94:	d80b      	bhi.n	8006cae <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	885b      	ldrh	r3, [r3, #2]
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d10c      	bne.n	8006cb8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 f8f3 	bl	8006e92 <USBD_CtlSendStatus>
      }
      break;
 8006cac:	e004      	b.n	8006cb8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006cae:	6839      	ldr	r1, [r7, #0]
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 f840 	bl	8006d36 <USBD_CtlError>
      break;
 8006cb6:	e000      	b.n	8006cba <USBD_ClrFeature+0x3a>
      break;
 8006cb8:	bf00      	nop
  }
}
 8006cba:	bf00      	nop
 8006cbc:	3708      	adds	r7, #8
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b084      	sub	sp, #16
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
 8006cca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	781a      	ldrb	r2, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	781a      	ldrb	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	3301      	adds	r3, #1
 8006cea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	f7ff fa9c 	bl	800622a <SWAPBYTE>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	3301      	adds	r3, #1
 8006d04:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006d06:	68f8      	ldr	r0, [r7, #12]
 8006d08:	f7ff fa8f 	bl	800622a <SWAPBYTE>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	461a      	mov	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	3301      	adds	r3, #1
 8006d18:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	f7ff fa82 	bl	800622a <SWAPBYTE>
 8006d26:	4603      	mov	r3, r0
 8006d28:	461a      	mov	r2, r3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	80da      	strh	r2, [r3, #6]
}
 8006d2e:	bf00      	nop
 8006d30:	3710      	adds	r7, #16
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}

08006d36 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d36:	b580      	push	{r7, lr}
 8006d38:	b082      	sub	sp, #8
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
 8006d3e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d40:	2180      	movs	r1, #128	; 0x80
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f003 f92c 	bl	8009fa0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006d48:	2100      	movs	r1, #0
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f003 f928 	bl	8009fa0 <USBD_LL_StallEP>
}
 8006d50:	bf00      	nop
 8006d52:	3708      	adds	r7, #8
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b086      	sub	sp, #24
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006d64:	2300      	movs	r3, #0
 8006d66:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d036      	beq.n	8006ddc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006d72:	6938      	ldr	r0, [r7, #16]
 8006d74:	f000 f836 	bl	8006de4 <USBD_GetLen>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	005b      	lsls	r3, r3, #1
 8006d80:	b29a      	uxth	r2, r3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006d86:	7dfb      	ldrb	r3, [r7, #23]
 8006d88:	68ba      	ldr	r2, [r7, #8]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	7812      	ldrb	r2, [r2, #0]
 8006d90:	701a      	strb	r2, [r3, #0]
  idx++;
 8006d92:	7dfb      	ldrb	r3, [r7, #23]
 8006d94:	3301      	adds	r3, #1
 8006d96:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006d98:	7dfb      	ldrb	r3, [r7, #23]
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	2203      	movs	r2, #3
 8006da0:	701a      	strb	r2, [r3, #0]
  idx++;
 8006da2:	7dfb      	ldrb	r3, [r7, #23]
 8006da4:	3301      	adds	r3, #1
 8006da6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006da8:	e013      	b.n	8006dd2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006daa:	7dfb      	ldrb	r3, [r7, #23]
 8006dac:	68ba      	ldr	r2, [r7, #8]
 8006dae:	4413      	add	r3, r2
 8006db0:	693a      	ldr	r2, [r7, #16]
 8006db2:	7812      	ldrb	r2, [r2, #0]
 8006db4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	3301      	adds	r3, #1
 8006dba:	613b      	str	r3, [r7, #16]
    idx++;
 8006dbc:	7dfb      	ldrb	r3, [r7, #23]
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006dc2:	7dfb      	ldrb	r3, [r7, #23]
 8006dc4:	68ba      	ldr	r2, [r7, #8]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	2200      	movs	r2, #0
 8006dca:	701a      	strb	r2, [r3, #0]
    idx++;
 8006dcc:	7dfb      	ldrb	r3, [r7, #23]
 8006dce:	3301      	adds	r3, #1
 8006dd0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1e7      	bne.n	8006daa <USBD_GetString+0x52>
 8006dda:	e000      	b.n	8006dde <USBD_GetString+0x86>
    return;
 8006ddc:	bf00      	nop
  }
}
 8006dde:	3718      	adds	r7, #24
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b085      	sub	sp, #20
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006dec:	2300      	movs	r3, #0
 8006dee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006df4:	e005      	b.n	8006e02 <USBD_GetLen+0x1e>
  {
    len++;
 8006df6:	7bfb      	ldrb	r3, [r7, #15]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	3301      	adds	r3, #1
 8006e00:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d1f5      	bne.n	8006df6 <USBD_GetLen+0x12>
  }

  return len;
 8006e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3714      	adds	r7, #20
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2202      	movs	r2, #2
 8006e28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	68ba      	ldr	r2, [r7, #8]
 8006e3c:	2100      	movs	r1, #0
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	f003 f937 	bl	800a0b2 <USBD_LL_Transmit>

  return USBD_OK;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3710      	adds	r7, #16
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b084      	sub	sp, #16
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	60f8      	str	r0, [r7, #12]
 8006e56:	60b9      	str	r1, [r7, #8]
 8006e58:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	68ba      	ldr	r2, [r7, #8]
 8006e5e:	2100      	movs	r1, #0
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f003 f926 	bl	800a0b2 <USBD_LL_Transmit>

  return USBD_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3710      	adds	r7, #16
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	68ba      	ldr	r2, [r7, #8]
 8006e80:	2100      	movs	r1, #0
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f003 f936 	bl	800a0f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3710      	adds	r7, #16
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b082      	sub	sp, #8
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2204      	movs	r2, #4
 8006e9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	2100      	movs	r1, #0
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f003 f902 	bl	800a0b2 <USBD_LL_Transmit>

  return USBD_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3708      	adds	r7, #8
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2205      	movs	r2, #5
 8006ec4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ec8:	2300      	movs	r3, #0
 8006eca:	2200      	movs	r2, #0
 8006ecc:	2100      	movs	r1, #0
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f003 f910 	bl	800a0f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ed4:	2300      	movs	r3, #0
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3708      	adds	r7, #8
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}

08006ede <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006ede:	b480      	push	{r7}
 8006ee0:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006ee2:	bf00      	nop
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ef2:	f3ef 8305 	mrs	r3, IPSR
 8006ef6:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ef8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d10f      	bne.n	8006f1e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006efe:	f3ef 8310 	mrs	r3, PRIMASK
 8006f02:	607b      	str	r3, [r7, #4]
  return(result);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d105      	bne.n	8006f16 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f0a:	f3ef 8311 	mrs	r3, BASEPRI
 8006f0e:	603b      	str	r3, [r7, #0]
  return(result);
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d007      	beq.n	8006f26 <osKernelInitialize+0x3a>
 8006f16:	4b0e      	ldr	r3, [pc, #56]	; (8006f50 <osKernelInitialize+0x64>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2b02      	cmp	r3, #2
 8006f1c:	d103      	bne.n	8006f26 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006f1e:	f06f 0305 	mvn.w	r3, #5
 8006f22:	60fb      	str	r3, [r7, #12]
 8006f24:	e00c      	b.n	8006f40 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006f26:	4b0a      	ldr	r3, [pc, #40]	; (8006f50 <osKernelInitialize+0x64>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d105      	bne.n	8006f3a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006f2e:	4b08      	ldr	r3, [pc, #32]	; (8006f50 <osKernelInitialize+0x64>)
 8006f30:	2201      	movs	r2, #1
 8006f32:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006f34:	2300      	movs	r3, #0
 8006f36:	60fb      	str	r3, [r7, #12]
 8006f38:	e002      	b.n	8006f40 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f3e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006f40:	68fb      	ldr	r3, [r7, #12]
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3714      	adds	r7, #20
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr
 8006f4e:	bf00      	nop
 8006f50:	20000200 	.word	0x20000200

08006f54 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f5a:	f3ef 8305 	mrs	r3, IPSR
 8006f5e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f60:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d10f      	bne.n	8006f86 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f66:	f3ef 8310 	mrs	r3, PRIMASK
 8006f6a:	607b      	str	r3, [r7, #4]
  return(result);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d105      	bne.n	8006f7e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f72:	f3ef 8311 	mrs	r3, BASEPRI
 8006f76:	603b      	str	r3, [r7, #0]
  return(result);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d007      	beq.n	8006f8e <osKernelStart+0x3a>
 8006f7e:	4b0f      	ldr	r3, [pc, #60]	; (8006fbc <osKernelStart+0x68>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d103      	bne.n	8006f8e <osKernelStart+0x3a>
    stat = osErrorISR;
 8006f86:	f06f 0305 	mvn.w	r3, #5
 8006f8a:	60fb      	str	r3, [r7, #12]
 8006f8c:	e010      	b.n	8006fb0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006f8e:	4b0b      	ldr	r3, [pc, #44]	; (8006fbc <osKernelStart+0x68>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d109      	bne.n	8006faa <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006f96:	f7ff ffa2 	bl	8006ede <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006f9a:	4b08      	ldr	r3, [pc, #32]	; (8006fbc <osKernelStart+0x68>)
 8006f9c:	2202      	movs	r2, #2
 8006f9e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006fa0:	f001 f826 	bl	8007ff0 <vTaskStartScheduler>
      stat = osOK;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	60fb      	str	r3, [r7, #12]
 8006fa8:	e002      	b.n	8006fb0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8006faa:	f04f 33ff 	mov.w	r3, #4294967295
 8006fae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	20000200 	.word	0x20000200

08006fc0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b090      	sub	sp, #64	; 0x40
 8006fc4:	af04      	add	r7, sp, #16
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fd0:	f3ef 8305 	mrs	r3, IPSR
 8006fd4:	61fb      	str	r3, [r7, #28]
  return(result);
 8006fd6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f040 808f 	bne.w	80070fc <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fde:	f3ef 8310 	mrs	r3, PRIMASK
 8006fe2:	61bb      	str	r3, [r7, #24]
  return(result);
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d105      	bne.n	8006ff6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006fea:	f3ef 8311 	mrs	r3, BASEPRI
 8006fee:	617b      	str	r3, [r7, #20]
  return(result);
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d003      	beq.n	8006ffe <osThreadNew+0x3e>
 8006ff6:	4b44      	ldr	r3, [pc, #272]	; (8007108 <osThreadNew+0x148>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	d07e      	beq.n	80070fc <osThreadNew+0x13c>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d07b      	beq.n	80070fc <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007004:	2380      	movs	r3, #128	; 0x80
 8007006:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007008:	2318      	movs	r3, #24
 800700a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800700c:	2300      	movs	r3, #0
 800700e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8007010:	f04f 33ff 	mov.w	r3, #4294967295
 8007014:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d045      	beq.n	80070a8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d002      	beq.n	800702a <osThreadNew+0x6a>
        name = attr->name;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	699b      	ldr	r3, [r3, #24]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d002      	beq.n	8007038 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	699b      	ldr	r3, [r3, #24]
 8007036:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703a:	2b00      	cmp	r3, #0
 800703c:	d008      	beq.n	8007050 <osThreadNew+0x90>
 800703e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007040:	2b38      	cmp	r3, #56	; 0x38
 8007042:	d805      	bhi.n	8007050 <osThreadNew+0x90>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	f003 0301 	and.w	r3, r3, #1
 800704c:	2b00      	cmp	r3, #0
 800704e:	d001      	beq.n	8007054 <osThreadNew+0x94>
        return (NULL);
 8007050:	2300      	movs	r3, #0
 8007052:	e054      	b.n	80070fe <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	695b      	ldr	r3, [r3, #20]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d003      	beq.n	8007064 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	695b      	ldr	r3, [r3, #20]
 8007060:	089b      	lsrs	r3, r3, #2
 8007062:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00e      	beq.n	800708a <osThreadNew+0xca>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	2b5b      	cmp	r3, #91	; 0x5b
 8007072:	d90a      	bls.n	800708a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007078:	2b00      	cmp	r3, #0
 800707a:	d006      	beq.n	800708a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	695b      	ldr	r3, [r3, #20]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d002      	beq.n	800708a <osThreadNew+0xca>
        mem = 1;
 8007084:	2301      	movs	r3, #1
 8007086:	623b      	str	r3, [r7, #32]
 8007088:	e010      	b.n	80070ac <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d10c      	bne.n	80070ac <osThreadNew+0xec>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d108      	bne.n	80070ac <osThreadNew+0xec>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d104      	bne.n	80070ac <osThreadNew+0xec>
          mem = 0;
 80070a2:	2300      	movs	r3, #0
 80070a4:	623b      	str	r3, [r7, #32]
 80070a6:	e001      	b.n	80070ac <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80070a8:	2300      	movs	r3, #0
 80070aa:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80070ac:	6a3b      	ldr	r3, [r7, #32]
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d110      	bne.n	80070d4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80070ba:	9202      	str	r2, [sp, #8]
 80070bc:	9301      	str	r3, [sp, #4]
 80070be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c0:	9300      	str	r3, [sp, #0]
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f000 fdef 	bl	8007cac <xTaskCreateStatic>
 80070ce:	4603      	mov	r3, r0
 80070d0:	613b      	str	r3, [r7, #16]
 80070d2:	e013      	b.n	80070fc <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80070d4:	6a3b      	ldr	r3, [r7, #32]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d110      	bne.n	80070fc <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80070da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070dc:	b29a      	uxth	r2, r3
 80070de:	f107 0310 	add.w	r3, r7, #16
 80070e2:	9301      	str	r3, [sp, #4]
 80070e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e6:	9300      	str	r3, [sp, #0]
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f000 fe3a 	bl	8007d66 <xTaskCreate>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d001      	beq.n	80070fc <osThreadNew+0x13c>
          hTask = NULL;
 80070f8:	2300      	movs	r3, #0
 80070fa:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80070fc:	693b      	ldr	r3, [r7, #16]
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3730      	adds	r7, #48	; 0x30
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	20000200 	.word	0x20000200

0800710c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	4a07      	ldr	r2, [pc, #28]	; (8007138 <vApplicationGetIdleTaskMemory+0x2c>)
 800711c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	4a06      	ldr	r2, [pc, #24]	; (800713c <vApplicationGetIdleTaskMemory+0x30>)
 8007122:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2280      	movs	r2, #128	; 0x80
 8007128:	601a      	str	r2, [r3, #0]
}
 800712a:	bf00      	nop
 800712c:	3714      	adds	r7, #20
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	20000204 	.word	0x20000204
 800713c:	20000260 	.word	0x20000260

08007140 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007140:	b480      	push	{r7}
 8007142:	b085      	sub	sp, #20
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	4a07      	ldr	r2, [pc, #28]	; (800716c <vApplicationGetTimerTaskMemory+0x2c>)
 8007150:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	4a06      	ldr	r2, [pc, #24]	; (8007170 <vApplicationGetTimerTaskMemory+0x30>)
 8007156:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800715e:	601a      	str	r2, [r3, #0]
}
 8007160:	bf00      	nop
 8007162:	3714      	adds	r7, #20
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr
 800716c:	20000460 	.word	0x20000460
 8007170:	200004bc 	.word	0x200004bc

08007174 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f103 0208 	add.w	r2, r3, #8
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f04f 32ff 	mov.w	r2, #4294967295
 800718c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f103 0208 	add.w	r2, r3, #8
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f103 0208 	add.w	r2, r3, #8
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80071a8:	bf00      	nop
 80071aa:	370c      	adds	r7, #12
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80071c2:	bf00      	nop
 80071c4:	370c      	adds	r7, #12
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr

080071ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071ce:	b480      	push	{r7}
 80071d0:	b085      	sub	sp, #20
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
 80071d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	689a      	ldr	r2, [r3, #8]
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	683a      	ldr	r2, [r7, #0]
 80071f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	683a      	ldr	r2, [r7, #0]
 80071f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	1c5a      	adds	r2, r3, #1
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	601a      	str	r2, [r3, #0]
}
 800720a:	bf00      	nop
 800720c:	3714      	adds	r7, #20
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr

08007216 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007216:	b480      	push	{r7}
 8007218:	b085      	sub	sp, #20
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
 800721e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800722c:	d103      	bne.n	8007236 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	60fb      	str	r3, [r7, #12]
 8007234:	e00c      	b.n	8007250 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	3308      	adds	r3, #8
 800723a:	60fb      	str	r3, [r7, #12]
 800723c:	e002      	b.n	8007244 <vListInsert+0x2e>
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	60fb      	str	r3, [r7, #12]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68ba      	ldr	r2, [r7, #8]
 800724c:	429a      	cmp	r2, r3
 800724e:	d2f6      	bcs.n	800723e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	685a      	ldr	r2, [r3, #4]
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	683a      	ldr	r2, [r7, #0]
 800725e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	68fa      	ldr	r2, [r7, #12]
 8007264:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	683a      	ldr	r2, [r7, #0]
 800726a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	1c5a      	adds	r2, r3, #1
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	601a      	str	r2, [r3, #0]
}
 800727c:	bf00      	nop
 800727e:	3714      	adds	r7, #20
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	6892      	ldr	r2, [r2, #8]
 800729e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	6852      	ldr	r2, [r2, #4]
 80072a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d103      	bne.n	80072bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	689a      	ldr	r2, [r3, #8]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	1e5a      	subs	r2, r3, #1
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3714      	adds	r7, #20
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d10a      	bne.n	8007306 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80072f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f4:	f383 8811 	msr	BASEPRI, r3
 80072f8:	f3bf 8f6f 	isb	sy
 80072fc:	f3bf 8f4f 	dsb	sy
 8007300:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007302:	bf00      	nop
 8007304:	e7fe      	b.n	8007304 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007306:	f002 f815 	bl	8009334 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007312:	68f9      	ldr	r1, [r7, #12]
 8007314:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007316:	fb01 f303 	mul.w	r3, r1, r3
 800731a:	441a      	add	r2, r3
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2200      	movs	r2, #0
 8007324:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007336:	3b01      	subs	r3, #1
 8007338:	68f9      	ldr	r1, [r7, #12]
 800733a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800733c:	fb01 f303 	mul.w	r3, r1, r3
 8007340:	441a      	add	r2, r3
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	22ff      	movs	r2, #255	; 0xff
 800734a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	22ff      	movs	r2, #255	; 0xff
 8007352:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d114      	bne.n	8007386 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d01a      	beq.n	800739a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	3310      	adds	r3, #16
 8007368:	4618      	mov	r0, r3
 800736a:	f001 f8cb 	bl	8008504 <xTaskRemoveFromEventList>
 800736e:	4603      	mov	r3, r0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d012      	beq.n	800739a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007374:	4b0c      	ldr	r3, [pc, #48]	; (80073a8 <xQueueGenericReset+0xcc>)
 8007376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800737a:	601a      	str	r2, [r3, #0]
 800737c:	f3bf 8f4f 	dsb	sy
 8007380:	f3bf 8f6f 	isb	sy
 8007384:	e009      	b.n	800739a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	3310      	adds	r3, #16
 800738a:	4618      	mov	r0, r3
 800738c:	f7ff fef2 	bl	8007174 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	3324      	adds	r3, #36	; 0x24
 8007394:	4618      	mov	r0, r3
 8007396:	f7ff feed 	bl	8007174 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800739a:	f001 fffb 	bl	8009394 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800739e:	2301      	movs	r3, #1
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3710      	adds	r7, #16
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	e000ed04 	.word	0xe000ed04

080073ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b08e      	sub	sp, #56	; 0x38
 80073b0:	af02      	add	r7, sp, #8
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	607a      	str	r2, [r7, #4]
 80073b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d10a      	bne.n	80073d6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80073c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c4:	f383 8811 	msr	BASEPRI, r3
 80073c8:	f3bf 8f6f 	isb	sy
 80073cc:	f3bf 8f4f 	dsb	sy
 80073d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80073d2:	bf00      	nop
 80073d4:	e7fe      	b.n	80073d4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d10a      	bne.n	80073f2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80073dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e0:	f383 8811 	msr	BASEPRI, r3
 80073e4:	f3bf 8f6f 	isb	sy
 80073e8:	f3bf 8f4f 	dsb	sy
 80073ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 80073ee:	bf00      	nop
 80073f0:	e7fe      	b.n	80073f0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d002      	beq.n	80073fe <xQueueGenericCreateStatic+0x52>
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d001      	beq.n	8007402 <xQueueGenericCreateStatic+0x56>
 80073fe:	2301      	movs	r3, #1
 8007400:	e000      	b.n	8007404 <xQueueGenericCreateStatic+0x58>
 8007402:	2300      	movs	r3, #0
 8007404:	2b00      	cmp	r3, #0
 8007406:	d10a      	bne.n	800741e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800740c:	f383 8811 	msr	BASEPRI, r3
 8007410:	f3bf 8f6f 	isb	sy
 8007414:	f3bf 8f4f 	dsb	sy
 8007418:	623b      	str	r3, [r7, #32]
}
 800741a:	bf00      	nop
 800741c:	e7fe      	b.n	800741c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d102      	bne.n	800742a <xQueueGenericCreateStatic+0x7e>
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d101      	bne.n	800742e <xQueueGenericCreateStatic+0x82>
 800742a:	2301      	movs	r3, #1
 800742c:	e000      	b.n	8007430 <xQueueGenericCreateStatic+0x84>
 800742e:	2300      	movs	r3, #0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d10a      	bne.n	800744a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007438:	f383 8811 	msr	BASEPRI, r3
 800743c:	f3bf 8f6f 	isb	sy
 8007440:	f3bf 8f4f 	dsb	sy
 8007444:	61fb      	str	r3, [r7, #28]
}
 8007446:	bf00      	nop
 8007448:	e7fe      	b.n	8007448 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800744a:	2350      	movs	r3, #80	; 0x50
 800744c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	2b50      	cmp	r3, #80	; 0x50
 8007452:	d00a      	beq.n	800746a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007458:	f383 8811 	msr	BASEPRI, r3
 800745c:	f3bf 8f6f 	isb	sy
 8007460:	f3bf 8f4f 	dsb	sy
 8007464:	61bb      	str	r3, [r7, #24]
}
 8007466:	bf00      	nop
 8007468:	e7fe      	b.n	8007468 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800746a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007472:	2b00      	cmp	r3, #0
 8007474:	d00d      	beq.n	8007492 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007478:	2201      	movs	r2, #1
 800747a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800747e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007484:	9300      	str	r3, [sp, #0]
 8007486:	4613      	mov	r3, r2
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	68b9      	ldr	r1, [r7, #8]
 800748c:	68f8      	ldr	r0, [r7, #12]
 800748e:	f000 f805 	bl	800749c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007494:	4618      	mov	r0, r3
 8007496:	3730      	adds	r7, #48	; 0x30
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	607a      	str	r2, [r7, #4]
 80074a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d103      	bne.n	80074b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	69ba      	ldr	r2, [r7, #24]
 80074b4:	601a      	str	r2, [r3, #0]
 80074b6:	e002      	b.n	80074be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80074b8:	69bb      	ldr	r3, [r7, #24]
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	68fa      	ldr	r2, [r7, #12]
 80074c2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80074ca:	2101      	movs	r1, #1
 80074cc:	69b8      	ldr	r0, [r7, #24]
 80074ce:	f7ff ff05 	bl	80072dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	78fa      	ldrb	r2, [r7, #3]
 80074d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80074da:	bf00      	nop
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
	...

080074e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b08e      	sub	sp, #56	; 0x38
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	607a      	str	r2, [r7, #4]
 80074f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80074f2:	2300      	movs	r3, #0
 80074f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80074fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d10a      	bne.n	8007516 <xQueueGenericSend+0x32>
	__asm volatile
 8007500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007504:	f383 8811 	msr	BASEPRI, r3
 8007508:	f3bf 8f6f 	isb	sy
 800750c:	f3bf 8f4f 	dsb	sy
 8007510:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007512:	bf00      	nop
 8007514:	e7fe      	b.n	8007514 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d103      	bne.n	8007524 <xQueueGenericSend+0x40>
 800751c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007520:	2b00      	cmp	r3, #0
 8007522:	d101      	bne.n	8007528 <xQueueGenericSend+0x44>
 8007524:	2301      	movs	r3, #1
 8007526:	e000      	b.n	800752a <xQueueGenericSend+0x46>
 8007528:	2300      	movs	r3, #0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d10a      	bne.n	8007544 <xQueueGenericSend+0x60>
	__asm volatile
 800752e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007532:	f383 8811 	msr	BASEPRI, r3
 8007536:	f3bf 8f6f 	isb	sy
 800753a:	f3bf 8f4f 	dsb	sy
 800753e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007540:	bf00      	nop
 8007542:	e7fe      	b.n	8007542 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	2b02      	cmp	r3, #2
 8007548:	d103      	bne.n	8007552 <xQueueGenericSend+0x6e>
 800754a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800754e:	2b01      	cmp	r3, #1
 8007550:	d101      	bne.n	8007556 <xQueueGenericSend+0x72>
 8007552:	2301      	movs	r3, #1
 8007554:	e000      	b.n	8007558 <xQueueGenericSend+0x74>
 8007556:	2300      	movs	r3, #0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d10a      	bne.n	8007572 <xQueueGenericSend+0x8e>
	__asm volatile
 800755c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007560:	f383 8811 	msr	BASEPRI, r3
 8007564:	f3bf 8f6f 	isb	sy
 8007568:	f3bf 8f4f 	dsb	sy
 800756c:	623b      	str	r3, [r7, #32]
}
 800756e:	bf00      	nop
 8007570:	e7fe      	b.n	8007570 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007572:	f001 f985 	bl	8008880 <xTaskGetSchedulerState>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d102      	bne.n	8007582 <xQueueGenericSend+0x9e>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d101      	bne.n	8007586 <xQueueGenericSend+0xa2>
 8007582:	2301      	movs	r3, #1
 8007584:	e000      	b.n	8007588 <xQueueGenericSend+0xa4>
 8007586:	2300      	movs	r3, #0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d10a      	bne.n	80075a2 <xQueueGenericSend+0xbe>
	__asm volatile
 800758c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007590:	f383 8811 	msr	BASEPRI, r3
 8007594:	f3bf 8f6f 	isb	sy
 8007598:	f3bf 8f4f 	dsb	sy
 800759c:	61fb      	str	r3, [r7, #28]
}
 800759e:	bf00      	nop
 80075a0:	e7fe      	b.n	80075a0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80075a2:	f001 fec7 	bl	8009334 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80075a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d302      	bcc.n	80075b8 <xQueueGenericSend+0xd4>
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d129      	bne.n	800760c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80075b8:	683a      	ldr	r2, [r7, #0]
 80075ba:	68b9      	ldr	r1, [r7, #8]
 80075bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075be:	f000 fa07 	bl	80079d0 <prvCopyDataToQueue>
 80075c2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d010      	beq.n	80075ee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ce:	3324      	adds	r3, #36	; 0x24
 80075d0:	4618      	mov	r0, r3
 80075d2:	f000 ff97 	bl	8008504 <xTaskRemoveFromEventList>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d013      	beq.n	8007604 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80075dc:	4b3f      	ldr	r3, [pc, #252]	; (80076dc <xQueueGenericSend+0x1f8>)
 80075de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075e2:	601a      	str	r2, [r3, #0]
 80075e4:	f3bf 8f4f 	dsb	sy
 80075e8:	f3bf 8f6f 	isb	sy
 80075ec:	e00a      	b.n	8007604 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80075ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d007      	beq.n	8007604 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80075f4:	4b39      	ldr	r3, [pc, #228]	; (80076dc <xQueueGenericSend+0x1f8>)
 80075f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075fa:	601a      	str	r2, [r3, #0]
 80075fc:	f3bf 8f4f 	dsb	sy
 8007600:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007604:	f001 fec6 	bl	8009394 <vPortExitCritical>
				return pdPASS;
 8007608:	2301      	movs	r3, #1
 800760a:	e063      	b.n	80076d4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d103      	bne.n	800761a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007612:	f001 febf 	bl	8009394 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007616:	2300      	movs	r3, #0
 8007618:	e05c      	b.n	80076d4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800761a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800761c:	2b00      	cmp	r3, #0
 800761e:	d106      	bne.n	800762e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007620:	f107 0314 	add.w	r3, r7, #20
 8007624:	4618      	mov	r0, r3
 8007626:	f000 ffd1 	bl	80085cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800762a:	2301      	movs	r3, #1
 800762c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800762e:	f001 feb1 	bl	8009394 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007632:	f000 fd43 	bl	80080bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007636:	f001 fe7d 	bl	8009334 <vPortEnterCritical>
 800763a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007640:	b25b      	sxtb	r3, r3
 8007642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007646:	d103      	bne.n	8007650 <xQueueGenericSend+0x16c>
 8007648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764a:	2200      	movs	r2, #0
 800764c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007652:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007656:	b25b      	sxtb	r3, r3
 8007658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800765c:	d103      	bne.n	8007666 <xQueueGenericSend+0x182>
 800765e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007660:	2200      	movs	r2, #0
 8007662:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007666:	f001 fe95 	bl	8009394 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800766a:	1d3a      	adds	r2, r7, #4
 800766c:	f107 0314 	add.w	r3, r7, #20
 8007670:	4611      	mov	r1, r2
 8007672:	4618      	mov	r0, r3
 8007674:	f000 ffc0 	bl	80085f8 <xTaskCheckForTimeOut>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d124      	bne.n	80076c8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800767e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007680:	f000 fa9e 	bl	8007bc0 <prvIsQueueFull>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d018      	beq.n	80076bc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800768a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768c:	3310      	adds	r3, #16
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	4611      	mov	r1, r2
 8007692:	4618      	mov	r0, r3
 8007694:	f000 fee6 	bl	8008464 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007698:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800769a:	f000 fa29 	bl	8007af0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800769e:	f000 fd1b 	bl	80080d8 <xTaskResumeAll>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	f47f af7c 	bne.w	80075a2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80076aa:	4b0c      	ldr	r3, [pc, #48]	; (80076dc <xQueueGenericSend+0x1f8>)
 80076ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076b0:	601a      	str	r2, [r3, #0]
 80076b2:	f3bf 8f4f 	dsb	sy
 80076b6:	f3bf 8f6f 	isb	sy
 80076ba:	e772      	b.n	80075a2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80076bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076be:	f000 fa17 	bl	8007af0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80076c2:	f000 fd09 	bl	80080d8 <xTaskResumeAll>
 80076c6:	e76c      	b.n	80075a2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80076c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076ca:	f000 fa11 	bl	8007af0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80076ce:	f000 fd03 	bl	80080d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80076d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3738      	adds	r7, #56	; 0x38
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}
 80076dc:	e000ed04 	.word	0xe000ed04

080076e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b08e      	sub	sp, #56	; 0x38
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	607a      	str	r2, [r7, #4]
 80076ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80076f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d10a      	bne.n	800770e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80076f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fc:	f383 8811 	msr	BASEPRI, r3
 8007700:	f3bf 8f6f 	isb	sy
 8007704:	f3bf 8f4f 	dsb	sy
 8007708:	627b      	str	r3, [r7, #36]	; 0x24
}
 800770a:	bf00      	nop
 800770c:	e7fe      	b.n	800770c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d103      	bne.n	800771c <xQueueGenericSendFromISR+0x3c>
 8007714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007718:	2b00      	cmp	r3, #0
 800771a:	d101      	bne.n	8007720 <xQueueGenericSendFromISR+0x40>
 800771c:	2301      	movs	r3, #1
 800771e:	e000      	b.n	8007722 <xQueueGenericSendFromISR+0x42>
 8007720:	2300      	movs	r3, #0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d10a      	bne.n	800773c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800772a:	f383 8811 	msr	BASEPRI, r3
 800772e:	f3bf 8f6f 	isb	sy
 8007732:	f3bf 8f4f 	dsb	sy
 8007736:	623b      	str	r3, [r7, #32]
}
 8007738:	bf00      	nop
 800773a:	e7fe      	b.n	800773a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	2b02      	cmp	r3, #2
 8007740:	d103      	bne.n	800774a <xQueueGenericSendFromISR+0x6a>
 8007742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007746:	2b01      	cmp	r3, #1
 8007748:	d101      	bne.n	800774e <xQueueGenericSendFromISR+0x6e>
 800774a:	2301      	movs	r3, #1
 800774c:	e000      	b.n	8007750 <xQueueGenericSendFromISR+0x70>
 800774e:	2300      	movs	r3, #0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d10a      	bne.n	800776a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007758:	f383 8811 	msr	BASEPRI, r3
 800775c:	f3bf 8f6f 	isb	sy
 8007760:	f3bf 8f4f 	dsb	sy
 8007764:	61fb      	str	r3, [r7, #28]
}
 8007766:	bf00      	nop
 8007768:	e7fe      	b.n	8007768 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800776a:	f001 fec5 	bl	80094f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800776e:	f3ef 8211 	mrs	r2, BASEPRI
 8007772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007776:	f383 8811 	msr	BASEPRI, r3
 800777a:	f3bf 8f6f 	isb	sy
 800777e:	f3bf 8f4f 	dsb	sy
 8007782:	61ba      	str	r2, [r7, #24]
 8007784:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007786:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007788:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800778a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800778e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007792:	429a      	cmp	r2, r3
 8007794:	d302      	bcc.n	800779c <xQueueGenericSendFromISR+0xbc>
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	2b02      	cmp	r3, #2
 800779a:	d12c      	bne.n	80077f6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800779c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80077a6:	683a      	ldr	r2, [r7, #0]
 80077a8:	68b9      	ldr	r1, [r7, #8]
 80077aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80077ac:	f000 f910 	bl	80079d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80077b0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80077b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b8:	d112      	bne.n	80077e0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d016      	beq.n	80077f0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c4:	3324      	adds	r3, #36	; 0x24
 80077c6:	4618      	mov	r0, r3
 80077c8:	f000 fe9c 	bl	8008504 <xTaskRemoveFromEventList>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00e      	beq.n	80077f0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d00b      	beq.n	80077f0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	601a      	str	r2, [r3, #0]
 80077de:	e007      	b.n	80077f0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80077e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80077e4:	3301      	adds	r3, #1
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	b25a      	sxtb	r2, r3
 80077ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80077f0:	2301      	movs	r3, #1
 80077f2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80077f4:	e001      	b.n	80077fa <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80077f6:	2300      	movs	r3, #0
 80077f8:	637b      	str	r3, [r7, #52]	; 0x34
 80077fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077fc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007804:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007808:	4618      	mov	r0, r3
 800780a:	3738      	adds	r7, #56	; 0x38
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b08c      	sub	sp, #48	; 0x30
 8007814:	af00      	add	r7, sp, #0
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800781c:	2300      	movs	r3, #0
 800781e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007826:	2b00      	cmp	r3, #0
 8007828:	d10a      	bne.n	8007840 <xQueueReceive+0x30>
	__asm volatile
 800782a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782e:	f383 8811 	msr	BASEPRI, r3
 8007832:	f3bf 8f6f 	isb	sy
 8007836:	f3bf 8f4f 	dsb	sy
 800783a:	623b      	str	r3, [r7, #32]
}
 800783c:	bf00      	nop
 800783e:	e7fe      	b.n	800783e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d103      	bne.n	800784e <xQueueReceive+0x3e>
 8007846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784a:	2b00      	cmp	r3, #0
 800784c:	d101      	bne.n	8007852 <xQueueReceive+0x42>
 800784e:	2301      	movs	r3, #1
 8007850:	e000      	b.n	8007854 <xQueueReceive+0x44>
 8007852:	2300      	movs	r3, #0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d10a      	bne.n	800786e <xQueueReceive+0x5e>
	__asm volatile
 8007858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800785c:	f383 8811 	msr	BASEPRI, r3
 8007860:	f3bf 8f6f 	isb	sy
 8007864:	f3bf 8f4f 	dsb	sy
 8007868:	61fb      	str	r3, [r7, #28]
}
 800786a:	bf00      	nop
 800786c:	e7fe      	b.n	800786c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800786e:	f001 f807 	bl	8008880 <xTaskGetSchedulerState>
 8007872:	4603      	mov	r3, r0
 8007874:	2b00      	cmp	r3, #0
 8007876:	d102      	bne.n	800787e <xQueueReceive+0x6e>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d101      	bne.n	8007882 <xQueueReceive+0x72>
 800787e:	2301      	movs	r3, #1
 8007880:	e000      	b.n	8007884 <xQueueReceive+0x74>
 8007882:	2300      	movs	r3, #0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d10a      	bne.n	800789e <xQueueReceive+0x8e>
	__asm volatile
 8007888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788c:	f383 8811 	msr	BASEPRI, r3
 8007890:	f3bf 8f6f 	isb	sy
 8007894:	f3bf 8f4f 	dsb	sy
 8007898:	61bb      	str	r3, [r7, #24]
}
 800789a:	bf00      	nop
 800789c:	e7fe      	b.n	800789c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800789e:	f001 fd49 	bl	8009334 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80078a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d01f      	beq.n	80078ee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80078ae:	68b9      	ldr	r1, [r7, #8]
 80078b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078b2:	f000 f8f7 	bl	8007aa4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80078b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b8:	1e5a      	subs	r2, r3, #1
 80078ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078bc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c0:	691b      	ldr	r3, [r3, #16]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00f      	beq.n	80078e6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c8:	3310      	adds	r3, #16
 80078ca:	4618      	mov	r0, r3
 80078cc:	f000 fe1a 	bl	8008504 <xTaskRemoveFromEventList>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d007      	beq.n	80078e6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80078d6:	4b3d      	ldr	r3, [pc, #244]	; (80079cc <xQueueReceive+0x1bc>)
 80078d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078dc:	601a      	str	r2, [r3, #0]
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80078e6:	f001 fd55 	bl	8009394 <vPortExitCritical>
				return pdPASS;
 80078ea:	2301      	movs	r3, #1
 80078ec:	e069      	b.n	80079c2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d103      	bne.n	80078fc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80078f4:	f001 fd4e 	bl	8009394 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80078f8:	2300      	movs	r3, #0
 80078fa:	e062      	b.n	80079c2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80078fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d106      	bne.n	8007910 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007902:	f107 0310 	add.w	r3, r7, #16
 8007906:	4618      	mov	r0, r3
 8007908:	f000 fe60 	bl	80085cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800790c:	2301      	movs	r3, #1
 800790e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007910:	f001 fd40 	bl	8009394 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007914:	f000 fbd2 	bl	80080bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007918:	f001 fd0c 	bl	8009334 <vPortEnterCritical>
 800791c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800791e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007922:	b25b      	sxtb	r3, r3
 8007924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007928:	d103      	bne.n	8007932 <xQueueReceive+0x122>
 800792a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800792c:	2200      	movs	r2, #0
 800792e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007934:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007938:	b25b      	sxtb	r3, r3
 800793a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800793e:	d103      	bne.n	8007948 <xQueueReceive+0x138>
 8007940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007942:	2200      	movs	r2, #0
 8007944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007948:	f001 fd24 	bl	8009394 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800794c:	1d3a      	adds	r2, r7, #4
 800794e:	f107 0310 	add.w	r3, r7, #16
 8007952:	4611      	mov	r1, r2
 8007954:	4618      	mov	r0, r3
 8007956:	f000 fe4f 	bl	80085f8 <xTaskCheckForTimeOut>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d123      	bne.n	80079a8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007960:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007962:	f000 f917 	bl	8007b94 <prvIsQueueEmpty>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d017      	beq.n	800799c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800796c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796e:	3324      	adds	r3, #36	; 0x24
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	4611      	mov	r1, r2
 8007974:	4618      	mov	r0, r3
 8007976:	f000 fd75 	bl	8008464 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800797a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800797c:	f000 f8b8 	bl	8007af0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007980:	f000 fbaa 	bl	80080d8 <xTaskResumeAll>
 8007984:	4603      	mov	r3, r0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d189      	bne.n	800789e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800798a:	4b10      	ldr	r3, [pc, #64]	; (80079cc <xQueueReceive+0x1bc>)
 800798c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007990:	601a      	str	r2, [r3, #0]
 8007992:	f3bf 8f4f 	dsb	sy
 8007996:	f3bf 8f6f 	isb	sy
 800799a:	e780      	b.n	800789e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800799c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800799e:	f000 f8a7 	bl	8007af0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80079a2:	f000 fb99 	bl	80080d8 <xTaskResumeAll>
 80079a6:	e77a      	b.n	800789e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80079a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079aa:	f000 f8a1 	bl	8007af0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80079ae:	f000 fb93 	bl	80080d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079b4:	f000 f8ee 	bl	8007b94 <prvIsQueueEmpty>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	f43f af6f 	beq.w	800789e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80079c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3730      	adds	r7, #48	; 0x30
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	e000ed04 	.word	0xe000ed04

080079d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b086      	sub	sp, #24
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	60b9      	str	r1, [r7, #8]
 80079da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80079dc:	2300      	movs	r3, #0
 80079de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d10d      	bne.n	8007a0a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d14d      	bne.n	8007a92 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	4618      	mov	r0, r3
 80079fc:	f000 ff5e 	bl	80088bc <xTaskPriorityDisinherit>
 8007a00:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2200      	movs	r2, #0
 8007a06:	609a      	str	r2, [r3, #8]
 8007a08:	e043      	b.n	8007a92 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d119      	bne.n	8007a44 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6858      	ldr	r0, [r3, #4]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a18:	461a      	mov	r2, r3
 8007a1a:	68b9      	ldr	r1, [r7, #8]
 8007a1c:	f002 fc40 	bl	800a2a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	685a      	ldr	r2, [r3, #4]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a28:	441a      	add	r2, r3
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	685a      	ldr	r2, [r3, #4]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d32b      	bcc.n	8007a92 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	605a      	str	r2, [r3, #4]
 8007a42:	e026      	b.n	8007a92 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	68d8      	ldr	r0, [r3, #12]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	68b9      	ldr	r1, [r7, #8]
 8007a50:	f002 fc26 	bl	800a2a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	68da      	ldr	r2, [r3, #12]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a5c:	425b      	negs	r3, r3
 8007a5e:	441a      	add	r2, r3
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	68da      	ldr	r2, [r3, #12]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d207      	bcs.n	8007a80 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	689a      	ldr	r2, [r3, #8]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a78:	425b      	negs	r3, r3
 8007a7a:	441a      	add	r2, r3
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2b02      	cmp	r3, #2
 8007a84:	d105      	bne.n	8007a92 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d002      	beq.n	8007a92 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	1c5a      	adds	r2, r3, #1
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007a9a:	697b      	ldr	r3, [r7, #20]
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3718      	adds	r7, #24
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b082      	sub	sp, #8
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d018      	beq.n	8007ae8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	68da      	ldr	r2, [r3, #12]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007abe:	441a      	add	r2, r3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	68da      	ldr	r2, [r3, #12]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d303      	bcc.n	8007ad8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	68d9      	ldr	r1, [r3, #12]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	6838      	ldr	r0, [r7, #0]
 8007ae4:	f002 fbdc 	bl	800a2a0 <memcpy>
	}
}
 8007ae8:	bf00      	nop
 8007aea:	3708      	adds	r7, #8
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007af8:	f001 fc1c 	bl	8009334 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b02:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b04:	e011      	b.n	8007b2a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d012      	beq.n	8007b34 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	3324      	adds	r3, #36	; 0x24
 8007b12:	4618      	mov	r0, r3
 8007b14:	f000 fcf6 	bl	8008504 <xTaskRemoveFromEventList>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d001      	beq.n	8007b22 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007b1e:	f000 fdcd 	bl	80086bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007b22:	7bfb      	ldrb	r3, [r7, #15]
 8007b24:	3b01      	subs	r3, #1
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	dce9      	bgt.n	8007b06 <prvUnlockQueue+0x16>
 8007b32:	e000      	b.n	8007b36 <prvUnlockQueue+0x46>
					break;
 8007b34:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	22ff      	movs	r2, #255	; 0xff
 8007b3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007b3e:	f001 fc29 	bl	8009394 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007b42:	f001 fbf7 	bl	8009334 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b4c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b4e:	e011      	b.n	8007b74 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d012      	beq.n	8007b7e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	3310      	adds	r3, #16
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f000 fcd1 	bl	8008504 <xTaskRemoveFromEventList>
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d001      	beq.n	8007b6c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007b68:	f000 fda8 	bl	80086bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007b6c:	7bbb      	ldrb	r3, [r7, #14]
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	dce9      	bgt.n	8007b50 <prvUnlockQueue+0x60>
 8007b7c:	e000      	b.n	8007b80 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007b7e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	22ff      	movs	r2, #255	; 0xff
 8007b84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007b88:	f001 fc04 	bl	8009394 <vPortExitCritical>
}
 8007b8c:	bf00      	nop
 8007b8e:	3710      	adds	r7, #16
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b9c:	f001 fbca 	bl	8009334 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d102      	bne.n	8007bae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	60fb      	str	r3, [r7, #12]
 8007bac:	e001      	b.n	8007bb2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007bb2:	f001 fbef 	bl	8009394 <vPortExitCritical>

	return xReturn;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3710      	adds	r7, #16
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007bc8:	f001 fbb4 	bl	8009334 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d102      	bne.n	8007bde <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	60fb      	str	r3, [r7, #12]
 8007bdc:	e001      	b.n	8007be2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007bde:	2300      	movs	r3, #0
 8007be0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007be2:	f001 fbd7 	bl	8009394 <vPortExitCritical>

	return xReturn;
 8007be6:	68fb      	ldr	r3, [r7, #12]
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3710      	adds	r7, #16
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b085      	sub	sp, #20
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	60fb      	str	r3, [r7, #12]
 8007bfe:	e014      	b.n	8007c2a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007c00:	4a0f      	ldr	r2, [pc, #60]	; (8007c40 <vQueueAddToRegistry+0x50>)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d10b      	bne.n	8007c24 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007c0c:	490c      	ldr	r1, [pc, #48]	; (8007c40 <vQueueAddToRegistry+0x50>)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	683a      	ldr	r2, [r7, #0]
 8007c12:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007c16:	4a0a      	ldr	r2, [pc, #40]	; (8007c40 <vQueueAddToRegistry+0x50>)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	00db      	lsls	r3, r3, #3
 8007c1c:	4413      	add	r3, r2
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007c22:	e006      	b.n	8007c32 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	3301      	adds	r3, #1
 8007c28:	60fb      	str	r3, [r7, #12]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2b07      	cmp	r3, #7
 8007c2e:	d9e7      	bls.n	8007c00 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007c30:	bf00      	nop
 8007c32:	bf00      	nop
 8007c34:	3714      	adds	r7, #20
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr
 8007c3e:	bf00      	nop
 8007c40:	20004bd4 	.word	0x20004bd4

08007c44 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b086      	sub	sp, #24
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	60b9      	str	r1, [r7, #8]
 8007c4e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007c54:	f001 fb6e 	bl	8009334 <vPortEnterCritical>
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c5e:	b25b      	sxtb	r3, r3
 8007c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c64:	d103      	bne.n	8007c6e <vQueueWaitForMessageRestricted+0x2a>
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c74:	b25b      	sxtb	r3, r3
 8007c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c7a:	d103      	bne.n	8007c84 <vQueueWaitForMessageRestricted+0x40>
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c84:	f001 fb86 	bl	8009394 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d106      	bne.n	8007c9e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	3324      	adds	r3, #36	; 0x24
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	68b9      	ldr	r1, [r7, #8]
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f000 fc07 	bl	80084ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007c9e:	6978      	ldr	r0, [r7, #20]
 8007ca0:	f7ff ff26 	bl	8007af0 <prvUnlockQueue>
	}
 8007ca4:	bf00      	nop
 8007ca6:	3718      	adds	r7, #24
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b08e      	sub	sp, #56	; 0x38
 8007cb0:	af04      	add	r7, sp, #16
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	60b9      	str	r1, [r7, #8]
 8007cb6:	607a      	str	r2, [r7, #4]
 8007cb8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d10a      	bne.n	8007cd6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc4:	f383 8811 	msr	BASEPRI, r3
 8007cc8:	f3bf 8f6f 	isb	sy
 8007ccc:	f3bf 8f4f 	dsb	sy
 8007cd0:	623b      	str	r3, [r7, #32]
}
 8007cd2:	bf00      	nop
 8007cd4:	e7fe      	b.n	8007cd4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d10a      	bne.n	8007cf2 <xTaskCreateStatic+0x46>
	__asm volatile
 8007cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce0:	f383 8811 	msr	BASEPRI, r3
 8007ce4:	f3bf 8f6f 	isb	sy
 8007ce8:	f3bf 8f4f 	dsb	sy
 8007cec:	61fb      	str	r3, [r7, #28]
}
 8007cee:	bf00      	nop
 8007cf0:	e7fe      	b.n	8007cf0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007cf2:	235c      	movs	r3, #92	; 0x5c
 8007cf4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	2b5c      	cmp	r3, #92	; 0x5c
 8007cfa:	d00a      	beq.n	8007d12 <xTaskCreateStatic+0x66>
	__asm volatile
 8007cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d00:	f383 8811 	msr	BASEPRI, r3
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	f3bf 8f4f 	dsb	sy
 8007d0c:	61bb      	str	r3, [r7, #24]
}
 8007d0e:	bf00      	nop
 8007d10:	e7fe      	b.n	8007d10 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007d12:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d01e      	beq.n	8007d58 <xTaskCreateStatic+0xac>
 8007d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d01b      	beq.n	8007d58 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d22:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d28:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2c:	2202      	movs	r2, #2
 8007d2e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007d32:	2300      	movs	r3, #0
 8007d34:	9303      	str	r3, [sp, #12]
 8007d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d38:	9302      	str	r3, [sp, #8]
 8007d3a:	f107 0314 	add.w	r3, r7, #20
 8007d3e:	9301      	str	r3, [sp, #4]
 8007d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d42:	9300      	str	r3, [sp, #0]
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	68b9      	ldr	r1, [r7, #8]
 8007d4a:	68f8      	ldr	r0, [r7, #12]
 8007d4c:	f000 f850 	bl	8007df0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d52:	f000 f8dd 	bl	8007f10 <prvAddNewTaskToReadyList>
 8007d56:	e001      	b.n	8007d5c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007d5c:	697b      	ldr	r3, [r7, #20]
	}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3728      	adds	r7, #40	; 0x28
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b08c      	sub	sp, #48	; 0x30
 8007d6a:	af04      	add	r7, sp, #16
 8007d6c:	60f8      	str	r0, [r7, #12]
 8007d6e:	60b9      	str	r1, [r7, #8]
 8007d70:	603b      	str	r3, [r7, #0]
 8007d72:	4613      	mov	r3, r2
 8007d74:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007d76:	88fb      	ldrh	r3, [r7, #6]
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f001 fbfc 	bl	8009578 <pvPortMalloc>
 8007d80:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d00e      	beq.n	8007da6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007d88:	205c      	movs	r0, #92	; 0x5c
 8007d8a:	f001 fbf5 	bl	8009578 <pvPortMalloc>
 8007d8e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007d90:	69fb      	ldr	r3, [r7, #28]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d003      	beq.n	8007d9e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007d96:	69fb      	ldr	r3, [r7, #28]
 8007d98:	697a      	ldr	r2, [r7, #20]
 8007d9a:	631a      	str	r2, [r3, #48]	; 0x30
 8007d9c:	e005      	b.n	8007daa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007d9e:	6978      	ldr	r0, [r7, #20]
 8007da0:	f001 fcae 	bl	8009700 <vPortFree>
 8007da4:	e001      	b.n	8007daa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007da6:	2300      	movs	r3, #0
 8007da8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d017      	beq.n	8007de0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007db0:	69fb      	ldr	r3, [r7, #28]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007db8:	88fa      	ldrh	r2, [r7, #6]
 8007dba:	2300      	movs	r3, #0
 8007dbc:	9303      	str	r3, [sp, #12]
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	9302      	str	r3, [sp, #8]
 8007dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc4:	9301      	str	r3, [sp, #4]
 8007dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc8:	9300      	str	r3, [sp, #0]
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	68b9      	ldr	r1, [r7, #8]
 8007dce:	68f8      	ldr	r0, [r7, #12]
 8007dd0:	f000 f80e 	bl	8007df0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007dd4:	69f8      	ldr	r0, [r7, #28]
 8007dd6:	f000 f89b 	bl	8007f10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	61bb      	str	r3, [r7, #24]
 8007dde:	e002      	b.n	8007de6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007de0:	f04f 33ff 	mov.w	r3, #4294967295
 8007de4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007de6:	69bb      	ldr	r3, [r7, #24]
	}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3720      	adds	r7, #32
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b088      	sub	sp, #32
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	607a      	str	r2, [r7, #4]
 8007dfc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e00:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	461a      	mov	r2, r3
 8007e08:	21a5      	movs	r1, #165	; 0xa5
 8007e0a:	f002 fa57 	bl	800a2bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	4413      	add	r3, r2
 8007e1e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007e20:	69bb      	ldr	r3, [r7, #24]
 8007e22:	f023 0307 	bic.w	r3, r3, #7
 8007e26:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007e28:	69bb      	ldr	r3, [r7, #24]
 8007e2a:	f003 0307 	and.w	r3, r3, #7
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d00a      	beq.n	8007e48 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e36:	f383 8811 	msr	BASEPRI, r3
 8007e3a:	f3bf 8f6f 	isb	sy
 8007e3e:	f3bf 8f4f 	dsb	sy
 8007e42:	617b      	str	r3, [r7, #20]
}
 8007e44:	bf00      	nop
 8007e46:	e7fe      	b.n	8007e46 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d01f      	beq.n	8007e8e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e4e:	2300      	movs	r3, #0
 8007e50:	61fb      	str	r3, [r7, #28]
 8007e52:	e012      	b.n	8007e7a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007e54:	68ba      	ldr	r2, [r7, #8]
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	4413      	add	r3, r2
 8007e5a:	7819      	ldrb	r1, [r3, #0]
 8007e5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e5e:	69fb      	ldr	r3, [r7, #28]
 8007e60:	4413      	add	r3, r2
 8007e62:	3334      	adds	r3, #52	; 0x34
 8007e64:	460a      	mov	r2, r1
 8007e66:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007e68:	68ba      	ldr	r2, [r7, #8]
 8007e6a:	69fb      	ldr	r3, [r7, #28]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d006      	beq.n	8007e82 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	3301      	adds	r3, #1
 8007e78:	61fb      	str	r3, [r7, #28]
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	2b0f      	cmp	r3, #15
 8007e7e:	d9e9      	bls.n	8007e54 <prvInitialiseNewTask+0x64>
 8007e80:	e000      	b.n	8007e84 <prvInitialiseNewTask+0x94>
			{
				break;
 8007e82:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e86:	2200      	movs	r2, #0
 8007e88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e8c:	e003      	b.n	8007e96 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e90:	2200      	movs	r2, #0
 8007e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e98:	2b37      	cmp	r3, #55	; 0x37
 8007e9a:	d901      	bls.n	8007ea0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007e9c:	2337      	movs	r3, #55	; 0x37
 8007e9e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ea4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007eaa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eae:	2200      	movs	r2, #0
 8007eb0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb4:	3304      	adds	r3, #4
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7ff f97c 	bl	80071b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ebe:	3318      	adds	r3, #24
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f7ff f977 	bl	80071b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007eca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ece:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007eda:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ede:	2200      	movs	r2, #0
 8007ee0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007eea:	683a      	ldr	r2, [r7, #0]
 8007eec:	68f9      	ldr	r1, [r7, #12]
 8007eee:	69b8      	ldr	r0, [r7, #24]
 8007ef0:	f001 f8f4 	bl	80090dc <pxPortInitialiseStack>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d002      	beq.n	8007f06 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f06:	bf00      	nop
 8007f08:	3720      	adds	r7, #32
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
	...

08007f10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007f18:	f001 fa0c 	bl	8009334 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007f1c:	4b2d      	ldr	r3, [pc, #180]	; (8007fd4 <prvAddNewTaskToReadyList+0xc4>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	3301      	adds	r3, #1
 8007f22:	4a2c      	ldr	r2, [pc, #176]	; (8007fd4 <prvAddNewTaskToReadyList+0xc4>)
 8007f24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007f26:	4b2c      	ldr	r3, [pc, #176]	; (8007fd8 <prvAddNewTaskToReadyList+0xc8>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d109      	bne.n	8007f42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007f2e:	4a2a      	ldr	r2, [pc, #168]	; (8007fd8 <prvAddNewTaskToReadyList+0xc8>)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007f34:	4b27      	ldr	r3, [pc, #156]	; (8007fd4 <prvAddNewTaskToReadyList+0xc4>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d110      	bne.n	8007f5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007f3c:	f000 fbe2 	bl	8008704 <prvInitialiseTaskLists>
 8007f40:	e00d      	b.n	8007f5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007f42:	4b26      	ldr	r3, [pc, #152]	; (8007fdc <prvAddNewTaskToReadyList+0xcc>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d109      	bne.n	8007f5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007f4a:	4b23      	ldr	r3, [pc, #140]	; (8007fd8 <prvAddNewTaskToReadyList+0xc8>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d802      	bhi.n	8007f5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007f58:	4a1f      	ldr	r2, [pc, #124]	; (8007fd8 <prvAddNewTaskToReadyList+0xc8>)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007f5e:	4b20      	ldr	r3, [pc, #128]	; (8007fe0 <prvAddNewTaskToReadyList+0xd0>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	3301      	adds	r3, #1
 8007f64:	4a1e      	ldr	r2, [pc, #120]	; (8007fe0 <prvAddNewTaskToReadyList+0xd0>)
 8007f66:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007f68:	4b1d      	ldr	r3, [pc, #116]	; (8007fe0 <prvAddNewTaskToReadyList+0xd0>)
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f74:	4b1b      	ldr	r3, [pc, #108]	; (8007fe4 <prvAddNewTaskToReadyList+0xd4>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d903      	bls.n	8007f84 <prvAddNewTaskToReadyList+0x74>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f80:	4a18      	ldr	r2, [pc, #96]	; (8007fe4 <prvAddNewTaskToReadyList+0xd4>)
 8007f82:	6013      	str	r3, [r2, #0]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f88:	4613      	mov	r3, r2
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	4413      	add	r3, r2
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	4a15      	ldr	r2, [pc, #84]	; (8007fe8 <prvAddNewTaskToReadyList+0xd8>)
 8007f92:	441a      	add	r2, r3
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	3304      	adds	r3, #4
 8007f98:	4619      	mov	r1, r3
 8007f9a:	4610      	mov	r0, r2
 8007f9c:	f7ff f917 	bl	80071ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007fa0:	f001 f9f8 	bl	8009394 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007fa4:	4b0d      	ldr	r3, [pc, #52]	; (8007fdc <prvAddNewTaskToReadyList+0xcc>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d00e      	beq.n	8007fca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007fac:	4b0a      	ldr	r3, [pc, #40]	; (8007fd8 <prvAddNewTaskToReadyList+0xc8>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d207      	bcs.n	8007fca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007fba:	4b0c      	ldr	r3, [pc, #48]	; (8007fec <prvAddNewTaskToReadyList+0xdc>)
 8007fbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fc0:	601a      	str	r2, [r3, #0]
 8007fc2:	f3bf 8f4f 	dsb	sy
 8007fc6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007fca:	bf00      	nop
 8007fcc:	3708      	adds	r7, #8
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop
 8007fd4:	20000d90 	.word	0x20000d90
 8007fd8:	200008bc 	.word	0x200008bc
 8007fdc:	20000d9c 	.word	0x20000d9c
 8007fe0:	20000dac 	.word	0x20000dac
 8007fe4:	20000d98 	.word	0x20000d98
 8007fe8:	200008c0 	.word	0x200008c0
 8007fec:	e000ed04 	.word	0xe000ed04

08007ff0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b08a      	sub	sp, #40	; 0x28
 8007ff4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007ffe:	463a      	mov	r2, r7
 8008000:	1d39      	adds	r1, r7, #4
 8008002:	f107 0308 	add.w	r3, r7, #8
 8008006:	4618      	mov	r0, r3
 8008008:	f7ff f880 	bl	800710c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800800c:	6839      	ldr	r1, [r7, #0]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	68ba      	ldr	r2, [r7, #8]
 8008012:	9202      	str	r2, [sp, #8]
 8008014:	9301      	str	r3, [sp, #4]
 8008016:	2300      	movs	r3, #0
 8008018:	9300      	str	r3, [sp, #0]
 800801a:	2300      	movs	r3, #0
 800801c:	460a      	mov	r2, r1
 800801e:	4921      	ldr	r1, [pc, #132]	; (80080a4 <vTaskStartScheduler+0xb4>)
 8008020:	4821      	ldr	r0, [pc, #132]	; (80080a8 <vTaskStartScheduler+0xb8>)
 8008022:	f7ff fe43 	bl	8007cac <xTaskCreateStatic>
 8008026:	4603      	mov	r3, r0
 8008028:	4a20      	ldr	r2, [pc, #128]	; (80080ac <vTaskStartScheduler+0xbc>)
 800802a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800802c:	4b1f      	ldr	r3, [pc, #124]	; (80080ac <vTaskStartScheduler+0xbc>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d002      	beq.n	800803a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008034:	2301      	movs	r3, #1
 8008036:	617b      	str	r3, [r7, #20]
 8008038:	e001      	b.n	800803e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800803a:	2300      	movs	r3, #0
 800803c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	2b01      	cmp	r3, #1
 8008042:	d102      	bne.n	800804a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008044:	f000 fcfc 	bl	8008a40 <xTimerCreateTimerTask>
 8008048:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	2b01      	cmp	r3, #1
 800804e:	d116      	bne.n	800807e <vTaskStartScheduler+0x8e>
	__asm volatile
 8008050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008054:	f383 8811 	msr	BASEPRI, r3
 8008058:	f3bf 8f6f 	isb	sy
 800805c:	f3bf 8f4f 	dsb	sy
 8008060:	613b      	str	r3, [r7, #16]
}
 8008062:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008064:	4b12      	ldr	r3, [pc, #72]	; (80080b0 <vTaskStartScheduler+0xc0>)
 8008066:	f04f 32ff 	mov.w	r2, #4294967295
 800806a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800806c:	4b11      	ldr	r3, [pc, #68]	; (80080b4 <vTaskStartScheduler+0xc4>)
 800806e:	2201      	movs	r2, #1
 8008070:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008072:	4b11      	ldr	r3, [pc, #68]	; (80080b8 <vTaskStartScheduler+0xc8>)
 8008074:	2200      	movs	r2, #0
 8008076:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008078:	f001 f8ba 	bl	80091f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800807c:	e00e      	b.n	800809c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008084:	d10a      	bne.n	800809c <vTaskStartScheduler+0xac>
	__asm volatile
 8008086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808a:	f383 8811 	msr	BASEPRI, r3
 800808e:	f3bf 8f6f 	isb	sy
 8008092:	f3bf 8f4f 	dsb	sy
 8008096:	60fb      	str	r3, [r7, #12]
}
 8008098:	bf00      	nop
 800809a:	e7fe      	b.n	800809a <vTaskStartScheduler+0xaa>
}
 800809c:	bf00      	nop
 800809e:	3718      	adds	r7, #24
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	0800a474 	.word	0x0800a474
 80080a8:	080086d5 	.word	0x080086d5
 80080ac:	20000db4 	.word	0x20000db4
 80080b0:	20000db0 	.word	0x20000db0
 80080b4:	20000d9c 	.word	0x20000d9c
 80080b8:	20000d94 	.word	0x20000d94

080080bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80080bc:	b480      	push	{r7}
 80080be:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80080c0:	4b04      	ldr	r3, [pc, #16]	; (80080d4 <vTaskSuspendAll+0x18>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	3301      	adds	r3, #1
 80080c6:	4a03      	ldr	r2, [pc, #12]	; (80080d4 <vTaskSuspendAll+0x18>)
 80080c8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80080ca:	bf00      	nop
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr
 80080d4:	20000db8 	.word	0x20000db8

080080d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80080de:	2300      	movs	r3, #0
 80080e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80080e2:	2300      	movs	r3, #0
 80080e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80080e6:	4b42      	ldr	r3, [pc, #264]	; (80081f0 <xTaskResumeAll+0x118>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d10a      	bne.n	8008104 <xTaskResumeAll+0x2c>
	__asm volatile
 80080ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f2:	f383 8811 	msr	BASEPRI, r3
 80080f6:	f3bf 8f6f 	isb	sy
 80080fa:	f3bf 8f4f 	dsb	sy
 80080fe:	603b      	str	r3, [r7, #0]
}
 8008100:	bf00      	nop
 8008102:	e7fe      	b.n	8008102 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008104:	f001 f916 	bl	8009334 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008108:	4b39      	ldr	r3, [pc, #228]	; (80081f0 <xTaskResumeAll+0x118>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	3b01      	subs	r3, #1
 800810e:	4a38      	ldr	r2, [pc, #224]	; (80081f0 <xTaskResumeAll+0x118>)
 8008110:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008112:	4b37      	ldr	r3, [pc, #220]	; (80081f0 <xTaskResumeAll+0x118>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d162      	bne.n	80081e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800811a:	4b36      	ldr	r3, [pc, #216]	; (80081f4 <xTaskResumeAll+0x11c>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d05e      	beq.n	80081e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008122:	e02f      	b.n	8008184 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008124:	4b34      	ldr	r3, [pc, #208]	; (80081f8 <xTaskResumeAll+0x120>)
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	68db      	ldr	r3, [r3, #12]
 800812a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	3318      	adds	r3, #24
 8008130:	4618      	mov	r0, r3
 8008132:	f7ff f8a9 	bl	8007288 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	3304      	adds	r3, #4
 800813a:	4618      	mov	r0, r3
 800813c:	f7ff f8a4 	bl	8007288 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008144:	4b2d      	ldr	r3, [pc, #180]	; (80081fc <xTaskResumeAll+0x124>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	429a      	cmp	r2, r3
 800814a:	d903      	bls.n	8008154 <xTaskResumeAll+0x7c>
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008150:	4a2a      	ldr	r2, [pc, #168]	; (80081fc <xTaskResumeAll+0x124>)
 8008152:	6013      	str	r3, [r2, #0]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008158:	4613      	mov	r3, r2
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	4413      	add	r3, r2
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	4a27      	ldr	r2, [pc, #156]	; (8008200 <xTaskResumeAll+0x128>)
 8008162:	441a      	add	r2, r3
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	3304      	adds	r3, #4
 8008168:	4619      	mov	r1, r3
 800816a:	4610      	mov	r0, r2
 800816c:	f7ff f82f 	bl	80071ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008174:	4b23      	ldr	r3, [pc, #140]	; (8008204 <xTaskResumeAll+0x12c>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800817a:	429a      	cmp	r2, r3
 800817c:	d302      	bcc.n	8008184 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800817e:	4b22      	ldr	r3, [pc, #136]	; (8008208 <xTaskResumeAll+0x130>)
 8008180:	2201      	movs	r2, #1
 8008182:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008184:	4b1c      	ldr	r3, [pc, #112]	; (80081f8 <xTaskResumeAll+0x120>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d1cb      	bne.n	8008124 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d001      	beq.n	8008196 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008192:	f000 fb55 	bl	8008840 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008196:	4b1d      	ldr	r3, [pc, #116]	; (800820c <xTaskResumeAll+0x134>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d010      	beq.n	80081c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80081a2:	f000 f847 	bl	8008234 <xTaskIncrementTick>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d002      	beq.n	80081b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80081ac:	4b16      	ldr	r3, [pc, #88]	; (8008208 <xTaskResumeAll+0x130>)
 80081ae:	2201      	movs	r2, #1
 80081b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	3b01      	subs	r3, #1
 80081b6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d1f1      	bne.n	80081a2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80081be:	4b13      	ldr	r3, [pc, #76]	; (800820c <xTaskResumeAll+0x134>)
 80081c0:	2200      	movs	r2, #0
 80081c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80081c4:	4b10      	ldr	r3, [pc, #64]	; (8008208 <xTaskResumeAll+0x130>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d009      	beq.n	80081e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80081cc:	2301      	movs	r3, #1
 80081ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80081d0:	4b0f      	ldr	r3, [pc, #60]	; (8008210 <xTaskResumeAll+0x138>)
 80081d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081d6:	601a      	str	r2, [r3, #0]
 80081d8:	f3bf 8f4f 	dsb	sy
 80081dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80081e0:	f001 f8d8 	bl	8009394 <vPortExitCritical>

	return xAlreadyYielded;
 80081e4:	68bb      	ldr	r3, [r7, #8]
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3710      	adds	r7, #16
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	20000db8 	.word	0x20000db8
 80081f4:	20000d90 	.word	0x20000d90
 80081f8:	20000d50 	.word	0x20000d50
 80081fc:	20000d98 	.word	0x20000d98
 8008200:	200008c0 	.word	0x200008c0
 8008204:	200008bc 	.word	0x200008bc
 8008208:	20000da4 	.word	0x20000da4
 800820c:	20000da0 	.word	0x20000da0
 8008210:	e000ed04 	.word	0xe000ed04

08008214 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008214:	b480      	push	{r7}
 8008216:	b083      	sub	sp, #12
 8008218:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800821a:	4b05      	ldr	r3, [pc, #20]	; (8008230 <xTaskGetTickCount+0x1c>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008220:	687b      	ldr	r3, [r7, #4]
}
 8008222:	4618      	mov	r0, r3
 8008224:	370c      	adds	r7, #12
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr
 800822e:	bf00      	nop
 8008230:	20000d94 	.word	0x20000d94

08008234 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b086      	sub	sp, #24
 8008238:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800823a:	2300      	movs	r3, #0
 800823c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800823e:	4b4f      	ldr	r3, [pc, #316]	; (800837c <xTaskIncrementTick+0x148>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	2b00      	cmp	r3, #0
 8008244:	f040 8089 	bne.w	800835a <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008248:	4b4d      	ldr	r3, [pc, #308]	; (8008380 <xTaskIncrementTick+0x14c>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	3301      	adds	r3, #1
 800824e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008250:	4a4b      	ldr	r2, [pc, #300]	; (8008380 <xTaskIncrementTick+0x14c>)
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d120      	bne.n	800829e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800825c:	4b49      	ldr	r3, [pc, #292]	; (8008384 <xTaskIncrementTick+0x150>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d00a      	beq.n	800827c <xTaskIncrementTick+0x48>
	__asm volatile
 8008266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826a:	f383 8811 	msr	BASEPRI, r3
 800826e:	f3bf 8f6f 	isb	sy
 8008272:	f3bf 8f4f 	dsb	sy
 8008276:	603b      	str	r3, [r7, #0]
}
 8008278:	bf00      	nop
 800827a:	e7fe      	b.n	800827a <xTaskIncrementTick+0x46>
 800827c:	4b41      	ldr	r3, [pc, #260]	; (8008384 <xTaskIncrementTick+0x150>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	60fb      	str	r3, [r7, #12]
 8008282:	4b41      	ldr	r3, [pc, #260]	; (8008388 <xTaskIncrementTick+0x154>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a3f      	ldr	r2, [pc, #252]	; (8008384 <xTaskIncrementTick+0x150>)
 8008288:	6013      	str	r3, [r2, #0]
 800828a:	4a3f      	ldr	r2, [pc, #252]	; (8008388 <xTaskIncrementTick+0x154>)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6013      	str	r3, [r2, #0]
 8008290:	4b3e      	ldr	r3, [pc, #248]	; (800838c <xTaskIncrementTick+0x158>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	3301      	adds	r3, #1
 8008296:	4a3d      	ldr	r2, [pc, #244]	; (800838c <xTaskIncrementTick+0x158>)
 8008298:	6013      	str	r3, [r2, #0]
 800829a:	f000 fad1 	bl	8008840 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800829e:	4b3c      	ldr	r3, [pc, #240]	; (8008390 <xTaskIncrementTick+0x15c>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	693a      	ldr	r2, [r7, #16]
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d349      	bcc.n	800833c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082a8:	4b36      	ldr	r3, [pc, #216]	; (8008384 <xTaskIncrementTick+0x150>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d104      	bne.n	80082bc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082b2:	4b37      	ldr	r3, [pc, #220]	; (8008390 <xTaskIncrementTick+0x15c>)
 80082b4:	f04f 32ff 	mov.w	r2, #4294967295
 80082b8:	601a      	str	r2, [r3, #0]
					break;
 80082ba:	e03f      	b.n	800833c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082bc:	4b31      	ldr	r3, [pc, #196]	; (8008384 <xTaskIncrementTick+0x150>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	68db      	ldr	r3, [r3, #12]
 80082c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80082cc:	693a      	ldr	r2, [r7, #16]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d203      	bcs.n	80082dc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80082d4:	4a2e      	ldr	r2, [pc, #184]	; (8008390 <xTaskIncrementTick+0x15c>)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80082da:	e02f      	b.n	800833c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	3304      	adds	r3, #4
 80082e0:	4618      	mov	r0, r3
 80082e2:	f7fe ffd1 	bl	8007288 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d004      	beq.n	80082f8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	3318      	adds	r3, #24
 80082f2:	4618      	mov	r0, r3
 80082f4:	f7fe ffc8 	bl	8007288 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082fc:	4b25      	ldr	r3, [pc, #148]	; (8008394 <xTaskIncrementTick+0x160>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	429a      	cmp	r2, r3
 8008302:	d903      	bls.n	800830c <xTaskIncrementTick+0xd8>
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008308:	4a22      	ldr	r2, [pc, #136]	; (8008394 <xTaskIncrementTick+0x160>)
 800830a:	6013      	str	r3, [r2, #0]
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008310:	4613      	mov	r3, r2
 8008312:	009b      	lsls	r3, r3, #2
 8008314:	4413      	add	r3, r2
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	4a1f      	ldr	r2, [pc, #124]	; (8008398 <xTaskIncrementTick+0x164>)
 800831a:	441a      	add	r2, r3
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	3304      	adds	r3, #4
 8008320:	4619      	mov	r1, r3
 8008322:	4610      	mov	r0, r2
 8008324:	f7fe ff53 	bl	80071ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800832c:	4b1b      	ldr	r3, [pc, #108]	; (800839c <xTaskIncrementTick+0x168>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008332:	429a      	cmp	r2, r3
 8008334:	d3b8      	bcc.n	80082a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008336:	2301      	movs	r3, #1
 8008338:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800833a:	e7b5      	b.n	80082a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800833c:	4b17      	ldr	r3, [pc, #92]	; (800839c <xTaskIncrementTick+0x168>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008342:	4915      	ldr	r1, [pc, #84]	; (8008398 <xTaskIncrementTick+0x164>)
 8008344:	4613      	mov	r3, r2
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	4413      	add	r3, r2
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	440b      	add	r3, r1
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2b01      	cmp	r3, #1
 8008352:	d907      	bls.n	8008364 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8008354:	2301      	movs	r3, #1
 8008356:	617b      	str	r3, [r7, #20]
 8008358:	e004      	b.n	8008364 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800835a:	4b11      	ldr	r3, [pc, #68]	; (80083a0 <xTaskIncrementTick+0x16c>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	3301      	adds	r3, #1
 8008360:	4a0f      	ldr	r2, [pc, #60]	; (80083a0 <xTaskIncrementTick+0x16c>)
 8008362:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008364:	4b0f      	ldr	r3, [pc, #60]	; (80083a4 <xTaskIncrementTick+0x170>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d001      	beq.n	8008370 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800836c:	2301      	movs	r3, #1
 800836e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008370:	697b      	ldr	r3, [r7, #20]
}
 8008372:	4618      	mov	r0, r3
 8008374:	3718      	adds	r7, #24
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	20000db8 	.word	0x20000db8
 8008380:	20000d94 	.word	0x20000d94
 8008384:	20000d48 	.word	0x20000d48
 8008388:	20000d4c 	.word	0x20000d4c
 800838c:	20000da8 	.word	0x20000da8
 8008390:	20000db0 	.word	0x20000db0
 8008394:	20000d98 	.word	0x20000d98
 8008398:	200008c0 	.word	0x200008c0
 800839c:	200008bc 	.word	0x200008bc
 80083a0:	20000da0 	.word	0x20000da0
 80083a4:	20000da4 	.word	0x20000da4

080083a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80083a8:	b480      	push	{r7}
 80083aa:	b085      	sub	sp, #20
 80083ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80083ae:	4b28      	ldr	r3, [pc, #160]	; (8008450 <vTaskSwitchContext+0xa8>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d003      	beq.n	80083be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80083b6:	4b27      	ldr	r3, [pc, #156]	; (8008454 <vTaskSwitchContext+0xac>)
 80083b8:	2201      	movs	r2, #1
 80083ba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80083bc:	e041      	b.n	8008442 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80083be:	4b25      	ldr	r3, [pc, #148]	; (8008454 <vTaskSwitchContext+0xac>)
 80083c0:	2200      	movs	r2, #0
 80083c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083c4:	4b24      	ldr	r3, [pc, #144]	; (8008458 <vTaskSwitchContext+0xb0>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	60fb      	str	r3, [r7, #12]
 80083ca:	e010      	b.n	80083ee <vTaskSwitchContext+0x46>
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d10a      	bne.n	80083e8 <vTaskSwitchContext+0x40>
	__asm volatile
 80083d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d6:	f383 8811 	msr	BASEPRI, r3
 80083da:	f3bf 8f6f 	isb	sy
 80083de:	f3bf 8f4f 	dsb	sy
 80083e2:	607b      	str	r3, [r7, #4]
}
 80083e4:	bf00      	nop
 80083e6:	e7fe      	b.n	80083e6 <vTaskSwitchContext+0x3e>
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	3b01      	subs	r3, #1
 80083ec:	60fb      	str	r3, [r7, #12]
 80083ee:	491b      	ldr	r1, [pc, #108]	; (800845c <vTaskSwitchContext+0xb4>)
 80083f0:	68fa      	ldr	r2, [r7, #12]
 80083f2:	4613      	mov	r3, r2
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	4413      	add	r3, r2
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	440b      	add	r3, r1
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d0e4      	beq.n	80083cc <vTaskSwitchContext+0x24>
 8008402:	68fa      	ldr	r2, [r7, #12]
 8008404:	4613      	mov	r3, r2
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	4413      	add	r3, r2
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	4a13      	ldr	r2, [pc, #76]	; (800845c <vTaskSwitchContext+0xb4>)
 800840e:	4413      	add	r3, r2
 8008410:	60bb      	str	r3, [r7, #8]
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	685a      	ldr	r2, [r3, #4]
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	605a      	str	r2, [r3, #4]
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	685a      	ldr	r2, [r3, #4]
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	3308      	adds	r3, #8
 8008424:	429a      	cmp	r2, r3
 8008426:	d104      	bne.n	8008432 <vTaskSwitchContext+0x8a>
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	685a      	ldr	r2, [r3, #4]
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	605a      	str	r2, [r3, #4]
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	4a09      	ldr	r2, [pc, #36]	; (8008460 <vTaskSwitchContext+0xb8>)
 800843a:	6013      	str	r3, [r2, #0]
 800843c:	4a06      	ldr	r2, [pc, #24]	; (8008458 <vTaskSwitchContext+0xb0>)
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	6013      	str	r3, [r2, #0]
}
 8008442:	bf00      	nop
 8008444:	3714      	adds	r7, #20
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop
 8008450:	20000db8 	.word	0x20000db8
 8008454:	20000da4 	.word	0x20000da4
 8008458:	20000d98 	.word	0x20000d98
 800845c:	200008c0 	.word	0x200008c0
 8008460:	200008bc 	.word	0x200008bc

08008464 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d10a      	bne.n	800848a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008478:	f383 8811 	msr	BASEPRI, r3
 800847c:	f3bf 8f6f 	isb	sy
 8008480:	f3bf 8f4f 	dsb	sy
 8008484:	60fb      	str	r3, [r7, #12]
}
 8008486:	bf00      	nop
 8008488:	e7fe      	b.n	8008488 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800848a:	4b07      	ldr	r3, [pc, #28]	; (80084a8 <vTaskPlaceOnEventList+0x44>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	3318      	adds	r3, #24
 8008490:	4619      	mov	r1, r3
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f7fe febf 	bl	8007216 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008498:	2101      	movs	r1, #1
 800849a:	6838      	ldr	r0, [r7, #0]
 800849c:	f000 fa7c 	bl	8008998 <prvAddCurrentTaskToDelayedList>
}
 80084a0:	bf00      	nop
 80084a2:	3710      	adds	r7, #16
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	200008bc 	.word	0x200008bc

080084ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b086      	sub	sp, #24
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	60b9      	str	r1, [r7, #8]
 80084b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d10a      	bne.n	80084d4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80084be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c2:	f383 8811 	msr	BASEPRI, r3
 80084c6:	f3bf 8f6f 	isb	sy
 80084ca:	f3bf 8f4f 	dsb	sy
 80084ce:	617b      	str	r3, [r7, #20]
}
 80084d0:	bf00      	nop
 80084d2:	e7fe      	b.n	80084d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80084d4:	4b0a      	ldr	r3, [pc, #40]	; (8008500 <vTaskPlaceOnEventListRestricted+0x54>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	3318      	adds	r3, #24
 80084da:	4619      	mov	r1, r3
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	f7fe fe76 	bl	80071ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d002      	beq.n	80084ee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80084e8:	f04f 33ff 	mov.w	r3, #4294967295
 80084ec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80084ee:	6879      	ldr	r1, [r7, #4]
 80084f0:	68b8      	ldr	r0, [r7, #8]
 80084f2:	f000 fa51 	bl	8008998 <prvAddCurrentTaskToDelayedList>
	}
 80084f6:	bf00      	nop
 80084f8:	3718      	adds	r7, #24
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	200008bc 	.word	0x200008bc

08008504 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b086      	sub	sp, #24
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	68db      	ldr	r3, [r3, #12]
 8008510:	68db      	ldr	r3, [r3, #12]
 8008512:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d10a      	bne.n	8008530 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800851a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800851e:	f383 8811 	msr	BASEPRI, r3
 8008522:	f3bf 8f6f 	isb	sy
 8008526:	f3bf 8f4f 	dsb	sy
 800852a:	60fb      	str	r3, [r7, #12]
}
 800852c:	bf00      	nop
 800852e:	e7fe      	b.n	800852e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	3318      	adds	r3, #24
 8008534:	4618      	mov	r0, r3
 8008536:	f7fe fea7 	bl	8007288 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800853a:	4b1e      	ldr	r3, [pc, #120]	; (80085b4 <xTaskRemoveFromEventList+0xb0>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d11d      	bne.n	800857e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	3304      	adds	r3, #4
 8008546:	4618      	mov	r0, r3
 8008548:	f7fe fe9e 	bl	8007288 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008550:	4b19      	ldr	r3, [pc, #100]	; (80085b8 <xTaskRemoveFromEventList+0xb4>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	429a      	cmp	r2, r3
 8008556:	d903      	bls.n	8008560 <xTaskRemoveFromEventList+0x5c>
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855c:	4a16      	ldr	r2, [pc, #88]	; (80085b8 <xTaskRemoveFromEventList+0xb4>)
 800855e:	6013      	str	r3, [r2, #0]
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008564:	4613      	mov	r3, r2
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	4413      	add	r3, r2
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	4a13      	ldr	r2, [pc, #76]	; (80085bc <xTaskRemoveFromEventList+0xb8>)
 800856e:	441a      	add	r2, r3
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	3304      	adds	r3, #4
 8008574:	4619      	mov	r1, r3
 8008576:	4610      	mov	r0, r2
 8008578:	f7fe fe29 	bl	80071ce <vListInsertEnd>
 800857c:	e005      	b.n	800858a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	3318      	adds	r3, #24
 8008582:	4619      	mov	r1, r3
 8008584:	480e      	ldr	r0, [pc, #56]	; (80085c0 <xTaskRemoveFromEventList+0xbc>)
 8008586:	f7fe fe22 	bl	80071ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800858e:	4b0d      	ldr	r3, [pc, #52]	; (80085c4 <xTaskRemoveFromEventList+0xc0>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008594:	429a      	cmp	r2, r3
 8008596:	d905      	bls.n	80085a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008598:	2301      	movs	r3, #1
 800859a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800859c:	4b0a      	ldr	r3, [pc, #40]	; (80085c8 <xTaskRemoveFromEventList+0xc4>)
 800859e:	2201      	movs	r2, #1
 80085a0:	601a      	str	r2, [r3, #0]
 80085a2:	e001      	b.n	80085a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80085a4:	2300      	movs	r3, #0
 80085a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80085a8:	697b      	ldr	r3, [r7, #20]
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3718      	adds	r7, #24
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	20000db8 	.word	0x20000db8
 80085b8:	20000d98 	.word	0x20000d98
 80085bc:	200008c0 	.word	0x200008c0
 80085c0:	20000d50 	.word	0x20000d50
 80085c4:	200008bc 	.word	0x200008bc
 80085c8:	20000da4 	.word	0x20000da4

080085cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80085cc:	b480      	push	{r7}
 80085ce:	b083      	sub	sp, #12
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80085d4:	4b06      	ldr	r3, [pc, #24]	; (80085f0 <vTaskInternalSetTimeOutState+0x24>)
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80085dc:	4b05      	ldr	r3, [pc, #20]	; (80085f4 <vTaskInternalSetTimeOutState+0x28>)
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	605a      	str	r2, [r3, #4]
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr
 80085f0:	20000da8 	.word	0x20000da8
 80085f4:	20000d94 	.word	0x20000d94

080085f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b088      	sub	sp, #32
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d10a      	bne.n	800861e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860c:	f383 8811 	msr	BASEPRI, r3
 8008610:	f3bf 8f6f 	isb	sy
 8008614:	f3bf 8f4f 	dsb	sy
 8008618:	613b      	str	r3, [r7, #16]
}
 800861a:	bf00      	nop
 800861c:	e7fe      	b.n	800861c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d10a      	bne.n	800863a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008628:	f383 8811 	msr	BASEPRI, r3
 800862c:	f3bf 8f6f 	isb	sy
 8008630:	f3bf 8f4f 	dsb	sy
 8008634:	60fb      	str	r3, [r7, #12]
}
 8008636:	bf00      	nop
 8008638:	e7fe      	b.n	8008638 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800863a:	f000 fe7b 	bl	8009334 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800863e:	4b1d      	ldr	r3, [pc, #116]	; (80086b4 <xTaskCheckForTimeOut+0xbc>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	69ba      	ldr	r2, [r7, #24]
 800864a:	1ad3      	subs	r3, r2, r3
 800864c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008656:	d102      	bne.n	800865e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008658:	2300      	movs	r3, #0
 800865a:	61fb      	str	r3, [r7, #28]
 800865c:	e023      	b.n	80086a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	4b15      	ldr	r3, [pc, #84]	; (80086b8 <xTaskCheckForTimeOut+0xc0>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	429a      	cmp	r2, r3
 8008668:	d007      	beq.n	800867a <xTaskCheckForTimeOut+0x82>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	69ba      	ldr	r2, [r7, #24]
 8008670:	429a      	cmp	r2, r3
 8008672:	d302      	bcc.n	800867a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008674:	2301      	movs	r3, #1
 8008676:	61fb      	str	r3, [r7, #28]
 8008678:	e015      	b.n	80086a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	697a      	ldr	r2, [r7, #20]
 8008680:	429a      	cmp	r2, r3
 8008682:	d20b      	bcs.n	800869c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	1ad2      	subs	r2, r2, r3
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f7ff ff9b 	bl	80085cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008696:	2300      	movs	r3, #0
 8008698:	61fb      	str	r3, [r7, #28]
 800869a:	e004      	b.n	80086a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	2200      	movs	r2, #0
 80086a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80086a2:	2301      	movs	r3, #1
 80086a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80086a6:	f000 fe75 	bl	8009394 <vPortExitCritical>

	return xReturn;
 80086aa:	69fb      	ldr	r3, [r7, #28]
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3720      	adds	r7, #32
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	20000d94 	.word	0x20000d94
 80086b8:	20000da8 	.word	0x20000da8

080086bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80086bc:	b480      	push	{r7}
 80086be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80086c0:	4b03      	ldr	r3, [pc, #12]	; (80086d0 <vTaskMissedYield+0x14>)
 80086c2:	2201      	movs	r2, #1
 80086c4:	601a      	str	r2, [r3, #0]
}
 80086c6:	bf00      	nop
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr
 80086d0:	20000da4 	.word	0x20000da4

080086d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80086dc:	f000 f852 	bl	8008784 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80086e0:	4b06      	ldr	r3, [pc, #24]	; (80086fc <prvIdleTask+0x28>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d9f9      	bls.n	80086dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80086e8:	4b05      	ldr	r3, [pc, #20]	; (8008700 <prvIdleTask+0x2c>)
 80086ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086ee:	601a      	str	r2, [r3, #0]
 80086f0:	f3bf 8f4f 	dsb	sy
 80086f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80086f8:	e7f0      	b.n	80086dc <prvIdleTask+0x8>
 80086fa:	bf00      	nop
 80086fc:	200008c0 	.word	0x200008c0
 8008700:	e000ed04 	.word	0xe000ed04

08008704 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800870a:	2300      	movs	r3, #0
 800870c:	607b      	str	r3, [r7, #4]
 800870e:	e00c      	b.n	800872a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	4613      	mov	r3, r2
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	4413      	add	r3, r2
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	4a12      	ldr	r2, [pc, #72]	; (8008764 <prvInitialiseTaskLists+0x60>)
 800871c:	4413      	add	r3, r2
 800871e:	4618      	mov	r0, r3
 8008720:	f7fe fd28 	bl	8007174 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	3301      	adds	r3, #1
 8008728:	607b      	str	r3, [r7, #4]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2b37      	cmp	r3, #55	; 0x37
 800872e:	d9ef      	bls.n	8008710 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008730:	480d      	ldr	r0, [pc, #52]	; (8008768 <prvInitialiseTaskLists+0x64>)
 8008732:	f7fe fd1f 	bl	8007174 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008736:	480d      	ldr	r0, [pc, #52]	; (800876c <prvInitialiseTaskLists+0x68>)
 8008738:	f7fe fd1c 	bl	8007174 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800873c:	480c      	ldr	r0, [pc, #48]	; (8008770 <prvInitialiseTaskLists+0x6c>)
 800873e:	f7fe fd19 	bl	8007174 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008742:	480c      	ldr	r0, [pc, #48]	; (8008774 <prvInitialiseTaskLists+0x70>)
 8008744:	f7fe fd16 	bl	8007174 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008748:	480b      	ldr	r0, [pc, #44]	; (8008778 <prvInitialiseTaskLists+0x74>)
 800874a:	f7fe fd13 	bl	8007174 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800874e:	4b0b      	ldr	r3, [pc, #44]	; (800877c <prvInitialiseTaskLists+0x78>)
 8008750:	4a05      	ldr	r2, [pc, #20]	; (8008768 <prvInitialiseTaskLists+0x64>)
 8008752:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008754:	4b0a      	ldr	r3, [pc, #40]	; (8008780 <prvInitialiseTaskLists+0x7c>)
 8008756:	4a05      	ldr	r2, [pc, #20]	; (800876c <prvInitialiseTaskLists+0x68>)
 8008758:	601a      	str	r2, [r3, #0]
}
 800875a:	bf00      	nop
 800875c:	3708      	adds	r7, #8
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	200008c0 	.word	0x200008c0
 8008768:	20000d20 	.word	0x20000d20
 800876c:	20000d34 	.word	0x20000d34
 8008770:	20000d50 	.word	0x20000d50
 8008774:	20000d64 	.word	0x20000d64
 8008778:	20000d7c 	.word	0x20000d7c
 800877c:	20000d48 	.word	0x20000d48
 8008780:	20000d4c 	.word	0x20000d4c

08008784 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800878a:	e019      	b.n	80087c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800878c:	f000 fdd2 	bl	8009334 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008790:	4b10      	ldr	r3, [pc, #64]	; (80087d4 <prvCheckTasksWaitingTermination+0x50>)
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	3304      	adds	r3, #4
 800879c:	4618      	mov	r0, r3
 800879e:	f7fe fd73 	bl	8007288 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80087a2:	4b0d      	ldr	r3, [pc, #52]	; (80087d8 <prvCheckTasksWaitingTermination+0x54>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	3b01      	subs	r3, #1
 80087a8:	4a0b      	ldr	r2, [pc, #44]	; (80087d8 <prvCheckTasksWaitingTermination+0x54>)
 80087aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80087ac:	4b0b      	ldr	r3, [pc, #44]	; (80087dc <prvCheckTasksWaitingTermination+0x58>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	3b01      	subs	r3, #1
 80087b2:	4a0a      	ldr	r2, [pc, #40]	; (80087dc <prvCheckTasksWaitingTermination+0x58>)
 80087b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80087b6:	f000 fded 	bl	8009394 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 f810 	bl	80087e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80087c0:	4b06      	ldr	r3, [pc, #24]	; (80087dc <prvCheckTasksWaitingTermination+0x58>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d1e1      	bne.n	800878c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80087c8:	bf00      	nop
 80087ca:	bf00      	nop
 80087cc:	3708      	adds	r7, #8
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	20000d64 	.word	0x20000d64
 80087d8:	20000d90 	.word	0x20000d90
 80087dc:	20000d78 	.word	0x20000d78

080087e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d108      	bne.n	8008804 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087f6:	4618      	mov	r0, r3
 80087f8:	f000 ff82 	bl	8009700 <vPortFree>
				vPortFree( pxTCB );
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 ff7f 	bl	8009700 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008802:	e018      	b.n	8008836 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800880a:	2b01      	cmp	r3, #1
 800880c:	d103      	bne.n	8008816 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 ff76 	bl	8009700 <vPortFree>
	}
 8008814:	e00f      	b.n	8008836 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800881c:	2b02      	cmp	r3, #2
 800881e:	d00a      	beq.n	8008836 <prvDeleteTCB+0x56>
	__asm volatile
 8008820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008824:	f383 8811 	msr	BASEPRI, r3
 8008828:	f3bf 8f6f 	isb	sy
 800882c:	f3bf 8f4f 	dsb	sy
 8008830:	60fb      	str	r3, [r7, #12]
}
 8008832:	bf00      	nop
 8008834:	e7fe      	b.n	8008834 <prvDeleteTCB+0x54>
	}
 8008836:	bf00      	nop
 8008838:	3710      	adds	r7, #16
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
	...

08008840 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008846:	4b0c      	ldr	r3, [pc, #48]	; (8008878 <prvResetNextTaskUnblockTime+0x38>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d104      	bne.n	800885a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008850:	4b0a      	ldr	r3, [pc, #40]	; (800887c <prvResetNextTaskUnblockTime+0x3c>)
 8008852:	f04f 32ff 	mov.w	r2, #4294967295
 8008856:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008858:	e008      	b.n	800886c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800885a:	4b07      	ldr	r3, [pc, #28]	; (8008878 <prvResetNextTaskUnblockTime+0x38>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	68db      	ldr	r3, [r3, #12]
 8008862:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	4a04      	ldr	r2, [pc, #16]	; (800887c <prvResetNextTaskUnblockTime+0x3c>)
 800886a:	6013      	str	r3, [r2, #0]
}
 800886c:	bf00      	nop
 800886e:	370c      	adds	r7, #12
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr
 8008878:	20000d48 	.word	0x20000d48
 800887c:	20000db0 	.word	0x20000db0

08008880 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008886:	4b0b      	ldr	r3, [pc, #44]	; (80088b4 <xTaskGetSchedulerState+0x34>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d102      	bne.n	8008894 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800888e:	2301      	movs	r3, #1
 8008890:	607b      	str	r3, [r7, #4]
 8008892:	e008      	b.n	80088a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008894:	4b08      	ldr	r3, [pc, #32]	; (80088b8 <xTaskGetSchedulerState+0x38>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d102      	bne.n	80088a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800889c:	2302      	movs	r3, #2
 800889e:	607b      	str	r3, [r7, #4]
 80088a0:	e001      	b.n	80088a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80088a2:	2300      	movs	r3, #0
 80088a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80088a6:	687b      	ldr	r3, [r7, #4]
	}
 80088a8:	4618      	mov	r0, r3
 80088aa:	370c      	adds	r7, #12
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr
 80088b4:	20000d9c 	.word	0x20000d9c
 80088b8:	20000db8 	.word	0x20000db8

080088bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b086      	sub	sp, #24
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80088c8:	2300      	movs	r3, #0
 80088ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d056      	beq.n	8008980 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80088d2:	4b2e      	ldr	r3, [pc, #184]	; (800898c <xTaskPriorityDisinherit+0xd0>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	693a      	ldr	r2, [r7, #16]
 80088d8:	429a      	cmp	r2, r3
 80088da:	d00a      	beq.n	80088f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80088dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e0:	f383 8811 	msr	BASEPRI, r3
 80088e4:	f3bf 8f6f 	isb	sy
 80088e8:	f3bf 8f4f 	dsb	sy
 80088ec:	60fb      	str	r3, [r7, #12]
}
 80088ee:	bf00      	nop
 80088f0:	e7fe      	b.n	80088f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d10a      	bne.n	8008910 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80088fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fe:	f383 8811 	msr	BASEPRI, r3
 8008902:	f3bf 8f6f 	isb	sy
 8008906:	f3bf 8f4f 	dsb	sy
 800890a:	60bb      	str	r3, [r7, #8]
}
 800890c:	bf00      	nop
 800890e:	e7fe      	b.n	800890e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008914:	1e5a      	subs	r2, r3, #1
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008922:	429a      	cmp	r2, r3
 8008924:	d02c      	beq.n	8008980 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800892a:	2b00      	cmp	r3, #0
 800892c:	d128      	bne.n	8008980 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	3304      	adds	r3, #4
 8008932:	4618      	mov	r0, r3
 8008934:	f7fe fca8 	bl	8007288 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008944:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008950:	4b0f      	ldr	r3, [pc, #60]	; (8008990 <xTaskPriorityDisinherit+0xd4>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	429a      	cmp	r2, r3
 8008956:	d903      	bls.n	8008960 <xTaskPriorityDisinherit+0xa4>
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800895c:	4a0c      	ldr	r2, [pc, #48]	; (8008990 <xTaskPriorityDisinherit+0xd4>)
 800895e:	6013      	str	r3, [r2, #0]
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008964:	4613      	mov	r3, r2
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	4413      	add	r3, r2
 800896a:	009b      	lsls	r3, r3, #2
 800896c:	4a09      	ldr	r2, [pc, #36]	; (8008994 <xTaskPriorityDisinherit+0xd8>)
 800896e:	441a      	add	r2, r3
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	3304      	adds	r3, #4
 8008974:	4619      	mov	r1, r3
 8008976:	4610      	mov	r0, r2
 8008978:	f7fe fc29 	bl	80071ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800897c:	2301      	movs	r3, #1
 800897e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008980:	697b      	ldr	r3, [r7, #20]
	}
 8008982:	4618      	mov	r0, r3
 8008984:	3718      	adds	r7, #24
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
 800898a:	bf00      	nop
 800898c:	200008bc 	.word	0x200008bc
 8008990:	20000d98 	.word	0x20000d98
 8008994:	200008c0 	.word	0x200008c0

08008998 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80089a2:	4b21      	ldr	r3, [pc, #132]	; (8008a28 <prvAddCurrentTaskToDelayedList+0x90>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089a8:	4b20      	ldr	r3, [pc, #128]	; (8008a2c <prvAddCurrentTaskToDelayedList+0x94>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	3304      	adds	r3, #4
 80089ae:	4618      	mov	r0, r3
 80089b0:	f7fe fc6a 	bl	8007288 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ba:	d10a      	bne.n	80089d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d007      	beq.n	80089d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089c2:	4b1a      	ldr	r3, [pc, #104]	; (8008a2c <prvAddCurrentTaskToDelayedList+0x94>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	3304      	adds	r3, #4
 80089c8:	4619      	mov	r1, r3
 80089ca:	4819      	ldr	r0, [pc, #100]	; (8008a30 <prvAddCurrentTaskToDelayedList+0x98>)
 80089cc:	f7fe fbff 	bl	80071ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80089d0:	e026      	b.n	8008a20 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80089d2:	68fa      	ldr	r2, [r7, #12]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	4413      	add	r3, r2
 80089d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80089da:	4b14      	ldr	r3, [pc, #80]	; (8008a2c <prvAddCurrentTaskToDelayedList+0x94>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	68ba      	ldr	r2, [r7, #8]
 80089e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80089e2:	68ba      	ldr	r2, [r7, #8]
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d209      	bcs.n	80089fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089ea:	4b12      	ldr	r3, [pc, #72]	; (8008a34 <prvAddCurrentTaskToDelayedList+0x9c>)
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	4b0f      	ldr	r3, [pc, #60]	; (8008a2c <prvAddCurrentTaskToDelayedList+0x94>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	3304      	adds	r3, #4
 80089f4:	4619      	mov	r1, r3
 80089f6:	4610      	mov	r0, r2
 80089f8:	f7fe fc0d 	bl	8007216 <vListInsert>
}
 80089fc:	e010      	b.n	8008a20 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089fe:	4b0e      	ldr	r3, [pc, #56]	; (8008a38 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	4b0a      	ldr	r3, [pc, #40]	; (8008a2c <prvAddCurrentTaskToDelayedList+0x94>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	3304      	adds	r3, #4
 8008a08:	4619      	mov	r1, r3
 8008a0a:	4610      	mov	r0, r2
 8008a0c:	f7fe fc03 	bl	8007216 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008a10:	4b0a      	ldr	r3, [pc, #40]	; (8008a3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	68ba      	ldr	r2, [r7, #8]
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d202      	bcs.n	8008a20 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008a1a:	4a08      	ldr	r2, [pc, #32]	; (8008a3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	6013      	str	r3, [r2, #0]
}
 8008a20:	bf00      	nop
 8008a22:	3710      	adds	r7, #16
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}
 8008a28:	20000d94 	.word	0x20000d94
 8008a2c:	200008bc 	.word	0x200008bc
 8008a30:	20000d7c 	.word	0x20000d7c
 8008a34:	20000d4c 	.word	0x20000d4c
 8008a38:	20000d48 	.word	0x20000d48
 8008a3c:	20000db0 	.word	0x20000db0

08008a40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b08a      	sub	sp, #40	; 0x28
 8008a44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008a46:	2300      	movs	r3, #0
 8008a48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008a4a:	f000 fb07 	bl	800905c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008a4e:	4b1c      	ldr	r3, [pc, #112]	; (8008ac0 <xTimerCreateTimerTask+0x80>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d021      	beq.n	8008a9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008a56:	2300      	movs	r3, #0
 8008a58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008a5e:	1d3a      	adds	r2, r7, #4
 8008a60:	f107 0108 	add.w	r1, r7, #8
 8008a64:	f107 030c 	add.w	r3, r7, #12
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f7fe fb69 	bl	8007140 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008a6e:	6879      	ldr	r1, [r7, #4]
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	68fa      	ldr	r2, [r7, #12]
 8008a74:	9202      	str	r2, [sp, #8]
 8008a76:	9301      	str	r3, [sp, #4]
 8008a78:	2302      	movs	r3, #2
 8008a7a:	9300      	str	r3, [sp, #0]
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	460a      	mov	r2, r1
 8008a80:	4910      	ldr	r1, [pc, #64]	; (8008ac4 <xTimerCreateTimerTask+0x84>)
 8008a82:	4811      	ldr	r0, [pc, #68]	; (8008ac8 <xTimerCreateTimerTask+0x88>)
 8008a84:	f7ff f912 	bl	8007cac <xTaskCreateStatic>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	4a10      	ldr	r2, [pc, #64]	; (8008acc <xTimerCreateTimerTask+0x8c>)
 8008a8c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008a8e:	4b0f      	ldr	r3, [pc, #60]	; (8008acc <xTimerCreateTimerTask+0x8c>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d001      	beq.n	8008a9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008a96:	2301      	movs	r3, #1
 8008a98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d10a      	bne.n	8008ab6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa4:	f383 8811 	msr	BASEPRI, r3
 8008aa8:	f3bf 8f6f 	isb	sy
 8008aac:	f3bf 8f4f 	dsb	sy
 8008ab0:	613b      	str	r3, [r7, #16]
}
 8008ab2:	bf00      	nop
 8008ab4:	e7fe      	b.n	8008ab4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008ab6:	697b      	ldr	r3, [r7, #20]
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3718      	adds	r7, #24
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}
 8008ac0:	20000dec 	.word	0x20000dec
 8008ac4:	0800a47c 	.word	0x0800a47c
 8008ac8:	08008c05 	.word	0x08008c05
 8008acc:	20000df0 	.word	0x20000df0

08008ad0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b08a      	sub	sp, #40	; 0x28
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	60f8      	str	r0, [r7, #12]
 8008ad8:	60b9      	str	r1, [r7, #8]
 8008ada:	607a      	str	r2, [r7, #4]
 8008adc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d10a      	bne.n	8008afe <xTimerGenericCommand+0x2e>
	__asm volatile
 8008ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aec:	f383 8811 	msr	BASEPRI, r3
 8008af0:	f3bf 8f6f 	isb	sy
 8008af4:	f3bf 8f4f 	dsb	sy
 8008af8:	623b      	str	r3, [r7, #32]
}
 8008afa:	bf00      	nop
 8008afc:	e7fe      	b.n	8008afc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008afe:	4b1a      	ldr	r3, [pc, #104]	; (8008b68 <xTimerGenericCommand+0x98>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d02a      	beq.n	8008b5c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	2b05      	cmp	r3, #5
 8008b16:	dc18      	bgt.n	8008b4a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008b18:	f7ff feb2 	bl	8008880 <xTaskGetSchedulerState>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	2b02      	cmp	r3, #2
 8008b20:	d109      	bne.n	8008b36 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008b22:	4b11      	ldr	r3, [pc, #68]	; (8008b68 <xTimerGenericCommand+0x98>)
 8008b24:	6818      	ldr	r0, [r3, #0]
 8008b26:	f107 0110 	add.w	r1, r7, #16
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b2e:	f7fe fcd9 	bl	80074e4 <xQueueGenericSend>
 8008b32:	6278      	str	r0, [r7, #36]	; 0x24
 8008b34:	e012      	b.n	8008b5c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008b36:	4b0c      	ldr	r3, [pc, #48]	; (8008b68 <xTimerGenericCommand+0x98>)
 8008b38:	6818      	ldr	r0, [r3, #0]
 8008b3a:	f107 0110 	add.w	r1, r7, #16
 8008b3e:	2300      	movs	r3, #0
 8008b40:	2200      	movs	r2, #0
 8008b42:	f7fe fccf 	bl	80074e4 <xQueueGenericSend>
 8008b46:	6278      	str	r0, [r7, #36]	; 0x24
 8008b48:	e008      	b.n	8008b5c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008b4a:	4b07      	ldr	r3, [pc, #28]	; (8008b68 <xTimerGenericCommand+0x98>)
 8008b4c:	6818      	ldr	r0, [r3, #0]
 8008b4e:	f107 0110 	add.w	r1, r7, #16
 8008b52:	2300      	movs	r3, #0
 8008b54:	683a      	ldr	r2, [r7, #0]
 8008b56:	f7fe fdc3 	bl	80076e0 <xQueueGenericSendFromISR>
 8008b5a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3728      	adds	r7, #40	; 0x28
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	20000dec 	.word	0x20000dec

08008b6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b088      	sub	sp, #32
 8008b70:	af02      	add	r7, sp, #8
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b76:	4b22      	ldr	r3, [pc, #136]	; (8008c00 <prvProcessExpiredTimer+0x94>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	68db      	ldr	r3, [r3, #12]
 8008b7c:	68db      	ldr	r3, [r3, #12]
 8008b7e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	3304      	adds	r3, #4
 8008b84:	4618      	mov	r0, r3
 8008b86:	f7fe fb7f 	bl	8007288 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b90:	f003 0304 	and.w	r3, r3, #4
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d022      	beq.n	8008bde <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	699a      	ldr	r2, [r3, #24]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	18d1      	adds	r1, r2, r3
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	683a      	ldr	r2, [r7, #0]
 8008ba4:	6978      	ldr	r0, [r7, #20]
 8008ba6:	f000 f8d1 	bl	8008d4c <prvInsertTimerInActiveList>
 8008baa:	4603      	mov	r3, r0
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d01f      	beq.n	8008bf0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	9300      	str	r3, [sp, #0]
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	2100      	movs	r1, #0
 8008bba:	6978      	ldr	r0, [r7, #20]
 8008bbc:	f7ff ff88 	bl	8008ad0 <xTimerGenericCommand>
 8008bc0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d113      	bne.n	8008bf0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bcc:	f383 8811 	msr	BASEPRI, r3
 8008bd0:	f3bf 8f6f 	isb	sy
 8008bd4:	f3bf 8f4f 	dsb	sy
 8008bd8:	60fb      	str	r3, [r7, #12]
}
 8008bda:	bf00      	nop
 8008bdc:	e7fe      	b.n	8008bdc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008be4:	f023 0301 	bic.w	r3, r3, #1
 8008be8:	b2da      	uxtb	r2, r3
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	6a1b      	ldr	r3, [r3, #32]
 8008bf4:	6978      	ldr	r0, [r7, #20]
 8008bf6:	4798      	blx	r3
}
 8008bf8:	bf00      	nop
 8008bfa:	3718      	adds	r7, #24
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}
 8008c00:	20000de4 	.word	0x20000de4

08008c04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008c0c:	f107 0308 	add.w	r3, r7, #8
 8008c10:	4618      	mov	r0, r3
 8008c12:	f000 f857 	bl	8008cc4 <prvGetNextExpireTime>
 8008c16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	68f8      	ldr	r0, [r7, #12]
 8008c1e:	f000 f803 	bl	8008c28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008c22:	f000 f8d5 	bl	8008dd0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008c26:	e7f1      	b.n	8008c0c <prvTimerTask+0x8>

08008c28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008c32:	f7ff fa43 	bl	80080bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008c36:	f107 0308 	add.w	r3, r7, #8
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f000 f866 	bl	8008d0c <prvSampleTimeNow>
 8008c40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d130      	bne.n	8008caa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d10a      	bne.n	8008c64 <prvProcessTimerOrBlockTask+0x3c>
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d806      	bhi.n	8008c64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008c56:	f7ff fa3f 	bl	80080d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008c5a:	68f9      	ldr	r1, [r7, #12]
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f7ff ff85 	bl	8008b6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008c62:	e024      	b.n	8008cae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d008      	beq.n	8008c7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008c6a:	4b13      	ldr	r3, [pc, #76]	; (8008cb8 <prvProcessTimerOrBlockTask+0x90>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d101      	bne.n	8008c78 <prvProcessTimerOrBlockTask+0x50>
 8008c74:	2301      	movs	r3, #1
 8008c76:	e000      	b.n	8008c7a <prvProcessTimerOrBlockTask+0x52>
 8008c78:	2300      	movs	r3, #0
 8008c7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008c7c:	4b0f      	ldr	r3, [pc, #60]	; (8008cbc <prvProcessTimerOrBlockTask+0x94>)
 8008c7e:	6818      	ldr	r0, [r3, #0]
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	1ad3      	subs	r3, r2, r3
 8008c86:	683a      	ldr	r2, [r7, #0]
 8008c88:	4619      	mov	r1, r3
 8008c8a:	f7fe ffdb 	bl	8007c44 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008c8e:	f7ff fa23 	bl	80080d8 <xTaskResumeAll>
 8008c92:	4603      	mov	r3, r0
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d10a      	bne.n	8008cae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008c98:	4b09      	ldr	r3, [pc, #36]	; (8008cc0 <prvProcessTimerOrBlockTask+0x98>)
 8008c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c9e:	601a      	str	r2, [r3, #0]
 8008ca0:	f3bf 8f4f 	dsb	sy
 8008ca4:	f3bf 8f6f 	isb	sy
}
 8008ca8:	e001      	b.n	8008cae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008caa:	f7ff fa15 	bl	80080d8 <xTaskResumeAll>
}
 8008cae:	bf00      	nop
 8008cb0:	3710      	adds	r7, #16
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	bf00      	nop
 8008cb8:	20000de8 	.word	0x20000de8
 8008cbc:	20000dec 	.word	0x20000dec
 8008cc0:	e000ed04 	.word	0xe000ed04

08008cc4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b085      	sub	sp, #20
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008ccc:	4b0e      	ldr	r3, [pc, #56]	; (8008d08 <prvGetNextExpireTime+0x44>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d101      	bne.n	8008cda <prvGetNextExpireTime+0x16>
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	e000      	b.n	8008cdc <prvGetNextExpireTime+0x18>
 8008cda:	2200      	movs	r2, #0
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d105      	bne.n	8008cf4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ce8:	4b07      	ldr	r3, [pc, #28]	; (8008d08 <prvGetNextExpireTime+0x44>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	68db      	ldr	r3, [r3, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	60fb      	str	r3, [r7, #12]
 8008cf2:	e001      	b.n	8008cf8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3714      	adds	r7, #20
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr
 8008d06:	bf00      	nop
 8008d08:	20000de4 	.word	0x20000de4

08008d0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008d14:	f7ff fa7e 	bl	8008214 <xTaskGetTickCount>
 8008d18:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008d1a:	4b0b      	ldr	r3, [pc, #44]	; (8008d48 <prvSampleTimeNow+0x3c>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	68fa      	ldr	r2, [r7, #12]
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d205      	bcs.n	8008d30 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008d24:	f000 f936 	bl	8008f94 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	601a      	str	r2, [r3, #0]
 8008d2e:	e002      	b.n	8008d36 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008d36:	4a04      	ldr	r2, [pc, #16]	; (8008d48 <prvSampleTimeNow+0x3c>)
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3710      	adds	r7, #16
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	20000df4 	.word	0x20000df4

08008d4c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b086      	sub	sp, #24
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	607a      	str	r2, [r7, #4]
 8008d58:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	68ba      	ldr	r2, [r7, #8]
 8008d62:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	68fa      	ldr	r2, [r7, #12]
 8008d68:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008d6a:	68ba      	ldr	r2, [r7, #8]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d812      	bhi.n	8008d98 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	1ad2      	subs	r2, r2, r3
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	699b      	ldr	r3, [r3, #24]
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d302      	bcc.n	8008d86 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008d80:	2301      	movs	r3, #1
 8008d82:	617b      	str	r3, [r7, #20]
 8008d84:	e01b      	b.n	8008dbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008d86:	4b10      	ldr	r3, [pc, #64]	; (8008dc8 <prvInsertTimerInActiveList+0x7c>)
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	3304      	adds	r3, #4
 8008d8e:	4619      	mov	r1, r3
 8008d90:	4610      	mov	r0, r2
 8008d92:	f7fe fa40 	bl	8007216 <vListInsert>
 8008d96:	e012      	b.n	8008dbe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d206      	bcs.n	8008dae <prvInsertTimerInActiveList+0x62>
 8008da0:	68ba      	ldr	r2, [r7, #8]
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d302      	bcc.n	8008dae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008da8:	2301      	movs	r3, #1
 8008daa:	617b      	str	r3, [r7, #20]
 8008dac:	e007      	b.n	8008dbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008dae:	4b07      	ldr	r3, [pc, #28]	; (8008dcc <prvInsertTimerInActiveList+0x80>)
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	3304      	adds	r3, #4
 8008db6:	4619      	mov	r1, r3
 8008db8:	4610      	mov	r0, r2
 8008dba:	f7fe fa2c 	bl	8007216 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008dbe:	697b      	ldr	r3, [r7, #20]
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3718      	adds	r7, #24
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	20000de8 	.word	0x20000de8
 8008dcc:	20000de4 	.word	0x20000de4

08008dd0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b08e      	sub	sp, #56	; 0x38
 8008dd4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008dd6:	e0ca      	b.n	8008f6e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	da18      	bge.n	8008e10 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008dde:	1d3b      	adds	r3, r7, #4
 8008de0:	3304      	adds	r3, #4
 8008de2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d10a      	bne.n	8008e00 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dee:	f383 8811 	msr	BASEPRI, r3
 8008df2:	f3bf 8f6f 	isb	sy
 8008df6:	f3bf 8f4f 	dsb	sy
 8008dfa:	61fb      	str	r3, [r7, #28]
}
 8008dfc:	bf00      	nop
 8008dfe:	e7fe      	b.n	8008dfe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e06:	6850      	ldr	r0, [r2, #4]
 8008e08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e0a:	6892      	ldr	r2, [r2, #8]
 8008e0c:	4611      	mov	r1, r2
 8008e0e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	f2c0 80aa 	blt.w	8008f6c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1e:	695b      	ldr	r3, [r3, #20]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d004      	beq.n	8008e2e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e26:	3304      	adds	r3, #4
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f7fe fa2d 	bl	8007288 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008e2e:	463b      	mov	r3, r7
 8008e30:	4618      	mov	r0, r3
 8008e32:	f7ff ff6b 	bl	8008d0c <prvSampleTimeNow>
 8008e36:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2b09      	cmp	r3, #9
 8008e3c:	f200 8097 	bhi.w	8008f6e <prvProcessReceivedCommands+0x19e>
 8008e40:	a201      	add	r2, pc, #4	; (adr r2, 8008e48 <prvProcessReceivedCommands+0x78>)
 8008e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e46:	bf00      	nop
 8008e48:	08008e71 	.word	0x08008e71
 8008e4c:	08008e71 	.word	0x08008e71
 8008e50:	08008e71 	.word	0x08008e71
 8008e54:	08008ee5 	.word	0x08008ee5
 8008e58:	08008ef9 	.word	0x08008ef9
 8008e5c:	08008f43 	.word	0x08008f43
 8008e60:	08008e71 	.word	0x08008e71
 8008e64:	08008e71 	.word	0x08008e71
 8008e68:	08008ee5 	.word	0x08008ee5
 8008e6c:	08008ef9 	.word	0x08008ef9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e76:	f043 0301 	orr.w	r3, r3, #1
 8008e7a:	b2da      	uxtb	r2, r3
 8008e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008e82:	68ba      	ldr	r2, [r7, #8]
 8008e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e86:	699b      	ldr	r3, [r3, #24]
 8008e88:	18d1      	adds	r1, r2, r3
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e90:	f7ff ff5c 	bl	8008d4c <prvInsertTimerInActiveList>
 8008e94:	4603      	mov	r3, r0
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d069      	beq.n	8008f6e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9c:	6a1b      	ldr	r3, [r3, #32]
 8008e9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ea0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ea8:	f003 0304 	and.w	r3, r3, #4
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d05e      	beq.n	8008f6e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008eb0:	68ba      	ldr	r2, [r7, #8]
 8008eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb4:	699b      	ldr	r3, [r3, #24]
 8008eb6:	441a      	add	r2, r3
 8008eb8:	2300      	movs	r3, #0
 8008eba:	9300      	str	r3, [sp, #0]
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	2100      	movs	r1, #0
 8008ec0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ec2:	f7ff fe05 	bl	8008ad0 <xTimerGenericCommand>
 8008ec6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008ec8:	6a3b      	ldr	r3, [r7, #32]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d14f      	bne.n	8008f6e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed2:	f383 8811 	msr	BASEPRI, r3
 8008ed6:	f3bf 8f6f 	isb	sy
 8008eda:	f3bf 8f4f 	dsb	sy
 8008ede:	61bb      	str	r3, [r7, #24]
}
 8008ee0:	bf00      	nop
 8008ee2:	e7fe      	b.n	8008ee2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008eea:	f023 0301 	bic.w	r3, r3, #1
 8008eee:	b2da      	uxtb	r2, r3
 8008ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008ef6:	e03a      	b.n	8008f6e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008efa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008efe:	f043 0301 	orr.w	r3, r3, #1
 8008f02:	b2da      	uxtb	r2, r3
 8008f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008f0a:	68ba      	ldr	r2, [r7, #8]
 8008f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f0e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f12:	699b      	ldr	r3, [r3, #24]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d10a      	bne.n	8008f2e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f1c:	f383 8811 	msr	BASEPRI, r3
 8008f20:	f3bf 8f6f 	isb	sy
 8008f24:	f3bf 8f4f 	dsb	sy
 8008f28:	617b      	str	r3, [r7, #20]
}
 8008f2a:	bf00      	nop
 8008f2c:	e7fe      	b.n	8008f2c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f30:	699a      	ldr	r2, [r3, #24]
 8008f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f34:	18d1      	adds	r1, r2, r3
 8008f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f3c:	f7ff ff06 	bl	8008d4c <prvInsertTimerInActiveList>
					break;
 8008f40:	e015      	b.n	8008f6e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f48:	f003 0302 	and.w	r3, r3, #2
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d103      	bne.n	8008f58 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008f50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f52:	f000 fbd5 	bl	8009700 <vPortFree>
 8008f56:	e00a      	b.n	8008f6e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f5e:	f023 0301 	bic.w	r3, r3, #1
 8008f62:	b2da      	uxtb	r2, r3
 8008f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008f6a:	e000      	b.n	8008f6e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008f6c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008f6e:	4b08      	ldr	r3, [pc, #32]	; (8008f90 <prvProcessReceivedCommands+0x1c0>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	1d39      	adds	r1, r7, #4
 8008f74:	2200      	movs	r2, #0
 8008f76:	4618      	mov	r0, r3
 8008f78:	f7fe fc4a 	bl	8007810 <xQueueReceive>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	f47f af2a 	bne.w	8008dd8 <prvProcessReceivedCommands+0x8>
	}
}
 8008f84:	bf00      	nop
 8008f86:	bf00      	nop
 8008f88:	3730      	adds	r7, #48	; 0x30
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	20000dec 	.word	0x20000dec

08008f94 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b088      	sub	sp, #32
 8008f98:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008f9a:	e048      	b.n	800902e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008f9c:	4b2d      	ldr	r3, [pc, #180]	; (8009054 <prvSwitchTimerLists+0xc0>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	68db      	ldr	r3, [r3, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fa6:	4b2b      	ldr	r3, [pc, #172]	; (8009054 <prvSwitchTimerLists+0xc0>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	68db      	ldr	r3, [r3, #12]
 8008fae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	3304      	adds	r3, #4
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f7fe f967 	bl	8007288 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	6a1b      	ldr	r3, [r3, #32]
 8008fbe:	68f8      	ldr	r0, [r7, #12]
 8008fc0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fc8:	f003 0304 	and.w	r3, r3, #4
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d02e      	beq.n	800902e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	699b      	ldr	r3, [r3, #24]
 8008fd4:	693a      	ldr	r2, [r7, #16]
 8008fd6:	4413      	add	r3, r2
 8008fd8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008fda:	68ba      	ldr	r2, [r7, #8]
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d90e      	bls.n	8009000 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	68ba      	ldr	r2, [r7, #8]
 8008fe6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	68fa      	ldr	r2, [r7, #12]
 8008fec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008fee:	4b19      	ldr	r3, [pc, #100]	; (8009054 <prvSwitchTimerLists+0xc0>)
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	3304      	adds	r3, #4
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	4610      	mov	r0, r2
 8008ffa:	f7fe f90c 	bl	8007216 <vListInsert>
 8008ffe:	e016      	b.n	800902e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009000:	2300      	movs	r3, #0
 8009002:	9300      	str	r3, [sp, #0]
 8009004:	2300      	movs	r3, #0
 8009006:	693a      	ldr	r2, [r7, #16]
 8009008:	2100      	movs	r1, #0
 800900a:	68f8      	ldr	r0, [r7, #12]
 800900c:	f7ff fd60 	bl	8008ad0 <xTimerGenericCommand>
 8009010:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d10a      	bne.n	800902e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800901c:	f383 8811 	msr	BASEPRI, r3
 8009020:	f3bf 8f6f 	isb	sy
 8009024:	f3bf 8f4f 	dsb	sy
 8009028:	603b      	str	r3, [r7, #0]
}
 800902a:	bf00      	nop
 800902c:	e7fe      	b.n	800902c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800902e:	4b09      	ldr	r3, [pc, #36]	; (8009054 <prvSwitchTimerLists+0xc0>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d1b1      	bne.n	8008f9c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009038:	4b06      	ldr	r3, [pc, #24]	; (8009054 <prvSwitchTimerLists+0xc0>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800903e:	4b06      	ldr	r3, [pc, #24]	; (8009058 <prvSwitchTimerLists+0xc4>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4a04      	ldr	r2, [pc, #16]	; (8009054 <prvSwitchTimerLists+0xc0>)
 8009044:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009046:	4a04      	ldr	r2, [pc, #16]	; (8009058 <prvSwitchTimerLists+0xc4>)
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	6013      	str	r3, [r2, #0]
}
 800904c:	bf00      	nop
 800904e:	3718      	adds	r7, #24
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}
 8009054:	20000de4 	.word	0x20000de4
 8009058:	20000de8 	.word	0x20000de8

0800905c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b082      	sub	sp, #8
 8009060:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009062:	f000 f967 	bl	8009334 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009066:	4b15      	ldr	r3, [pc, #84]	; (80090bc <prvCheckForValidListAndQueue+0x60>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d120      	bne.n	80090b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800906e:	4814      	ldr	r0, [pc, #80]	; (80090c0 <prvCheckForValidListAndQueue+0x64>)
 8009070:	f7fe f880 	bl	8007174 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009074:	4813      	ldr	r0, [pc, #76]	; (80090c4 <prvCheckForValidListAndQueue+0x68>)
 8009076:	f7fe f87d 	bl	8007174 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800907a:	4b13      	ldr	r3, [pc, #76]	; (80090c8 <prvCheckForValidListAndQueue+0x6c>)
 800907c:	4a10      	ldr	r2, [pc, #64]	; (80090c0 <prvCheckForValidListAndQueue+0x64>)
 800907e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009080:	4b12      	ldr	r3, [pc, #72]	; (80090cc <prvCheckForValidListAndQueue+0x70>)
 8009082:	4a10      	ldr	r2, [pc, #64]	; (80090c4 <prvCheckForValidListAndQueue+0x68>)
 8009084:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009086:	2300      	movs	r3, #0
 8009088:	9300      	str	r3, [sp, #0]
 800908a:	4b11      	ldr	r3, [pc, #68]	; (80090d0 <prvCheckForValidListAndQueue+0x74>)
 800908c:	4a11      	ldr	r2, [pc, #68]	; (80090d4 <prvCheckForValidListAndQueue+0x78>)
 800908e:	2110      	movs	r1, #16
 8009090:	200a      	movs	r0, #10
 8009092:	f7fe f98b 	bl	80073ac <xQueueGenericCreateStatic>
 8009096:	4603      	mov	r3, r0
 8009098:	4a08      	ldr	r2, [pc, #32]	; (80090bc <prvCheckForValidListAndQueue+0x60>)
 800909a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800909c:	4b07      	ldr	r3, [pc, #28]	; (80090bc <prvCheckForValidListAndQueue+0x60>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d005      	beq.n	80090b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80090a4:	4b05      	ldr	r3, [pc, #20]	; (80090bc <prvCheckForValidListAndQueue+0x60>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	490b      	ldr	r1, [pc, #44]	; (80090d8 <prvCheckForValidListAndQueue+0x7c>)
 80090aa:	4618      	mov	r0, r3
 80090ac:	f7fe fda0 	bl	8007bf0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80090b0:	f000 f970 	bl	8009394 <vPortExitCritical>
}
 80090b4:	bf00      	nop
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	20000dec 	.word	0x20000dec
 80090c0:	20000dbc 	.word	0x20000dbc
 80090c4:	20000dd0 	.word	0x20000dd0
 80090c8:	20000de4 	.word	0x20000de4
 80090cc:	20000de8 	.word	0x20000de8
 80090d0:	20000e98 	.word	0x20000e98
 80090d4:	20000df8 	.word	0x20000df8
 80090d8:	0800a484 	.word	0x0800a484

080090dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80090dc:	b480      	push	{r7}
 80090de:	b085      	sub	sp, #20
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	60b9      	str	r1, [r7, #8]
 80090e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	3b04      	subs	r3, #4
 80090ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80090f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	3b04      	subs	r3, #4
 80090fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	f023 0201 	bic.w	r2, r3, #1
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	3b04      	subs	r3, #4
 800910a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800910c:	4a0c      	ldr	r2, [pc, #48]	; (8009140 <pxPortInitialiseStack+0x64>)
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	3b14      	subs	r3, #20
 8009116:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009118:	687a      	ldr	r2, [r7, #4]
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	3b04      	subs	r3, #4
 8009122:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f06f 0202 	mvn.w	r2, #2
 800912a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	3b20      	subs	r3, #32
 8009130:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009132:	68fb      	ldr	r3, [r7, #12]
}
 8009134:	4618      	mov	r0, r3
 8009136:	3714      	adds	r7, #20
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr
 8009140:	08009145 	.word	0x08009145

08009144 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009144:	b480      	push	{r7}
 8009146:	b085      	sub	sp, #20
 8009148:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800914a:	2300      	movs	r3, #0
 800914c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800914e:	4b12      	ldr	r3, [pc, #72]	; (8009198 <prvTaskExitError+0x54>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009156:	d00a      	beq.n	800916e <prvTaskExitError+0x2a>
	__asm volatile
 8009158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800915c:	f383 8811 	msr	BASEPRI, r3
 8009160:	f3bf 8f6f 	isb	sy
 8009164:	f3bf 8f4f 	dsb	sy
 8009168:	60fb      	str	r3, [r7, #12]
}
 800916a:	bf00      	nop
 800916c:	e7fe      	b.n	800916c <prvTaskExitError+0x28>
	__asm volatile
 800916e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009172:	f383 8811 	msr	BASEPRI, r3
 8009176:	f3bf 8f6f 	isb	sy
 800917a:	f3bf 8f4f 	dsb	sy
 800917e:	60bb      	str	r3, [r7, #8]
}
 8009180:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009182:	bf00      	nop
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d0fc      	beq.n	8009184 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800918a:	bf00      	nop
 800918c:	bf00      	nop
 800918e:	3714      	adds	r7, #20
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr
 8009198:	20000114 	.word	0x20000114
 800919c:	00000000 	.word	0x00000000

080091a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80091a0:	4b07      	ldr	r3, [pc, #28]	; (80091c0 <pxCurrentTCBConst2>)
 80091a2:	6819      	ldr	r1, [r3, #0]
 80091a4:	6808      	ldr	r0, [r1, #0]
 80091a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091aa:	f380 8809 	msr	PSP, r0
 80091ae:	f3bf 8f6f 	isb	sy
 80091b2:	f04f 0000 	mov.w	r0, #0
 80091b6:	f380 8811 	msr	BASEPRI, r0
 80091ba:	4770      	bx	lr
 80091bc:	f3af 8000 	nop.w

080091c0 <pxCurrentTCBConst2>:
 80091c0:	200008bc 	.word	0x200008bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80091c4:	bf00      	nop
 80091c6:	bf00      	nop

080091c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80091c8:	4808      	ldr	r0, [pc, #32]	; (80091ec <prvPortStartFirstTask+0x24>)
 80091ca:	6800      	ldr	r0, [r0, #0]
 80091cc:	6800      	ldr	r0, [r0, #0]
 80091ce:	f380 8808 	msr	MSP, r0
 80091d2:	f04f 0000 	mov.w	r0, #0
 80091d6:	f380 8814 	msr	CONTROL, r0
 80091da:	b662      	cpsie	i
 80091dc:	b661      	cpsie	f
 80091de:	f3bf 8f4f 	dsb	sy
 80091e2:	f3bf 8f6f 	isb	sy
 80091e6:	df00      	svc	0
 80091e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80091ea:	bf00      	nop
 80091ec:	e000ed08 	.word	0xe000ed08

080091f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b086      	sub	sp, #24
 80091f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80091f6:	4b46      	ldr	r3, [pc, #280]	; (8009310 <xPortStartScheduler+0x120>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a46      	ldr	r2, [pc, #280]	; (8009314 <xPortStartScheduler+0x124>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d10a      	bne.n	8009216 <xPortStartScheduler+0x26>
	__asm volatile
 8009200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009204:	f383 8811 	msr	BASEPRI, r3
 8009208:	f3bf 8f6f 	isb	sy
 800920c:	f3bf 8f4f 	dsb	sy
 8009210:	613b      	str	r3, [r7, #16]
}
 8009212:	bf00      	nop
 8009214:	e7fe      	b.n	8009214 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009216:	4b3e      	ldr	r3, [pc, #248]	; (8009310 <xPortStartScheduler+0x120>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4a3f      	ldr	r2, [pc, #252]	; (8009318 <xPortStartScheduler+0x128>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d10a      	bne.n	8009236 <xPortStartScheduler+0x46>
	__asm volatile
 8009220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009224:	f383 8811 	msr	BASEPRI, r3
 8009228:	f3bf 8f6f 	isb	sy
 800922c:	f3bf 8f4f 	dsb	sy
 8009230:	60fb      	str	r3, [r7, #12]
}
 8009232:	bf00      	nop
 8009234:	e7fe      	b.n	8009234 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009236:	4b39      	ldr	r3, [pc, #228]	; (800931c <xPortStartScheduler+0x12c>)
 8009238:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	b2db      	uxtb	r3, r3
 8009240:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	22ff      	movs	r2, #255	; 0xff
 8009246:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	b2db      	uxtb	r3, r3
 800924e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009250:	78fb      	ldrb	r3, [r7, #3]
 8009252:	b2db      	uxtb	r3, r3
 8009254:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009258:	b2da      	uxtb	r2, r3
 800925a:	4b31      	ldr	r3, [pc, #196]	; (8009320 <xPortStartScheduler+0x130>)
 800925c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800925e:	4b31      	ldr	r3, [pc, #196]	; (8009324 <xPortStartScheduler+0x134>)
 8009260:	2207      	movs	r2, #7
 8009262:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009264:	e009      	b.n	800927a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009266:	4b2f      	ldr	r3, [pc, #188]	; (8009324 <xPortStartScheduler+0x134>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	3b01      	subs	r3, #1
 800926c:	4a2d      	ldr	r2, [pc, #180]	; (8009324 <xPortStartScheduler+0x134>)
 800926e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009270:	78fb      	ldrb	r3, [r7, #3]
 8009272:	b2db      	uxtb	r3, r3
 8009274:	005b      	lsls	r3, r3, #1
 8009276:	b2db      	uxtb	r3, r3
 8009278:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800927a:	78fb      	ldrb	r3, [r7, #3]
 800927c:	b2db      	uxtb	r3, r3
 800927e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009282:	2b80      	cmp	r3, #128	; 0x80
 8009284:	d0ef      	beq.n	8009266 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009286:	4b27      	ldr	r3, [pc, #156]	; (8009324 <xPortStartScheduler+0x134>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f1c3 0307 	rsb	r3, r3, #7
 800928e:	2b04      	cmp	r3, #4
 8009290:	d00a      	beq.n	80092a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009296:	f383 8811 	msr	BASEPRI, r3
 800929a:	f3bf 8f6f 	isb	sy
 800929e:	f3bf 8f4f 	dsb	sy
 80092a2:	60bb      	str	r3, [r7, #8]
}
 80092a4:	bf00      	nop
 80092a6:	e7fe      	b.n	80092a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80092a8:	4b1e      	ldr	r3, [pc, #120]	; (8009324 <xPortStartScheduler+0x134>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	021b      	lsls	r3, r3, #8
 80092ae:	4a1d      	ldr	r2, [pc, #116]	; (8009324 <xPortStartScheduler+0x134>)
 80092b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80092b2:	4b1c      	ldr	r3, [pc, #112]	; (8009324 <xPortStartScheduler+0x134>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80092ba:	4a1a      	ldr	r2, [pc, #104]	; (8009324 <xPortStartScheduler+0x134>)
 80092bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	b2da      	uxtb	r2, r3
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80092c6:	4b18      	ldr	r3, [pc, #96]	; (8009328 <xPortStartScheduler+0x138>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a17      	ldr	r2, [pc, #92]	; (8009328 <xPortStartScheduler+0x138>)
 80092cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80092d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80092d2:	4b15      	ldr	r3, [pc, #84]	; (8009328 <xPortStartScheduler+0x138>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	4a14      	ldr	r2, [pc, #80]	; (8009328 <xPortStartScheduler+0x138>)
 80092d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80092dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80092de:	f000 f8dd 	bl	800949c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80092e2:	4b12      	ldr	r3, [pc, #72]	; (800932c <xPortStartScheduler+0x13c>)
 80092e4:	2200      	movs	r2, #0
 80092e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80092e8:	f000 f8fc 	bl	80094e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80092ec:	4b10      	ldr	r3, [pc, #64]	; (8009330 <xPortStartScheduler+0x140>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a0f      	ldr	r2, [pc, #60]	; (8009330 <xPortStartScheduler+0x140>)
 80092f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80092f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80092f8:	f7ff ff66 	bl	80091c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80092fc:	f7ff f854 	bl	80083a8 <vTaskSwitchContext>
	prvTaskExitError();
 8009300:	f7ff ff20 	bl	8009144 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	3718      	adds	r7, #24
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
 800930e:	bf00      	nop
 8009310:	e000ed00 	.word	0xe000ed00
 8009314:	410fc271 	.word	0x410fc271
 8009318:	410fc270 	.word	0x410fc270
 800931c:	e000e400 	.word	0xe000e400
 8009320:	20000ee8 	.word	0x20000ee8
 8009324:	20000eec 	.word	0x20000eec
 8009328:	e000ed20 	.word	0xe000ed20
 800932c:	20000114 	.word	0x20000114
 8009330:	e000ef34 	.word	0xe000ef34

08009334 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
	__asm volatile
 800933a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800933e:	f383 8811 	msr	BASEPRI, r3
 8009342:	f3bf 8f6f 	isb	sy
 8009346:	f3bf 8f4f 	dsb	sy
 800934a:	607b      	str	r3, [r7, #4]
}
 800934c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800934e:	4b0f      	ldr	r3, [pc, #60]	; (800938c <vPortEnterCritical+0x58>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	3301      	adds	r3, #1
 8009354:	4a0d      	ldr	r2, [pc, #52]	; (800938c <vPortEnterCritical+0x58>)
 8009356:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009358:	4b0c      	ldr	r3, [pc, #48]	; (800938c <vPortEnterCritical+0x58>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	2b01      	cmp	r3, #1
 800935e:	d10f      	bne.n	8009380 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009360:	4b0b      	ldr	r3, [pc, #44]	; (8009390 <vPortEnterCritical+0x5c>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	b2db      	uxtb	r3, r3
 8009366:	2b00      	cmp	r3, #0
 8009368:	d00a      	beq.n	8009380 <vPortEnterCritical+0x4c>
	__asm volatile
 800936a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800936e:	f383 8811 	msr	BASEPRI, r3
 8009372:	f3bf 8f6f 	isb	sy
 8009376:	f3bf 8f4f 	dsb	sy
 800937a:	603b      	str	r3, [r7, #0]
}
 800937c:	bf00      	nop
 800937e:	e7fe      	b.n	800937e <vPortEnterCritical+0x4a>
	}
}
 8009380:	bf00      	nop
 8009382:	370c      	adds	r7, #12
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr
 800938c:	20000114 	.word	0x20000114
 8009390:	e000ed04 	.word	0xe000ed04

08009394 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009394:	b480      	push	{r7}
 8009396:	b083      	sub	sp, #12
 8009398:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800939a:	4b12      	ldr	r3, [pc, #72]	; (80093e4 <vPortExitCritical+0x50>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d10a      	bne.n	80093b8 <vPortExitCritical+0x24>
	__asm volatile
 80093a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a6:	f383 8811 	msr	BASEPRI, r3
 80093aa:	f3bf 8f6f 	isb	sy
 80093ae:	f3bf 8f4f 	dsb	sy
 80093b2:	607b      	str	r3, [r7, #4]
}
 80093b4:	bf00      	nop
 80093b6:	e7fe      	b.n	80093b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80093b8:	4b0a      	ldr	r3, [pc, #40]	; (80093e4 <vPortExitCritical+0x50>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	3b01      	subs	r3, #1
 80093be:	4a09      	ldr	r2, [pc, #36]	; (80093e4 <vPortExitCritical+0x50>)
 80093c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80093c2:	4b08      	ldr	r3, [pc, #32]	; (80093e4 <vPortExitCritical+0x50>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d105      	bne.n	80093d6 <vPortExitCritical+0x42>
 80093ca:	2300      	movs	r3, #0
 80093cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	f383 8811 	msr	BASEPRI, r3
}
 80093d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80093d6:	bf00      	nop
 80093d8:	370c      	adds	r7, #12
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr
 80093e2:	bf00      	nop
 80093e4:	20000114 	.word	0x20000114
	...

080093f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80093f0:	f3ef 8009 	mrs	r0, PSP
 80093f4:	f3bf 8f6f 	isb	sy
 80093f8:	4b15      	ldr	r3, [pc, #84]	; (8009450 <pxCurrentTCBConst>)
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	f01e 0f10 	tst.w	lr, #16
 8009400:	bf08      	it	eq
 8009402:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009406:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800940a:	6010      	str	r0, [r2, #0]
 800940c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009410:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009414:	f380 8811 	msr	BASEPRI, r0
 8009418:	f3bf 8f4f 	dsb	sy
 800941c:	f3bf 8f6f 	isb	sy
 8009420:	f7fe ffc2 	bl	80083a8 <vTaskSwitchContext>
 8009424:	f04f 0000 	mov.w	r0, #0
 8009428:	f380 8811 	msr	BASEPRI, r0
 800942c:	bc09      	pop	{r0, r3}
 800942e:	6819      	ldr	r1, [r3, #0]
 8009430:	6808      	ldr	r0, [r1, #0]
 8009432:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009436:	f01e 0f10 	tst.w	lr, #16
 800943a:	bf08      	it	eq
 800943c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009440:	f380 8809 	msr	PSP, r0
 8009444:	f3bf 8f6f 	isb	sy
 8009448:	4770      	bx	lr
 800944a:	bf00      	nop
 800944c:	f3af 8000 	nop.w

08009450 <pxCurrentTCBConst>:
 8009450:	200008bc 	.word	0x200008bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009454:	bf00      	nop
 8009456:	bf00      	nop

08009458 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b082      	sub	sp, #8
 800945c:	af00      	add	r7, sp, #0
	__asm volatile
 800945e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009462:	f383 8811 	msr	BASEPRI, r3
 8009466:	f3bf 8f6f 	isb	sy
 800946a:	f3bf 8f4f 	dsb	sy
 800946e:	607b      	str	r3, [r7, #4]
}
 8009470:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009472:	f7fe fedf 	bl	8008234 <xTaskIncrementTick>
 8009476:	4603      	mov	r3, r0
 8009478:	2b00      	cmp	r3, #0
 800947a:	d003      	beq.n	8009484 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800947c:	4b06      	ldr	r3, [pc, #24]	; (8009498 <SysTick_Handler+0x40>)
 800947e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009482:	601a      	str	r2, [r3, #0]
 8009484:	2300      	movs	r3, #0
 8009486:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	f383 8811 	msr	BASEPRI, r3
}
 800948e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009490:	bf00      	nop
 8009492:	3708      	adds	r7, #8
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}
 8009498:	e000ed04 	.word	0xe000ed04

0800949c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800949c:	b480      	push	{r7}
 800949e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80094a0:	4b0b      	ldr	r3, [pc, #44]	; (80094d0 <vPortSetupTimerInterrupt+0x34>)
 80094a2:	2200      	movs	r2, #0
 80094a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80094a6:	4b0b      	ldr	r3, [pc, #44]	; (80094d4 <vPortSetupTimerInterrupt+0x38>)
 80094a8:	2200      	movs	r2, #0
 80094aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80094ac:	4b0a      	ldr	r3, [pc, #40]	; (80094d8 <vPortSetupTimerInterrupt+0x3c>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4a0a      	ldr	r2, [pc, #40]	; (80094dc <vPortSetupTimerInterrupt+0x40>)
 80094b2:	fba2 2303 	umull	r2, r3, r2, r3
 80094b6:	099b      	lsrs	r3, r3, #6
 80094b8:	4a09      	ldr	r2, [pc, #36]	; (80094e0 <vPortSetupTimerInterrupt+0x44>)
 80094ba:	3b01      	subs	r3, #1
 80094bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80094be:	4b04      	ldr	r3, [pc, #16]	; (80094d0 <vPortSetupTimerInterrupt+0x34>)
 80094c0:	2207      	movs	r2, #7
 80094c2:	601a      	str	r2, [r3, #0]
}
 80094c4:	bf00      	nop
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr
 80094ce:	bf00      	nop
 80094d0:	e000e010 	.word	0xe000e010
 80094d4:	e000e018 	.word	0xe000e018
 80094d8:	20000000 	.word	0x20000000
 80094dc:	10624dd3 	.word	0x10624dd3
 80094e0:	e000e014 	.word	0xe000e014

080094e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80094e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80094f4 <vPortEnableVFP+0x10>
 80094e8:	6801      	ldr	r1, [r0, #0]
 80094ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80094ee:	6001      	str	r1, [r0, #0]
 80094f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80094f2:	bf00      	nop
 80094f4:	e000ed88 	.word	0xe000ed88

080094f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80094f8:	b480      	push	{r7}
 80094fa:	b085      	sub	sp, #20
 80094fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80094fe:	f3ef 8305 	mrs	r3, IPSR
 8009502:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2b0f      	cmp	r3, #15
 8009508:	d914      	bls.n	8009534 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800950a:	4a17      	ldr	r2, [pc, #92]	; (8009568 <vPortValidateInterruptPriority+0x70>)
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	4413      	add	r3, r2
 8009510:	781b      	ldrb	r3, [r3, #0]
 8009512:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009514:	4b15      	ldr	r3, [pc, #84]	; (800956c <vPortValidateInterruptPriority+0x74>)
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	7afa      	ldrb	r2, [r7, #11]
 800951a:	429a      	cmp	r2, r3
 800951c:	d20a      	bcs.n	8009534 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800951e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009522:	f383 8811 	msr	BASEPRI, r3
 8009526:	f3bf 8f6f 	isb	sy
 800952a:	f3bf 8f4f 	dsb	sy
 800952e:	607b      	str	r3, [r7, #4]
}
 8009530:	bf00      	nop
 8009532:	e7fe      	b.n	8009532 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009534:	4b0e      	ldr	r3, [pc, #56]	; (8009570 <vPortValidateInterruptPriority+0x78>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800953c:	4b0d      	ldr	r3, [pc, #52]	; (8009574 <vPortValidateInterruptPriority+0x7c>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	429a      	cmp	r2, r3
 8009542:	d90a      	bls.n	800955a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009548:	f383 8811 	msr	BASEPRI, r3
 800954c:	f3bf 8f6f 	isb	sy
 8009550:	f3bf 8f4f 	dsb	sy
 8009554:	603b      	str	r3, [r7, #0]
}
 8009556:	bf00      	nop
 8009558:	e7fe      	b.n	8009558 <vPortValidateInterruptPriority+0x60>
	}
 800955a:	bf00      	nop
 800955c:	3714      	adds	r7, #20
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr
 8009566:	bf00      	nop
 8009568:	e000e3f0 	.word	0xe000e3f0
 800956c:	20000ee8 	.word	0x20000ee8
 8009570:	e000ed0c 	.word	0xe000ed0c
 8009574:	20000eec 	.word	0x20000eec

08009578 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b08a      	sub	sp, #40	; 0x28
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009580:	2300      	movs	r3, #0
 8009582:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009584:	f7fe fd9a 	bl	80080bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009588:	4b58      	ldr	r3, [pc, #352]	; (80096ec <pvPortMalloc+0x174>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d101      	bne.n	8009594 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009590:	f000 f910 	bl	80097b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009594:	4b56      	ldr	r3, [pc, #344]	; (80096f0 <pvPortMalloc+0x178>)
 8009596:	681a      	ldr	r2, [r3, #0]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	4013      	ands	r3, r2
 800959c:	2b00      	cmp	r3, #0
 800959e:	f040 808e 	bne.w	80096be <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d01d      	beq.n	80095e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80095a8:	2208      	movs	r2, #8
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	4413      	add	r3, r2
 80095ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f003 0307 	and.w	r3, r3, #7
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d014      	beq.n	80095e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f023 0307 	bic.w	r3, r3, #7
 80095c0:	3308      	adds	r3, #8
 80095c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f003 0307 	and.w	r3, r3, #7
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d00a      	beq.n	80095e4 <pvPortMalloc+0x6c>
	__asm volatile
 80095ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d2:	f383 8811 	msr	BASEPRI, r3
 80095d6:	f3bf 8f6f 	isb	sy
 80095da:	f3bf 8f4f 	dsb	sy
 80095de:	617b      	str	r3, [r7, #20]
}
 80095e0:	bf00      	nop
 80095e2:	e7fe      	b.n	80095e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d069      	beq.n	80096be <pvPortMalloc+0x146>
 80095ea:	4b42      	ldr	r3, [pc, #264]	; (80096f4 <pvPortMalloc+0x17c>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	687a      	ldr	r2, [r7, #4]
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d864      	bhi.n	80096be <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80095f4:	4b40      	ldr	r3, [pc, #256]	; (80096f8 <pvPortMalloc+0x180>)
 80095f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80095f8:	4b3f      	ldr	r3, [pc, #252]	; (80096f8 <pvPortMalloc+0x180>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80095fe:	e004      	b.n	800960a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009602:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800960a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	429a      	cmp	r2, r3
 8009612:	d903      	bls.n	800961c <pvPortMalloc+0xa4>
 8009614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d1f1      	bne.n	8009600 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800961c:	4b33      	ldr	r3, [pc, #204]	; (80096ec <pvPortMalloc+0x174>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009622:	429a      	cmp	r2, r3
 8009624:	d04b      	beq.n	80096be <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009626:	6a3b      	ldr	r3, [r7, #32]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	2208      	movs	r2, #8
 800962c:	4413      	add	r3, r2
 800962e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	6a3b      	ldr	r3, [r7, #32]
 8009636:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963a:	685a      	ldr	r2, [r3, #4]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	1ad2      	subs	r2, r2, r3
 8009640:	2308      	movs	r3, #8
 8009642:	005b      	lsls	r3, r3, #1
 8009644:	429a      	cmp	r2, r3
 8009646:	d91f      	bls.n	8009688 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	4413      	add	r3, r2
 800964e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009650:	69bb      	ldr	r3, [r7, #24]
 8009652:	f003 0307 	and.w	r3, r3, #7
 8009656:	2b00      	cmp	r3, #0
 8009658:	d00a      	beq.n	8009670 <pvPortMalloc+0xf8>
	__asm volatile
 800965a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800965e:	f383 8811 	msr	BASEPRI, r3
 8009662:	f3bf 8f6f 	isb	sy
 8009666:	f3bf 8f4f 	dsb	sy
 800966a:	613b      	str	r3, [r7, #16]
}
 800966c:	bf00      	nop
 800966e:	e7fe      	b.n	800966e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009672:	685a      	ldr	r2, [r3, #4]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	1ad2      	subs	r2, r2, r3
 8009678:	69bb      	ldr	r3, [r7, #24]
 800967a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800967c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800967e:	687a      	ldr	r2, [r7, #4]
 8009680:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009682:	69b8      	ldr	r0, [r7, #24]
 8009684:	f000 f8f8 	bl	8009878 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009688:	4b1a      	ldr	r3, [pc, #104]	; (80096f4 <pvPortMalloc+0x17c>)
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	1ad3      	subs	r3, r2, r3
 8009692:	4a18      	ldr	r2, [pc, #96]	; (80096f4 <pvPortMalloc+0x17c>)
 8009694:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009696:	4b17      	ldr	r3, [pc, #92]	; (80096f4 <pvPortMalloc+0x17c>)
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	4b18      	ldr	r3, [pc, #96]	; (80096fc <pvPortMalloc+0x184>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	429a      	cmp	r2, r3
 80096a0:	d203      	bcs.n	80096aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80096a2:	4b14      	ldr	r3, [pc, #80]	; (80096f4 <pvPortMalloc+0x17c>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4a15      	ldr	r2, [pc, #84]	; (80096fc <pvPortMalloc+0x184>)
 80096a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80096aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ac:	685a      	ldr	r2, [r3, #4]
 80096ae:	4b10      	ldr	r3, [pc, #64]	; (80096f0 <pvPortMalloc+0x178>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	431a      	orrs	r2, r3
 80096b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80096b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ba:	2200      	movs	r2, #0
 80096bc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80096be:	f7fe fd0b 	bl	80080d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80096c2:	69fb      	ldr	r3, [r7, #28]
 80096c4:	f003 0307 	and.w	r3, r3, #7
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d00a      	beq.n	80096e2 <pvPortMalloc+0x16a>
	__asm volatile
 80096cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d0:	f383 8811 	msr	BASEPRI, r3
 80096d4:	f3bf 8f6f 	isb	sy
 80096d8:	f3bf 8f4f 	dsb	sy
 80096dc:	60fb      	str	r3, [r7, #12]
}
 80096de:	bf00      	nop
 80096e0:	e7fe      	b.n	80096e0 <pvPortMalloc+0x168>
	return pvReturn;
 80096e2:	69fb      	ldr	r3, [r7, #28]
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3728      	adds	r7, #40	; 0x28
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}
 80096ec:	20004af8 	.word	0x20004af8
 80096f0:	20004b04 	.word	0x20004b04
 80096f4:	20004afc 	.word	0x20004afc
 80096f8:	20004af0 	.word	0x20004af0
 80096fc:	20004b00 	.word	0x20004b00

08009700 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b086      	sub	sp, #24
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d048      	beq.n	80097a4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009712:	2308      	movs	r3, #8
 8009714:	425b      	negs	r3, r3
 8009716:	697a      	ldr	r2, [r7, #20]
 8009718:	4413      	add	r3, r2
 800971a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	685a      	ldr	r2, [r3, #4]
 8009724:	4b21      	ldr	r3, [pc, #132]	; (80097ac <vPortFree+0xac>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4013      	ands	r3, r2
 800972a:	2b00      	cmp	r3, #0
 800972c:	d10a      	bne.n	8009744 <vPortFree+0x44>
	__asm volatile
 800972e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009732:	f383 8811 	msr	BASEPRI, r3
 8009736:	f3bf 8f6f 	isb	sy
 800973a:	f3bf 8f4f 	dsb	sy
 800973e:	60fb      	str	r3, [r7, #12]
}
 8009740:	bf00      	nop
 8009742:	e7fe      	b.n	8009742 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d00a      	beq.n	8009762 <vPortFree+0x62>
	__asm volatile
 800974c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009750:	f383 8811 	msr	BASEPRI, r3
 8009754:	f3bf 8f6f 	isb	sy
 8009758:	f3bf 8f4f 	dsb	sy
 800975c:	60bb      	str	r3, [r7, #8]
}
 800975e:	bf00      	nop
 8009760:	e7fe      	b.n	8009760 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	685a      	ldr	r2, [r3, #4]
 8009766:	4b11      	ldr	r3, [pc, #68]	; (80097ac <vPortFree+0xac>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4013      	ands	r3, r2
 800976c:	2b00      	cmp	r3, #0
 800976e:	d019      	beq.n	80097a4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d115      	bne.n	80097a4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	685a      	ldr	r2, [r3, #4]
 800977c:	4b0b      	ldr	r3, [pc, #44]	; (80097ac <vPortFree+0xac>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	43db      	mvns	r3, r3
 8009782:	401a      	ands	r2, r3
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009788:	f7fe fc98 	bl	80080bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	685a      	ldr	r2, [r3, #4]
 8009790:	4b07      	ldr	r3, [pc, #28]	; (80097b0 <vPortFree+0xb0>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4413      	add	r3, r2
 8009796:	4a06      	ldr	r2, [pc, #24]	; (80097b0 <vPortFree+0xb0>)
 8009798:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800979a:	6938      	ldr	r0, [r7, #16]
 800979c:	f000 f86c 	bl	8009878 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80097a0:	f7fe fc9a 	bl	80080d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80097a4:	bf00      	nop
 80097a6:	3718      	adds	r7, #24
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}
 80097ac:	20004b04 	.word	0x20004b04
 80097b0:	20004afc 	.word	0x20004afc

080097b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80097b4:	b480      	push	{r7}
 80097b6:	b085      	sub	sp, #20
 80097b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80097ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80097be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80097c0:	4b27      	ldr	r3, [pc, #156]	; (8009860 <prvHeapInit+0xac>)
 80097c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f003 0307 	and.w	r3, r3, #7
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00c      	beq.n	80097e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	3307      	adds	r3, #7
 80097d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f023 0307 	bic.w	r3, r3, #7
 80097da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80097dc:	68ba      	ldr	r2, [r7, #8]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	1ad3      	subs	r3, r2, r3
 80097e2:	4a1f      	ldr	r2, [pc, #124]	; (8009860 <prvHeapInit+0xac>)
 80097e4:	4413      	add	r3, r2
 80097e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80097ec:	4a1d      	ldr	r2, [pc, #116]	; (8009864 <prvHeapInit+0xb0>)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80097f2:	4b1c      	ldr	r3, [pc, #112]	; (8009864 <prvHeapInit+0xb0>)
 80097f4:	2200      	movs	r2, #0
 80097f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	68ba      	ldr	r2, [r7, #8]
 80097fc:	4413      	add	r3, r2
 80097fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009800:	2208      	movs	r2, #8
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	1a9b      	subs	r3, r3, r2
 8009806:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f023 0307 	bic.w	r3, r3, #7
 800980e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	4a15      	ldr	r2, [pc, #84]	; (8009868 <prvHeapInit+0xb4>)
 8009814:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009816:	4b14      	ldr	r3, [pc, #80]	; (8009868 <prvHeapInit+0xb4>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	2200      	movs	r2, #0
 800981c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800981e:	4b12      	ldr	r3, [pc, #72]	; (8009868 <prvHeapInit+0xb4>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	2200      	movs	r2, #0
 8009824:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	68fa      	ldr	r2, [r7, #12]
 800982e:	1ad2      	subs	r2, r2, r3
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009834:	4b0c      	ldr	r3, [pc, #48]	; (8009868 <prvHeapInit+0xb4>)
 8009836:	681a      	ldr	r2, [r3, #0]
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	4a0a      	ldr	r2, [pc, #40]	; (800986c <prvHeapInit+0xb8>)
 8009842:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	4a09      	ldr	r2, [pc, #36]	; (8009870 <prvHeapInit+0xbc>)
 800984a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800984c:	4b09      	ldr	r3, [pc, #36]	; (8009874 <prvHeapInit+0xc0>)
 800984e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009852:	601a      	str	r2, [r3, #0]
}
 8009854:	bf00      	nop
 8009856:	3714      	adds	r7, #20
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr
 8009860:	20000ef0 	.word	0x20000ef0
 8009864:	20004af0 	.word	0x20004af0
 8009868:	20004af8 	.word	0x20004af8
 800986c:	20004b00 	.word	0x20004b00
 8009870:	20004afc 	.word	0x20004afc
 8009874:	20004b04 	.word	0x20004b04

08009878 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009878:	b480      	push	{r7}
 800987a:	b085      	sub	sp, #20
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009880:	4b28      	ldr	r3, [pc, #160]	; (8009924 <prvInsertBlockIntoFreeList+0xac>)
 8009882:	60fb      	str	r3, [r7, #12]
 8009884:	e002      	b.n	800988c <prvInsertBlockIntoFreeList+0x14>
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	60fb      	str	r3, [r7, #12]
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	429a      	cmp	r2, r3
 8009894:	d8f7      	bhi.n	8009886 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	68ba      	ldr	r2, [r7, #8]
 80098a0:	4413      	add	r3, r2
 80098a2:	687a      	ldr	r2, [r7, #4]
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d108      	bne.n	80098ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	685a      	ldr	r2, [r3, #4]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	441a      	add	r2, r3
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	68ba      	ldr	r2, [r7, #8]
 80098c4:	441a      	add	r2, r3
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d118      	bne.n	8009900 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681a      	ldr	r2, [r3, #0]
 80098d2:	4b15      	ldr	r3, [pc, #84]	; (8009928 <prvInsertBlockIntoFreeList+0xb0>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d00d      	beq.n	80098f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	685a      	ldr	r2, [r3, #4]
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	441a      	add	r2, r3
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	601a      	str	r2, [r3, #0]
 80098f4:	e008      	b.n	8009908 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80098f6:	4b0c      	ldr	r3, [pc, #48]	; (8009928 <prvInsertBlockIntoFreeList+0xb0>)
 80098f8:	681a      	ldr	r2, [r3, #0]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	601a      	str	r2, [r3, #0]
 80098fe:	e003      	b.n	8009908 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009908:	68fa      	ldr	r2, [r7, #12]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	429a      	cmp	r2, r3
 800990e:	d002      	beq.n	8009916 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	687a      	ldr	r2, [r7, #4]
 8009914:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009916:	bf00      	nop
 8009918:	3714      	adds	r7, #20
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr
 8009922:	bf00      	nop
 8009924:	20004af0 	.word	0x20004af0
 8009928:	20004af8 	.word	0x20004af8

0800992c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009930:	2200      	movs	r2, #0
 8009932:	490e      	ldr	r1, [pc, #56]	; (800996c <MX_USB_DEVICE_Init+0x40>)
 8009934:	480e      	ldr	r0, [pc, #56]	; (8009970 <MX_USB_DEVICE_Init+0x44>)
 8009936:	f7fc f9b1 	bl	8005c9c <USBD_Init>
 800993a:	4603      	mov	r3, r0
 800993c:	2b00      	cmp	r3, #0
 800993e:	d001      	beq.n	8009944 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009940:	f7f6 ff8b 	bl	800085a <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8009944:	490b      	ldr	r1, [pc, #44]	; (8009974 <MX_USB_DEVICE_Init+0x48>)
 8009946:	480a      	ldr	r0, [pc, #40]	; (8009970 <MX_USB_DEVICE_Init+0x44>)
 8009948:	f7fc f9de 	bl	8005d08 <USBD_RegisterClass>
 800994c:	4603      	mov	r3, r0
 800994e:	2b00      	cmp	r3, #0
 8009950:	d001      	beq.n	8009956 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009952:	f7f6 ff82 	bl	800085a <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009956:	4806      	ldr	r0, [pc, #24]	; (8009970 <MX_USB_DEVICE_Init+0x44>)
 8009958:	f7fc f9f7 	bl	8005d4a <USBD_Start>
 800995c:	4603      	mov	r3, r0
 800995e:	2b00      	cmp	r3, #0
 8009960:	d001      	beq.n	8009966 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8009962:	f7f6 ff7a 	bl	800085a <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009966:	bf00      	nop
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop
 800996c:	20000118 	.word	0x20000118
 8009970:	20004c14 	.word	0x20004c14
 8009974:	2000000c 	.word	0x2000000c

08009978 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009978:	b480      	push	{r7}
 800997a:	b083      	sub	sp, #12
 800997c:	af00      	add	r7, sp, #0
 800997e:	4603      	mov	r3, r0
 8009980:	6039      	str	r1, [r7, #0]
 8009982:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	2212      	movs	r2, #18
 8009988:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800998a:	4b03      	ldr	r3, [pc, #12]	; (8009998 <USBD_FS_DeviceDescriptor+0x20>)
}
 800998c:	4618      	mov	r0, r3
 800998e:	370c      	adds	r7, #12
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr
 8009998:	20000138 	.word	0x20000138

0800999c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800999c:	b480      	push	{r7}
 800999e:	b083      	sub	sp, #12
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	4603      	mov	r3, r0
 80099a4:	6039      	str	r1, [r7, #0]
 80099a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	2204      	movs	r2, #4
 80099ac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80099ae:	4b03      	ldr	r3, [pc, #12]	; (80099bc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	370c      	adds	r7, #12
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr
 80099bc:	20000158 	.word	0x20000158

080099c0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b082      	sub	sp, #8
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	4603      	mov	r3, r0
 80099c8:	6039      	str	r1, [r7, #0]
 80099ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80099cc:	79fb      	ldrb	r3, [r7, #7]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d105      	bne.n	80099de <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80099d2:	683a      	ldr	r2, [r7, #0]
 80099d4:	4907      	ldr	r1, [pc, #28]	; (80099f4 <USBD_FS_ProductStrDescriptor+0x34>)
 80099d6:	4808      	ldr	r0, [pc, #32]	; (80099f8 <USBD_FS_ProductStrDescriptor+0x38>)
 80099d8:	f7fd f9be 	bl	8006d58 <USBD_GetString>
 80099dc:	e004      	b.n	80099e8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80099de:	683a      	ldr	r2, [r7, #0]
 80099e0:	4904      	ldr	r1, [pc, #16]	; (80099f4 <USBD_FS_ProductStrDescriptor+0x34>)
 80099e2:	4805      	ldr	r0, [pc, #20]	; (80099f8 <USBD_FS_ProductStrDescriptor+0x38>)
 80099e4:	f7fd f9b8 	bl	8006d58 <USBD_GetString>
  }
  return USBD_StrDesc;
 80099e8:	4b02      	ldr	r3, [pc, #8]	; (80099f4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3708      	adds	r7, #8
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
 80099f2:	bf00      	nop
 80099f4:	20004ee4 	.word	0x20004ee4
 80099f8:	0800a48c 	.word	0x0800a48c

080099fc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b082      	sub	sp, #8
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	4603      	mov	r3, r0
 8009a04:	6039      	str	r1, [r7, #0]
 8009a06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009a08:	683a      	ldr	r2, [r7, #0]
 8009a0a:	4904      	ldr	r1, [pc, #16]	; (8009a1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009a0c:	4804      	ldr	r0, [pc, #16]	; (8009a20 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009a0e:	f7fd f9a3 	bl	8006d58 <USBD_GetString>
  return USBD_StrDesc;
 8009a12:	4b02      	ldr	r3, [pc, #8]	; (8009a1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3708      	adds	r7, #8
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}
 8009a1c:	20004ee4 	.word	0x20004ee4
 8009a20:	0800a4a4 	.word	0x0800a4a4

08009a24 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b082      	sub	sp, #8
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	6039      	str	r1, [r7, #0]
 8009a2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	221a      	movs	r2, #26
 8009a34:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009a36:	f000 f855 	bl	8009ae4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009a3a:	4b02      	ldr	r3, [pc, #8]	; (8009a44 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3708      	adds	r7, #8
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}
 8009a44:	2000015c 	.word	0x2000015c

08009a48 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b082      	sub	sp, #8
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	4603      	mov	r3, r0
 8009a50:	6039      	str	r1, [r7, #0]
 8009a52:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009a54:	79fb      	ldrb	r3, [r7, #7]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d105      	bne.n	8009a66 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a5a:	683a      	ldr	r2, [r7, #0]
 8009a5c:	4907      	ldr	r1, [pc, #28]	; (8009a7c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a5e:	4808      	ldr	r0, [pc, #32]	; (8009a80 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009a60:	f7fd f97a 	bl	8006d58 <USBD_GetString>
 8009a64:	e004      	b.n	8009a70 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a66:	683a      	ldr	r2, [r7, #0]
 8009a68:	4904      	ldr	r1, [pc, #16]	; (8009a7c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a6a:	4805      	ldr	r0, [pc, #20]	; (8009a80 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009a6c:	f7fd f974 	bl	8006d58 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a70:	4b02      	ldr	r3, [pc, #8]	; (8009a7c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3708      	adds	r7, #8
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}
 8009a7a:	bf00      	nop
 8009a7c:	20004ee4 	.word	0x20004ee4
 8009a80:	0800a4b8 	.word	0x0800a4b8

08009a84 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b082      	sub	sp, #8
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	6039      	str	r1, [r7, #0]
 8009a8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009a90:	79fb      	ldrb	r3, [r7, #7]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d105      	bne.n	8009aa2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009a96:	683a      	ldr	r2, [r7, #0]
 8009a98:	4907      	ldr	r1, [pc, #28]	; (8009ab8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009a9a:	4808      	ldr	r0, [pc, #32]	; (8009abc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009a9c:	f7fd f95c 	bl	8006d58 <USBD_GetString>
 8009aa0:	e004      	b.n	8009aac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009aa2:	683a      	ldr	r2, [r7, #0]
 8009aa4:	4904      	ldr	r1, [pc, #16]	; (8009ab8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009aa6:	4805      	ldr	r0, [pc, #20]	; (8009abc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009aa8:	f7fd f956 	bl	8006d58 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009aac:	4b02      	ldr	r3, [pc, #8]	; (8009ab8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3708      	adds	r7, #8
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	bf00      	nop
 8009ab8:	20004ee4 	.word	0x20004ee4
 8009abc:	0800a4c4 	.word	0x0800a4c4

08009ac0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b083      	sub	sp, #12
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	6039      	str	r1, [r7, #0]
 8009aca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	220c      	movs	r2, #12
 8009ad0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8009ad2:	4b03      	ldr	r3, [pc, #12]	; (8009ae0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	370c      	adds	r7, #12
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr
 8009ae0:	2000014c 	.word	0x2000014c

08009ae4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009aea:	4b0f      	ldr	r3, [pc, #60]	; (8009b28 <Get_SerialNum+0x44>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009af0:	4b0e      	ldr	r3, [pc, #56]	; (8009b2c <Get_SerialNum+0x48>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009af6:	4b0e      	ldr	r3, [pc, #56]	; (8009b30 <Get_SerialNum+0x4c>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009afc:	68fa      	ldr	r2, [r7, #12]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	4413      	add	r3, r2
 8009b02:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d009      	beq.n	8009b1e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009b0a:	2208      	movs	r2, #8
 8009b0c:	4909      	ldr	r1, [pc, #36]	; (8009b34 <Get_SerialNum+0x50>)
 8009b0e:	68f8      	ldr	r0, [r7, #12]
 8009b10:	f000 f814 	bl	8009b3c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009b14:	2204      	movs	r2, #4
 8009b16:	4908      	ldr	r1, [pc, #32]	; (8009b38 <Get_SerialNum+0x54>)
 8009b18:	68b8      	ldr	r0, [r7, #8]
 8009b1a:	f000 f80f 	bl	8009b3c <IntToUnicode>
  }
}
 8009b1e:	bf00      	nop
 8009b20:	3710      	adds	r7, #16
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	1fff7a10 	.word	0x1fff7a10
 8009b2c:	1fff7a14 	.word	0x1fff7a14
 8009b30:	1fff7a18 	.word	0x1fff7a18
 8009b34:	2000015e 	.word	0x2000015e
 8009b38:	2000016e 	.word	0x2000016e

08009b3c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b087      	sub	sp, #28
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	60f8      	str	r0, [r7, #12]
 8009b44:	60b9      	str	r1, [r7, #8]
 8009b46:	4613      	mov	r3, r2
 8009b48:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009b4e:	2300      	movs	r3, #0
 8009b50:	75fb      	strb	r3, [r7, #23]
 8009b52:	e027      	b.n	8009ba4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	0f1b      	lsrs	r3, r3, #28
 8009b58:	2b09      	cmp	r3, #9
 8009b5a:	d80b      	bhi.n	8009b74 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	0f1b      	lsrs	r3, r3, #28
 8009b60:	b2da      	uxtb	r2, r3
 8009b62:	7dfb      	ldrb	r3, [r7, #23]
 8009b64:	005b      	lsls	r3, r3, #1
 8009b66:	4619      	mov	r1, r3
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	440b      	add	r3, r1
 8009b6c:	3230      	adds	r2, #48	; 0x30
 8009b6e:	b2d2      	uxtb	r2, r2
 8009b70:	701a      	strb	r2, [r3, #0]
 8009b72:	e00a      	b.n	8009b8a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	0f1b      	lsrs	r3, r3, #28
 8009b78:	b2da      	uxtb	r2, r3
 8009b7a:	7dfb      	ldrb	r3, [r7, #23]
 8009b7c:	005b      	lsls	r3, r3, #1
 8009b7e:	4619      	mov	r1, r3
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	440b      	add	r3, r1
 8009b84:	3237      	adds	r2, #55	; 0x37
 8009b86:	b2d2      	uxtb	r2, r2
 8009b88:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	011b      	lsls	r3, r3, #4
 8009b8e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009b90:	7dfb      	ldrb	r3, [r7, #23]
 8009b92:	005b      	lsls	r3, r3, #1
 8009b94:	3301      	adds	r3, #1
 8009b96:	68ba      	ldr	r2, [r7, #8]
 8009b98:	4413      	add	r3, r2
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009b9e:	7dfb      	ldrb	r3, [r7, #23]
 8009ba0:	3301      	adds	r3, #1
 8009ba2:	75fb      	strb	r3, [r7, #23]
 8009ba4:	7dfa      	ldrb	r2, [r7, #23]
 8009ba6:	79fb      	ldrb	r3, [r7, #7]
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d3d3      	bcc.n	8009b54 <IntToUnicode+0x18>
  }
}
 8009bac:	bf00      	nop
 8009bae:	bf00      	nop
 8009bb0:	371c      	adds	r7, #28
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb8:	4770      	bx	lr
	...

08009bbc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b08a      	sub	sp, #40	; 0x28
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009bc4:	f107 0314 	add.w	r3, r7, #20
 8009bc8:	2200      	movs	r2, #0
 8009bca:	601a      	str	r2, [r3, #0]
 8009bcc:	605a      	str	r2, [r3, #4]
 8009bce:	609a      	str	r2, [r3, #8]
 8009bd0:	60da      	str	r2, [r3, #12]
 8009bd2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009bdc:	d13a      	bne.n	8009c54 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009bde:	2300      	movs	r3, #0
 8009be0:	613b      	str	r3, [r7, #16]
 8009be2:	4b1e      	ldr	r3, [pc, #120]	; (8009c5c <HAL_PCD_MspInit+0xa0>)
 8009be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009be6:	4a1d      	ldr	r2, [pc, #116]	; (8009c5c <HAL_PCD_MspInit+0xa0>)
 8009be8:	f043 0301 	orr.w	r3, r3, #1
 8009bec:	6313      	str	r3, [r2, #48]	; 0x30
 8009bee:	4b1b      	ldr	r3, [pc, #108]	; (8009c5c <HAL_PCD_MspInit+0xa0>)
 8009bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bf2:	f003 0301 	and.w	r3, r3, #1
 8009bf6:	613b      	str	r3, [r7, #16]
 8009bf8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009bfa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c00:	2302      	movs	r3, #2
 8009c02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c04:	2300      	movs	r3, #0
 8009c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c08:	2303      	movs	r3, #3
 8009c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009c0c:	230a      	movs	r3, #10
 8009c0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c10:	f107 0314 	add.w	r3, r7, #20
 8009c14:	4619      	mov	r1, r3
 8009c16:	4812      	ldr	r0, [pc, #72]	; (8009c60 <HAL_PCD_MspInit+0xa4>)
 8009c18:	f7f7 f930 	bl	8000e7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009c1c:	4b0f      	ldr	r3, [pc, #60]	; (8009c5c <HAL_PCD_MspInit+0xa0>)
 8009c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c20:	4a0e      	ldr	r2, [pc, #56]	; (8009c5c <HAL_PCD_MspInit+0xa0>)
 8009c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c26:	6353      	str	r3, [r2, #52]	; 0x34
 8009c28:	2300      	movs	r3, #0
 8009c2a:	60fb      	str	r3, [r7, #12]
 8009c2c:	4b0b      	ldr	r3, [pc, #44]	; (8009c5c <HAL_PCD_MspInit+0xa0>)
 8009c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c30:	4a0a      	ldr	r2, [pc, #40]	; (8009c5c <HAL_PCD_MspInit+0xa0>)
 8009c32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009c36:	6453      	str	r3, [r2, #68]	; 0x44
 8009c38:	4b08      	ldr	r3, [pc, #32]	; (8009c5c <HAL_PCD_MspInit+0xa0>)
 8009c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c40:	60fb      	str	r3, [r7, #12]
 8009c42:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8009c44:	2200      	movs	r2, #0
 8009c46:	2105      	movs	r1, #5
 8009c48:	2043      	movs	r0, #67	; 0x43
 8009c4a:	f7f7 f8ed 	bl	8000e28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009c4e:	2043      	movs	r0, #67	; 0x43
 8009c50:	f7f7 f906 	bl	8000e60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009c54:	bf00      	nop
 8009c56:	3728      	adds	r7, #40	; 0x28
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}
 8009c5c:	40023800 	.word	0x40023800
 8009c60:	40020000 	.word	0x40020000

08009c64 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b082      	sub	sp, #8
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009c78:	4619      	mov	r1, r3
 8009c7a:	4610      	mov	r0, r2
 8009c7c:	f7fc f8b0 	bl	8005de0 <USBD_LL_SetupStage>
}
 8009c80:	bf00      	nop
 8009c82:	3708      	adds	r7, #8
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b082      	sub	sp, #8
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	460b      	mov	r3, r1
 8009c92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009c9a:	78fa      	ldrb	r2, [r7, #3]
 8009c9c:	6879      	ldr	r1, [r7, #4]
 8009c9e:	4613      	mov	r3, r2
 8009ca0:	00db      	lsls	r3, r3, #3
 8009ca2:	1a9b      	subs	r3, r3, r2
 8009ca4:	009b      	lsls	r3, r3, #2
 8009ca6:	440b      	add	r3, r1
 8009ca8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009cac:	681a      	ldr	r2, [r3, #0]
 8009cae:	78fb      	ldrb	r3, [r7, #3]
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	f7fc f8ea 	bl	8005e8a <USBD_LL_DataOutStage>
}
 8009cb6:	bf00      	nop
 8009cb8:	3708      	adds	r7, #8
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}

08009cbe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cbe:	b580      	push	{r7, lr}
 8009cc0:	b082      	sub	sp, #8
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6078      	str	r0, [r7, #4]
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009cd0:	78fa      	ldrb	r2, [r7, #3]
 8009cd2:	6879      	ldr	r1, [r7, #4]
 8009cd4:	4613      	mov	r3, r2
 8009cd6:	00db      	lsls	r3, r3, #3
 8009cd8:	1a9b      	subs	r3, r3, r2
 8009cda:	009b      	lsls	r3, r3, #2
 8009cdc:	440b      	add	r3, r1
 8009cde:	3348      	adds	r3, #72	; 0x48
 8009ce0:	681a      	ldr	r2, [r3, #0]
 8009ce2:	78fb      	ldrb	r3, [r7, #3]
 8009ce4:	4619      	mov	r1, r3
 8009ce6:	f7fc f933 	bl	8005f50 <USBD_LL_DataInStage>
}
 8009cea:	bf00      	nop
 8009cec:	3708      	adds	r7, #8
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}

08009cf2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cf2:	b580      	push	{r7, lr}
 8009cf4:	b082      	sub	sp, #8
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009d00:	4618      	mov	r0, r3
 8009d02:	f7fc fa37 	bl	8006174 <USBD_LL_SOF>
}
 8009d06:	bf00      	nop
 8009d08:	3708      	adds	r7, #8
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}

08009d0e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d0e:	b580      	push	{r7, lr}
 8009d10:	b084      	sub	sp, #16
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009d16:	2301      	movs	r3, #1
 8009d18:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	68db      	ldr	r3, [r3, #12]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d102      	bne.n	8009d28 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009d22:	2300      	movs	r3, #0
 8009d24:	73fb      	strb	r3, [r7, #15]
 8009d26:	e008      	b.n	8009d3a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	68db      	ldr	r3, [r3, #12]
 8009d2c:	2b02      	cmp	r3, #2
 8009d2e:	d102      	bne.n	8009d36 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009d30:	2301      	movs	r3, #1
 8009d32:	73fb      	strb	r3, [r7, #15]
 8009d34:	e001      	b.n	8009d3a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009d36:	f7f6 fd90 	bl	800085a <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009d40:	7bfa      	ldrb	r2, [r7, #15]
 8009d42:	4611      	mov	r1, r2
 8009d44:	4618      	mov	r0, r3
 8009d46:	f7fc f9da 	bl	80060fe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009d50:	4618      	mov	r0, r3
 8009d52:	f7fc f993 	bl	800607c <USBD_LL_Reset>
}
 8009d56:	bf00      	nop
 8009d58:	3710      	adds	r7, #16
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
	...

08009d60 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b082      	sub	sp, #8
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f7fc f9d5 	bl	800611e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	687a      	ldr	r2, [r7, #4]
 8009d80:	6812      	ldr	r2, [r2, #0]
 8009d82:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009d86:	f043 0301 	orr.w	r3, r3, #1
 8009d8a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6a1b      	ldr	r3, [r3, #32]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d005      	beq.n	8009da0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009d94:	4b04      	ldr	r3, [pc, #16]	; (8009da8 <HAL_PCD_SuspendCallback+0x48>)
 8009d96:	691b      	ldr	r3, [r3, #16]
 8009d98:	4a03      	ldr	r2, [pc, #12]	; (8009da8 <HAL_PCD_SuspendCallback+0x48>)
 8009d9a:	f043 0306 	orr.w	r3, r3, #6
 8009d9e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009da0:	bf00      	nop
 8009da2:	3708      	adds	r7, #8
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}
 8009da8:	e000ed00 	.word	0xe000ed00

08009dac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b082      	sub	sp, #8
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f7fc f9c4 	bl	8006148 <USBD_LL_Resume>
}
 8009dc0:	bf00      	nop
 8009dc2:	3708      	adds	r7, #8
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009dda:	78fa      	ldrb	r2, [r7, #3]
 8009ddc:	4611      	mov	r1, r2
 8009dde:	4618      	mov	r0, r3
 8009de0:	f7fc f9ef 	bl	80061c2 <USBD_LL_IsoOUTIncomplete>
}
 8009de4:	bf00      	nop
 8009de6:	3708      	adds	r7, #8
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	460b      	mov	r3, r1
 8009df6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009dfe:	78fa      	ldrb	r2, [r7, #3]
 8009e00:	4611      	mov	r1, r2
 8009e02:	4618      	mov	r0, r3
 8009e04:	f7fc f9d0 	bl	80061a8 <USBD_LL_IsoINIncomplete>
}
 8009e08:	bf00      	nop
 8009e0a:	3708      	adds	r7, #8
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f7fc f9dc 	bl	80061dc <USBD_LL_DevConnected>
}
 8009e24:	bf00      	nop
 8009e26:	3708      	adds	r7, #8
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}

08009e2c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b082      	sub	sp, #8
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f7fc f9d9 	bl	80061f2 <USBD_LL_DevDisconnected>
}
 8009e40:	bf00      	nop
 8009e42:	3708      	adds	r7, #8
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	781b      	ldrb	r3, [r3, #0]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d13c      	bne.n	8009ed2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009e58:	4a20      	ldr	r2, [pc, #128]	; (8009edc <USBD_LL_Init+0x94>)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	4a1e      	ldr	r2, [pc, #120]	; (8009edc <USBD_LL_Init+0x94>)
 8009e64:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009e68:	4b1c      	ldr	r3, [pc, #112]	; (8009edc <USBD_LL_Init+0x94>)
 8009e6a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009e6e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009e70:	4b1a      	ldr	r3, [pc, #104]	; (8009edc <USBD_LL_Init+0x94>)
 8009e72:	2206      	movs	r2, #6
 8009e74:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009e76:	4b19      	ldr	r3, [pc, #100]	; (8009edc <USBD_LL_Init+0x94>)
 8009e78:	2202      	movs	r2, #2
 8009e7a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009e7c:	4b17      	ldr	r3, [pc, #92]	; (8009edc <USBD_LL_Init+0x94>)
 8009e7e:	2200      	movs	r2, #0
 8009e80:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009e82:	4b16      	ldr	r3, [pc, #88]	; (8009edc <USBD_LL_Init+0x94>)
 8009e84:	2202      	movs	r2, #2
 8009e86:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009e88:	4b14      	ldr	r3, [pc, #80]	; (8009edc <USBD_LL_Init+0x94>)
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009e8e:	4b13      	ldr	r3, [pc, #76]	; (8009edc <USBD_LL_Init+0x94>)
 8009e90:	2200      	movs	r2, #0
 8009e92:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009e94:	4b11      	ldr	r3, [pc, #68]	; (8009edc <USBD_LL_Init+0x94>)
 8009e96:	2200      	movs	r2, #0
 8009e98:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009e9a:	4b10      	ldr	r3, [pc, #64]	; (8009edc <USBD_LL_Init+0x94>)
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009ea0:	4b0e      	ldr	r3, [pc, #56]	; (8009edc <USBD_LL_Init+0x94>)
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009ea6:	480d      	ldr	r0, [pc, #52]	; (8009edc <USBD_LL_Init+0x94>)
 8009ea8:	f7f7 f9b0 	bl	800120c <HAL_PCD_Init>
 8009eac:	4603      	mov	r3, r0
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d001      	beq.n	8009eb6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009eb2:	f7f6 fcd2 	bl	800085a <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009eb6:	2180      	movs	r1, #128	; 0x80
 8009eb8:	4808      	ldr	r0, [pc, #32]	; (8009edc <USBD_LL_Init+0x94>)
 8009eba:	f7f8 fb2a 	bl	8002512 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009ebe:	2240      	movs	r2, #64	; 0x40
 8009ec0:	2100      	movs	r1, #0
 8009ec2:	4806      	ldr	r0, [pc, #24]	; (8009edc <USBD_LL_Init+0x94>)
 8009ec4:	f7f8 fade 	bl	8002484 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009ec8:	2280      	movs	r2, #128	; 0x80
 8009eca:	2101      	movs	r1, #1
 8009ecc:	4803      	ldr	r0, [pc, #12]	; (8009edc <USBD_LL_Init+0x94>)
 8009ece:	f7f8 fad9 	bl	8002484 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009ed2:	2300      	movs	r3, #0
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3708      	adds	r7, #8
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}
 8009edc:	200050e4 	.word	0x200050e4

08009ee0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b084      	sub	sp, #16
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009eec:	2300      	movs	r3, #0
 8009eee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7f7 faac 	bl	8001454 <HAL_PCD_Start>
 8009efc:	4603      	mov	r3, r0
 8009efe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f00:	7bfb      	ldrb	r3, [r7, #15]
 8009f02:	4618      	mov	r0, r3
 8009f04:	f000 f966 	bl	800a1d4 <USBD_Get_USB_Status>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3710      	adds	r7, #16
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}

08009f16 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009f16:	b580      	push	{r7, lr}
 8009f18:	b084      	sub	sp, #16
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	6078      	str	r0, [r7, #4]
 8009f1e:	4608      	mov	r0, r1
 8009f20:	4611      	mov	r1, r2
 8009f22:	461a      	mov	r2, r3
 8009f24:	4603      	mov	r3, r0
 8009f26:	70fb      	strb	r3, [r7, #3]
 8009f28:	460b      	mov	r3, r1
 8009f2a:	70bb      	strb	r3, [r7, #2]
 8009f2c:	4613      	mov	r3, r2
 8009f2e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f30:	2300      	movs	r3, #0
 8009f32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f34:	2300      	movs	r3, #0
 8009f36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009f3e:	78bb      	ldrb	r3, [r7, #2]
 8009f40:	883a      	ldrh	r2, [r7, #0]
 8009f42:	78f9      	ldrb	r1, [r7, #3]
 8009f44:	f7f7 febd 	bl	8001cc2 <HAL_PCD_EP_Open>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f4c:	7bfb      	ldrb	r3, [r7, #15]
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f000 f940 	bl	800a1d4 <USBD_Get_USB_Status>
 8009f54:	4603      	mov	r3, r0
 8009f56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f58:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3710      	adds	r7, #16
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}

08009f62 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f62:	b580      	push	{r7, lr}
 8009f64:	b084      	sub	sp, #16
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
 8009f6a:	460b      	mov	r3, r1
 8009f6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f72:	2300      	movs	r3, #0
 8009f74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009f7c:	78fa      	ldrb	r2, [r7, #3]
 8009f7e:	4611      	mov	r1, r2
 8009f80:	4618      	mov	r0, r3
 8009f82:	f7f7 ff06 	bl	8001d92 <HAL_PCD_EP_Close>
 8009f86:	4603      	mov	r3, r0
 8009f88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f8a:	7bfb      	ldrb	r3, [r7, #15]
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f000 f921 	bl	800a1d4 <USBD_Get_USB_Status>
 8009f92:	4603      	mov	r3, r0
 8009f94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f96:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3710      	adds	r7, #16
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b084      	sub	sp, #16
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	460b      	mov	r3, r1
 8009faa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fac:	2300      	movs	r3, #0
 8009fae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009fba:	78fa      	ldrb	r2, [r7, #3]
 8009fbc:	4611      	mov	r1, r2
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f7f7 ffc6 	bl	8001f50 <HAL_PCD_EP_SetStall>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fc8:	7bfb      	ldrb	r3, [r7, #15]
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f000 f902 	bl	800a1d4 <USBD_Get_USB_Status>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3710      	adds	r7, #16
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}

08009fde <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fde:	b580      	push	{r7, lr}
 8009fe0:	b084      	sub	sp, #16
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	6078      	str	r0, [r7, #4]
 8009fe6:	460b      	mov	r3, r1
 8009fe8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fea:	2300      	movs	r3, #0
 8009fec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009ff8:	78fa      	ldrb	r2, [r7, #3]
 8009ffa:	4611      	mov	r1, r2
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f7f8 f80b 	bl	8002018 <HAL_PCD_EP_ClrStall>
 800a002:	4603      	mov	r3, r0
 800a004:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a006:	7bfb      	ldrb	r3, [r7, #15]
 800a008:	4618      	mov	r0, r3
 800a00a:	f000 f8e3 	bl	800a1d4 <USBD_Get_USB_Status>
 800a00e:	4603      	mov	r3, r0
 800a010:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a012:	7bbb      	ldrb	r3, [r7, #14]
}
 800a014:	4618      	mov	r0, r3
 800a016:	3710      	adds	r7, #16
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}

0800a01c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b085      	sub	sp, #20
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	460b      	mov	r3, r1
 800a026:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a02e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a030:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a034:	2b00      	cmp	r3, #0
 800a036:	da0b      	bge.n	800a050 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a038:	78fb      	ldrb	r3, [r7, #3]
 800a03a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a03e:	68f9      	ldr	r1, [r7, #12]
 800a040:	4613      	mov	r3, r2
 800a042:	00db      	lsls	r3, r3, #3
 800a044:	1a9b      	subs	r3, r3, r2
 800a046:	009b      	lsls	r3, r3, #2
 800a048:	440b      	add	r3, r1
 800a04a:	333e      	adds	r3, #62	; 0x3e
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	e00b      	b.n	800a068 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a050:	78fb      	ldrb	r3, [r7, #3]
 800a052:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a056:	68f9      	ldr	r1, [r7, #12]
 800a058:	4613      	mov	r3, r2
 800a05a:	00db      	lsls	r3, r3, #3
 800a05c:	1a9b      	subs	r3, r3, r2
 800a05e:	009b      	lsls	r3, r3, #2
 800a060:	440b      	add	r3, r1
 800a062:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a066:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3714      	adds	r7, #20
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr

0800a074 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b084      	sub	sp, #16
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	460b      	mov	r3, r1
 800a07e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a080:	2300      	movs	r3, #0
 800a082:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a084:	2300      	movs	r3, #0
 800a086:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a08e:	78fa      	ldrb	r2, [r7, #3]
 800a090:	4611      	mov	r1, r2
 800a092:	4618      	mov	r0, r3
 800a094:	f7f7 fdf0 	bl	8001c78 <HAL_PCD_SetAddress>
 800a098:	4603      	mov	r3, r0
 800a09a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a09c:	7bfb      	ldrb	r3, [r7, #15]
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f000 f898 	bl	800a1d4 <USBD_Get_USB_Status>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3710      	adds	r7, #16
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}

0800a0b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a0b2:	b580      	push	{r7, lr}
 800a0b4:	b086      	sub	sp, #24
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	60f8      	str	r0, [r7, #12]
 800a0ba:	607a      	str	r2, [r7, #4]
 800a0bc:	603b      	str	r3, [r7, #0]
 800a0be:	460b      	mov	r3, r1
 800a0c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a0d0:	7af9      	ldrb	r1, [r7, #11]
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	f7f7 fef1 	bl	8001ebc <HAL_PCD_EP_Transmit>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0de:	7dfb      	ldrb	r3, [r7, #23]
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f000 f877 	bl	800a1d4 <USBD_Get_USB_Status>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a0ea:	7dbb      	ldrb	r3, [r7, #22]
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3718      	adds	r7, #24
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b086      	sub	sp, #24
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	60f8      	str	r0, [r7, #12]
 800a0fc:	607a      	str	r2, [r7, #4]
 800a0fe:	603b      	str	r3, [r7, #0]
 800a100:	460b      	mov	r3, r1
 800a102:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a104:	2300      	movs	r3, #0
 800a106:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a108:	2300      	movs	r3, #0
 800a10a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a112:	7af9      	ldrb	r1, [r7, #11]
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	687a      	ldr	r2, [r7, #4]
 800a118:	f7f7 fe85 	bl	8001e26 <HAL_PCD_EP_Receive>
 800a11c:	4603      	mov	r3, r0
 800a11e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a120:	7dfb      	ldrb	r3, [r7, #23]
 800a122:	4618      	mov	r0, r3
 800a124:	f000 f856 	bl	800a1d4 <USBD_Get_USB_Status>
 800a128:	4603      	mov	r3, r0
 800a12a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a12c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3718      	adds	r7, #24
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}
	...

0800a138 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b082      	sub	sp, #8
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	460b      	mov	r3, r1
 800a142:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a144:	78fb      	ldrb	r3, [r7, #3]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d002      	beq.n	800a150 <HAL_PCDEx_LPM_Callback+0x18>
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d01f      	beq.n	800a18e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a14e:	e03b      	b.n	800a1c8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6a1b      	ldr	r3, [r3, #32]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d007      	beq.n	800a168 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800a158:	f7f6 f9f8 	bl	800054c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a15c:	4b1c      	ldr	r3, [pc, #112]	; (800a1d0 <HAL_PCDEx_LPM_Callback+0x98>)
 800a15e:	691b      	ldr	r3, [r3, #16]
 800a160:	4a1b      	ldr	r2, [pc, #108]	; (800a1d0 <HAL_PCDEx_LPM_Callback+0x98>)
 800a162:	f023 0306 	bic.w	r3, r3, #6
 800a166:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	6812      	ldr	r2, [r2, #0]
 800a176:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a17a:	f023 0301 	bic.w	r3, r3, #1
 800a17e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a186:	4618      	mov	r0, r3
 800a188:	f7fb ffde 	bl	8006148 <USBD_LL_Resume>
    break;
 800a18c:	e01c      	b.n	800a1c8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	687a      	ldr	r2, [r7, #4]
 800a19a:	6812      	ldr	r2, [r2, #0]
 800a19c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a1a0:	f043 0301 	orr.w	r3, r3, #1
 800a1a4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f7fb ffb6 	bl	800611e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6a1b      	ldr	r3, [r3, #32]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d005      	beq.n	800a1c6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a1ba:	4b05      	ldr	r3, [pc, #20]	; (800a1d0 <HAL_PCDEx_LPM_Callback+0x98>)
 800a1bc:	691b      	ldr	r3, [r3, #16]
 800a1be:	4a04      	ldr	r2, [pc, #16]	; (800a1d0 <HAL_PCDEx_LPM_Callback+0x98>)
 800a1c0:	f043 0306 	orr.w	r3, r3, #6
 800a1c4:	6113      	str	r3, [r2, #16]
    break;
 800a1c6:	bf00      	nop
}
 800a1c8:	bf00      	nop
 800a1ca:	3708      	adds	r7, #8
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}
 800a1d0:	e000ed00 	.word	0xe000ed00

0800a1d4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b085      	sub	sp, #20
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	4603      	mov	r3, r0
 800a1dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a1e2:	79fb      	ldrb	r3, [r7, #7]
 800a1e4:	2b03      	cmp	r3, #3
 800a1e6:	d817      	bhi.n	800a218 <USBD_Get_USB_Status+0x44>
 800a1e8:	a201      	add	r2, pc, #4	; (adr r2, 800a1f0 <USBD_Get_USB_Status+0x1c>)
 800a1ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ee:	bf00      	nop
 800a1f0:	0800a201 	.word	0x0800a201
 800a1f4:	0800a207 	.word	0x0800a207
 800a1f8:	0800a20d 	.word	0x0800a20d
 800a1fc:	0800a213 	.word	0x0800a213
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a200:	2300      	movs	r3, #0
 800a202:	73fb      	strb	r3, [r7, #15]
    break;
 800a204:	e00b      	b.n	800a21e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a206:	2303      	movs	r3, #3
 800a208:	73fb      	strb	r3, [r7, #15]
    break;
 800a20a:	e008      	b.n	800a21e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a20c:	2301      	movs	r3, #1
 800a20e:	73fb      	strb	r3, [r7, #15]
    break;
 800a210:	e005      	b.n	800a21e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a212:	2303      	movs	r3, #3
 800a214:	73fb      	strb	r3, [r7, #15]
    break;
 800a216:	e002      	b.n	800a21e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a218:	2303      	movs	r3, #3
 800a21a:	73fb      	strb	r3, [r7, #15]
    break;
 800a21c:	bf00      	nop
  }
  return usb_status;
 800a21e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a220:	4618      	mov	r0, r3
 800a222:	3714      	adds	r7, #20
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr

0800a22c <__errno>:
 800a22c:	4b01      	ldr	r3, [pc, #4]	; (800a234 <__errno+0x8>)
 800a22e:	6818      	ldr	r0, [r3, #0]
 800a230:	4770      	bx	lr
 800a232:	bf00      	nop
 800a234:	20000178 	.word	0x20000178

0800a238 <__libc_init_array>:
 800a238:	b570      	push	{r4, r5, r6, lr}
 800a23a:	4d0d      	ldr	r5, [pc, #52]	; (800a270 <__libc_init_array+0x38>)
 800a23c:	4c0d      	ldr	r4, [pc, #52]	; (800a274 <__libc_init_array+0x3c>)
 800a23e:	1b64      	subs	r4, r4, r5
 800a240:	10a4      	asrs	r4, r4, #2
 800a242:	2600      	movs	r6, #0
 800a244:	42a6      	cmp	r6, r4
 800a246:	d109      	bne.n	800a25c <__libc_init_array+0x24>
 800a248:	4d0b      	ldr	r5, [pc, #44]	; (800a278 <__libc_init_array+0x40>)
 800a24a:	4c0c      	ldr	r4, [pc, #48]	; (800a27c <__libc_init_array+0x44>)
 800a24c:	f000 f906 	bl	800a45c <_init>
 800a250:	1b64      	subs	r4, r4, r5
 800a252:	10a4      	asrs	r4, r4, #2
 800a254:	2600      	movs	r6, #0
 800a256:	42a6      	cmp	r6, r4
 800a258:	d105      	bne.n	800a266 <__libc_init_array+0x2e>
 800a25a:	bd70      	pop	{r4, r5, r6, pc}
 800a25c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a260:	4798      	blx	r3
 800a262:	3601      	adds	r6, #1
 800a264:	e7ee      	b.n	800a244 <__libc_init_array+0xc>
 800a266:	f855 3b04 	ldr.w	r3, [r5], #4
 800a26a:	4798      	blx	r3
 800a26c:	3601      	adds	r6, #1
 800a26e:	e7f2      	b.n	800a256 <__libc_init_array+0x1e>
 800a270:	0800a4f4 	.word	0x0800a4f4
 800a274:	0800a4f4 	.word	0x0800a4f4
 800a278:	0800a4f4 	.word	0x0800a4f4
 800a27c:	0800a4f8 	.word	0x0800a4f8

0800a280 <malloc>:
 800a280:	4b02      	ldr	r3, [pc, #8]	; (800a28c <malloc+0xc>)
 800a282:	4601      	mov	r1, r0
 800a284:	6818      	ldr	r0, [r3, #0]
 800a286:	f000 b871 	b.w	800a36c <_malloc_r>
 800a28a:	bf00      	nop
 800a28c:	20000178 	.word	0x20000178

0800a290 <free>:
 800a290:	4b02      	ldr	r3, [pc, #8]	; (800a29c <free+0xc>)
 800a292:	4601      	mov	r1, r0
 800a294:	6818      	ldr	r0, [r3, #0]
 800a296:	f000 b819 	b.w	800a2cc <_free_r>
 800a29a:	bf00      	nop
 800a29c:	20000178 	.word	0x20000178

0800a2a0 <memcpy>:
 800a2a0:	440a      	add	r2, r1
 800a2a2:	4291      	cmp	r1, r2
 800a2a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a2a8:	d100      	bne.n	800a2ac <memcpy+0xc>
 800a2aa:	4770      	bx	lr
 800a2ac:	b510      	push	{r4, lr}
 800a2ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a2b6:	4291      	cmp	r1, r2
 800a2b8:	d1f9      	bne.n	800a2ae <memcpy+0xe>
 800a2ba:	bd10      	pop	{r4, pc}

0800a2bc <memset>:
 800a2bc:	4402      	add	r2, r0
 800a2be:	4603      	mov	r3, r0
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d100      	bne.n	800a2c6 <memset+0xa>
 800a2c4:	4770      	bx	lr
 800a2c6:	f803 1b01 	strb.w	r1, [r3], #1
 800a2ca:	e7f9      	b.n	800a2c0 <memset+0x4>

0800a2cc <_free_r>:
 800a2cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2ce:	2900      	cmp	r1, #0
 800a2d0:	d048      	beq.n	800a364 <_free_r+0x98>
 800a2d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2d6:	9001      	str	r0, [sp, #4]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	f1a1 0404 	sub.w	r4, r1, #4
 800a2de:	bfb8      	it	lt
 800a2e0:	18e4      	addlt	r4, r4, r3
 800a2e2:	f000 f8ad 	bl	800a440 <__malloc_lock>
 800a2e6:	4a20      	ldr	r2, [pc, #128]	; (800a368 <_free_r+0x9c>)
 800a2e8:	9801      	ldr	r0, [sp, #4]
 800a2ea:	6813      	ldr	r3, [r2, #0]
 800a2ec:	4615      	mov	r5, r2
 800a2ee:	b933      	cbnz	r3, 800a2fe <_free_r+0x32>
 800a2f0:	6063      	str	r3, [r4, #4]
 800a2f2:	6014      	str	r4, [r2, #0]
 800a2f4:	b003      	add	sp, #12
 800a2f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a2fa:	f000 b8a7 	b.w	800a44c <__malloc_unlock>
 800a2fe:	42a3      	cmp	r3, r4
 800a300:	d90b      	bls.n	800a31a <_free_r+0x4e>
 800a302:	6821      	ldr	r1, [r4, #0]
 800a304:	1862      	adds	r2, r4, r1
 800a306:	4293      	cmp	r3, r2
 800a308:	bf04      	itt	eq
 800a30a:	681a      	ldreq	r2, [r3, #0]
 800a30c:	685b      	ldreq	r3, [r3, #4]
 800a30e:	6063      	str	r3, [r4, #4]
 800a310:	bf04      	itt	eq
 800a312:	1852      	addeq	r2, r2, r1
 800a314:	6022      	streq	r2, [r4, #0]
 800a316:	602c      	str	r4, [r5, #0]
 800a318:	e7ec      	b.n	800a2f4 <_free_r+0x28>
 800a31a:	461a      	mov	r2, r3
 800a31c:	685b      	ldr	r3, [r3, #4]
 800a31e:	b10b      	cbz	r3, 800a324 <_free_r+0x58>
 800a320:	42a3      	cmp	r3, r4
 800a322:	d9fa      	bls.n	800a31a <_free_r+0x4e>
 800a324:	6811      	ldr	r1, [r2, #0]
 800a326:	1855      	adds	r5, r2, r1
 800a328:	42a5      	cmp	r5, r4
 800a32a:	d10b      	bne.n	800a344 <_free_r+0x78>
 800a32c:	6824      	ldr	r4, [r4, #0]
 800a32e:	4421      	add	r1, r4
 800a330:	1854      	adds	r4, r2, r1
 800a332:	42a3      	cmp	r3, r4
 800a334:	6011      	str	r1, [r2, #0]
 800a336:	d1dd      	bne.n	800a2f4 <_free_r+0x28>
 800a338:	681c      	ldr	r4, [r3, #0]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	6053      	str	r3, [r2, #4]
 800a33e:	4421      	add	r1, r4
 800a340:	6011      	str	r1, [r2, #0]
 800a342:	e7d7      	b.n	800a2f4 <_free_r+0x28>
 800a344:	d902      	bls.n	800a34c <_free_r+0x80>
 800a346:	230c      	movs	r3, #12
 800a348:	6003      	str	r3, [r0, #0]
 800a34a:	e7d3      	b.n	800a2f4 <_free_r+0x28>
 800a34c:	6825      	ldr	r5, [r4, #0]
 800a34e:	1961      	adds	r1, r4, r5
 800a350:	428b      	cmp	r3, r1
 800a352:	bf04      	itt	eq
 800a354:	6819      	ldreq	r1, [r3, #0]
 800a356:	685b      	ldreq	r3, [r3, #4]
 800a358:	6063      	str	r3, [r4, #4]
 800a35a:	bf04      	itt	eq
 800a35c:	1949      	addeq	r1, r1, r5
 800a35e:	6021      	streq	r1, [r4, #0]
 800a360:	6054      	str	r4, [r2, #4]
 800a362:	e7c7      	b.n	800a2f4 <_free_r+0x28>
 800a364:	b003      	add	sp, #12
 800a366:	bd30      	pop	{r4, r5, pc}
 800a368:	20004b08 	.word	0x20004b08

0800a36c <_malloc_r>:
 800a36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a36e:	1ccd      	adds	r5, r1, #3
 800a370:	f025 0503 	bic.w	r5, r5, #3
 800a374:	3508      	adds	r5, #8
 800a376:	2d0c      	cmp	r5, #12
 800a378:	bf38      	it	cc
 800a37a:	250c      	movcc	r5, #12
 800a37c:	2d00      	cmp	r5, #0
 800a37e:	4606      	mov	r6, r0
 800a380:	db01      	blt.n	800a386 <_malloc_r+0x1a>
 800a382:	42a9      	cmp	r1, r5
 800a384:	d903      	bls.n	800a38e <_malloc_r+0x22>
 800a386:	230c      	movs	r3, #12
 800a388:	6033      	str	r3, [r6, #0]
 800a38a:	2000      	movs	r0, #0
 800a38c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a38e:	f000 f857 	bl	800a440 <__malloc_lock>
 800a392:	4921      	ldr	r1, [pc, #132]	; (800a418 <_malloc_r+0xac>)
 800a394:	680a      	ldr	r2, [r1, #0]
 800a396:	4614      	mov	r4, r2
 800a398:	b99c      	cbnz	r4, 800a3c2 <_malloc_r+0x56>
 800a39a:	4f20      	ldr	r7, [pc, #128]	; (800a41c <_malloc_r+0xb0>)
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	b923      	cbnz	r3, 800a3aa <_malloc_r+0x3e>
 800a3a0:	4621      	mov	r1, r4
 800a3a2:	4630      	mov	r0, r6
 800a3a4:	f000 f83c 	bl	800a420 <_sbrk_r>
 800a3a8:	6038      	str	r0, [r7, #0]
 800a3aa:	4629      	mov	r1, r5
 800a3ac:	4630      	mov	r0, r6
 800a3ae:	f000 f837 	bl	800a420 <_sbrk_r>
 800a3b2:	1c43      	adds	r3, r0, #1
 800a3b4:	d123      	bne.n	800a3fe <_malloc_r+0x92>
 800a3b6:	230c      	movs	r3, #12
 800a3b8:	6033      	str	r3, [r6, #0]
 800a3ba:	4630      	mov	r0, r6
 800a3bc:	f000 f846 	bl	800a44c <__malloc_unlock>
 800a3c0:	e7e3      	b.n	800a38a <_malloc_r+0x1e>
 800a3c2:	6823      	ldr	r3, [r4, #0]
 800a3c4:	1b5b      	subs	r3, r3, r5
 800a3c6:	d417      	bmi.n	800a3f8 <_malloc_r+0x8c>
 800a3c8:	2b0b      	cmp	r3, #11
 800a3ca:	d903      	bls.n	800a3d4 <_malloc_r+0x68>
 800a3cc:	6023      	str	r3, [r4, #0]
 800a3ce:	441c      	add	r4, r3
 800a3d0:	6025      	str	r5, [r4, #0]
 800a3d2:	e004      	b.n	800a3de <_malloc_r+0x72>
 800a3d4:	6863      	ldr	r3, [r4, #4]
 800a3d6:	42a2      	cmp	r2, r4
 800a3d8:	bf0c      	ite	eq
 800a3da:	600b      	streq	r3, [r1, #0]
 800a3dc:	6053      	strne	r3, [r2, #4]
 800a3de:	4630      	mov	r0, r6
 800a3e0:	f000 f834 	bl	800a44c <__malloc_unlock>
 800a3e4:	f104 000b 	add.w	r0, r4, #11
 800a3e8:	1d23      	adds	r3, r4, #4
 800a3ea:	f020 0007 	bic.w	r0, r0, #7
 800a3ee:	1ac2      	subs	r2, r0, r3
 800a3f0:	d0cc      	beq.n	800a38c <_malloc_r+0x20>
 800a3f2:	1a1b      	subs	r3, r3, r0
 800a3f4:	50a3      	str	r3, [r4, r2]
 800a3f6:	e7c9      	b.n	800a38c <_malloc_r+0x20>
 800a3f8:	4622      	mov	r2, r4
 800a3fa:	6864      	ldr	r4, [r4, #4]
 800a3fc:	e7cc      	b.n	800a398 <_malloc_r+0x2c>
 800a3fe:	1cc4      	adds	r4, r0, #3
 800a400:	f024 0403 	bic.w	r4, r4, #3
 800a404:	42a0      	cmp	r0, r4
 800a406:	d0e3      	beq.n	800a3d0 <_malloc_r+0x64>
 800a408:	1a21      	subs	r1, r4, r0
 800a40a:	4630      	mov	r0, r6
 800a40c:	f000 f808 	bl	800a420 <_sbrk_r>
 800a410:	3001      	adds	r0, #1
 800a412:	d1dd      	bne.n	800a3d0 <_malloc_r+0x64>
 800a414:	e7cf      	b.n	800a3b6 <_malloc_r+0x4a>
 800a416:	bf00      	nop
 800a418:	20004b08 	.word	0x20004b08
 800a41c:	20004b0c 	.word	0x20004b0c

0800a420 <_sbrk_r>:
 800a420:	b538      	push	{r3, r4, r5, lr}
 800a422:	4d06      	ldr	r5, [pc, #24]	; (800a43c <_sbrk_r+0x1c>)
 800a424:	2300      	movs	r3, #0
 800a426:	4604      	mov	r4, r0
 800a428:	4608      	mov	r0, r1
 800a42a:	602b      	str	r3, [r5, #0]
 800a42c:	f7f6 fb68 	bl	8000b00 <_sbrk>
 800a430:	1c43      	adds	r3, r0, #1
 800a432:	d102      	bne.n	800a43a <_sbrk_r+0x1a>
 800a434:	682b      	ldr	r3, [r5, #0]
 800a436:	b103      	cbz	r3, 800a43a <_sbrk_r+0x1a>
 800a438:	6023      	str	r3, [r4, #0]
 800a43a:	bd38      	pop	{r3, r4, r5, pc}
 800a43c:	200054ec 	.word	0x200054ec

0800a440 <__malloc_lock>:
 800a440:	4801      	ldr	r0, [pc, #4]	; (800a448 <__malloc_lock+0x8>)
 800a442:	f000 b809 	b.w	800a458 <__retarget_lock_acquire_recursive>
 800a446:	bf00      	nop
 800a448:	200054f4 	.word	0x200054f4

0800a44c <__malloc_unlock>:
 800a44c:	4801      	ldr	r0, [pc, #4]	; (800a454 <__malloc_unlock+0x8>)
 800a44e:	f000 b804 	b.w	800a45a <__retarget_lock_release_recursive>
 800a452:	bf00      	nop
 800a454:	200054f4 	.word	0x200054f4

0800a458 <__retarget_lock_acquire_recursive>:
 800a458:	4770      	bx	lr

0800a45a <__retarget_lock_release_recursive>:
 800a45a:	4770      	bx	lr

0800a45c <_init>:
 800a45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a45e:	bf00      	nop
 800a460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a462:	bc08      	pop	{r3}
 800a464:	469e      	mov	lr, r3
 800a466:	4770      	bx	lr

0800a468 <_fini>:
 800a468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a46a:	bf00      	nop
 800a46c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a46e:	bc08      	pop	{r3}
 800a470:	469e      	mov	lr, r3
 800a472:	4770      	bx	lr
