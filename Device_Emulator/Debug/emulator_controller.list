
emulator_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ba8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007d78  08007d78  00017d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007dd8  08007dd8  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  08007dd8  08007dd8  00017dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007de0  08007de0  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007de0  08007de0  00017de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007de4  08007de4  00017de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08007de8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e60  200001d8  08007fc0  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001038  08007fc0  00021038  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d22a  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f42  00000000  00000000  0003d432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001500  00000000  00000000  00041378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001348  00000000  00000000  00042878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005e13  00000000  00000000  00043bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018156  00000000  00000000  000499d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da3d4  00000000  00000000  00061b29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013befd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005948  00000000  00000000  0013bf50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007d60 	.word	0x08007d60

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	08007d60 	.word	0x08007d60

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
		int8_t x;
		int8_t y;
		int8_t wheel;
	};
	struct mouseHID_t mouseHID;
	mouseHID.buttons = 0;
 800050e:	2300      	movs	r3, #0
 8000510:	713b      	strb	r3, [r7, #4]
	mouseHID.x = 10;
 8000512:	230a      	movs	r3, #10
 8000514:	717b      	strb	r3, [r7, #5]
	mouseHID.y = 0;
 8000516:	2300      	movs	r3, #0
 8000518:	71bb      	strb	r3, [r7, #6]
	mouseHID.wheel = 0;
 800051a:	2300      	movs	r3, #0
 800051c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051e:	f000 fb3f 	bl	8000ba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000522:	f000 f817 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000526:	f000 f8f3 	bl	8000710 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800052a:	f000 f89d 	bl	8000668 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800052e:	f000 f8c5 	bl	80006bc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 8000532:	f006 fe8b 	bl	800724c <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  mouseHID.x = 10;
 8000536:	230a      	movs	r3, #10
 8000538:	717b      	strb	r3, [r7, #5]
	  USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&mouseHID, sizeof(struct mouseHID_t));
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	2204      	movs	r2, #4
 800053e:	4619      	mov	r1, r3
 8000540:	4803      	ldr	r0, [pc, #12]	; (8000550 <main+0x48>)
 8000542:	f005 faf5 	bl	8005b30 <USBD_HID_SendReport>
	  HAL_Delay(1000);
 8000546:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800054a:	f000 fb6b 	bl	8000c24 <HAL_Delay>
	  mouseHID.x = 10;
 800054e:	e7f2      	b.n	8000536 <main+0x2e>
 8000550:	20000750 	.word	0x20000750

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b0ac      	sub	sp, #176	; 0xb0
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800055e:	2234      	movs	r2, #52	; 0x34
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f007 fb2c 	bl	8007bc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	225c      	movs	r2, #92	; 0x5c
 800057e:	2100      	movs	r1, #0
 8000580:	4618      	mov	r0, r3
 8000582:	f007 fb1d 	bl	8007bc0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	4b35      	ldr	r3, [pc, #212]	; (8000660 <SystemClock_Config+0x10c>)
 800058c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058e:	4a34      	ldr	r2, [pc, #208]	; (8000660 <SystemClock_Config+0x10c>)
 8000590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000594:	6413      	str	r3, [r2, #64]	; 0x40
 8000596:	4b32      	ldr	r3, [pc, #200]	; (8000660 <SystemClock_Config+0x10c>)
 8000598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	4b2f      	ldr	r3, [pc, #188]	; (8000664 <SystemClock_Config+0x110>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005ae:	4a2d      	ldr	r2, [pc, #180]	; (8000664 <SystemClock_Config+0x110>)
 80005b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b4:	6013      	str	r3, [r2, #0]
 80005b6:	4b2b      	ldr	r3, [pc, #172]	; (8000664 <SystemClock_Config+0x110>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c2:	2301      	movs	r3, #1
 80005c4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ce:	2302      	movs	r3, #2
 80005d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005dc:	2304      	movs	r3, #4
 80005de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005e2:	2348      	movs	r3, #72	; 0x48
 80005e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e8:	2302      	movs	r3, #2
 80005ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005ee:	2303      	movs	r3, #3
 80005f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80005fe:	4618      	mov	r0, r3
 8000600:	f002 fda2 	bl	8003148 <HAL_RCC_OscConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800060a:	f000 f900 	bl	800080e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060e:	230f      	movs	r3, #15
 8000610:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000612:	2302      	movs	r3, #2
 8000614:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800061a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800061e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000624:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000628:	2102      	movs	r1, #2
 800062a:	4618      	mov	r0, r3
 800062c:	f001 ff64 	bl	80024f8 <HAL_RCC_ClockConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000636:	f000 f8ea 	bl	800080e <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800063a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800063e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000640:	2300      	movs	r3, #0
 8000642:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	4618      	mov	r0, r3
 800064a:	f002 f8a1 	bl	8002790 <HAL_RCCEx_PeriphCLKConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x104>
  {
    Error_Handler();
 8000654:	f000 f8db 	bl	800080e <Error_Handler>
  }
}
 8000658:	bf00      	nop
 800065a:	37b0      	adds	r7, #176	; 0xb0
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40023800 	.word	0x40023800
 8000664:	40007000 	.word	0x40007000

08000668 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800066c:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 800066e:	4a12      	ldr	r2, [pc, #72]	; (80006b8 <MX_USART2_UART_Init+0x50>)
 8000670:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 8000674:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000678:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 8000682:	2200      	movs	r2, #0
 8000684:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 800068e:	220c      	movs	r2, #12
 8000690:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000692:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 8000694:	2200      	movs	r2, #0
 8000696:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 800069a:	2200      	movs	r2, #0
 800069c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 80006a0:	f003 f9ea 	bl	8003a78 <HAL_UART_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006aa:	f000 f8b0 	bl	800080e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	200006cc 	.word	0x200006cc
 80006b8:	40004400 	.word	0x40004400

080006bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_USART3_UART_Init+0x4c>)
 80006c2:	4a12      	ldr	r2, [pc, #72]	; (800070c <MX_USART3_UART_Init+0x50>)
 80006c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006c6:	4b10      	ldr	r3, [pc, #64]	; (8000708 <MX_USART3_UART_Init+0x4c>)
 80006c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_USART3_UART_Init+0x4c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_USART3_UART_Init+0x4c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <MX_USART3_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_USART3_UART_Init+0x4c>)
 80006e2:	220c      	movs	r2, #12
 80006e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <MX_USART3_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_USART3_UART_Init+0x4c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_USART3_UART_Init+0x4c>)
 80006f4:	f003 f9c0 	bl	8003a78 <HAL_UART_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006fe:	f000 f886 	bl	800080e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	2000068c 	.word	0x2000068c
 800070c:	40004800 	.word	0x40004800

08000710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08a      	sub	sp, #40	; 0x28
 8000714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	613b      	str	r3, [r7, #16]
 800072a:	4b2d      	ldr	r3, [pc, #180]	; (80007e0 <MX_GPIO_Init+0xd0>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a2c      	ldr	r2, [pc, #176]	; (80007e0 <MX_GPIO_Init+0xd0>)
 8000730:	f043 0304 	orr.w	r3, r3, #4
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b2a      	ldr	r3, [pc, #168]	; (80007e0 <MX_GPIO_Init+0xd0>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0304 	and.w	r3, r3, #4
 800073e:	613b      	str	r3, [r7, #16]
 8000740:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	4b26      	ldr	r3, [pc, #152]	; (80007e0 <MX_GPIO_Init+0xd0>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a25      	ldr	r2, [pc, #148]	; (80007e0 <MX_GPIO_Init+0xd0>)
 800074c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b23      	ldr	r3, [pc, #140]	; (80007e0 <MX_GPIO_Init+0xd0>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	4b1f      	ldr	r3, [pc, #124]	; (80007e0 <MX_GPIO_Init+0xd0>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a1e      	ldr	r2, [pc, #120]	; (80007e0 <MX_GPIO_Init+0xd0>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b1c      	ldr	r3, [pc, #112]	; (80007e0 <MX_GPIO_Init+0xd0>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <MX_GPIO_Init+0xd0>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a17      	ldr	r2, [pc, #92]	; (80007e0 <MX_GPIO_Init+0xd0>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <MX_GPIO_Init+0xd0>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	2120      	movs	r1, #32
 800079a:	4812      	ldr	r0, [pc, #72]	; (80007e4 <MX_GPIO_Init+0xd4>)
 800079c:	f000 fcdc 	bl	8001158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007a6:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <MX_GPIO_Init+0xd8>)
 80007a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	4619      	mov	r1, r3
 80007b4:	480d      	ldr	r0, [pc, #52]	; (80007ec <MX_GPIO_Init+0xdc>)
 80007b6:	f000 fb3b 	bl	8000e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007ba:	2320      	movs	r3, #32
 80007bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007be:	2301      	movs	r3, #1
 80007c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2300      	movs	r3, #0
 80007c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	4619      	mov	r1, r3
 80007d0:	4804      	ldr	r0, [pc, #16]	; (80007e4 <MX_GPIO_Init+0xd4>)
 80007d2:	f000 fb2d 	bl	8000e30 <HAL_GPIO_Init>

}
 80007d6:	bf00      	nop
 80007d8:	3728      	adds	r7, #40	; 0x28
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40020000 	.word	0x40020000
 80007e8:	10210000 	.word	0x10210000
 80007ec:	40020800 	.word	0x40020800

080007f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000800:	d101      	bne.n	8000806 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000802:	f000 f9ef 	bl	8000be4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000812:	b672      	cpsid	i
}
 8000814:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000816:	e7fe      	b.n	8000816 <Error_Handler+0x8>

08000818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	4b12      	ldr	r3, [pc, #72]	; (800086c <HAL_MspInit+0x54>)
 8000824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000826:	4a11      	ldr	r2, [pc, #68]	; (800086c <HAL_MspInit+0x54>)
 8000828:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800082c:	6453      	str	r3, [r2, #68]	; 0x44
 800082e:	4b0f      	ldr	r3, [pc, #60]	; (800086c <HAL_MspInit+0x54>)
 8000830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <HAL_MspInit+0x54>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000842:	4a0a      	ldr	r2, [pc, #40]	; (800086c <HAL_MspInit+0x54>)
 8000844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000848:	6413      	str	r3, [r2, #64]	; 0x40
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <HAL_MspInit+0x54>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	210f      	movs	r1, #15
 800085a:	f06f 0001 	mvn.w	r0, #1
 800085e:	f000 fabd 	bl	8000ddc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40023800 	.word	0x40023800

08000870 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08c      	sub	sp, #48	; 0x30
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	f107 031c 	add.w	r3, r7, #28
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a41      	ldr	r2, [pc, #260]	; (8000994 <HAL_UART_MspInit+0x124>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d12c      	bne.n	80008ec <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	61bb      	str	r3, [r7, #24]
 8000896:	4b40      	ldr	r3, [pc, #256]	; (8000998 <HAL_UART_MspInit+0x128>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	4a3f      	ldr	r2, [pc, #252]	; (8000998 <HAL_UART_MspInit+0x128>)
 800089c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a0:	6413      	str	r3, [r2, #64]	; 0x40
 80008a2:	4b3d      	ldr	r3, [pc, #244]	; (8000998 <HAL_UART_MspInit+0x128>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008aa:	61bb      	str	r3, [r7, #24]
 80008ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
 80008b2:	4b39      	ldr	r3, [pc, #228]	; (8000998 <HAL_UART_MspInit+0x128>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a38      	ldr	r2, [pc, #224]	; (8000998 <HAL_UART_MspInit+0x128>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b36      	ldr	r3, [pc, #216]	; (8000998 <HAL_UART_MspInit+0x128>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	617b      	str	r3, [r7, #20]
 80008c8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008ca:	230c      	movs	r3, #12
 80008cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ce:	2302      	movs	r3, #2
 80008d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d6:	2303      	movs	r3, #3
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008da:	2307      	movs	r3, #7
 80008dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4619      	mov	r1, r3
 80008e4:	482d      	ldr	r0, [pc, #180]	; (800099c <HAL_UART_MspInit+0x12c>)
 80008e6:	f000 faa3 	bl	8000e30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80008ea:	e04f      	b.n	800098c <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART3)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a2b      	ldr	r2, [pc, #172]	; (80009a0 <HAL_UART_MspInit+0x130>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d14a      	bne.n	800098c <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
 80008fa:	4b27      	ldr	r3, [pc, #156]	; (8000998 <HAL_UART_MspInit+0x128>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fe:	4a26      	ldr	r2, [pc, #152]	; (8000998 <HAL_UART_MspInit+0x128>)
 8000900:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000904:	6413      	str	r3, [r2, #64]	; 0x40
 8000906:	4b24      	ldr	r3, [pc, #144]	; (8000998 <HAL_UART_MspInit+0x128>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	4b20      	ldr	r3, [pc, #128]	; (8000998 <HAL_UART_MspInit+0x128>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a1f      	ldr	r2, [pc, #124]	; (8000998 <HAL_UART_MspInit+0x128>)
 800091c:	f043 0304 	orr.w	r3, r3, #4
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <HAL_UART_MspInit+0x128>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0304 	and.w	r3, r3, #4
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	60bb      	str	r3, [r7, #8]
 8000932:	4b19      	ldr	r3, [pc, #100]	; (8000998 <HAL_UART_MspInit+0x128>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a18      	ldr	r2, [pc, #96]	; (8000998 <HAL_UART_MspInit+0x128>)
 8000938:	f043 0302 	orr.w	r3, r3, #2
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b16      	ldr	r3, [pc, #88]	; (8000998 <HAL_UART_MspInit+0x128>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0302 	and.w	r3, r3, #2
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800094a:	2320      	movs	r3, #32
 800094c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000956:	2303      	movs	r3, #3
 8000958:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800095a:	2307      	movs	r3, #7
 800095c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	480f      	ldr	r0, [pc, #60]	; (80009a4 <HAL_UART_MspInit+0x134>)
 8000966:	f000 fa63 	bl	8000e30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800096a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800096e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000970:	2302      	movs	r3, #2
 8000972:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000978:	2303      	movs	r3, #3
 800097a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800097c:	2307      	movs	r3, #7
 800097e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000980:	f107 031c 	add.w	r3, r7, #28
 8000984:	4619      	mov	r1, r3
 8000986:	4808      	ldr	r0, [pc, #32]	; (80009a8 <HAL_UART_MspInit+0x138>)
 8000988:	f000 fa52 	bl	8000e30 <HAL_GPIO_Init>
}
 800098c:	bf00      	nop
 800098e:	3730      	adds	r7, #48	; 0x30
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40004400 	.word	0x40004400
 8000998:	40023800 	.word	0x40023800
 800099c:	40020000 	.word	0x40020000
 80009a0:	40004800 	.word	0x40004800
 80009a4:	40020800 	.word	0x40020800
 80009a8:	40020400 	.word	0x40020400

080009ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08c      	sub	sp, #48	; 0x30
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 80009bc:	2200      	movs	r2, #0
 80009be:	6879      	ldr	r1, [r7, #4]
 80009c0:	201c      	movs	r0, #28
 80009c2:	f000 fa0b 	bl	8000ddc <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009c6:	201c      	movs	r0, #28
 80009c8:	f000 fa24 	bl	8000e14 <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80009cc:	2300      	movs	r3, #0
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	4b20      	ldr	r3, [pc, #128]	; (8000a54 <HAL_InitTick+0xa8>)
 80009d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d4:	4a1f      	ldr	r2, [pc, #124]	; (8000a54 <HAL_InitTick+0xa8>)
 80009d6:	f043 0301 	orr.w	r3, r3, #1
 80009da:	6413      	str	r3, [r2, #64]	; 0x40
 80009dc:	4b1d      	ldr	r3, [pc, #116]	; (8000a54 <HAL_InitTick+0xa8>)
 80009de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e0:	f003 0301 	and.w	r3, r3, #1
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009e8:	f107 0210 	add.w	r2, r7, #16
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	4611      	mov	r1, r2
 80009f2:	4618      	mov	r0, r3
 80009f4:	f001 fe9a 	bl	800272c <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80009f8:	f001 fe70 	bl	80026dc <HAL_RCC_GetPCLK1Freq>
 80009fc:	4603      	mov	r3, r0
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a04:	4a14      	ldr	r2, [pc, #80]	; (8000a58 <HAL_InitTick+0xac>)
 8000a06:	fba2 2303 	umull	r2, r3, r2, r3
 8000a0a:	0c9b      	lsrs	r3, r3, #18
 8000a0c:	3b01      	subs	r3, #1
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000a10:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <HAL_InitTick+0xb0>)
 8000a12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a16:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000a18:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <HAL_InitTick+0xb0>)
 8000a1a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a1e:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000a20:	4a0e      	ldr	r2, [pc, #56]	; (8000a5c <HAL_InitTick+0xb0>)
 8000a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a24:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000a26:	4b0d      	ldr	r3, [pc, #52]	; (8000a5c <HAL_InitTick+0xb0>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2c:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <HAL_InitTick+0xb0>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000a32:	480a      	ldr	r0, [pc, #40]	; (8000a5c <HAL_InitTick+0xb0>)
 8000a34:	f002 fde2 	bl	80035fc <HAL_TIM_Base_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d104      	bne.n	8000a48 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8000a3e:	4807      	ldr	r0, [pc, #28]	; (8000a5c <HAL_InitTick+0xb0>)
 8000a40:	f002 fe11 	bl	8003666 <HAL_TIM_Base_Start_IT>
 8000a44:	4603      	mov	r3, r0
 8000a46:	e000      	b.n	8000a4a <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a48:	2301      	movs	r3, #1
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3730      	adds	r7, #48	; 0x30
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40023800 	.word	0x40023800
 8000a58:	431bde83 	.word	0x431bde83
 8000a5c:	2000070c 	.word	0x2000070c

08000a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <NMI_Handler+0x4>

08000a66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a6a:	e7fe      	b.n	8000a6a <HardFault_Handler+0x4>

08000a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <MemManage_Handler+0x4>

08000a72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <BusFault_Handler+0x4>

08000a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <UsageFault_Handler+0x4>

08000a7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a90:	4802      	ldr	r0, [pc, #8]	; (8000a9c <TIM2_IRQHandler+0x10>)
 8000a92:	f002 fe0c 	bl	80036ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	2000070c 	.word	0x2000070c

08000aa0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000aa4:	4802      	ldr	r0, [pc, #8]	; (8000ab0 <OTG_FS_IRQHandler+0x10>)
 8000aa6:	f000 fcc7 	bl	8001438 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000c20 	.word	0x20000c20

08000ab4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000abc:	4a14      	ldr	r2, [pc, #80]	; (8000b10 <_sbrk+0x5c>)
 8000abe:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <_sbrk+0x60>)
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ac8:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <_sbrk+0x64>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d102      	bne.n	8000ad6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ad0:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <_sbrk+0x64>)
 8000ad2:	4a12      	ldr	r2, [pc, #72]	; (8000b1c <_sbrk+0x68>)
 8000ad4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <_sbrk+0x64>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4413      	add	r3, r2
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d207      	bcs.n	8000af4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ae4:	f007 f832 	bl	8007b4c <__errno>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	220c      	movs	r2, #12
 8000aec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aee:	f04f 33ff 	mov.w	r3, #4294967295
 8000af2:	e009      	b.n	8000b08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000af4:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <_sbrk+0x64>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000afa:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <_sbrk+0x64>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4413      	add	r3, r2
 8000b02:	4a05      	ldr	r2, [pc, #20]	; (8000b18 <_sbrk+0x64>)
 8000b04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b06:	68fb      	ldr	r3, [r7, #12]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3718      	adds	r7, #24
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20020000 	.word	0x20020000
 8000b14:	00000400 	.word	0x00000400
 8000b18:	200001f4 	.word	0x200001f4
 8000b1c:	20001038 	.word	0x20001038

08000b20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b24:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <SystemInit+0x28>)
 8000b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b2a:	4a07      	ldr	r2, [pc, #28]	; (8000b48 <SystemInit+0x28>)
 8000b2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <SystemInit+0x28>)
 8000b36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b3a:	609a      	str	r2, [r3, #8]
#endif
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b84 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b50:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b52:	e003      	b.n	8000b5c <LoopCopyDataInit>

08000b54 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b56:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b58:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b5a:	3104      	adds	r1, #4

08000b5c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b5c:	480b      	ldr	r0, [pc, #44]	; (8000b8c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b60:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b62:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b64:	d3f6      	bcc.n	8000b54 <CopyDataInit>
  ldr  r2, =_sbss
 8000b66:	4a0b      	ldr	r2, [pc, #44]	; (8000b94 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b68:	e002      	b.n	8000b70 <LoopFillZerobss>

08000b6a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b6a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b6c:	f842 3b04 	str.w	r3, [r2], #4

08000b70 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b70:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b72:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b74:	d3f9      	bcc.n	8000b6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b76:	f7ff ffd3 	bl	8000b20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b7a:	f006 ffed 	bl	8007b58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b7e:	f7ff fcc3 	bl	8000508 <main>
  bx  lr    
 8000b82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b84:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b88:	08007de8 	.word	0x08007de8
  ldr  r0, =_sdata
 8000b8c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b90:	200001d8 	.word	0x200001d8
  ldr  r2, =_sbss
 8000b94:	200001d8 	.word	0x200001d8
  ldr  r3, = _ebss
 8000b98:	20001038 	.word	0x20001038

08000b9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b9c:	e7fe      	b.n	8000b9c <ADC_IRQHandler>
	...

08000ba0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ba4:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <HAL_Init+0x40>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a0d      	ldr	r2, [pc, #52]	; (8000be0 <HAL_Init+0x40>)
 8000baa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bb0:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <HAL_Init+0x40>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <HAL_Init+0x40>)
 8000bb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bbc:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <HAL_Init+0x40>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a07      	ldr	r2, [pc, #28]	; (8000be0 <HAL_Init+0x40>)
 8000bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc8:	2003      	movs	r0, #3
 8000bca:	f000 f8fc 	bl	8000dc6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f7ff feec 	bl	80009ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd4:	f7ff fe20 	bl	8000818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40023c00 	.word	0x40023c00

08000be4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_IncTick+0x20>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	461a      	mov	r2, r3
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_IncTick+0x24>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <HAL_IncTick+0x24>)
 8000bf6:	6013      	str	r3, [r2, #0]
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	20000008 	.word	0x20000008
 8000c08:	2000074c 	.word	0x2000074c

08000c0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c10:	4b03      	ldr	r3, [pc, #12]	; (8000c20 <HAL_GetTick+0x14>)
 8000c12:	681b      	ldr	r3, [r3, #0]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	2000074c 	.word	0x2000074c

08000c24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c2c:	f7ff ffee 	bl	8000c0c <HAL_GetTick>
 8000c30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c3c:	d005      	beq.n	8000c4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <HAL_Delay+0x44>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	461a      	mov	r2, r3
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	4413      	add	r3, r2
 8000c48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c4a:	bf00      	nop
 8000c4c:	f7ff ffde 	bl	8000c0c <HAL_GetTick>
 8000c50:	4602      	mov	r2, r0
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d8f7      	bhi.n	8000c4c <HAL_Delay+0x28>
  {
  }
}
 8000c5c:	bf00      	nop
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000008 	.word	0x20000008

08000c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c88:	4013      	ands	r3, r2
 8000c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9e:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	60d3      	str	r3, [r2, #12]
}
 8000ca4:	bf00      	nop
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <__NVIC_GetPriorityGrouping+0x18>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	0a1b      	lsrs	r3, r3, #8
 8000cbe:	f003 0307 	and.w	r3, r3, #7
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	db0b      	blt.n	8000cfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	f003 021f 	and.w	r2, r3, #31
 8000ce8:	4907      	ldr	r1, [pc, #28]	; (8000d08 <__NVIC_EnableIRQ+0x38>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	095b      	lsrs	r3, r3, #5
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	e000e100 	.word	0xe000e100

08000d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	6039      	str	r1, [r7, #0]
 8000d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	db0a      	blt.n	8000d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	490c      	ldr	r1, [pc, #48]	; (8000d58 <__NVIC_SetPriority+0x4c>)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	0112      	lsls	r2, r2, #4
 8000d2c:	b2d2      	uxtb	r2, r2
 8000d2e:	440b      	add	r3, r1
 8000d30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d34:	e00a      	b.n	8000d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	4908      	ldr	r1, [pc, #32]	; (8000d5c <__NVIC_SetPriority+0x50>)
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	f003 030f 	and.w	r3, r3, #15
 8000d42:	3b04      	subs	r3, #4
 8000d44:	0112      	lsls	r2, r2, #4
 8000d46:	b2d2      	uxtb	r2, r2
 8000d48:	440b      	add	r3, r1
 8000d4a:	761a      	strb	r2, [r3, #24]
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000e100 	.word	0xe000e100
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b089      	sub	sp, #36	; 0x24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	f1c3 0307 	rsb	r3, r3, #7
 8000d7a:	2b04      	cmp	r3, #4
 8000d7c:	bf28      	it	cs
 8000d7e:	2304      	movcs	r3, #4
 8000d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3304      	adds	r3, #4
 8000d86:	2b06      	cmp	r3, #6
 8000d88:	d902      	bls.n	8000d90 <NVIC_EncodePriority+0x30>
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3b03      	subs	r3, #3
 8000d8e:	e000      	b.n	8000d92 <NVIC_EncodePriority+0x32>
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d94:	f04f 32ff 	mov.w	r2, #4294967295
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43da      	mvns	r2, r3
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	401a      	ands	r2, r3
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	fa01 f303 	lsl.w	r3, r1, r3
 8000db2:	43d9      	mvns	r1, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db8:	4313      	orrs	r3, r2
         );
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3724      	adds	r7, #36	; 0x24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff ff4c 	bl	8000c6c <__NVIC_SetPriorityGrouping>
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
 8000de8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dee:	f7ff ff61 	bl	8000cb4 <__NVIC_GetPriorityGrouping>
 8000df2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	68b9      	ldr	r1, [r7, #8]
 8000df8:	6978      	ldr	r0, [r7, #20]
 8000dfa:	f7ff ffb1 	bl	8000d60 <NVIC_EncodePriority>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e04:	4611      	mov	r1, r2
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff ff80 	bl	8000d0c <__NVIC_SetPriority>
}
 8000e0c:	bf00      	nop
 8000e0e:	3718      	adds	r7, #24
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff ff54 	bl	8000cd0 <__NVIC_EnableIRQ>
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b089      	sub	sp, #36	; 0x24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
 8000e4a:	e165      	b.n	8001118 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	697a      	ldr	r2, [r7, #20]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	f040 8154 	bne.w	8001112 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d00b      	beq.n	8000e8a <HAL_GPIO_Init+0x5a>
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d007      	beq.n	8000e8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e7e:	2b11      	cmp	r3, #17
 8000e80:	d003      	beq.n	8000e8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	2b12      	cmp	r3, #18
 8000e88:	d130      	bne.n	8000eec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	2203      	movs	r2, #3
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	68da      	ldr	r2, [r3, #12]
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	091b      	lsrs	r3, r3, #4
 8000ed6:	f003 0201 	and.w	r2, r3, #1
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	689a      	ldr	r2, [r3, #8]
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d003      	beq.n	8000f2c <HAL_GPIO_Init+0xfc>
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	2b12      	cmp	r3, #18
 8000f2a:	d123      	bne.n	8000f74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	08da      	lsrs	r2, r3, #3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3208      	adds	r2, #8
 8000f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	f003 0307 	and.w	r3, r3, #7
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	220f      	movs	r2, #15
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	691a      	ldr	r2, [r3, #16]
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	08da      	lsrs	r2, r3, #3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3208      	adds	r2, #8
 8000f6e:	69b9      	ldr	r1, [r7, #24]
 8000f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	2203      	movs	r2, #3
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 0203 	and.w	r2, r3, #3
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	f000 80ae 	beq.w	8001112 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4b5d      	ldr	r3, [pc, #372]	; (8001130 <HAL_GPIO_Init+0x300>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	4a5c      	ldr	r2, [pc, #368]	; (8001130 <HAL_GPIO_Init+0x300>)
 8000fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc6:	4b5a      	ldr	r3, [pc, #360]	; (8001130 <HAL_GPIO_Init+0x300>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fd2:	4a58      	ldr	r2, [pc, #352]	; (8001134 <HAL_GPIO_Init+0x304>)
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	089b      	lsrs	r3, r3, #2
 8000fd8:	3302      	adds	r3, #2
 8000fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f003 0303 	and.w	r3, r3, #3
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	220f      	movs	r2, #15
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a4f      	ldr	r2, [pc, #316]	; (8001138 <HAL_GPIO_Init+0x308>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d025      	beq.n	800104a <HAL_GPIO_Init+0x21a>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a4e      	ldr	r2, [pc, #312]	; (800113c <HAL_GPIO_Init+0x30c>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d01f      	beq.n	8001046 <HAL_GPIO_Init+0x216>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a4d      	ldr	r2, [pc, #308]	; (8001140 <HAL_GPIO_Init+0x310>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d019      	beq.n	8001042 <HAL_GPIO_Init+0x212>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a4c      	ldr	r2, [pc, #304]	; (8001144 <HAL_GPIO_Init+0x314>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d013      	beq.n	800103e <HAL_GPIO_Init+0x20e>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a4b      	ldr	r2, [pc, #300]	; (8001148 <HAL_GPIO_Init+0x318>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d00d      	beq.n	800103a <HAL_GPIO_Init+0x20a>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4a      	ldr	r2, [pc, #296]	; (800114c <HAL_GPIO_Init+0x31c>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d007      	beq.n	8001036 <HAL_GPIO_Init+0x206>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a49      	ldr	r2, [pc, #292]	; (8001150 <HAL_GPIO_Init+0x320>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d101      	bne.n	8001032 <HAL_GPIO_Init+0x202>
 800102e:	2306      	movs	r3, #6
 8001030:	e00c      	b.n	800104c <HAL_GPIO_Init+0x21c>
 8001032:	2307      	movs	r3, #7
 8001034:	e00a      	b.n	800104c <HAL_GPIO_Init+0x21c>
 8001036:	2305      	movs	r3, #5
 8001038:	e008      	b.n	800104c <HAL_GPIO_Init+0x21c>
 800103a:	2304      	movs	r3, #4
 800103c:	e006      	b.n	800104c <HAL_GPIO_Init+0x21c>
 800103e:	2303      	movs	r3, #3
 8001040:	e004      	b.n	800104c <HAL_GPIO_Init+0x21c>
 8001042:	2302      	movs	r3, #2
 8001044:	e002      	b.n	800104c <HAL_GPIO_Init+0x21c>
 8001046:	2301      	movs	r3, #1
 8001048:	e000      	b.n	800104c <HAL_GPIO_Init+0x21c>
 800104a:	2300      	movs	r3, #0
 800104c:	69fa      	ldr	r2, [r7, #28]
 800104e:	f002 0203 	and.w	r2, r2, #3
 8001052:	0092      	lsls	r2, r2, #2
 8001054:	4093      	lsls	r3, r2
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800105c:	4935      	ldr	r1, [pc, #212]	; (8001134 <HAL_GPIO_Init+0x304>)
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	089b      	lsrs	r3, r3, #2
 8001062:	3302      	adds	r3, #2
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800106a:	4b3a      	ldr	r3, [pc, #232]	; (8001154 <HAL_GPIO_Init+0x324>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	43db      	mvns	r3, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4013      	ands	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800108e:	4a31      	ldr	r2, [pc, #196]	; (8001154 <HAL_GPIO_Init+0x324>)
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001094:	4b2f      	ldr	r3, [pc, #188]	; (8001154 <HAL_GPIO_Init+0x324>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d003      	beq.n	80010b8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010b8:	4a26      	ldr	r2, [pc, #152]	; (8001154 <HAL_GPIO_Init+0x324>)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010be:	4b25      	ldr	r3, [pc, #148]	; (8001154 <HAL_GPIO_Init+0x324>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	43db      	mvns	r3, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4013      	ands	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010e2:	4a1c      	ldr	r2, [pc, #112]	; (8001154 <HAL_GPIO_Init+0x324>)
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010e8:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <HAL_GPIO_Init+0x324>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d003      	beq.n	800110c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800110c:	4a11      	ldr	r2, [pc, #68]	; (8001154 <HAL_GPIO_Init+0x324>)
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3301      	adds	r3, #1
 8001116:	61fb      	str	r3, [r7, #28]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	2b0f      	cmp	r3, #15
 800111c:	f67f ae96 	bls.w	8000e4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001120:	bf00      	nop
 8001122:	bf00      	nop
 8001124:	3724      	adds	r7, #36	; 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	40023800 	.word	0x40023800
 8001134:	40013800 	.word	0x40013800
 8001138:	40020000 	.word	0x40020000
 800113c:	40020400 	.word	0x40020400
 8001140:	40020800 	.word	0x40020800
 8001144:	40020c00 	.word	0x40020c00
 8001148:	40021000 	.word	0x40021000
 800114c:	40021400 	.word	0x40021400
 8001150:	40021800 	.word	0x40021800
 8001154:	40013c00 	.word	0x40013c00

08001158 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	807b      	strh	r3, [r7, #2]
 8001164:	4613      	mov	r3, r2
 8001166:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001168:	787b      	ldrb	r3, [r7, #1]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800116e:	887a      	ldrh	r2, [r7, #2]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001174:	e003      	b.n	800117e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001176:	887b      	ldrh	r3, [r7, #2]
 8001178:	041a      	lsls	r2, r3, #16
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	619a      	str	r2, [r3, #24]
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800118a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800118c:	b08f      	sub	sp, #60	; 0x3c
 800118e:	af0a      	add	r7, sp, #40	; 0x28
 8001190:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d101      	bne.n	800119c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e116      	b.n	80013ca <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d106      	bne.n	80011bc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f006 f990 	bl	80074dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2203      	movs	r2, #3
 80011c0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d102      	bne.n	80011d6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f003 f94b 	bl	8004476 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	603b      	str	r3, [r7, #0]
 80011e6:	687e      	ldr	r6, [r7, #4]
 80011e8:	466d      	mov	r5, sp
 80011ea:	f106 0410 	add.w	r4, r6, #16
 80011ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80011fe:	1d33      	adds	r3, r6, #4
 8001200:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001202:	6838      	ldr	r0, [r7, #0]
 8001204:	f003 f822 	bl	800424c <USB_CoreInit>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d005      	beq.n	800121a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2202      	movs	r2, #2
 8001212:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e0d7      	b.n	80013ca <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2100      	movs	r1, #0
 8001220:	4618      	mov	r0, r3
 8001222:	f003 f939 	bl	8004498 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001226:	2300      	movs	r3, #0
 8001228:	73fb      	strb	r3, [r7, #15]
 800122a:	e04a      	b.n	80012c2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800122c:	7bfa      	ldrb	r2, [r7, #15]
 800122e:	6879      	ldr	r1, [r7, #4]
 8001230:	4613      	mov	r3, r2
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	1a9b      	subs	r3, r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	440b      	add	r3, r1
 800123a:	333d      	adds	r3, #61	; 0x3d
 800123c:	2201      	movs	r2, #1
 800123e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001240:	7bfa      	ldrb	r2, [r7, #15]
 8001242:	6879      	ldr	r1, [r7, #4]
 8001244:	4613      	mov	r3, r2
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	1a9b      	subs	r3, r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	440b      	add	r3, r1
 800124e:	333c      	adds	r3, #60	; 0x3c
 8001250:	7bfa      	ldrb	r2, [r7, #15]
 8001252:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001254:	7bfa      	ldrb	r2, [r7, #15]
 8001256:	7bfb      	ldrb	r3, [r7, #15]
 8001258:	b298      	uxth	r0, r3
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	4613      	mov	r3, r2
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	1a9b      	subs	r3, r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	440b      	add	r3, r1
 8001266:	3342      	adds	r3, #66	; 0x42
 8001268:	4602      	mov	r2, r0
 800126a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800126c:	7bfa      	ldrb	r2, [r7, #15]
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	4613      	mov	r3, r2
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	1a9b      	subs	r3, r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	440b      	add	r3, r1
 800127a:	333f      	adds	r3, #63	; 0x3f
 800127c:	2200      	movs	r2, #0
 800127e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001280:	7bfa      	ldrb	r2, [r7, #15]
 8001282:	6879      	ldr	r1, [r7, #4]
 8001284:	4613      	mov	r3, r2
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	1a9b      	subs	r3, r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	440b      	add	r3, r1
 800128e:	3344      	adds	r3, #68	; 0x44
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001294:	7bfa      	ldrb	r2, [r7, #15]
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	4613      	mov	r3, r2
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	1a9b      	subs	r3, r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	440b      	add	r3, r1
 80012a2:	3348      	adds	r3, #72	; 0x48
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012a8:	7bfa      	ldrb	r2, [r7, #15]
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	4613      	mov	r3, r2
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	1a9b      	subs	r3, r3, r2
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	440b      	add	r3, r1
 80012b6:	3350      	adds	r3, #80	; 0x50
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	3301      	adds	r3, #1
 80012c0:	73fb      	strb	r3, [r7, #15]
 80012c2:	7bfa      	ldrb	r2, [r7, #15]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d3af      	bcc.n	800122c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012cc:	2300      	movs	r3, #0
 80012ce:	73fb      	strb	r3, [r7, #15]
 80012d0:	e044      	b.n	800135c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012d2:	7bfa      	ldrb	r2, [r7, #15]
 80012d4:	6879      	ldr	r1, [r7, #4]
 80012d6:	4613      	mov	r3, r2
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	1a9b      	subs	r3, r3, r2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	440b      	add	r3, r1
 80012e0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80012e4:	2200      	movs	r2, #0
 80012e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80012e8:	7bfa      	ldrb	r2, [r7, #15]
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	4613      	mov	r3, r2
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	1a9b      	subs	r3, r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	440b      	add	r3, r1
 80012f6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80012fa:	7bfa      	ldrb	r2, [r7, #15]
 80012fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012fe:	7bfa      	ldrb	r2, [r7, #15]
 8001300:	6879      	ldr	r1, [r7, #4]
 8001302:	4613      	mov	r3, r2
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	1a9b      	subs	r3, r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	440b      	add	r3, r1
 800130c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001310:	2200      	movs	r2, #0
 8001312:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001314:	7bfa      	ldrb	r2, [r7, #15]
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	4613      	mov	r3, r2
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	1a9b      	subs	r3, r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	440b      	add	r3, r1
 8001322:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800132a:	7bfa      	ldrb	r2, [r7, #15]
 800132c:	6879      	ldr	r1, [r7, #4]
 800132e:	4613      	mov	r3, r2
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	1a9b      	subs	r3, r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	440b      	add	r3, r1
 8001338:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001340:	7bfa      	ldrb	r2, [r7, #15]
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	4613      	mov	r3, r2
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	1a9b      	subs	r3, r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	440b      	add	r3, r1
 800134e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001356:	7bfb      	ldrb	r3, [r7, #15]
 8001358:	3301      	adds	r3, #1
 800135a:	73fb      	strb	r3, [r7, #15]
 800135c:	7bfa      	ldrb	r2, [r7, #15]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	429a      	cmp	r2, r3
 8001364:	d3b5      	bcc.n	80012d2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	687e      	ldr	r6, [r7, #4]
 800136e:	466d      	mov	r5, sp
 8001370:	f106 0410 	add.w	r4, r6, #16
 8001374:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001376:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001378:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800137a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800137c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001380:	e885 0003 	stmia.w	r5, {r0, r1}
 8001384:	1d33      	adds	r3, r6, #4
 8001386:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001388:	6838      	ldr	r0, [r7, #0]
 800138a:	f003 f8af 	bl	80044ec <USB_DevInit>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d005      	beq.n	80013a0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2202      	movs	r2, #2
 8001398:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e014      	b.n	80013ca <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2201      	movs	r2, #1
 80013ac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d102      	bne.n	80013be <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f001 f879 	bl	80024b0 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f004 f8ea 	bl	800559c <USB_DevDisconnect>

  return HAL_OK;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013d2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b084      	sub	sp, #16
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d101      	bne.n	80013ee <HAL_PCD_Start+0x1c>
 80013ea:	2302      	movs	r3, #2
 80013ec:	e020      	b.n	8001430 <HAL_PCD_Start+0x5e>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2201      	movs	r2, #1
 80013f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d109      	bne.n	8001412 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001402:	2b01      	cmp	r3, #1
 8001404:	d005      	beq.n	8001412 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800140a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f003 f81c 	bl	8004454 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f004 f89a 	bl	800555a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001438:	b590      	push	{r4, r7, lr}
 800143a:	b08d      	sub	sp, #52	; 0x34
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001446:	6a3b      	ldr	r3, [r7, #32]
 8001448:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	f004 f958 	bl	8005704 <USB_GetMode>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	f040 83ca 	bne.w	8001bf0 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4618      	mov	r0, r3
 8001462:	f004 f8bc 	bl	80055de <USB_ReadInterrupts>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	f000 83c0 	beq.w	8001bee <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f004 f8b3 	bl	80055de <USB_ReadInterrupts>
 8001478:	4603      	mov	r3, r0
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b02      	cmp	r3, #2
 8001480:	d107      	bne.n	8001492 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	695a      	ldr	r2, [r3, #20]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f002 0202 	and.w	r2, r2, #2
 8001490:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f004 f8a1 	bl	80055de <USB_ReadInterrupts>
 800149c:	4603      	mov	r3, r0
 800149e:	f003 0310 	and.w	r3, r3, #16
 80014a2:	2b10      	cmp	r3, #16
 80014a4:	d161      	bne.n	800156a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	699a      	ldr	r2, [r3, #24]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f022 0210 	bic.w	r2, r2, #16
 80014b4:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80014b6:	6a3b      	ldr	r3, [r7, #32]
 80014b8:	6a1b      	ldr	r3, [r3, #32]
 80014ba:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	f003 020f 	and.w	r2, r3, #15
 80014c2:	4613      	mov	r3, r2
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	1a9b      	subs	r3, r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	3304      	adds	r3, #4
 80014d4:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	0c5b      	lsrs	r3, r3, #17
 80014da:	f003 030f 	and.w	r3, r3, #15
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d124      	bne.n	800152c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80014e8:	4013      	ands	r3, r2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d035      	beq.n	800155a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	091b      	lsrs	r3, r3, #4
 80014f6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	461a      	mov	r2, r3
 8001500:	6a38      	ldr	r0, [r7, #32]
 8001502:	f003 ff07 	bl	8005314 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	68da      	ldr	r2, [r3, #12]
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	091b      	lsrs	r3, r3, #4
 800150e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001512:	441a      	add	r2, r3
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	699a      	ldr	r2, [r3, #24]
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	091b      	lsrs	r3, r3, #4
 8001520:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001524:	441a      	add	r2, r3
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	619a      	str	r2, [r3, #24]
 800152a:	e016      	b.n	800155a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	0c5b      	lsrs	r3, r3, #17
 8001530:	f003 030f 	and.w	r3, r3, #15
 8001534:	2b06      	cmp	r3, #6
 8001536:	d110      	bne.n	800155a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800153e:	2208      	movs	r2, #8
 8001540:	4619      	mov	r1, r3
 8001542:	6a38      	ldr	r0, [r7, #32]
 8001544:	f003 fee6 	bl	8005314 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	699a      	ldr	r2, [r3, #24]
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	091b      	lsrs	r3, r3, #4
 8001550:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001554:	441a      	add	r2, r3
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	699a      	ldr	r2, [r3, #24]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f042 0210 	orr.w	r2, r2, #16
 8001568:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f004 f835 	bl	80055de <USB_ReadInterrupts>
 8001574:	4603      	mov	r3, r0
 8001576:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800157a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800157e:	d16e      	bne.n	800165e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001580:	2300      	movs	r3, #0
 8001582:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f004 f83b 	bl	8005604 <USB_ReadDevAllOutEpInterrupt>
 800158e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001590:	e062      	b.n	8001658 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	2b00      	cmp	r3, #0
 800159a:	d057      	beq.n	800164c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015a2:	b2d2      	uxtb	r2, r2
 80015a4:	4611      	mov	r1, r2
 80015a6:	4618      	mov	r0, r3
 80015a8:	f004 f860 	bl	800566c <USB_ReadDevOutEPInterrupt>
 80015ac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	f003 0301 	and.w	r3, r3, #1
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d00c      	beq.n	80015d2 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80015b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ba:	015a      	lsls	r2, r3, #5
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	4413      	add	r3, r2
 80015c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015c4:	461a      	mov	r2, r3
 80015c6:	2301      	movs	r3, #1
 80015c8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80015ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f000 fdc5 	bl	800215c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	f003 0308 	and.w	r3, r3, #8
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d00c      	beq.n	80015f6 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80015dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015de:	015a      	lsls	r2, r3, #5
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	4413      	add	r3, r2
 80015e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015e8:	461a      	mov	r2, r3
 80015ea:	2308      	movs	r3, #8
 80015ec:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80015ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f000 febf 	bl	8002374 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	f003 0310 	and.w	r3, r3, #16
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d008      	beq.n	8001612 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	015a      	lsls	r2, r3, #5
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	4413      	add	r3, r2
 8001608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800160c:	461a      	mov	r2, r3
 800160e:	2310      	movs	r3, #16
 8001610:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	f003 0320 	and.w	r3, r3, #32
 8001618:	2b00      	cmp	r3, #0
 800161a:	d008      	beq.n	800162e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161e:	015a      	lsls	r2, r3, #5
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	4413      	add	r3, r2
 8001624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001628:	461a      	mov	r2, r3
 800162a:	2320      	movs	r3, #32
 800162c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d009      	beq.n	800164c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163a:	015a      	lsls	r2, r3, #5
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	4413      	add	r3, r2
 8001640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001644:	461a      	mov	r2, r3
 8001646:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800164a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800164c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164e:	3301      	adds	r3, #1
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001654:	085b      	lsrs	r3, r3, #1
 8001656:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800165a:	2b00      	cmp	r3, #0
 800165c:	d199      	bne.n	8001592 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f003 ffbb 	bl	80055de <USB_ReadInterrupts>
 8001668:	4603      	mov	r3, r0
 800166a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800166e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001672:	f040 80c0 	bne.w	80017f6 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f003 ffdc 	bl	8005638 <USB_ReadDevAllInEpInterrupt>
 8001680:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001682:	2300      	movs	r3, #0
 8001684:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001686:	e0b2      	b.n	80017ee <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 80a7 	beq.w	80017e2 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	4611      	mov	r1, r2
 800169e:	4618      	mov	r0, r3
 80016a0:	f004 f802 	bl	80056a8 <USB_ReadDevInEPInterrupt>
 80016a4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d057      	beq.n	8001760 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	2201      	movs	r2, #1
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	43db      	mvns	r3, r3
 80016ca:	69f9      	ldr	r1, [r7, #28]
 80016cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80016d0:	4013      	ands	r3, r2
 80016d2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80016d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d6:	015a      	lsls	r2, r3, #5
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	4413      	add	r3, r2
 80016dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016e0:	461a      	mov	r2, r3
 80016e2:	2301      	movs	r3, #1
 80016e4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d132      	bne.n	8001754 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016f2:	4613      	mov	r3, r2
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	1a9b      	subs	r3, r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	440b      	add	r3, r1
 80016fc:	3348      	adds	r3, #72	; 0x48
 80016fe:	6819      	ldr	r1, [r3, #0]
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001704:	4613      	mov	r3, r2
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	1a9b      	subs	r3, r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4403      	add	r3, r0
 800170e:	3344      	adds	r3, #68	; 0x44
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4419      	add	r1, r3
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001718:	4613      	mov	r3, r2
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	1a9b      	subs	r3, r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4403      	add	r3, r0
 8001722:	3348      	adds	r3, #72	; 0x48
 8001724:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	2b00      	cmp	r3, #0
 800172a:	d113      	bne.n	8001754 <HAL_PCD_IRQHandler+0x31c>
 800172c:	6879      	ldr	r1, [r7, #4]
 800172e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001730:	4613      	mov	r3, r2
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	1a9b      	subs	r3, r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	440b      	add	r3, r1
 800173a:	3350      	adds	r3, #80	; 0x50
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d108      	bne.n	8001754 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6818      	ldr	r0, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800174c:	461a      	mov	r2, r3
 800174e:	2101      	movs	r1, #1
 8001750:	f004 f80a 	bl	8005768 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001756:	b2db      	uxtb	r3, r3
 8001758:	4619      	mov	r1, r3
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f005 ff3f 	bl	80075de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	f003 0308 	and.w	r3, r3, #8
 8001766:	2b00      	cmp	r3, #0
 8001768:	d008      	beq.n	800177c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	015a      	lsls	r2, r3, #5
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	4413      	add	r3, r2
 8001772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001776:	461a      	mov	r2, r3
 8001778:	2308      	movs	r3, #8
 800177a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	f003 0310 	and.w	r3, r3, #16
 8001782:	2b00      	cmp	r3, #0
 8001784:	d008      	beq.n	8001798 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001788:	015a      	lsls	r2, r3, #5
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	4413      	add	r3, r2
 800178e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001792:	461a      	mov	r2, r3
 8001794:	2310      	movs	r3, #16
 8001796:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d008      	beq.n	80017b4 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80017a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a4:	015a      	lsls	r2, r3, #5
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	4413      	add	r3, r2
 80017aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017ae:	461a      	mov	r2, r3
 80017b0:	2340      	movs	r3, #64	; 0x40
 80017b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d008      	beq.n	80017d0 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	015a      	lsls	r2, r3, #5
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	4413      	add	r3, r2
 80017c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017ca:	461a      	mov	r2, r3
 80017cc:	2302      	movs	r3, #2
 80017ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80017da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f000 fc30 	bl	8002042 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80017e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e4:	3301      	adds	r3, #1
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80017e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ea:	085b      	lsrs	r3, r3, #1
 80017ec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80017ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	f47f af49 	bne.w	8001688 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f003 feef 	bl	80055de <USB_ReadInterrupts>
 8001800:	4603      	mov	r3, r0
 8001802:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001806:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800180a:	d122      	bne.n	8001852 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	69fa      	ldr	r2, [r7, #28]
 8001816:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800181a:	f023 0301 	bic.w	r3, r3, #1
 800181e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001826:	2b01      	cmp	r3, #1
 8001828:	d108      	bne.n	800183c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001832:	2100      	movs	r1, #0
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f006 f90f 	bl	8007a58 <HAL_PCDEx_LPM_Callback>
 800183a:	e002      	b.n	8001842 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f005 ff45 	bl	80076cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	695a      	ldr	r2, [r3, #20]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001850:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f003 fec1 	bl	80055de <USB_ReadInterrupts>
 800185c:	4603      	mov	r3, r0
 800185e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001862:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001866:	d112      	bne.n	800188e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	2b01      	cmp	r3, #1
 8001876:	d102      	bne.n	800187e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f005 ff01 	bl	8007680 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	695a      	ldr	r2, [r3, #20]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800188c:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f003 fea3 	bl	80055de <USB_ReadInterrupts>
 8001898:	4603      	mov	r3, r0
 800189a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800189e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80018a2:	d121      	bne.n	80018e8 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	695a      	ldr	r2, [r3, #20]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80018b2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d111      	bne.n	80018e2 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018cc:	089b      	lsrs	r3, r3, #2
 80018ce:	f003 020f 	and.w	r2, r3, #15
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80018d8:	2101      	movs	r1, #1
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f006 f8bc 	bl	8007a58 <HAL_PCDEx_LPM_Callback>
 80018e0:	e002      	b.n	80018e8 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f005 fecc 	bl	8007680 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f003 fe76 	bl	80055de <USB_ReadInterrupts>
 80018f2:	4603      	mov	r3, r0
 80018f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018fc:	f040 80c7 	bne.w	8001a8e <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	69fa      	ldr	r2, [r7, #28]
 800190a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800190e:	f023 0301 	bic.w	r3, r3, #1
 8001912:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2110      	movs	r1, #16
 800191a:	4618      	mov	r0, r3
 800191c:	f002 ff44 	bl	80047a8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001920:	2300      	movs	r3, #0
 8001922:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001924:	e056      	b.n	80019d4 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001928:	015a      	lsls	r2, r3, #5
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	4413      	add	r3, r2
 800192e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001932:	461a      	mov	r2, r3
 8001934:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001938:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800193a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800193c:	015a      	lsls	r2, r3, #5
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	4413      	add	r3, r2
 8001942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800194a:	0151      	lsls	r1, r2, #5
 800194c:	69fa      	ldr	r2, [r7, #28]
 800194e:	440a      	add	r2, r1
 8001950:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001954:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001958:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800195a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800195c:	015a      	lsls	r2, r3, #5
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	4413      	add	r3, r2
 8001962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800196a:	0151      	lsls	r1, r2, #5
 800196c:	69fa      	ldr	r2, [r7, #28]
 800196e:	440a      	add	r2, r1
 8001970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001974:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001978:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800197a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800197c:	015a      	lsls	r2, r3, #5
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	4413      	add	r3, r2
 8001982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001986:	461a      	mov	r2, r3
 8001988:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800198c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800198e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001990:	015a      	lsls	r2, r3, #5
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	4413      	add	r3, r2
 8001996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800199e:	0151      	lsls	r1, r2, #5
 80019a0:	69fa      	ldr	r2, [r7, #28]
 80019a2:	440a      	add	r2, r1
 80019a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80019a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80019ac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80019ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b0:	015a      	lsls	r2, r3, #5
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	4413      	add	r3, r2
 80019b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019be:	0151      	lsls	r1, r2, #5
 80019c0:	69fa      	ldr	r2, [r7, #28]
 80019c2:	440a      	add	r2, r1
 80019c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80019c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80019cc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d0:	3301      	adds	r3, #1
 80019d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019da:	429a      	cmp	r2, r3
 80019dc:	d3a3      	bcc.n	8001926 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	69fa      	ldr	r2, [r7, #28]
 80019e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019ec:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80019f0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d016      	beq.n	8001a28 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a04:	69fa      	ldr	r2, [r7, #28]
 8001a06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a0a:	f043 030b 	orr.w	r3, r3, #11
 8001a0e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	69fa      	ldr	r2, [r7, #28]
 8001a1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a20:	f043 030b 	orr.w	r3, r3, #11
 8001a24:	6453      	str	r3, [r2, #68]	; 0x44
 8001a26:	e015      	b.n	8001a54 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	69fa      	ldr	r2, [r7, #28]
 8001a32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a36:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a3a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001a3e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	69fa      	ldr	r2, [r7, #28]
 8001a4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a4e:	f043 030b 	orr.w	r3, r3, #11
 8001a52:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	69fa      	ldr	r2, [r7, #28]
 8001a5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a62:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001a66:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6818      	ldr	r0, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a78:	461a      	mov	r2, r3
 8001a7a:	f003 fe75 	bl	8005768 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	695a      	ldr	r2, [r3, #20]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001a8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f003 fda3 	bl	80055de <USB_ReadInterrupts>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001aa2:	d124      	bne.n	8001aee <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f003 fe39 	bl	8005720 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f002 fed9 	bl	800486a <USB_GetDevSpeed>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	461a      	mov	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681c      	ldr	r4, [r3, #0]
 8001ac4:	f000 fdfe 	bl	80026c4 <HAL_RCC_GetHCLKFreq>
 8001ac8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4620      	mov	r0, r4
 8001ad4:	f002 fc1c 	bl	8004310 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f005 fda8 	bl	800762e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	695a      	ldr	r2, [r3, #20]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001aec:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f003 fd73 	bl	80055de <USB_ReadInterrupts>
 8001af8:	4603      	mov	r3, r0
 8001afa:	f003 0308 	and.w	r3, r3, #8
 8001afe:	2b08      	cmp	r3, #8
 8001b00:	d10a      	bne.n	8001b18 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f005 fd85 	bl	8007612 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	695a      	ldr	r2, [r3, #20]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f002 0208 	and.w	r2, r2, #8
 8001b16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f003 fd5e 	bl	80055de <USB_ReadInterrupts>
 8001b22:	4603      	mov	r3, r0
 8001b24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b2c:	d10f      	bne.n	8001b4e <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	4619      	mov	r1, r3
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f005 fde7 	bl	800770c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	695a      	ldr	r2, [r3, #20]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001b4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f003 fd43 	bl	80055de <USB_ReadInterrupts>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b62:	d10f      	bne.n	8001b84 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f005 fdba 	bl	80076e8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	695a      	ldr	r2, [r3, #20]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001b82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f003 fd28 	bl	80055de <USB_ReadInterrupts>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b98:	d10a      	bne.n	8001bb0 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f005 fdc8 	bl	8007730 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	695a      	ldr	r2, [r3, #20]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001bae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f003 fd12 	bl	80055de <USB_ReadInterrupts>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b04      	cmp	r3, #4
 8001bc2:	d115      	bne.n	8001bf0 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	f003 0304 	and.w	r3, r3, #4
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d002      	beq.n	8001bdc <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f005 fdb8 	bl	800774c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6859      	ldr	r1, [r3, #4]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	430a      	orrs	r2, r1
 8001bea:	605a      	str	r2, [r3, #4]
 8001bec:	e000      	b.n	8001bf0 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8001bee:	bf00      	nop
    }
  }
}
 8001bf0:	3734      	adds	r7, #52	; 0x34
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd90      	pop	{r4, r7, pc}

08001bf6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	460b      	mov	r3, r1
 8001c00:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d101      	bne.n	8001c10 <HAL_PCD_SetAddress+0x1a>
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	e013      	b.n	8001c38 <HAL_PCD_SetAddress+0x42>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	78fa      	ldrb	r2, [r7, #3]
 8001c1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	78fa      	ldrb	r2, [r7, #3]
 8001c26:	4611      	mov	r1, r2
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f003 fc70 	bl	800550e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	4608      	mov	r0, r1
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4603      	mov	r3, r0
 8001c50:	70fb      	strb	r3, [r7, #3]
 8001c52:	460b      	mov	r3, r1
 8001c54:	803b      	strh	r3, [r7, #0]
 8001c56:	4613      	mov	r3, r2
 8001c58:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	da0f      	bge.n	8001c86 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c66:	78fb      	ldrb	r3, [r7, #3]
 8001c68:	f003 020f 	and.w	r2, r3, #15
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	1a9b      	subs	r3, r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	3338      	adds	r3, #56	; 0x38
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	4413      	add	r3, r2
 8001c7a:	3304      	adds	r3, #4
 8001c7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2201      	movs	r2, #1
 8001c82:	705a      	strb	r2, [r3, #1]
 8001c84:	e00f      	b.n	8001ca6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c86:	78fb      	ldrb	r3, [r7, #3]
 8001c88:	f003 020f 	and.w	r2, r3, #15
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	1a9b      	subs	r3, r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ca6:	78fb      	ldrb	r3, [r7, #3]
 8001ca8:	f003 030f 	and.w	r3, r3, #15
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001cb2:	883a      	ldrh	r2, [r7, #0]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	78ba      	ldrb	r2, [r7, #2]
 8001cbc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	785b      	ldrb	r3, [r3, #1]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d004      	beq.n	8001cd0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001cd0:	78bb      	ldrb	r3, [r7, #2]
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d102      	bne.n	8001cdc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d101      	bne.n	8001cea <HAL_PCD_EP_Open+0xaa>
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e00e      	b.n	8001d08 <HAL_PCD_EP_Open+0xc8>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68f9      	ldr	r1, [r7, #12]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f002 fddb 	bl	80048b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001d06:	7afb      	ldrb	r3, [r7, #11]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	da0f      	bge.n	8001d44 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d24:	78fb      	ldrb	r3, [r7, #3]
 8001d26:	f003 020f 	and.w	r2, r3, #15
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	1a9b      	subs	r3, r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	3338      	adds	r3, #56	; 0x38
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	4413      	add	r3, r2
 8001d38:	3304      	adds	r3, #4
 8001d3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	705a      	strb	r2, [r3, #1]
 8001d42:	e00f      	b.n	8001d64 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d44:	78fb      	ldrb	r3, [r7, #3]
 8001d46:	f003 020f 	and.w	r2, r3, #15
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	1a9b      	subs	r3, r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	4413      	add	r3, r2
 8001d5a:	3304      	adds	r3, #4
 8001d5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001d64:	78fb      	ldrb	r3, [r7, #3]
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d101      	bne.n	8001d7e <HAL_PCD_EP_Close+0x6e>
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	e00e      	b.n	8001d9c <HAL_PCD_EP_Close+0x8c>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2201      	movs	r2, #1
 8001d82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68f9      	ldr	r1, [r7, #12]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f002 fe19 	bl	80049c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	607a      	str	r2, [r7, #4]
 8001dae:	603b      	str	r3, [r7, #0]
 8001db0:	460b      	mov	r3, r1
 8001db2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001db4:	7afb      	ldrb	r3, [r7, #11]
 8001db6:	f003 020f 	and.w	r2, r3, #15
 8001dba:	4613      	mov	r3, r2
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	1a9b      	subs	r3, r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	4413      	add	r3, r2
 8001dca:	3304      	adds	r3, #4
 8001dcc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	2200      	movs	r2, #0
 8001de4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001de6:	7afb      	ldrb	r3, [r7, #11]
 8001de8:	f003 030f 	and.w	r3, r3, #15
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d102      	bne.n	8001e00 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e00:	7afb      	ldrb	r3, [r7, #11]
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d109      	bne.n	8001e1e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6818      	ldr	r0, [r3, #0]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	461a      	mov	r2, r3
 8001e16:	6979      	ldr	r1, [r7, #20]
 8001e18:	f003 f8f4 	bl	8005004 <USB_EP0StartXfer>
 8001e1c:	e008      	b.n	8001e30 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6818      	ldr	r0, [r3, #0]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	461a      	mov	r2, r3
 8001e2a:	6979      	ldr	r1, [r7, #20]
 8001e2c:	f002 fea6 	bl	8004b7c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b086      	sub	sp, #24
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	60f8      	str	r0, [r7, #12]
 8001e42:	607a      	str	r2, [r7, #4]
 8001e44:	603b      	str	r3, [r7, #0]
 8001e46:	460b      	mov	r3, r1
 8001e48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e4a:	7afb      	ldrb	r3, [r7, #11]
 8001e4c:	f003 020f 	and.w	r2, r3, #15
 8001e50:	4613      	mov	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	1a9b      	subs	r3, r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	3338      	adds	r3, #56	; 0x38
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	3304      	adds	r3, #4
 8001e60:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	2200      	movs	r2, #0
 8001e72:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	2201      	movs	r2, #1
 8001e78:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e7a:	7afb      	ldrb	r3, [r7, #11]
 8001e7c:	f003 030f 	and.w	r3, r3, #15
 8001e80:	b2da      	uxtb	r2, r3
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d102      	bne.n	8001e94 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e94:	7afb      	ldrb	r3, [r7, #11]
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d109      	bne.n	8001eb2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6818      	ldr	r0, [r3, #0]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	6979      	ldr	r1, [r7, #20]
 8001eac:	f003 f8aa 	bl	8005004 <USB_EP0StartXfer>
 8001eb0:	e008      	b.n	8001ec4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6818      	ldr	r0, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	6979      	ldr	r1, [r7, #20]
 8001ec0:	f002 fe5c 	bl	8004b7c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b084      	sub	sp, #16
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001eda:	78fb      	ldrb	r3, [r7, #3]
 8001edc:	f003 020f 	and.w	r2, r3, #15
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d901      	bls.n	8001eec <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e050      	b.n	8001f8e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001eec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	da0f      	bge.n	8001f14 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ef4:	78fb      	ldrb	r3, [r7, #3]
 8001ef6:	f003 020f 	and.w	r2, r3, #15
 8001efa:	4613      	mov	r3, r2
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	1a9b      	subs	r3, r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	3338      	adds	r3, #56	; 0x38
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	4413      	add	r3, r2
 8001f08:	3304      	adds	r3, #4
 8001f0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	705a      	strb	r2, [r3, #1]
 8001f12:	e00d      	b.n	8001f30 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f14:	78fa      	ldrb	r2, [r7, #3]
 8001f16:	4613      	mov	r3, r2
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	1a9b      	subs	r3, r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	4413      	add	r3, r2
 8001f26:	3304      	adds	r3, #4
 8001f28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2201      	movs	r2, #1
 8001f34:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f36:	78fb      	ldrb	r3, [r7, #3]
 8001f38:	f003 030f 	and.w	r3, r3, #15
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d101      	bne.n	8001f50 <HAL_PCD_EP_SetStall+0x82>
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	e01e      	b.n	8001f8e <HAL_PCD_EP_SetStall+0xc0>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68f9      	ldr	r1, [r7, #12]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f003 fa01 	bl	8005366 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f64:	78fb      	ldrb	r3, [r7, #3]
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10a      	bne.n	8001f84 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6818      	ldr	r0, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	b2d9      	uxtb	r1, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f7e:	461a      	mov	r2, r3
 8001f80:	f003 fbf2 	bl	8005768 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b084      	sub	sp, #16
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001fa2:	78fb      	ldrb	r3, [r7, #3]
 8001fa4:	f003 020f 	and.w	r2, r3, #15
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d901      	bls.n	8001fb4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e042      	b.n	800203a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	da0f      	bge.n	8001fdc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fbc:	78fb      	ldrb	r3, [r7, #3]
 8001fbe:	f003 020f 	and.w	r2, r3, #15
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	1a9b      	subs	r3, r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	3338      	adds	r3, #56	; 0x38
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	4413      	add	r3, r2
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	705a      	strb	r2, [r3, #1]
 8001fda:	e00f      	b.n	8001ffc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fdc:	78fb      	ldrb	r3, [r7, #3]
 8001fde:	f003 020f 	and.w	r2, r3, #15
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	1a9b      	subs	r3, r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3304      	adds	r3, #4
 8001ff4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2200      	movs	r2, #0
 8002000:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002002:	78fb      	ldrb	r3, [r7, #3]
 8002004:	f003 030f 	and.w	r3, r3, #15
 8002008:	b2da      	uxtb	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002014:	2b01      	cmp	r3, #1
 8002016:	d101      	bne.n	800201c <HAL_PCD_EP_ClrStall+0x86>
 8002018:	2302      	movs	r3, #2
 800201a:	e00e      	b.n	800203a <HAL_PCD_EP_ClrStall+0xa4>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68f9      	ldr	r1, [r7, #12]
 800202a:	4618      	mov	r0, r3
 800202c:	f003 fa09 	bl	8005442 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b08a      	sub	sp, #40	; 0x28
 8002046:	af02      	add	r7, sp, #8
 8002048:	6078      	str	r0, [r7, #4]
 800204a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	4613      	mov	r3, r2
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	1a9b      	subs	r3, r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	3338      	adds	r3, #56	; 0x38
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	4413      	add	r3, r2
 8002066:	3304      	adds	r3, #4
 8002068:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	699a      	ldr	r2, [r3, #24]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	429a      	cmp	r2, r3
 8002074:	d901      	bls.n	800207a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e06c      	b.n	8002154 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	695a      	ldr	r2, [r3, #20]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	69fa      	ldr	r2, [r7, #28]
 800208c:	429a      	cmp	r2, r3
 800208e:	d902      	bls.n	8002096 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	3303      	adds	r3, #3
 800209a:	089b      	lsrs	r3, r3, #2
 800209c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800209e:	e02b      	b.n	80020f8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	695a      	ldr	r2, [r3, #20]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	69fa      	ldr	r2, [r7, #28]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d902      	bls.n	80020bc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	3303      	adds	r3, #3
 80020c0:	089b      	lsrs	r3, r3, #2
 80020c2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	68d9      	ldr	r1, [r3, #12]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	b2da      	uxtb	r2, r3
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	9300      	str	r3, [sp, #0]
 80020d8:	4603      	mov	r3, r0
 80020da:	6978      	ldr	r0, [r7, #20]
 80020dc:	f003 f8e5 	bl	80052aa <USB_WritePacket>

    ep->xfer_buff  += len;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	68da      	ldr	r2, [r3, #12]
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	441a      	add	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	699a      	ldr	r2, [r3, #24]
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	441a      	add	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	015a      	lsls	r2, r3, #5
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	4413      	add	r3, r2
 8002100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	b29b      	uxth	r3, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	429a      	cmp	r2, r3
 800210c:	d809      	bhi.n	8002122 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	699a      	ldr	r2, [r3, #24]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002116:	429a      	cmp	r2, r3
 8002118:	d203      	bcs.n	8002122 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1be      	bne.n	80020a0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	695a      	ldr	r2, [r3, #20]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	429a      	cmp	r2, r3
 800212c:	d811      	bhi.n	8002152 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	f003 030f 	and.w	r3, r3, #15
 8002134:	2201      	movs	r2, #1
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002142:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	43db      	mvns	r3, r3
 8002148:	6939      	ldr	r1, [r7, #16]
 800214a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800214e:	4013      	ands	r3, r2
 8002150:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3720      	adds	r7, #32
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	333c      	adds	r3, #60	; 0x3c
 8002174:	3304      	adds	r3, #4
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	015a      	lsls	r2, r3, #5
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	4413      	add	r3, r2
 8002182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	2b01      	cmp	r3, #1
 8002190:	f040 80a0 	bne.w	80022d4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	f003 0308 	and.w	r3, r3, #8
 800219a:	2b00      	cmp	r3, #0
 800219c:	d015      	beq.n	80021ca <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	4a72      	ldr	r2, [pc, #456]	; (800236c <PCD_EP_OutXfrComplete_int+0x210>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	f240 80dd 	bls.w	8002362 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 80d7 	beq.w	8002362 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	015a      	lsls	r2, r3, #5
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	4413      	add	r3, r2
 80021bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021c0:	461a      	mov	r2, r3
 80021c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021c6:	6093      	str	r3, [r2, #8]
 80021c8:	e0cb      	b.n	8002362 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	f003 0320 	and.w	r3, r3, #32
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d009      	beq.n	80021e8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	015a      	lsls	r2, r3, #5
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	4413      	add	r3, r2
 80021dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021e0:	461a      	mov	r2, r3
 80021e2:	2320      	movs	r3, #32
 80021e4:	6093      	str	r3, [r2, #8]
 80021e6:	e0bc      	b.n	8002362 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f040 80b7 	bne.w	8002362 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	4a5d      	ldr	r2, [pc, #372]	; (800236c <PCD_EP_OutXfrComplete_int+0x210>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d90f      	bls.n	800221c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00a      	beq.n	800221c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	015a      	lsls	r2, r3, #5
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	4413      	add	r3, r2
 800220e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002212:	461a      	mov	r2, r3
 8002214:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002218:	6093      	str	r3, [r2, #8]
 800221a:	e0a2      	b.n	8002362 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	4613      	mov	r3, r2
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	1a9b      	subs	r3, r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	440b      	add	r3, r1
 800222a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800222e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	0159      	lsls	r1, r3, #5
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	440b      	add	r3, r1
 8002238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002242:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	4613      	mov	r3, r2
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	1a9b      	subs	r3, r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4403      	add	r3, r0
 8002252:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002256:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	4613      	mov	r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	1a9b      	subs	r3, r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	440b      	add	r3, r1
 8002266:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800226a:	6819      	ldr	r1, [r3, #0]
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	4613      	mov	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	1a9b      	subs	r3, r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4403      	add	r3, r0
 800227a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4419      	add	r1, r3
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	4613      	mov	r3, r2
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	1a9b      	subs	r3, r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4403      	add	r3, r0
 8002290:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002294:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d114      	bne.n	80022c6 <PCD_EP_OutXfrComplete_int+0x16a>
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	4613      	mov	r3, r2
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	1a9b      	subs	r3, r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d108      	bne.n	80022c6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6818      	ldr	r0, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80022be:	461a      	mov	r2, r3
 80022c0:	2101      	movs	r1, #1
 80022c2:	f003 fa51 	bl	8005768 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	4619      	mov	r1, r3
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f005 f96b 	bl	80075a8 <HAL_PCD_DataOutStageCallback>
 80022d2:	e046      	b.n	8002362 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	4a26      	ldr	r2, [pc, #152]	; (8002370 <PCD_EP_OutXfrComplete_int+0x214>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d124      	bne.n	8002326 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00a      	beq.n	80022fc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	015a      	lsls	r2, r3, #5
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	4413      	add	r3, r2
 80022ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022f2:	461a      	mov	r2, r3
 80022f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022f8:	6093      	str	r3, [r2, #8]
 80022fa:	e032      	b.n	8002362 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	f003 0320 	and.w	r3, r3, #32
 8002302:	2b00      	cmp	r3, #0
 8002304:	d008      	beq.n	8002318 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	015a      	lsls	r2, r3, #5
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	4413      	add	r3, r2
 800230e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002312:	461a      	mov	r2, r3
 8002314:	2320      	movs	r3, #32
 8002316:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	b2db      	uxtb	r3, r3
 800231c:	4619      	mov	r1, r3
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f005 f942 	bl	80075a8 <HAL_PCD_DataOutStageCallback>
 8002324:	e01d      	b.n	8002362 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d114      	bne.n	8002356 <PCD_EP_OutXfrComplete_int+0x1fa>
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	4613      	mov	r3, r2
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	1a9b      	subs	r3, r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	440b      	add	r3, r1
 800233a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d108      	bne.n	8002356 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6818      	ldr	r0, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800234e:	461a      	mov	r2, r3
 8002350:	2100      	movs	r1, #0
 8002352:	f003 fa09 	bl	8005768 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	b2db      	uxtb	r3, r3
 800235a:	4619      	mov	r1, r3
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f005 f923 	bl	80075a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3718      	adds	r7, #24
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	4f54300a 	.word	0x4f54300a
 8002370:	4f54310a 	.word	0x4f54310a

08002374 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	333c      	adds	r3, #60	; 0x3c
 800238c:	3304      	adds	r3, #4
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	015a      	lsls	r2, r3, #5
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	4413      	add	r3, r2
 800239a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	4a15      	ldr	r2, [pc, #84]	; (80023fc <PCD_EP_OutSetupPacket_int+0x88>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d90e      	bls.n	80023c8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d009      	beq.n	80023c8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	015a      	lsls	r2, r3, #5
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	4413      	add	r3, r2
 80023bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023c0:	461a      	mov	r2, r3
 80023c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023c6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f005 f8db 	bl	8007584 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <PCD_EP_OutSetupPacket_int+0x88>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d90c      	bls.n	80023f0 <PCD_EP_OutSetupPacket_int+0x7c>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d108      	bne.n	80023f0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6818      	ldr	r0, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80023e8:	461a      	mov	r2, r3
 80023ea:	2101      	movs	r1, #1
 80023ec:	f003 f9bc 	bl	8005768 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3718      	adds	r7, #24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	4f54300a 	.word	0x4f54300a

08002400 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	70fb      	strb	r3, [r7, #3]
 800240c:	4613      	mov	r3, r2
 800240e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002416:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002418:	78fb      	ldrb	r3, [r7, #3]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d107      	bne.n	800242e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800241e:	883b      	ldrh	r3, [r7, #0]
 8002420:	0419      	lsls	r1, r3, #16
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	430a      	orrs	r2, r1
 800242a:	629a      	str	r2, [r3, #40]	; 0x28
 800242c:	e028      	b.n	8002480 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002434:	0c1b      	lsrs	r3, r3, #16
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	4413      	add	r3, r2
 800243a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800243c:	2300      	movs	r3, #0
 800243e:	73fb      	strb	r3, [r7, #15]
 8002440:	e00d      	b.n	800245e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	7bfb      	ldrb	r3, [r7, #15]
 8002448:	3340      	adds	r3, #64	; 0x40
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	0c1b      	lsrs	r3, r3, #16
 8002452:	68ba      	ldr	r2, [r7, #8]
 8002454:	4413      	add	r3, r2
 8002456:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002458:	7bfb      	ldrb	r3, [r7, #15]
 800245a:	3301      	adds	r3, #1
 800245c:	73fb      	strb	r3, [r7, #15]
 800245e:	7bfa      	ldrb	r2, [r7, #15]
 8002460:	78fb      	ldrb	r3, [r7, #3]
 8002462:	3b01      	subs	r3, #1
 8002464:	429a      	cmp	r2, r3
 8002466:	d3ec      	bcc.n	8002442 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002468:	883b      	ldrh	r3, [r7, #0]
 800246a:	0418      	lsls	r0, r3, #16
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6819      	ldr	r1, [r3, #0]
 8002470:	78fb      	ldrb	r3, [r7, #3]
 8002472:	3b01      	subs	r3, #1
 8002474:	68ba      	ldr	r2, [r7, #8]
 8002476:	4302      	orrs	r2, r0
 8002478:	3340      	adds	r3, #64	; 0x40
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
 8002496:	460b      	mov	r3, r1
 8002498:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	887a      	ldrh	r2, [r7, #2]
 80024a0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e2:	f043 0303 	orr.w	r3, r3, #3
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3714      	adds	r7, #20
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e0cc      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800250c:	4b68      	ldr	r3, [pc, #416]	; (80026b0 <HAL_RCC_ClockConfig+0x1b8>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 030f 	and.w	r3, r3, #15
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	429a      	cmp	r2, r3
 8002518:	d90c      	bls.n	8002534 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251a:	4b65      	ldr	r3, [pc, #404]	; (80026b0 <HAL_RCC_ClockConfig+0x1b8>)
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002522:	4b63      	ldr	r3, [pc, #396]	; (80026b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	429a      	cmp	r2, r3
 800252e:	d001      	beq.n	8002534 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e0b8      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d020      	beq.n	8002582 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b00      	cmp	r3, #0
 800254a:	d005      	beq.n	8002558 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800254c:	4b59      	ldr	r3, [pc, #356]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	4a58      	ldr	r2, [pc, #352]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002552:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002556:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0308 	and.w	r3, r3, #8
 8002560:	2b00      	cmp	r3, #0
 8002562:	d005      	beq.n	8002570 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002564:	4b53      	ldr	r3, [pc, #332]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	4a52      	ldr	r2, [pc, #328]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 800256a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800256e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002570:	4b50      	ldr	r3, [pc, #320]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	494d      	ldr	r1, [pc, #308]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 800257e:	4313      	orrs	r3, r2
 8002580:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d044      	beq.n	8002618 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d107      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002596:	4b47      	ldr	r3, [pc, #284]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d119      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e07f      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d003      	beq.n	80025b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025b2:	2b03      	cmp	r3, #3
 80025b4:	d107      	bne.n	80025c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025b6:	4b3f      	ldr	r3, [pc, #252]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d109      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e06f      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c6:	4b3b      	ldr	r3, [pc, #236]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e067      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025d6:	4b37      	ldr	r3, [pc, #220]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f023 0203 	bic.w	r2, r3, #3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	4934      	ldr	r1, [pc, #208]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025e8:	f7fe fb10 	bl	8000c0c <HAL_GetTick>
 80025ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ee:	e00a      	b.n	8002606 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f0:	f7fe fb0c 	bl	8000c0c <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80025fe:	4293      	cmp	r3, r2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e04f      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002606:	4b2b      	ldr	r3, [pc, #172]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 020c 	and.w	r2, r3, #12
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	429a      	cmp	r2, r3
 8002616:	d1eb      	bne.n	80025f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002618:	4b25      	ldr	r3, [pc, #148]	; (80026b0 <HAL_RCC_ClockConfig+0x1b8>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 030f 	and.w	r3, r3, #15
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	429a      	cmp	r2, r3
 8002624:	d20c      	bcs.n	8002640 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002626:	4b22      	ldr	r3, [pc, #136]	; (80026b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800262e:	4b20      	ldr	r3, [pc, #128]	; (80026b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	429a      	cmp	r2, r3
 800263a:	d001      	beq.n	8002640 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e032      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	d008      	beq.n	800265e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800264c:	4b19      	ldr	r3, [pc, #100]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	4916      	ldr	r1, [pc, #88]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 800265a:	4313      	orrs	r3, r2
 800265c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b00      	cmp	r3, #0
 8002668:	d009      	beq.n	800267e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800266a:	4b12      	ldr	r3, [pc, #72]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	490e      	ldr	r1, [pc, #56]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 800267a:	4313      	orrs	r3, r2
 800267c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800267e:	f000 fbb1 	bl	8002de4 <HAL_RCC_GetSysClockFreq>
 8002682:	4602      	mov	r2, r0
 8002684:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	091b      	lsrs	r3, r3, #4
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	490a      	ldr	r1, [pc, #40]	; (80026b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002690:	5ccb      	ldrb	r3, [r1, r3]
 8002692:	fa22 f303 	lsr.w	r3, r2, r3
 8002696:	4a09      	ldr	r2, [pc, #36]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 8002698:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800269a:	4b09      	ldr	r3, [pc, #36]	; (80026c0 <HAL_RCC_ClockConfig+0x1c8>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fe f984 	bl	80009ac <HAL_InitTick>

  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40023c00 	.word	0x40023c00
 80026b4:	40023800 	.word	0x40023800
 80026b8:	08007dc0 	.word	0x08007dc0
 80026bc:	20000000 	.word	0x20000000
 80026c0:	20000004 	.word	0x20000004

080026c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026c8:	4b03      	ldr	r3, [pc, #12]	; (80026d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80026ca:	681b      	ldr	r3, [r3, #0]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	20000000 	.word	0x20000000

080026dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026e0:	f7ff fff0 	bl	80026c4 <HAL_RCC_GetHCLKFreq>
 80026e4:	4602      	mov	r2, r0
 80026e6:	4b05      	ldr	r3, [pc, #20]	; (80026fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	0a9b      	lsrs	r3, r3, #10
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	4903      	ldr	r1, [pc, #12]	; (8002700 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026f2:	5ccb      	ldrb	r3, [r1, r3]
 80026f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40023800 	.word	0x40023800
 8002700:	08007dd0 	.word	0x08007dd0

08002704 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002708:	f7ff ffdc 	bl	80026c4 <HAL_RCC_GetHCLKFreq>
 800270c:	4602      	mov	r2, r0
 800270e:	4b05      	ldr	r3, [pc, #20]	; (8002724 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	0b5b      	lsrs	r3, r3, #13
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	4903      	ldr	r1, [pc, #12]	; (8002728 <HAL_RCC_GetPCLK2Freq+0x24>)
 800271a:	5ccb      	ldrb	r3, [r1, r3]
 800271c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002720:	4618      	mov	r0, r3
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40023800 	.word	0x40023800
 8002728:	08007dd0 	.word	0x08007dd0

0800272c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	220f      	movs	r2, #15
 800273a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800273c:	4b12      	ldr	r3, [pc, #72]	; (8002788 <HAL_RCC_GetClockConfig+0x5c>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 0203 	and.w	r2, r3, #3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002748:	4b0f      	ldr	r3, [pc, #60]	; (8002788 <HAL_RCC_GetClockConfig+0x5c>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002754:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <HAL_RCC_GetClockConfig+0x5c>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002760:	4b09      	ldr	r3, [pc, #36]	; (8002788 <HAL_RCC_GetClockConfig+0x5c>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	08db      	lsrs	r3, r3, #3
 8002766:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800276e:	4b07      	ldr	r3, [pc, #28]	; (800278c <HAL_RCC_GetClockConfig+0x60>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 020f 	and.w	r2, r3, #15
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	601a      	str	r2, [r3, #0]
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	40023800 	.word	0x40023800
 800278c:	40023c00 	.word	0x40023c00

08002790 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b08c      	sub	sp, #48	; 0x30
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002798:	2300      	movs	r3, #0
 800279a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800279c:	2300      	movs	r3, #0
 800279e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80027a0:	2300      	movs	r3, #0
 80027a2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80027b4:	2300      	movs	r3, #0
 80027b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d010      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80027c8:	4b6f      	ldr	r3, [pc, #444]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027ce:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d6:	496c      	ldr	r1, [pc, #432]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80027e6:	2301      	movs	r3, #1
 80027e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d010      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80027f6:	4b64      	ldr	r3, [pc, #400]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027fc:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002804:	4960      	ldr	r1, [pc, #384]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002806:	4313      	orrs	r3, r2
 8002808:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002814:	2301      	movs	r3, #1
 8002816:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	2b00      	cmp	r3, #0
 8002822:	d017      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002824:	4b58      	ldr	r3, [pc, #352]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002826:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800282a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	4955      	ldr	r1, [pc, #340]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002834:	4313      	orrs	r3, r2
 8002836:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002842:	d101      	bne.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002844:	2301      	movs	r3, #1
 8002846:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002850:	2301      	movs	r3, #1
 8002852:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0308 	and.w	r3, r3, #8
 800285c:	2b00      	cmp	r3, #0
 800285e:	d017      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002860:	4b49      	ldr	r3, [pc, #292]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002862:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002866:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800286e:	4946      	ldr	r1, [pc, #280]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002870:	4313      	orrs	r3, r2
 8002872:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800287e:	d101      	bne.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002880:	2301      	movs	r3, #1
 8002882:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800288c:	2301      	movs	r3, #1
 800288e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0320 	and.w	r3, r3, #32
 8002898:	2b00      	cmp	r3, #0
 800289a:	f000 808a 	beq.w	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	60bb      	str	r3, [r7, #8]
 80028a2:	4b39      	ldr	r3, [pc, #228]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	4a38      	ldr	r2, [pc, #224]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ac:	6413      	str	r3, [r2, #64]	; 0x40
 80028ae:	4b36      	ldr	r3, [pc, #216]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b6:	60bb      	str	r3, [r7, #8]
 80028b8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80028ba:	4b34      	ldr	r3, [pc, #208]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a33      	ldr	r2, [pc, #204]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80028c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80028c6:	f7fe f9a1 	bl	8000c0c <HAL_GetTick>
 80028ca:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80028cc:	e008      	b.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80028ce:	f7fe f99d 	bl	8000c0c <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d901      	bls.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e278      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80028e0:	4b2a      	ldr	r3, [pc, #168]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d0f0      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028ec:	4b26      	ldr	r3, [pc, #152]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028f4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028f6:	6a3b      	ldr	r3, [r7, #32]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d02f      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002904:	6a3a      	ldr	r2, [r7, #32]
 8002906:	429a      	cmp	r2, r3
 8002908:	d028      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800290a:	4b1f      	ldr	r3, [pc, #124]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800290c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002912:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002914:	4b1e      	ldr	r3, [pc, #120]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002916:	2201      	movs	r2, #1
 8002918:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800291a:	4b1d      	ldr	r3, [pc, #116]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002920:	4a19      	ldr	r2, [pc, #100]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002922:	6a3b      	ldr	r3, [r7, #32]
 8002924:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002926:	4b18      	ldr	r3, [pc, #96]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b01      	cmp	r3, #1
 8002930:	d114      	bne.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002932:	f7fe f96b 	bl	8000c0c <HAL_GetTick>
 8002936:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002938:	e00a      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800293a:	f7fe f967 	bl	8000c0c <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	f241 3288 	movw	r2, #5000	; 0x1388
 8002948:	4293      	cmp	r3, r2
 800294a:	d901      	bls.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e240      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002950:	4b0d      	ldr	r3, [pc, #52]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d0ee      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002964:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002968:	d114      	bne.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800296a:	4b07      	ldr	r3, [pc, #28]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800297a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800297e:	4902      	ldr	r1, [pc, #8]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002980:	4313      	orrs	r3, r2
 8002982:	608b      	str	r3, [r1, #8]
 8002984:	e00c      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002986:	bf00      	nop
 8002988:	40023800 	.word	0x40023800
 800298c:	40007000 	.word	0x40007000
 8002990:	42470e40 	.word	0x42470e40
 8002994:	4b4a      	ldr	r3, [pc, #296]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	4a49      	ldr	r2, [pc, #292]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800299a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800299e:	6093      	str	r3, [r2, #8]
 80029a0:	4b47      	ldr	r3, [pc, #284]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ac:	4944      	ldr	r1, [pc, #272]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0310 	and.w	r3, r3, #16
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d004      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80029c4:	4b3f      	ldr	r3, [pc, #252]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80029c6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00a      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80029d4:	4b3a      	ldr	r3, [pc, #232]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029e2:	4937      	ldr	r1, [pc, #220]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00a      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80029f6:	4b32      	ldr	r3, [pc, #200]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029fc:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a04:	492e      	ldr	r1, [pc, #184]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d011      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002a18:	4b29      	ldr	r3, [pc, #164]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a1e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a26:	4926      	ldr	r1, [pc, #152]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a36:	d101      	bne.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00a      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002a48:	4b1d      	ldr	r3, [pc, #116]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a4e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a56:	491a      	ldr	r1, [pc, #104]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d011      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002a6a:	4b15      	ldr	r3, [pc, #84]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a70:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a78:	4911      	ldr	r1, [pc, #68]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a88:	d101      	bne.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d005      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a9c:	f040 80ff 	bne.w	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002aa0:	4b09      	ldr	r3, [pc, #36]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002aa6:	f7fe f8b1 	bl	8000c0c <HAL_GetTick>
 8002aaa:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002aac:	e00e      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002aae:	f7fe f8ad 	bl	8000c0c <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d907      	bls.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e188      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	424711e0 	.word	0x424711e0
 8002ac8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002acc:	4b7e      	ldr	r3, [pc, #504]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1ea      	bne.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d009      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d028      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d124      	bne.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002b00:	4b71      	ldr	r3, [pc, #452]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b06:	0c1b      	lsrs	r3, r3, #16
 8002b08:	f003 0303 	and.w	r3, r3, #3
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b12:	4b6d      	ldr	r3, [pc, #436]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b18:	0e1b      	lsrs	r3, r3, #24
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	019b      	lsls	r3, r3, #6
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	085b      	lsrs	r3, r3, #1
 8002b30:	3b01      	subs	r3, #1
 8002b32:	041b      	lsls	r3, r3, #16
 8002b34:	431a      	orrs	r2, r3
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	061b      	lsls	r3, r3, #24
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	071b      	lsls	r3, r3, #28
 8002b42:	4961      	ldr	r1, [pc, #388]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0304 	and.w	r3, r3, #4
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d004      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b5e:	d00a      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d035      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b74:	d130      	bne.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002b76:	4b54      	ldr	r3, [pc, #336]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b7c:	0c1b      	lsrs	r3, r3, #16
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	3301      	adds	r3, #1
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b88:	4b4f      	ldr	r3, [pc, #316]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b8e:	0f1b      	lsrs	r3, r3, #28
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	019b      	lsls	r3, r3, #6
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	085b      	lsrs	r3, r3, #1
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	041b      	lsls	r3, r3, #16
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	061b      	lsls	r3, r3, #24
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	071b      	lsls	r3, r3, #28
 8002bb8:	4943      	ldr	r1, [pc, #268]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002bc0:	4b41      	ldr	r3, [pc, #260]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bc6:	f023 021f 	bic.w	r2, r3, #31
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	493d      	ldr	r1, [pc, #244]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d029      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002be8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bec:	d124      	bne.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002bee:	4b36      	ldr	r3, [pc, #216]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bf4:	0c1b      	lsrs	r3, r3, #16
 8002bf6:	f003 0303 	and.w	r3, r3, #3
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c00:	4b31      	ldr	r3, [pc, #196]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c06:	0f1b      	lsrs	r3, r3, #28
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	019b      	lsls	r3, r3, #6
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	085b      	lsrs	r3, r3, #1
 8002c20:	3b01      	subs	r3, #1
 8002c22:	041b      	lsls	r3, r3, #16
 8002c24:	431a      	orrs	r2, r3
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	061b      	lsls	r3, r3, #24
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	071b      	lsls	r3, r3, #28
 8002c30:	4925      	ldr	r1, [pc, #148]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d016      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	019b      	lsls	r3, r3, #6
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	085b      	lsrs	r3, r3, #1
 8002c56:	3b01      	subs	r3, #1
 8002c58:	041b      	lsls	r3, r3, #16
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	061b      	lsls	r3, r3, #24
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	071b      	lsls	r3, r3, #28
 8002c6a:	4917      	ldr	r1, [pc, #92]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002c72:	4b16      	ldr	r3, [pc, #88]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002c74:	2201      	movs	r2, #1
 8002c76:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c78:	f7fd ffc8 	bl	8000c0c <HAL_GetTick>
 8002c7c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002c80:	f7fd ffc4 	bl	8000c0c <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e09f      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c92:	4b0d      	ldr	r3, [pc, #52]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0f0      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	f040 8095 	bne.w	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002ca6:	4b0a      	ldr	r3, [pc, #40]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002cac:	f7fd ffae 	bl	8000c0c <HAL_GetTick>
 8002cb0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002cb2:	e00f      	b.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002cb4:	f7fd ffaa 	bl	8000c0c <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d908      	bls.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e085      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002cc6:	bf00      	nop
 8002cc8:	40023800 	.word	0x40023800
 8002ccc:	42470068 	.word	0x42470068
 8002cd0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002cd4:	4b41      	ldr	r3, [pc, #260]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ce0:	d0e8      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0304 	and.w	r3, r3, #4
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d009      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d02b      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d127      	bne.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002d0a:	4b34      	ldr	r3, [pc, #208]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d10:	0c1b      	lsrs	r3, r3, #16
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	3301      	adds	r3, #1
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	699a      	ldr	r2, [r3, #24]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	019b      	lsls	r3, r3, #6
 8002d26:	431a      	orrs	r2, r3
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	085b      	lsrs	r3, r3, #1
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	041b      	lsls	r3, r3, #16
 8002d30:	431a      	orrs	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d36:	061b      	lsls	r3, r3, #24
 8002d38:	4928      	ldr	r1, [pc, #160]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002d40:	4b26      	ldr	r3, [pc, #152]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d46:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	021b      	lsls	r3, r3, #8
 8002d52:	4922      	ldr	r1, [pc, #136]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d01d      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d6e:	d118      	bne.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d70:	4b1a      	ldr	r3, [pc, #104]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d76:	0e1b      	lsrs	r3, r3, #24
 8002d78:	f003 030f 	and.w	r3, r3, #15
 8002d7c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	699a      	ldr	r2, [r3, #24]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	019b      	lsls	r3, r3, #6
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	085b      	lsrs	r3, r3, #1
 8002d90:	3b01      	subs	r3, #1
 8002d92:	041b      	lsls	r3, r3, #16
 8002d94:	431a      	orrs	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	061b      	lsls	r3, r3, #24
 8002d9a:	4910      	ldr	r1, [pc, #64]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002da2:	4b0f      	ldr	r3, [pc, #60]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002da4:	2201      	movs	r2, #1
 8002da6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002da8:	f7fd ff30 	bl	8000c0c <HAL_GetTick>
 8002dac:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002db0:	f7fd ff2c 	bl	8000c0c <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e007      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002dc2:	4b06      	ldr	r3, [pc, #24]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dce:	d1ef      	bne.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3730      	adds	r7, #48	; 0x30
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	42470070 	.word	0x42470070

08002de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002de8:	b088      	sub	sp, #32
 8002dea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002dec:	2300      	movs	r3, #0
 8002dee:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8002df4:	2300      	movs	r3, #0
 8002df6:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e00:	4bce      	ldr	r3, [pc, #824]	; (800313c <HAL_RCC_GetSysClockFreq+0x358>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f003 030c 	and.w	r3, r3, #12
 8002e08:	2b0c      	cmp	r3, #12
 8002e0a:	f200 818d 	bhi.w	8003128 <HAL_RCC_GetSysClockFreq+0x344>
 8002e0e:	a201      	add	r2, pc, #4	; (adr r2, 8002e14 <HAL_RCC_GetSysClockFreq+0x30>)
 8002e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e14:	08002e49 	.word	0x08002e49
 8002e18:	08003129 	.word	0x08003129
 8002e1c:	08003129 	.word	0x08003129
 8002e20:	08003129 	.word	0x08003129
 8002e24:	08002e4f 	.word	0x08002e4f
 8002e28:	08003129 	.word	0x08003129
 8002e2c:	08003129 	.word	0x08003129
 8002e30:	08003129 	.word	0x08003129
 8002e34:	08002e55 	.word	0x08002e55
 8002e38:	08003129 	.word	0x08003129
 8002e3c:	08003129 	.word	0x08003129
 8002e40:	08003129 	.word	0x08003129
 8002e44:	08002fc9 	.word	0x08002fc9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e48:	4bbd      	ldr	r3, [pc, #756]	; (8003140 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002e4a:	61bb      	str	r3, [r7, #24]
       break;
 8002e4c:	e16f      	b.n	800312e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e4e:	4bbd      	ldr	r3, [pc, #756]	; (8003144 <HAL_RCC_GetSysClockFreq+0x360>)
 8002e50:	61bb      	str	r3, [r7, #24]
      break;
 8002e52:	e16c      	b.n	800312e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e54:	4bb9      	ldr	r3, [pc, #740]	; (800313c <HAL_RCC_GetSysClockFreq+0x358>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e5c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e5e:	4bb7      	ldr	r3, [pc, #732]	; (800313c <HAL_RCC_GetSysClockFreq+0x358>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d053      	beq.n	8002f12 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e6a:	4bb4      	ldr	r3, [pc, #720]	; (800313c <HAL_RCC_GetSysClockFreq+0x358>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	099b      	lsrs	r3, r3, #6
 8002e70:	461a      	mov	r2, r3
 8002e72:	f04f 0300 	mov.w	r3, #0
 8002e76:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e7a:	f04f 0100 	mov.w	r1, #0
 8002e7e:	ea02 0400 	and.w	r4, r2, r0
 8002e82:	603c      	str	r4, [r7, #0]
 8002e84:	400b      	ands	r3, r1
 8002e86:	607b      	str	r3, [r7, #4]
 8002e88:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e8c:	4620      	mov	r0, r4
 8002e8e:	4629      	mov	r1, r5
 8002e90:	f04f 0200 	mov.w	r2, #0
 8002e94:	f04f 0300 	mov.w	r3, #0
 8002e98:	014b      	lsls	r3, r1, #5
 8002e9a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e9e:	0142      	lsls	r2, r0, #5
 8002ea0:	4610      	mov	r0, r2
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	4623      	mov	r3, r4
 8002ea6:	1ac0      	subs	r0, r0, r3
 8002ea8:	462b      	mov	r3, r5
 8002eaa:	eb61 0103 	sbc.w	r1, r1, r3
 8002eae:	f04f 0200 	mov.w	r2, #0
 8002eb2:	f04f 0300 	mov.w	r3, #0
 8002eb6:	018b      	lsls	r3, r1, #6
 8002eb8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ebc:	0182      	lsls	r2, r0, #6
 8002ebe:	1a12      	subs	r2, r2, r0
 8002ec0:	eb63 0301 	sbc.w	r3, r3, r1
 8002ec4:	f04f 0000 	mov.w	r0, #0
 8002ec8:	f04f 0100 	mov.w	r1, #0
 8002ecc:	00d9      	lsls	r1, r3, #3
 8002ece:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ed2:	00d0      	lsls	r0, r2, #3
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	4621      	mov	r1, r4
 8002eda:	1852      	adds	r2, r2, r1
 8002edc:	4629      	mov	r1, r5
 8002ede:	eb43 0101 	adc.w	r1, r3, r1
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	f04f 0000 	mov.w	r0, #0
 8002ee8:	f04f 0100 	mov.w	r1, #0
 8002eec:	0259      	lsls	r1, r3, #9
 8002eee:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002ef2:	0250      	lsls	r0, r2, #9
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	4610      	mov	r0, r2
 8002efa:	4619      	mov	r1, r3
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	461a      	mov	r2, r3
 8002f00:	f04f 0300 	mov.w	r3, #0
 8002f04:	f7fd f984 	bl	8000210 <__aeabi_uldivmod>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	61fb      	str	r3, [r7, #28]
 8002f10:	e04c      	b.n	8002fac <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f12:	4b8a      	ldr	r3, [pc, #552]	; (800313c <HAL_RCC_GetSysClockFreq+0x358>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	099b      	lsrs	r3, r3, #6
 8002f18:	461a      	mov	r2, r3
 8002f1a:	f04f 0300 	mov.w	r3, #0
 8002f1e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f22:	f04f 0100 	mov.w	r1, #0
 8002f26:	ea02 0a00 	and.w	sl, r2, r0
 8002f2a:	ea03 0b01 	and.w	fp, r3, r1
 8002f2e:	4650      	mov	r0, sl
 8002f30:	4659      	mov	r1, fp
 8002f32:	f04f 0200 	mov.w	r2, #0
 8002f36:	f04f 0300 	mov.w	r3, #0
 8002f3a:	014b      	lsls	r3, r1, #5
 8002f3c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f40:	0142      	lsls	r2, r0, #5
 8002f42:	4610      	mov	r0, r2
 8002f44:	4619      	mov	r1, r3
 8002f46:	ebb0 000a 	subs.w	r0, r0, sl
 8002f4a:	eb61 010b 	sbc.w	r1, r1, fp
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	f04f 0300 	mov.w	r3, #0
 8002f56:	018b      	lsls	r3, r1, #6
 8002f58:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f5c:	0182      	lsls	r2, r0, #6
 8002f5e:	1a12      	subs	r2, r2, r0
 8002f60:	eb63 0301 	sbc.w	r3, r3, r1
 8002f64:	f04f 0000 	mov.w	r0, #0
 8002f68:	f04f 0100 	mov.w	r1, #0
 8002f6c:	00d9      	lsls	r1, r3, #3
 8002f6e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f72:	00d0      	lsls	r0, r2, #3
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	eb12 020a 	adds.w	r2, r2, sl
 8002f7c:	eb43 030b 	adc.w	r3, r3, fp
 8002f80:	f04f 0000 	mov.w	r0, #0
 8002f84:	f04f 0100 	mov.w	r1, #0
 8002f88:	0299      	lsls	r1, r3, #10
 8002f8a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002f8e:	0290      	lsls	r0, r2, #10
 8002f90:	4602      	mov	r2, r0
 8002f92:	460b      	mov	r3, r1
 8002f94:	4610      	mov	r0, r2
 8002f96:	4619      	mov	r1, r3
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	f04f 0300 	mov.w	r3, #0
 8002fa0:	f7fd f936 	bl	8000210 <__aeabi_uldivmod>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	4613      	mov	r3, r2
 8002faa:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fac:	4b63      	ldr	r3, [pc, #396]	; (800313c <HAL_RCC_GetSysClockFreq+0x358>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	0c1b      	lsrs	r3, r3, #16
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8002fbc:	69fa      	ldr	r2, [r7, #28]
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc4:	61bb      	str	r3, [r7, #24]
      break;
 8002fc6:	e0b2      	b.n	800312e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fc8:	4b5c      	ldr	r3, [pc, #368]	; (800313c <HAL_RCC_GetSysClockFreq+0x358>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fd0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fd2:	4b5a      	ldr	r3, [pc, #360]	; (800313c <HAL_RCC_GetSysClockFreq+0x358>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d04d      	beq.n	800307a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fde:	4b57      	ldr	r3, [pc, #348]	; (800313c <HAL_RCC_GetSysClockFreq+0x358>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	099b      	lsrs	r3, r3, #6
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	f04f 0300 	mov.w	r3, #0
 8002fea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002fee:	f04f 0100 	mov.w	r1, #0
 8002ff2:	ea02 0800 	and.w	r8, r2, r0
 8002ff6:	ea03 0901 	and.w	r9, r3, r1
 8002ffa:	4640      	mov	r0, r8
 8002ffc:	4649      	mov	r1, r9
 8002ffe:	f04f 0200 	mov.w	r2, #0
 8003002:	f04f 0300 	mov.w	r3, #0
 8003006:	014b      	lsls	r3, r1, #5
 8003008:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800300c:	0142      	lsls	r2, r0, #5
 800300e:	4610      	mov	r0, r2
 8003010:	4619      	mov	r1, r3
 8003012:	ebb0 0008 	subs.w	r0, r0, r8
 8003016:	eb61 0109 	sbc.w	r1, r1, r9
 800301a:	f04f 0200 	mov.w	r2, #0
 800301e:	f04f 0300 	mov.w	r3, #0
 8003022:	018b      	lsls	r3, r1, #6
 8003024:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003028:	0182      	lsls	r2, r0, #6
 800302a:	1a12      	subs	r2, r2, r0
 800302c:	eb63 0301 	sbc.w	r3, r3, r1
 8003030:	f04f 0000 	mov.w	r0, #0
 8003034:	f04f 0100 	mov.w	r1, #0
 8003038:	00d9      	lsls	r1, r3, #3
 800303a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800303e:	00d0      	lsls	r0, r2, #3
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	eb12 0208 	adds.w	r2, r2, r8
 8003048:	eb43 0309 	adc.w	r3, r3, r9
 800304c:	f04f 0000 	mov.w	r0, #0
 8003050:	f04f 0100 	mov.w	r1, #0
 8003054:	0259      	lsls	r1, r3, #9
 8003056:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800305a:	0250      	lsls	r0, r2, #9
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	4610      	mov	r0, r2
 8003062:	4619      	mov	r1, r3
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	461a      	mov	r2, r3
 8003068:	f04f 0300 	mov.w	r3, #0
 800306c:	f7fd f8d0 	bl	8000210 <__aeabi_uldivmod>
 8003070:	4602      	mov	r2, r0
 8003072:	460b      	mov	r3, r1
 8003074:	4613      	mov	r3, r2
 8003076:	61fb      	str	r3, [r7, #28]
 8003078:	e04a      	b.n	8003110 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800307a:	4b30      	ldr	r3, [pc, #192]	; (800313c <HAL_RCC_GetSysClockFreq+0x358>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	099b      	lsrs	r3, r3, #6
 8003080:	461a      	mov	r2, r3
 8003082:	f04f 0300 	mov.w	r3, #0
 8003086:	f240 10ff 	movw	r0, #511	; 0x1ff
 800308a:	f04f 0100 	mov.w	r1, #0
 800308e:	ea02 0400 	and.w	r4, r2, r0
 8003092:	ea03 0501 	and.w	r5, r3, r1
 8003096:	4620      	mov	r0, r4
 8003098:	4629      	mov	r1, r5
 800309a:	f04f 0200 	mov.w	r2, #0
 800309e:	f04f 0300 	mov.w	r3, #0
 80030a2:	014b      	lsls	r3, r1, #5
 80030a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80030a8:	0142      	lsls	r2, r0, #5
 80030aa:	4610      	mov	r0, r2
 80030ac:	4619      	mov	r1, r3
 80030ae:	1b00      	subs	r0, r0, r4
 80030b0:	eb61 0105 	sbc.w	r1, r1, r5
 80030b4:	f04f 0200 	mov.w	r2, #0
 80030b8:	f04f 0300 	mov.w	r3, #0
 80030bc:	018b      	lsls	r3, r1, #6
 80030be:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80030c2:	0182      	lsls	r2, r0, #6
 80030c4:	1a12      	subs	r2, r2, r0
 80030c6:	eb63 0301 	sbc.w	r3, r3, r1
 80030ca:	f04f 0000 	mov.w	r0, #0
 80030ce:	f04f 0100 	mov.w	r1, #0
 80030d2:	00d9      	lsls	r1, r3, #3
 80030d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030d8:	00d0      	lsls	r0, r2, #3
 80030da:	4602      	mov	r2, r0
 80030dc:	460b      	mov	r3, r1
 80030de:	1912      	adds	r2, r2, r4
 80030e0:	eb45 0303 	adc.w	r3, r5, r3
 80030e4:	f04f 0000 	mov.w	r0, #0
 80030e8:	f04f 0100 	mov.w	r1, #0
 80030ec:	0299      	lsls	r1, r3, #10
 80030ee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80030f2:	0290      	lsls	r0, r2, #10
 80030f4:	4602      	mov	r2, r0
 80030f6:	460b      	mov	r3, r1
 80030f8:	4610      	mov	r0, r2
 80030fa:	4619      	mov	r1, r3
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	461a      	mov	r2, r3
 8003100:	f04f 0300 	mov.w	r3, #0
 8003104:	f7fd f884 	bl	8000210 <__aeabi_uldivmod>
 8003108:	4602      	mov	r2, r0
 800310a:	460b      	mov	r3, r1
 800310c:	4613      	mov	r3, r2
 800310e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003110:	4b0a      	ldr	r3, [pc, #40]	; (800313c <HAL_RCC_GetSysClockFreq+0x358>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	0f1b      	lsrs	r3, r3, #28
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800311c:	69fa      	ldr	r2, [r7, #28]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	fbb2 f3f3 	udiv	r3, r2, r3
 8003124:	61bb      	str	r3, [r7, #24]
      break;
 8003126:	e002      	b.n	800312e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003128:	4b05      	ldr	r3, [pc, #20]	; (8003140 <HAL_RCC_GetSysClockFreq+0x35c>)
 800312a:	61bb      	str	r3, [r7, #24]
      break;
 800312c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800312e:	69bb      	ldr	r3, [r7, #24]
}
 8003130:	4618      	mov	r0, r3
 8003132:	3720      	adds	r7, #32
 8003134:	46bd      	mov	sp, r7
 8003136:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800313a:	bf00      	nop
 800313c:	40023800 	.word	0x40023800
 8003140:	00f42400 	.word	0x00f42400
 8003144:	007a1200 	.word	0x007a1200

08003148 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003150:	2300      	movs	r3, #0
 8003152:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b00      	cmp	r3, #0
 800315e:	f000 8083 	beq.w	8003268 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003162:	4b95      	ldr	r3, [pc, #596]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 030c 	and.w	r3, r3, #12
 800316a:	2b04      	cmp	r3, #4
 800316c:	d019      	beq.n	80031a2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800316e:	4b92      	ldr	r3, [pc, #584]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003176:	2b08      	cmp	r3, #8
 8003178:	d106      	bne.n	8003188 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800317a:	4b8f      	ldr	r3, [pc, #572]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003182:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003186:	d00c      	beq.n	80031a2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003188:	4b8b      	ldr	r3, [pc, #556]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003190:	2b0c      	cmp	r3, #12
 8003192:	d112      	bne.n	80031ba <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003194:	4b88      	ldr	r3, [pc, #544]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800319c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031a0:	d10b      	bne.n	80031ba <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a2:	4b85      	ldr	r3, [pc, #532]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d05b      	beq.n	8003266 <HAL_RCC_OscConfig+0x11e>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d157      	bne.n	8003266 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e216      	b.n	80035e8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c2:	d106      	bne.n	80031d2 <HAL_RCC_OscConfig+0x8a>
 80031c4:	4b7c      	ldr	r3, [pc, #496]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a7b      	ldr	r2, [pc, #492]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 80031ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ce:	6013      	str	r3, [r2, #0]
 80031d0:	e01d      	b.n	800320e <HAL_RCC_OscConfig+0xc6>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031da:	d10c      	bne.n	80031f6 <HAL_RCC_OscConfig+0xae>
 80031dc:	4b76      	ldr	r3, [pc, #472]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a75      	ldr	r2, [pc, #468]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 80031e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031e6:	6013      	str	r3, [r2, #0]
 80031e8:	4b73      	ldr	r3, [pc, #460]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a72      	ldr	r2, [pc, #456]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 80031ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f2:	6013      	str	r3, [r2, #0]
 80031f4:	e00b      	b.n	800320e <HAL_RCC_OscConfig+0xc6>
 80031f6:	4b70      	ldr	r3, [pc, #448]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a6f      	ldr	r2, [pc, #444]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 80031fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003200:	6013      	str	r3, [r2, #0]
 8003202:	4b6d      	ldr	r3, [pc, #436]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a6c      	ldr	r2, [pc, #432]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 8003208:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800320c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d013      	beq.n	800323e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003216:	f7fd fcf9 	bl	8000c0c <HAL_GetTick>
 800321a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800321c:	e008      	b.n	8003230 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800321e:	f7fd fcf5 	bl	8000c0c <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b64      	cmp	r3, #100	; 0x64
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e1db      	b.n	80035e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003230:	4b61      	ldr	r3, [pc, #388]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0f0      	beq.n	800321e <HAL_RCC_OscConfig+0xd6>
 800323c:	e014      	b.n	8003268 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323e:	f7fd fce5 	bl	8000c0c <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003244:	e008      	b.n	8003258 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003246:	f7fd fce1 	bl	8000c0c <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b64      	cmp	r3, #100	; 0x64
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e1c7      	b.n	80035e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003258:	4b57      	ldr	r3, [pc, #348]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1f0      	bne.n	8003246 <HAL_RCC_OscConfig+0xfe>
 8003264:	e000      	b.n	8003268 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003266:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d06f      	beq.n	8003354 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003274:	4b50      	ldr	r3, [pc, #320]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f003 030c 	and.w	r3, r3, #12
 800327c:	2b00      	cmp	r3, #0
 800327e:	d017      	beq.n	80032b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003280:	4b4d      	ldr	r3, [pc, #308]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003288:	2b08      	cmp	r3, #8
 800328a:	d105      	bne.n	8003298 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800328c:	4b4a      	ldr	r3, [pc, #296]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00b      	beq.n	80032b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003298:	4b47      	ldr	r3, [pc, #284]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032a0:	2b0c      	cmp	r3, #12
 80032a2:	d11c      	bne.n	80032de <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032a4:	4b44      	ldr	r3, [pc, #272]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d116      	bne.n	80032de <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032b0:	4b41      	ldr	r3, [pc, #260]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d005      	beq.n	80032c8 <HAL_RCC_OscConfig+0x180>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d001      	beq.n	80032c8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e18f      	b.n	80035e8 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c8:	4b3b      	ldr	r3, [pc, #236]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	4938      	ldr	r1, [pc, #224]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032dc:	e03a      	b.n	8003354 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d020      	beq.n	8003328 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032e6:	4b35      	ldr	r3, [pc, #212]	; (80033bc <HAL_RCC_OscConfig+0x274>)
 80032e8:	2201      	movs	r2, #1
 80032ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ec:	f7fd fc8e 	bl	8000c0c <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032f4:	f7fd fc8a 	bl	8000c0c <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e170      	b.n	80035e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003306:	4b2c      	ldr	r3, [pc, #176]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d0f0      	beq.n	80032f4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003312:	4b29      	ldr	r3, [pc, #164]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	4925      	ldr	r1, [pc, #148]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 8003322:	4313      	orrs	r3, r2
 8003324:	600b      	str	r3, [r1, #0]
 8003326:	e015      	b.n	8003354 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003328:	4b24      	ldr	r3, [pc, #144]	; (80033bc <HAL_RCC_OscConfig+0x274>)
 800332a:	2200      	movs	r2, #0
 800332c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332e:	f7fd fc6d 	bl	8000c0c <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003334:	e008      	b.n	8003348 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003336:	f7fd fc69 	bl	8000c0c <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e14f      	b.n	80035e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003348:	4b1b      	ldr	r3, [pc, #108]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1f0      	bne.n	8003336 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	2b00      	cmp	r3, #0
 800335e:	d037      	beq.n	80033d0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d016      	beq.n	8003396 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003368:	4b15      	ldr	r3, [pc, #84]	; (80033c0 <HAL_RCC_OscConfig+0x278>)
 800336a:	2201      	movs	r2, #1
 800336c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336e:	f7fd fc4d 	bl	8000c0c <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003374:	e008      	b.n	8003388 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003376:	f7fd fc49 	bl	8000c0c <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e12f      	b.n	80035e8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003388:	4b0b      	ldr	r3, [pc, #44]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 800338a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d0f0      	beq.n	8003376 <HAL_RCC_OscConfig+0x22e>
 8003394:	e01c      	b.n	80033d0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003396:	4b0a      	ldr	r3, [pc, #40]	; (80033c0 <HAL_RCC_OscConfig+0x278>)
 8003398:	2200      	movs	r2, #0
 800339a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800339c:	f7fd fc36 	bl	8000c0c <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033a2:	e00f      	b.n	80033c4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033a4:	f7fd fc32 	bl	8000c0c <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d908      	bls.n	80033c4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e118      	b.n	80035e8 <HAL_RCC_OscConfig+0x4a0>
 80033b6:	bf00      	nop
 80033b8:	40023800 	.word	0x40023800
 80033bc:	42470000 	.word	0x42470000
 80033c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033c4:	4b8a      	ldr	r3, [pc, #552]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 80033c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1e9      	bne.n	80033a4 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 8097 	beq.w	800350c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033de:	2300      	movs	r3, #0
 80033e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033e2:	4b83      	ldr	r3, [pc, #524]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10f      	bne.n	800340e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ee:	2300      	movs	r3, #0
 80033f0:	60fb      	str	r3, [r7, #12]
 80033f2:	4b7f      	ldr	r3, [pc, #508]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 80033f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f6:	4a7e      	ldr	r2, [pc, #504]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 80033f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033fc:	6413      	str	r3, [r2, #64]	; 0x40
 80033fe:	4b7c      	ldr	r3, [pc, #496]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003406:	60fb      	str	r3, [r7, #12]
 8003408:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800340a:	2301      	movs	r3, #1
 800340c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800340e:	4b79      	ldr	r3, [pc, #484]	; (80035f4 <HAL_RCC_OscConfig+0x4ac>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003416:	2b00      	cmp	r3, #0
 8003418:	d118      	bne.n	800344c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800341a:	4b76      	ldr	r3, [pc, #472]	; (80035f4 <HAL_RCC_OscConfig+0x4ac>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a75      	ldr	r2, [pc, #468]	; (80035f4 <HAL_RCC_OscConfig+0x4ac>)
 8003420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003424:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003426:	f7fd fbf1 	bl	8000c0c <HAL_GetTick>
 800342a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800342c:	e008      	b.n	8003440 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800342e:	f7fd fbed 	bl	8000c0c <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e0d3      	b.n	80035e8 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003440:	4b6c      	ldr	r3, [pc, #432]	; (80035f4 <HAL_RCC_OscConfig+0x4ac>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0f0      	beq.n	800342e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d106      	bne.n	8003462 <HAL_RCC_OscConfig+0x31a>
 8003454:	4b66      	ldr	r3, [pc, #408]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 8003456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003458:	4a65      	ldr	r2, [pc, #404]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 800345a:	f043 0301 	orr.w	r3, r3, #1
 800345e:	6713      	str	r3, [r2, #112]	; 0x70
 8003460:	e01c      	b.n	800349c <HAL_RCC_OscConfig+0x354>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	2b05      	cmp	r3, #5
 8003468:	d10c      	bne.n	8003484 <HAL_RCC_OscConfig+0x33c>
 800346a:	4b61      	ldr	r3, [pc, #388]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 800346c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346e:	4a60      	ldr	r2, [pc, #384]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 8003470:	f043 0304 	orr.w	r3, r3, #4
 8003474:	6713      	str	r3, [r2, #112]	; 0x70
 8003476:	4b5e      	ldr	r3, [pc, #376]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 8003478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347a:	4a5d      	ldr	r2, [pc, #372]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 800347c:	f043 0301 	orr.w	r3, r3, #1
 8003480:	6713      	str	r3, [r2, #112]	; 0x70
 8003482:	e00b      	b.n	800349c <HAL_RCC_OscConfig+0x354>
 8003484:	4b5a      	ldr	r3, [pc, #360]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 8003486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003488:	4a59      	ldr	r2, [pc, #356]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 800348a:	f023 0301 	bic.w	r3, r3, #1
 800348e:	6713      	str	r3, [r2, #112]	; 0x70
 8003490:	4b57      	ldr	r3, [pc, #348]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 8003492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003494:	4a56      	ldr	r2, [pc, #344]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 8003496:	f023 0304 	bic.w	r3, r3, #4
 800349a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d015      	beq.n	80034d0 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a4:	f7fd fbb2 	bl	8000c0c <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034aa:	e00a      	b.n	80034c2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ac:	f7fd fbae 	bl	8000c0c <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e092      	b.n	80035e8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c2:	4b4b      	ldr	r3, [pc, #300]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 80034c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0ee      	beq.n	80034ac <HAL_RCC_OscConfig+0x364>
 80034ce:	e014      	b.n	80034fa <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d0:	f7fd fb9c 	bl	8000c0c <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034d6:	e00a      	b.n	80034ee <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034d8:	f7fd fb98 	bl	8000c0c <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e07c      	b.n	80035e8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ee:	4b40      	ldr	r3, [pc, #256]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 80034f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1ee      	bne.n	80034d8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034fa:	7dfb      	ldrb	r3, [r7, #23]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d105      	bne.n	800350c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003500:	4b3b      	ldr	r3, [pc, #236]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 8003502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003504:	4a3a      	ldr	r2, [pc, #232]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 8003506:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800350a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d068      	beq.n	80035e6 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003514:	4b36      	ldr	r3, [pc, #216]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f003 030c 	and.w	r3, r3, #12
 800351c:	2b08      	cmp	r3, #8
 800351e:	d060      	beq.n	80035e2 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	2b02      	cmp	r3, #2
 8003526:	d145      	bne.n	80035b4 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003528:	4b33      	ldr	r3, [pc, #204]	; (80035f8 <HAL_RCC_OscConfig+0x4b0>)
 800352a:	2200      	movs	r2, #0
 800352c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352e:	f7fd fb6d 	bl	8000c0c <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003534:	e008      	b.n	8003548 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003536:	f7fd fb69 	bl	8000c0c <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e04f      	b.n	80035e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003548:	4b29      	ldr	r3, [pc, #164]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1f0      	bne.n	8003536 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	69da      	ldr	r2, [r3, #28]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	431a      	orrs	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003562:	019b      	lsls	r3, r3, #6
 8003564:	431a      	orrs	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356a:	085b      	lsrs	r3, r3, #1
 800356c:	3b01      	subs	r3, #1
 800356e:	041b      	lsls	r3, r3, #16
 8003570:	431a      	orrs	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003576:	061b      	lsls	r3, r3, #24
 8003578:	431a      	orrs	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	071b      	lsls	r3, r3, #28
 8003580:	491b      	ldr	r1, [pc, #108]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 8003582:	4313      	orrs	r3, r2
 8003584:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003586:	4b1c      	ldr	r3, [pc, #112]	; (80035f8 <HAL_RCC_OscConfig+0x4b0>)
 8003588:	2201      	movs	r2, #1
 800358a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358c:	f7fd fb3e 	bl	8000c0c <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003594:	f7fd fb3a 	bl	8000c0c <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e020      	b.n	80035e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a6:	4b12      	ldr	r3, [pc, #72]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0f0      	beq.n	8003594 <HAL_RCC_OscConfig+0x44c>
 80035b2:	e018      	b.n	80035e6 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b4:	4b10      	ldr	r3, [pc, #64]	; (80035f8 <HAL_RCC_OscConfig+0x4b0>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ba:	f7fd fb27 	bl	8000c0c <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035c2:	f7fd fb23 	bl	8000c0c <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e009      	b.n	80035e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035d4:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1f0      	bne.n	80035c2 <HAL_RCC_OscConfig+0x47a>
 80035e0:	e001      	b.n	80035e6 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e000      	b.n	80035e8 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3718      	adds	r7, #24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40023800 	.word	0x40023800
 80035f4:	40007000 	.word	0x40007000
 80035f8:	42470060 	.word	0x42470060

080035fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e01d      	b.n	800364a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d106      	bne.n	8003628 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f815 	bl	8003652 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2202      	movs	r2, #2
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3304      	adds	r3, #4
 8003638:	4619      	mov	r1, r3
 800363a:	4610      	mov	r0, r2
 800363c:	f000 f968 	bl	8003910 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003652:	b480      	push	{r7}
 8003654:	b083      	sub	sp, #12
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003666:	b480      	push	{r7}
 8003668:	b085      	sub	sp, #20
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68da      	ldr	r2, [r3, #12]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f042 0201 	orr.w	r2, r2, #1
 800367c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f003 0307 	and.w	r3, r3, #7
 8003688:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2b06      	cmp	r3, #6
 800368e:	d007      	beq.n	80036a0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f042 0201 	orr.w	r2, r2, #1
 800369e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr

080036ae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b082      	sub	sp, #8
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d122      	bne.n	800370a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d11b      	bne.n	800370a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f06f 0202 	mvn.w	r2, #2
 80036da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	f003 0303 	and.w	r3, r3, #3
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d003      	beq.n	80036f8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f8ee 	bl	80038d2 <HAL_TIM_IC_CaptureCallback>
 80036f6:	e005      	b.n	8003704 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f8e0 	bl	80038be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f8f1 	bl	80038e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	f003 0304 	and.w	r3, r3, #4
 8003714:	2b04      	cmp	r3, #4
 8003716:	d122      	bne.n	800375e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	f003 0304 	and.w	r3, r3, #4
 8003722:	2b04      	cmp	r3, #4
 8003724:	d11b      	bne.n	800375e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f06f 0204 	mvn.w	r2, #4
 800372e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2202      	movs	r2, #2
 8003734:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003740:	2b00      	cmp	r3, #0
 8003742:	d003      	beq.n	800374c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 f8c4 	bl	80038d2 <HAL_TIM_IC_CaptureCallback>
 800374a:	e005      	b.n	8003758 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f8b6 	bl	80038be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f8c7 	bl	80038e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	f003 0308 	and.w	r3, r3, #8
 8003768:	2b08      	cmp	r3, #8
 800376a:	d122      	bne.n	80037b2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	f003 0308 	and.w	r3, r3, #8
 8003776:	2b08      	cmp	r3, #8
 8003778:	d11b      	bne.n	80037b2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f06f 0208 	mvn.w	r2, #8
 8003782:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2204      	movs	r2, #4
 8003788:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	69db      	ldr	r3, [r3, #28]
 8003790:	f003 0303 	and.w	r3, r3, #3
 8003794:	2b00      	cmp	r3, #0
 8003796:	d003      	beq.n	80037a0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f89a 	bl	80038d2 <HAL_TIM_IC_CaptureCallback>
 800379e:	e005      	b.n	80037ac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 f88c 	bl	80038be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f89d 	bl	80038e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	f003 0310 	and.w	r3, r3, #16
 80037bc:	2b10      	cmp	r3, #16
 80037be:	d122      	bne.n	8003806 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	f003 0310 	and.w	r3, r3, #16
 80037ca:	2b10      	cmp	r3, #16
 80037cc:	d11b      	bne.n	8003806 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f06f 0210 	mvn.w	r2, #16
 80037d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2208      	movs	r2, #8
 80037dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	69db      	ldr	r3, [r3, #28]
 80037e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 f870 	bl	80038d2 <HAL_TIM_IC_CaptureCallback>
 80037f2:	e005      	b.n	8003800 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 f862 	bl	80038be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f873 	bl	80038e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	f003 0301 	and.w	r3, r3, #1
 8003810:	2b01      	cmp	r3, #1
 8003812:	d10e      	bne.n	8003832 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b01      	cmp	r3, #1
 8003820:	d107      	bne.n	8003832 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f06f 0201 	mvn.w	r2, #1
 800382a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f7fc ffdf 	bl	80007f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800383c:	2b80      	cmp	r3, #128	; 0x80
 800383e:	d10e      	bne.n	800385e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800384a:	2b80      	cmp	r3, #128	; 0x80
 800384c:	d107      	bne.n	800385e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f903 	bl	8003a64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003868:	2b40      	cmp	r3, #64	; 0x40
 800386a:	d10e      	bne.n	800388a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003876:	2b40      	cmp	r3, #64	; 0x40
 8003878:	d107      	bne.n	800388a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 f838 	bl	80038fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	f003 0320 	and.w	r3, r3, #32
 8003894:	2b20      	cmp	r3, #32
 8003896:	d10e      	bne.n	80038b6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	f003 0320 	and.w	r3, r3, #32
 80038a2:	2b20      	cmp	r3, #32
 80038a4:	d107      	bne.n	80038b6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f06f 0220 	mvn.w	r2, #32
 80038ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 f8cd 	bl	8003a50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038b6:	bf00      	nop
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr

080038d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b083      	sub	sp, #12
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038ee:	bf00      	nop
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b083      	sub	sp, #12
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003902:	bf00      	nop
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
	...

08003910 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a40      	ldr	r2, [pc, #256]	; (8003a24 <TIM_Base_SetConfig+0x114>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d013      	beq.n	8003950 <TIM_Base_SetConfig+0x40>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800392e:	d00f      	beq.n	8003950 <TIM_Base_SetConfig+0x40>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a3d      	ldr	r2, [pc, #244]	; (8003a28 <TIM_Base_SetConfig+0x118>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d00b      	beq.n	8003950 <TIM_Base_SetConfig+0x40>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a3c      	ldr	r2, [pc, #240]	; (8003a2c <TIM_Base_SetConfig+0x11c>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d007      	beq.n	8003950 <TIM_Base_SetConfig+0x40>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a3b      	ldr	r2, [pc, #236]	; (8003a30 <TIM_Base_SetConfig+0x120>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d003      	beq.n	8003950 <TIM_Base_SetConfig+0x40>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a3a      	ldr	r2, [pc, #232]	; (8003a34 <TIM_Base_SetConfig+0x124>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d108      	bne.n	8003962 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003956:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	4313      	orrs	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a2f      	ldr	r2, [pc, #188]	; (8003a24 <TIM_Base_SetConfig+0x114>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d02b      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003970:	d027      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a2c      	ldr	r2, [pc, #176]	; (8003a28 <TIM_Base_SetConfig+0x118>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d023      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a2b      	ldr	r2, [pc, #172]	; (8003a2c <TIM_Base_SetConfig+0x11c>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d01f      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a2a      	ldr	r2, [pc, #168]	; (8003a30 <TIM_Base_SetConfig+0x120>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d01b      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a29      	ldr	r2, [pc, #164]	; (8003a34 <TIM_Base_SetConfig+0x124>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d017      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a28      	ldr	r2, [pc, #160]	; (8003a38 <TIM_Base_SetConfig+0x128>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d013      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a27      	ldr	r2, [pc, #156]	; (8003a3c <TIM_Base_SetConfig+0x12c>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d00f      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a26      	ldr	r2, [pc, #152]	; (8003a40 <TIM_Base_SetConfig+0x130>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d00b      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a25      	ldr	r2, [pc, #148]	; (8003a44 <TIM_Base_SetConfig+0x134>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d007      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a24      	ldr	r2, [pc, #144]	; (8003a48 <TIM_Base_SetConfig+0x138>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d003      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a23      	ldr	r2, [pc, #140]	; (8003a4c <TIM_Base_SetConfig+0x13c>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d108      	bne.n	80039d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	4313      	orrs	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	689a      	ldr	r2, [r3, #8]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a0a      	ldr	r2, [pc, #40]	; (8003a24 <TIM_Base_SetConfig+0x114>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d003      	beq.n	8003a08 <TIM_Base_SetConfig+0xf8>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a0c      	ldr	r2, [pc, #48]	; (8003a34 <TIM_Base_SetConfig+0x124>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d103      	bne.n	8003a10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	691a      	ldr	r2, [r3, #16]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	615a      	str	r2, [r3, #20]
}
 8003a16:	bf00      	nop
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	40010000 	.word	0x40010000
 8003a28:	40000400 	.word	0x40000400
 8003a2c:	40000800 	.word	0x40000800
 8003a30:	40000c00 	.word	0x40000c00
 8003a34:	40010400 	.word	0x40010400
 8003a38:	40014000 	.word	0x40014000
 8003a3c:	40014400 	.word	0x40014400
 8003a40:	40014800 	.word	0x40014800
 8003a44:	40001800 	.word	0x40001800
 8003a48:	40001c00 	.word	0x40001c00
 8003a4c:	40002000 	.word	0x40002000

08003a50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e03f      	b.n	8003b0a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d106      	bne.n	8003aa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7fc fee6 	bl	8000870 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2224      	movs	r2, #36	; 0x24
 8003aa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68da      	ldr	r2, [r3, #12]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003aba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 f829 	bl	8003b14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	691a      	ldr	r2, [r3, #16]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ad0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	695a      	ldr	r2, [r3, #20]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ae0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68da      	ldr	r2, [r3, #12]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003af0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2220      	movs	r2, #32
 8003b04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
	...

08003b14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b18:	b0bd      	sub	sp, #244	; 0xf4
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b30:	68d9      	ldr	r1, [r3, #12]
 8003b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	ea40 0301 	orr.w	r3, r0, r1
 8003b3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b42:	689a      	ldr	r2, [r3, #8]
 8003b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	431a      	orrs	r2, r3
 8003b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8003b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b6c:	f021 010c 	bic.w	r1, r1, #12
 8003b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003b7a:	430b      	orrs	r3, r1
 8003b7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b8e:	6999      	ldr	r1, [r3, #24]
 8003b90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	ea40 0301 	orr.w	r3, r0, r1
 8003b9a:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ba6:	f040 81a5 	bne.w	8003ef4 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	4bcd      	ldr	r3, [pc, #820]	; (8003ee8 <UART_SetConfig+0x3d4>)
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d006      	beq.n	8003bc4 <UART_SetConfig+0xb0>
 8003bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	4bcb      	ldr	r3, [pc, #812]	; (8003eec <UART_SetConfig+0x3d8>)
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	f040 80cb 	bne.w	8003d5a <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bc4:	f7fe fd9e 	bl	8002704 <HAL_RCC_GetPCLK2Freq>
 8003bc8:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bcc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003bd0:	461c      	mov	r4, r3
 8003bd2:	f04f 0500 	mov.w	r5, #0
 8003bd6:	4622      	mov	r2, r4
 8003bd8:	462b      	mov	r3, r5
 8003bda:	1891      	adds	r1, r2, r2
 8003bdc:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8003be0:	415b      	adcs	r3, r3
 8003be2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003be6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003bea:	1912      	adds	r2, r2, r4
 8003bec:	eb45 0303 	adc.w	r3, r5, r3
 8003bf0:	f04f 0000 	mov.w	r0, #0
 8003bf4:	f04f 0100 	mov.w	r1, #0
 8003bf8:	00d9      	lsls	r1, r3, #3
 8003bfa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bfe:	00d0      	lsls	r0, r2, #3
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	1911      	adds	r1, r2, r4
 8003c06:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8003c0a:	416b      	adcs	r3, r5
 8003c0c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	461a      	mov	r2, r3
 8003c18:	f04f 0300 	mov.w	r3, #0
 8003c1c:	1891      	adds	r1, r2, r2
 8003c1e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8003c22:	415b      	adcs	r3, r3
 8003c24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c28:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003c2c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8003c30:	f7fc faee 	bl	8000210 <__aeabi_uldivmod>
 8003c34:	4602      	mov	r2, r0
 8003c36:	460b      	mov	r3, r1
 8003c38:	4bad      	ldr	r3, [pc, #692]	; (8003ef0 <UART_SetConfig+0x3dc>)
 8003c3a:	fba3 2302 	umull	r2, r3, r3, r2
 8003c3e:	095b      	lsrs	r3, r3, #5
 8003c40:	011e      	lsls	r6, r3, #4
 8003c42:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003c46:	461c      	mov	r4, r3
 8003c48:	f04f 0500 	mov.w	r5, #0
 8003c4c:	4622      	mov	r2, r4
 8003c4e:	462b      	mov	r3, r5
 8003c50:	1891      	adds	r1, r2, r2
 8003c52:	67b9      	str	r1, [r7, #120]	; 0x78
 8003c54:	415b      	adcs	r3, r3
 8003c56:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003c58:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003c5c:	1912      	adds	r2, r2, r4
 8003c5e:	eb45 0303 	adc.w	r3, r5, r3
 8003c62:	f04f 0000 	mov.w	r0, #0
 8003c66:	f04f 0100 	mov.w	r1, #0
 8003c6a:	00d9      	lsls	r1, r3, #3
 8003c6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c70:	00d0      	lsls	r0, r2, #3
 8003c72:	4602      	mov	r2, r0
 8003c74:	460b      	mov	r3, r1
 8003c76:	1911      	adds	r1, r2, r4
 8003c78:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8003c7c:	416b      	adcs	r3, r5
 8003c7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	461a      	mov	r2, r3
 8003c8a:	f04f 0300 	mov.w	r3, #0
 8003c8e:	1891      	adds	r1, r2, r2
 8003c90:	6739      	str	r1, [r7, #112]	; 0x70
 8003c92:	415b      	adcs	r3, r3
 8003c94:	677b      	str	r3, [r7, #116]	; 0x74
 8003c96:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003c9a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8003c9e:	f7fc fab7 	bl	8000210 <__aeabi_uldivmod>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	4b92      	ldr	r3, [pc, #584]	; (8003ef0 <UART_SetConfig+0x3dc>)
 8003ca8:	fba3 1302 	umull	r1, r3, r3, r2
 8003cac:	095b      	lsrs	r3, r3, #5
 8003cae:	2164      	movs	r1, #100	; 0x64
 8003cb0:	fb01 f303 	mul.w	r3, r1, r3
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	3332      	adds	r3, #50	; 0x32
 8003cba:	4a8d      	ldr	r2, [pc, #564]	; (8003ef0 <UART_SetConfig+0x3dc>)
 8003cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc0:	095b      	lsrs	r3, r3, #5
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003cc8:	441e      	add	r6, r3
 8003cca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f04f 0100 	mov.w	r1, #0
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	1894      	adds	r4, r2, r2
 8003cda:	66bc      	str	r4, [r7, #104]	; 0x68
 8003cdc:	415b      	adcs	r3, r3
 8003cde:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ce0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003ce4:	1812      	adds	r2, r2, r0
 8003ce6:	eb41 0303 	adc.w	r3, r1, r3
 8003cea:	f04f 0400 	mov.w	r4, #0
 8003cee:	f04f 0500 	mov.w	r5, #0
 8003cf2:	00dd      	lsls	r5, r3, #3
 8003cf4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003cf8:	00d4      	lsls	r4, r2, #3
 8003cfa:	4622      	mov	r2, r4
 8003cfc:	462b      	mov	r3, r5
 8003cfe:	1814      	adds	r4, r2, r0
 8003d00:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8003d04:	414b      	adcs	r3, r1
 8003d06:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	461a      	mov	r2, r3
 8003d12:	f04f 0300 	mov.w	r3, #0
 8003d16:	1891      	adds	r1, r2, r2
 8003d18:	6639      	str	r1, [r7, #96]	; 0x60
 8003d1a:	415b      	adcs	r3, r3
 8003d1c:	667b      	str	r3, [r7, #100]	; 0x64
 8003d1e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003d22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003d26:	f7fc fa73 	bl	8000210 <__aeabi_uldivmod>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	4b70      	ldr	r3, [pc, #448]	; (8003ef0 <UART_SetConfig+0x3dc>)
 8003d30:	fba3 1302 	umull	r1, r3, r3, r2
 8003d34:	095b      	lsrs	r3, r3, #5
 8003d36:	2164      	movs	r1, #100	; 0x64
 8003d38:	fb01 f303 	mul.w	r3, r1, r3
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	3332      	adds	r3, #50	; 0x32
 8003d42:	4a6b      	ldr	r2, [pc, #428]	; (8003ef0 <UART_SetConfig+0x3dc>)
 8003d44:	fba2 2303 	umull	r2, r3, r2, r3
 8003d48:	095b      	lsrs	r3, r3, #5
 8003d4a:	f003 0207 	and.w	r2, r3, #7
 8003d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4432      	add	r2, r6
 8003d56:	609a      	str	r2, [r3, #8]
 8003d58:	e26d      	b.n	8004236 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d5a:	f7fe fcbf 	bl	80026dc <HAL_RCC_GetPCLK1Freq>
 8003d5e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d62:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003d66:	461c      	mov	r4, r3
 8003d68:	f04f 0500 	mov.w	r5, #0
 8003d6c:	4622      	mov	r2, r4
 8003d6e:	462b      	mov	r3, r5
 8003d70:	1891      	adds	r1, r2, r2
 8003d72:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d74:	415b      	adcs	r3, r3
 8003d76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d78:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d7c:	1912      	adds	r2, r2, r4
 8003d7e:	eb45 0303 	adc.w	r3, r5, r3
 8003d82:	f04f 0000 	mov.w	r0, #0
 8003d86:	f04f 0100 	mov.w	r1, #0
 8003d8a:	00d9      	lsls	r1, r3, #3
 8003d8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d90:	00d0      	lsls	r0, r2, #3
 8003d92:	4602      	mov	r2, r0
 8003d94:	460b      	mov	r3, r1
 8003d96:	1911      	adds	r1, r2, r4
 8003d98:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8003d9c:	416b      	adcs	r3, r5
 8003d9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	461a      	mov	r2, r3
 8003daa:	f04f 0300 	mov.w	r3, #0
 8003dae:	1891      	adds	r1, r2, r2
 8003db0:	6539      	str	r1, [r7, #80]	; 0x50
 8003db2:	415b      	adcs	r3, r3
 8003db4:	657b      	str	r3, [r7, #84]	; 0x54
 8003db6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003dba:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8003dbe:	f7fc fa27 	bl	8000210 <__aeabi_uldivmod>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	4b4a      	ldr	r3, [pc, #296]	; (8003ef0 <UART_SetConfig+0x3dc>)
 8003dc8:	fba3 2302 	umull	r2, r3, r3, r2
 8003dcc:	095b      	lsrs	r3, r3, #5
 8003dce:	011e      	lsls	r6, r3, #4
 8003dd0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003dd4:	461c      	mov	r4, r3
 8003dd6:	f04f 0500 	mov.w	r5, #0
 8003dda:	4622      	mov	r2, r4
 8003ddc:	462b      	mov	r3, r5
 8003dde:	1891      	adds	r1, r2, r2
 8003de0:	64b9      	str	r1, [r7, #72]	; 0x48
 8003de2:	415b      	adcs	r3, r3
 8003de4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003de6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003dea:	1912      	adds	r2, r2, r4
 8003dec:	eb45 0303 	adc.w	r3, r5, r3
 8003df0:	f04f 0000 	mov.w	r0, #0
 8003df4:	f04f 0100 	mov.w	r1, #0
 8003df8:	00d9      	lsls	r1, r3, #3
 8003dfa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003dfe:	00d0      	lsls	r0, r2, #3
 8003e00:	4602      	mov	r2, r0
 8003e02:	460b      	mov	r3, r1
 8003e04:	1911      	adds	r1, r2, r4
 8003e06:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8003e0a:	416b      	adcs	r3, r5
 8003e0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	461a      	mov	r2, r3
 8003e18:	f04f 0300 	mov.w	r3, #0
 8003e1c:	1891      	adds	r1, r2, r2
 8003e1e:	6439      	str	r1, [r7, #64]	; 0x40
 8003e20:	415b      	adcs	r3, r3
 8003e22:	647b      	str	r3, [r7, #68]	; 0x44
 8003e24:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e28:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8003e2c:	f7fc f9f0 	bl	8000210 <__aeabi_uldivmod>
 8003e30:	4602      	mov	r2, r0
 8003e32:	460b      	mov	r3, r1
 8003e34:	4b2e      	ldr	r3, [pc, #184]	; (8003ef0 <UART_SetConfig+0x3dc>)
 8003e36:	fba3 1302 	umull	r1, r3, r3, r2
 8003e3a:	095b      	lsrs	r3, r3, #5
 8003e3c:	2164      	movs	r1, #100	; 0x64
 8003e3e:	fb01 f303 	mul.w	r3, r1, r3
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	3332      	adds	r3, #50	; 0x32
 8003e48:	4a29      	ldr	r2, [pc, #164]	; (8003ef0 <UART_SetConfig+0x3dc>)
 8003e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4e:	095b      	lsrs	r3, r3, #5
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e56:	441e      	add	r6, r3
 8003e58:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f04f 0100 	mov.w	r1, #0
 8003e62:	4602      	mov	r2, r0
 8003e64:	460b      	mov	r3, r1
 8003e66:	1894      	adds	r4, r2, r2
 8003e68:	63bc      	str	r4, [r7, #56]	; 0x38
 8003e6a:	415b      	adcs	r3, r3
 8003e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e6e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e72:	1812      	adds	r2, r2, r0
 8003e74:	eb41 0303 	adc.w	r3, r1, r3
 8003e78:	f04f 0400 	mov.w	r4, #0
 8003e7c:	f04f 0500 	mov.w	r5, #0
 8003e80:	00dd      	lsls	r5, r3, #3
 8003e82:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003e86:	00d4      	lsls	r4, r2, #3
 8003e88:	4622      	mov	r2, r4
 8003e8a:	462b      	mov	r3, r5
 8003e8c:	1814      	adds	r4, r2, r0
 8003e8e:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8003e92:	414b      	adcs	r3, r1
 8003e94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	f04f 0300 	mov.w	r3, #0
 8003ea4:	1891      	adds	r1, r2, r2
 8003ea6:	6339      	str	r1, [r7, #48]	; 0x30
 8003ea8:	415b      	adcs	r3, r3
 8003eaa:	637b      	str	r3, [r7, #52]	; 0x34
 8003eac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003eb0:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003eb4:	f7fc f9ac 	bl	8000210 <__aeabi_uldivmod>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	460b      	mov	r3, r1
 8003ebc:	4b0c      	ldr	r3, [pc, #48]	; (8003ef0 <UART_SetConfig+0x3dc>)
 8003ebe:	fba3 1302 	umull	r1, r3, r3, r2
 8003ec2:	095b      	lsrs	r3, r3, #5
 8003ec4:	2164      	movs	r1, #100	; 0x64
 8003ec6:	fb01 f303 	mul.w	r3, r1, r3
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	3332      	adds	r3, #50	; 0x32
 8003ed0:	4a07      	ldr	r2, [pc, #28]	; (8003ef0 <UART_SetConfig+0x3dc>)
 8003ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed6:	095b      	lsrs	r3, r3, #5
 8003ed8:	f003 0207 	and.w	r2, r3, #7
 8003edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4432      	add	r2, r6
 8003ee4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003ee6:	e1a6      	b.n	8004236 <UART_SetConfig+0x722>
 8003ee8:	40011000 	.word	0x40011000
 8003eec:	40011400 	.word	0x40011400
 8003ef0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	4bd1      	ldr	r3, [pc, #836]	; (8004240 <UART_SetConfig+0x72c>)
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d006      	beq.n	8003f0e <UART_SetConfig+0x3fa>
 8003f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	4bcf      	ldr	r3, [pc, #828]	; (8004244 <UART_SetConfig+0x730>)
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	f040 80ca 	bne.w	80040a2 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f0e:	f7fe fbf9 	bl	8002704 <HAL_RCC_GetPCLK2Freq>
 8003f12:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f16:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003f1a:	461c      	mov	r4, r3
 8003f1c:	f04f 0500 	mov.w	r5, #0
 8003f20:	4622      	mov	r2, r4
 8003f22:	462b      	mov	r3, r5
 8003f24:	1891      	adds	r1, r2, r2
 8003f26:	62b9      	str	r1, [r7, #40]	; 0x28
 8003f28:	415b      	adcs	r3, r3
 8003f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f30:	1912      	adds	r2, r2, r4
 8003f32:	eb45 0303 	adc.w	r3, r5, r3
 8003f36:	f04f 0000 	mov.w	r0, #0
 8003f3a:	f04f 0100 	mov.w	r1, #0
 8003f3e:	00d9      	lsls	r1, r3, #3
 8003f40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f44:	00d0      	lsls	r0, r2, #3
 8003f46:	4602      	mov	r2, r0
 8003f48:	460b      	mov	r3, r1
 8003f4a:	eb12 0a04 	adds.w	sl, r2, r4
 8003f4e:	eb43 0b05 	adc.w	fp, r3, r5
 8003f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f04f 0100 	mov.w	r1, #0
 8003f5e:	f04f 0200 	mov.w	r2, #0
 8003f62:	f04f 0300 	mov.w	r3, #0
 8003f66:	008b      	lsls	r3, r1, #2
 8003f68:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f6c:	0082      	lsls	r2, r0, #2
 8003f6e:	4650      	mov	r0, sl
 8003f70:	4659      	mov	r1, fp
 8003f72:	f7fc f94d 	bl	8000210 <__aeabi_uldivmod>
 8003f76:	4602      	mov	r2, r0
 8003f78:	460b      	mov	r3, r1
 8003f7a:	4bb3      	ldr	r3, [pc, #716]	; (8004248 <UART_SetConfig+0x734>)
 8003f7c:	fba3 2302 	umull	r2, r3, r3, r2
 8003f80:	095b      	lsrs	r3, r3, #5
 8003f82:	011e      	lsls	r6, r3, #4
 8003f84:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f04f 0100 	mov.w	r1, #0
 8003f8e:	4602      	mov	r2, r0
 8003f90:	460b      	mov	r3, r1
 8003f92:	1894      	adds	r4, r2, r2
 8003f94:	623c      	str	r4, [r7, #32]
 8003f96:	415b      	adcs	r3, r3
 8003f98:	627b      	str	r3, [r7, #36]	; 0x24
 8003f9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f9e:	1812      	adds	r2, r2, r0
 8003fa0:	eb41 0303 	adc.w	r3, r1, r3
 8003fa4:	f04f 0400 	mov.w	r4, #0
 8003fa8:	f04f 0500 	mov.w	r5, #0
 8003fac:	00dd      	lsls	r5, r3, #3
 8003fae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003fb2:	00d4      	lsls	r4, r2, #3
 8003fb4:	4622      	mov	r2, r4
 8003fb6:	462b      	mov	r3, r5
 8003fb8:	1814      	adds	r4, r2, r0
 8003fba:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8003fbe:	414b      	adcs	r3, r1
 8003fc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f04f 0100 	mov.w	r1, #0
 8003fd0:	f04f 0200 	mov.w	r2, #0
 8003fd4:	f04f 0300 	mov.w	r3, #0
 8003fd8:	008b      	lsls	r3, r1, #2
 8003fda:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003fde:	0082      	lsls	r2, r0, #2
 8003fe0:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8003fe4:	f7fc f914 	bl	8000210 <__aeabi_uldivmod>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	4b96      	ldr	r3, [pc, #600]	; (8004248 <UART_SetConfig+0x734>)
 8003fee:	fba3 1302 	umull	r1, r3, r3, r2
 8003ff2:	095b      	lsrs	r3, r3, #5
 8003ff4:	2164      	movs	r1, #100	; 0x64
 8003ff6:	fb01 f303 	mul.w	r3, r1, r3
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	011b      	lsls	r3, r3, #4
 8003ffe:	3332      	adds	r3, #50	; 0x32
 8004000:	4a91      	ldr	r2, [pc, #580]	; (8004248 <UART_SetConfig+0x734>)
 8004002:	fba2 2303 	umull	r2, r3, r2, r3
 8004006:	095b      	lsrs	r3, r3, #5
 8004008:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800400c:	441e      	add	r6, r3
 800400e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004012:	4618      	mov	r0, r3
 8004014:	f04f 0100 	mov.w	r1, #0
 8004018:	4602      	mov	r2, r0
 800401a:	460b      	mov	r3, r1
 800401c:	1894      	adds	r4, r2, r2
 800401e:	61bc      	str	r4, [r7, #24]
 8004020:	415b      	adcs	r3, r3
 8004022:	61fb      	str	r3, [r7, #28]
 8004024:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004028:	1812      	adds	r2, r2, r0
 800402a:	eb41 0303 	adc.w	r3, r1, r3
 800402e:	f04f 0400 	mov.w	r4, #0
 8004032:	f04f 0500 	mov.w	r5, #0
 8004036:	00dd      	lsls	r5, r3, #3
 8004038:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800403c:	00d4      	lsls	r4, r2, #3
 800403e:	4622      	mov	r2, r4
 8004040:	462b      	mov	r3, r5
 8004042:	1814      	adds	r4, r2, r0
 8004044:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8004048:	414b      	adcs	r3, r1
 800404a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800404e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	4618      	mov	r0, r3
 8004056:	f04f 0100 	mov.w	r1, #0
 800405a:	f04f 0200 	mov.w	r2, #0
 800405e:	f04f 0300 	mov.w	r3, #0
 8004062:	008b      	lsls	r3, r1, #2
 8004064:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004068:	0082      	lsls	r2, r0, #2
 800406a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800406e:	f7fc f8cf 	bl	8000210 <__aeabi_uldivmod>
 8004072:	4602      	mov	r2, r0
 8004074:	460b      	mov	r3, r1
 8004076:	4b74      	ldr	r3, [pc, #464]	; (8004248 <UART_SetConfig+0x734>)
 8004078:	fba3 1302 	umull	r1, r3, r3, r2
 800407c:	095b      	lsrs	r3, r3, #5
 800407e:	2164      	movs	r1, #100	; 0x64
 8004080:	fb01 f303 	mul.w	r3, r1, r3
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	3332      	adds	r3, #50	; 0x32
 800408a:	4a6f      	ldr	r2, [pc, #444]	; (8004248 <UART_SetConfig+0x734>)
 800408c:	fba2 2303 	umull	r2, r3, r2, r3
 8004090:	095b      	lsrs	r3, r3, #5
 8004092:	f003 020f 	and.w	r2, r3, #15
 8004096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4432      	add	r2, r6
 800409e:	609a      	str	r2, [r3, #8]
 80040a0:	e0c9      	b.n	8004236 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 80040a2:	f7fe fb1b 	bl	80026dc <HAL_RCC_GetPCLK1Freq>
 80040a6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80040ae:	461c      	mov	r4, r3
 80040b0:	f04f 0500 	mov.w	r5, #0
 80040b4:	4622      	mov	r2, r4
 80040b6:	462b      	mov	r3, r5
 80040b8:	1891      	adds	r1, r2, r2
 80040ba:	6139      	str	r1, [r7, #16]
 80040bc:	415b      	adcs	r3, r3
 80040be:	617b      	str	r3, [r7, #20]
 80040c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80040c4:	1912      	adds	r2, r2, r4
 80040c6:	eb45 0303 	adc.w	r3, r5, r3
 80040ca:	f04f 0000 	mov.w	r0, #0
 80040ce:	f04f 0100 	mov.w	r1, #0
 80040d2:	00d9      	lsls	r1, r3, #3
 80040d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040d8:	00d0      	lsls	r0, r2, #3
 80040da:	4602      	mov	r2, r0
 80040dc:	460b      	mov	r3, r1
 80040de:	eb12 0804 	adds.w	r8, r2, r4
 80040e2:	eb43 0905 	adc.w	r9, r3, r5
 80040e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f04f 0100 	mov.w	r1, #0
 80040f2:	f04f 0200 	mov.w	r2, #0
 80040f6:	f04f 0300 	mov.w	r3, #0
 80040fa:	008b      	lsls	r3, r1, #2
 80040fc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004100:	0082      	lsls	r2, r0, #2
 8004102:	4640      	mov	r0, r8
 8004104:	4649      	mov	r1, r9
 8004106:	f7fc f883 	bl	8000210 <__aeabi_uldivmod>
 800410a:	4602      	mov	r2, r0
 800410c:	460b      	mov	r3, r1
 800410e:	4b4e      	ldr	r3, [pc, #312]	; (8004248 <UART_SetConfig+0x734>)
 8004110:	fba3 2302 	umull	r2, r3, r3, r2
 8004114:	095b      	lsrs	r3, r3, #5
 8004116:	011e      	lsls	r6, r3, #4
 8004118:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800411c:	4618      	mov	r0, r3
 800411e:	f04f 0100 	mov.w	r1, #0
 8004122:	4602      	mov	r2, r0
 8004124:	460b      	mov	r3, r1
 8004126:	1894      	adds	r4, r2, r2
 8004128:	60bc      	str	r4, [r7, #8]
 800412a:	415b      	adcs	r3, r3
 800412c:	60fb      	str	r3, [r7, #12]
 800412e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004132:	1812      	adds	r2, r2, r0
 8004134:	eb41 0303 	adc.w	r3, r1, r3
 8004138:	f04f 0400 	mov.w	r4, #0
 800413c:	f04f 0500 	mov.w	r5, #0
 8004140:	00dd      	lsls	r5, r3, #3
 8004142:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004146:	00d4      	lsls	r4, r2, #3
 8004148:	4622      	mov	r2, r4
 800414a:	462b      	mov	r3, r5
 800414c:	1814      	adds	r4, r2, r0
 800414e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8004152:	414b      	adcs	r3, r1
 8004154:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	4618      	mov	r0, r3
 8004160:	f04f 0100 	mov.w	r1, #0
 8004164:	f04f 0200 	mov.w	r2, #0
 8004168:	f04f 0300 	mov.w	r3, #0
 800416c:	008b      	lsls	r3, r1, #2
 800416e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004172:	0082      	lsls	r2, r0, #2
 8004174:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004178:	f7fc f84a 	bl	8000210 <__aeabi_uldivmod>
 800417c:	4602      	mov	r2, r0
 800417e:	460b      	mov	r3, r1
 8004180:	4b31      	ldr	r3, [pc, #196]	; (8004248 <UART_SetConfig+0x734>)
 8004182:	fba3 1302 	umull	r1, r3, r3, r2
 8004186:	095b      	lsrs	r3, r3, #5
 8004188:	2164      	movs	r1, #100	; 0x64
 800418a:	fb01 f303 	mul.w	r3, r1, r3
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	011b      	lsls	r3, r3, #4
 8004192:	3332      	adds	r3, #50	; 0x32
 8004194:	4a2c      	ldr	r2, [pc, #176]	; (8004248 <UART_SetConfig+0x734>)
 8004196:	fba2 2303 	umull	r2, r3, r2, r3
 800419a:	095b      	lsrs	r3, r3, #5
 800419c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041a0:	441e      	add	r6, r3
 80041a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80041a6:	4618      	mov	r0, r3
 80041a8:	f04f 0100 	mov.w	r1, #0
 80041ac:	4602      	mov	r2, r0
 80041ae:	460b      	mov	r3, r1
 80041b0:	1894      	adds	r4, r2, r2
 80041b2:	603c      	str	r4, [r7, #0]
 80041b4:	415b      	adcs	r3, r3
 80041b6:	607b      	str	r3, [r7, #4]
 80041b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041bc:	1812      	adds	r2, r2, r0
 80041be:	eb41 0303 	adc.w	r3, r1, r3
 80041c2:	f04f 0400 	mov.w	r4, #0
 80041c6:	f04f 0500 	mov.w	r5, #0
 80041ca:	00dd      	lsls	r5, r3, #3
 80041cc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80041d0:	00d4      	lsls	r4, r2, #3
 80041d2:	4622      	mov	r2, r4
 80041d4:	462b      	mov	r3, r5
 80041d6:	1814      	adds	r4, r2, r0
 80041d8:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 80041dc:	414b      	adcs	r3, r1
 80041de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80041e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f04f 0100 	mov.w	r1, #0
 80041ee:	f04f 0200 	mov.w	r2, #0
 80041f2:	f04f 0300 	mov.w	r3, #0
 80041f6:	008b      	lsls	r3, r1, #2
 80041f8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80041fc:	0082      	lsls	r2, r0, #2
 80041fe:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8004202:	f7fc f805 	bl	8000210 <__aeabi_uldivmod>
 8004206:	4602      	mov	r2, r0
 8004208:	460b      	mov	r3, r1
 800420a:	4b0f      	ldr	r3, [pc, #60]	; (8004248 <UART_SetConfig+0x734>)
 800420c:	fba3 1302 	umull	r1, r3, r3, r2
 8004210:	095b      	lsrs	r3, r3, #5
 8004212:	2164      	movs	r1, #100	; 0x64
 8004214:	fb01 f303 	mul.w	r3, r1, r3
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	011b      	lsls	r3, r3, #4
 800421c:	3332      	adds	r3, #50	; 0x32
 800421e:	4a0a      	ldr	r2, [pc, #40]	; (8004248 <UART_SetConfig+0x734>)
 8004220:	fba2 2303 	umull	r2, r3, r2, r3
 8004224:	095b      	lsrs	r3, r3, #5
 8004226:	f003 020f 	and.w	r2, r3, #15
 800422a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4432      	add	r2, r6
 8004232:	609a      	str	r2, [r3, #8]
}
 8004234:	e7ff      	b.n	8004236 <UART_SetConfig+0x722>
 8004236:	bf00      	nop
 8004238:	37f4      	adds	r7, #244	; 0xf4
 800423a:	46bd      	mov	sp, r7
 800423c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004240:	40011000 	.word	0x40011000
 8004244:	40011400 	.word	0x40011400
 8004248:	51eb851f 	.word	0x51eb851f

0800424c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800424c:	b084      	sub	sp, #16
 800424e:	b580      	push	{r7, lr}
 8004250:	b084      	sub	sp, #16
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
 8004256:	f107 001c 	add.w	r0, r7, #28
 800425a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800425e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004260:	2b01      	cmp	r3, #1
 8004262:	d122      	bne.n	80042aa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004268:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004278:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800428c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800428e:	2b01      	cmp	r3, #1
 8004290:	d105      	bne.n	800429e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f001 fac0 	bl	8005824 <USB_CoreReset>
 80042a4:	4603      	mov	r3, r0
 80042a6:	73fb      	strb	r3, [r7, #15]
 80042a8:	e01a      	b.n	80042e0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f001 fab4 	bl	8005824 <USB_CoreReset>
 80042bc:	4603      	mov	r3, r0
 80042be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80042c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d106      	bne.n	80042d4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	639a      	str	r2, [r3, #56]	; 0x38
 80042d2:	e005      	b.n	80042e0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80042e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d10b      	bne.n	80042fe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f043 0206 	orr.w	r2, r3, #6
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f043 0220 	orr.w	r2, r3, #32
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80042fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004300:	4618      	mov	r0, r3
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800430a:	b004      	add	sp, #16
 800430c:	4770      	bx	lr
	...

08004310 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004310:	b480      	push	{r7}
 8004312:	b087      	sub	sp, #28
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	4613      	mov	r3, r2
 800431c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800431e:	79fb      	ldrb	r3, [r7, #7]
 8004320:	2b02      	cmp	r3, #2
 8004322:	d165      	bne.n	80043f0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	4a41      	ldr	r2, [pc, #260]	; (800442c <USB_SetTurnaroundTime+0x11c>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d906      	bls.n	800433a <USB_SetTurnaroundTime+0x2a>
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	4a40      	ldr	r2, [pc, #256]	; (8004430 <USB_SetTurnaroundTime+0x120>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d202      	bcs.n	800433a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004334:	230f      	movs	r3, #15
 8004336:	617b      	str	r3, [r7, #20]
 8004338:	e062      	b.n	8004400 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	4a3c      	ldr	r2, [pc, #240]	; (8004430 <USB_SetTurnaroundTime+0x120>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d306      	bcc.n	8004350 <USB_SetTurnaroundTime+0x40>
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	4a3b      	ldr	r2, [pc, #236]	; (8004434 <USB_SetTurnaroundTime+0x124>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d202      	bcs.n	8004350 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800434a:	230e      	movs	r3, #14
 800434c:	617b      	str	r3, [r7, #20]
 800434e:	e057      	b.n	8004400 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	4a38      	ldr	r2, [pc, #224]	; (8004434 <USB_SetTurnaroundTime+0x124>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d306      	bcc.n	8004366 <USB_SetTurnaroundTime+0x56>
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	4a37      	ldr	r2, [pc, #220]	; (8004438 <USB_SetTurnaroundTime+0x128>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d202      	bcs.n	8004366 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004360:	230d      	movs	r3, #13
 8004362:	617b      	str	r3, [r7, #20]
 8004364:	e04c      	b.n	8004400 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	4a33      	ldr	r2, [pc, #204]	; (8004438 <USB_SetTurnaroundTime+0x128>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d306      	bcc.n	800437c <USB_SetTurnaroundTime+0x6c>
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	4a32      	ldr	r2, [pc, #200]	; (800443c <USB_SetTurnaroundTime+0x12c>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d802      	bhi.n	800437c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004376:	230c      	movs	r3, #12
 8004378:	617b      	str	r3, [r7, #20]
 800437a:	e041      	b.n	8004400 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	4a2f      	ldr	r2, [pc, #188]	; (800443c <USB_SetTurnaroundTime+0x12c>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d906      	bls.n	8004392 <USB_SetTurnaroundTime+0x82>
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	4a2e      	ldr	r2, [pc, #184]	; (8004440 <USB_SetTurnaroundTime+0x130>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d802      	bhi.n	8004392 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800438c:	230b      	movs	r3, #11
 800438e:	617b      	str	r3, [r7, #20]
 8004390:	e036      	b.n	8004400 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	4a2a      	ldr	r2, [pc, #168]	; (8004440 <USB_SetTurnaroundTime+0x130>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d906      	bls.n	80043a8 <USB_SetTurnaroundTime+0x98>
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	4a29      	ldr	r2, [pc, #164]	; (8004444 <USB_SetTurnaroundTime+0x134>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d802      	bhi.n	80043a8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80043a2:	230a      	movs	r3, #10
 80043a4:	617b      	str	r3, [r7, #20]
 80043a6:	e02b      	b.n	8004400 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	4a26      	ldr	r2, [pc, #152]	; (8004444 <USB_SetTurnaroundTime+0x134>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d906      	bls.n	80043be <USB_SetTurnaroundTime+0xae>
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	4a25      	ldr	r2, [pc, #148]	; (8004448 <USB_SetTurnaroundTime+0x138>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d202      	bcs.n	80043be <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80043b8:	2309      	movs	r3, #9
 80043ba:	617b      	str	r3, [r7, #20]
 80043bc:	e020      	b.n	8004400 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	4a21      	ldr	r2, [pc, #132]	; (8004448 <USB_SetTurnaroundTime+0x138>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d306      	bcc.n	80043d4 <USB_SetTurnaroundTime+0xc4>
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	4a20      	ldr	r2, [pc, #128]	; (800444c <USB_SetTurnaroundTime+0x13c>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d802      	bhi.n	80043d4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80043ce:	2308      	movs	r3, #8
 80043d0:	617b      	str	r3, [r7, #20]
 80043d2:	e015      	b.n	8004400 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	4a1d      	ldr	r2, [pc, #116]	; (800444c <USB_SetTurnaroundTime+0x13c>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d906      	bls.n	80043ea <USB_SetTurnaroundTime+0xda>
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	4a1c      	ldr	r2, [pc, #112]	; (8004450 <USB_SetTurnaroundTime+0x140>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d202      	bcs.n	80043ea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80043e4:	2307      	movs	r3, #7
 80043e6:	617b      	str	r3, [r7, #20]
 80043e8:	e00a      	b.n	8004400 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80043ea:	2306      	movs	r3, #6
 80043ec:	617b      	str	r3, [r7, #20]
 80043ee:	e007      	b.n	8004400 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80043f0:	79fb      	ldrb	r3, [r7, #7]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d102      	bne.n	80043fc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80043f6:	2309      	movs	r3, #9
 80043f8:	617b      	str	r3, [r7, #20]
 80043fa:	e001      	b.n	8004400 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80043fc:	2309      	movs	r3, #9
 80043fe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	68da      	ldr	r2, [r3, #12]
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	029b      	lsls	r3, r3, #10
 8004414:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004418:	431a      	orrs	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	371c      	adds	r7, #28
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr
 800442c:	00d8acbf 	.word	0x00d8acbf
 8004430:	00e4e1c0 	.word	0x00e4e1c0
 8004434:	00f42400 	.word	0x00f42400
 8004438:	01067380 	.word	0x01067380
 800443c:	011a499f 	.word	0x011a499f
 8004440:	01312cff 	.word	0x01312cff
 8004444:	014ca43f 	.word	0x014ca43f
 8004448:	016e3600 	.word	0x016e3600
 800444c:	01a6ab1f 	.word	0x01a6ab1f
 8004450:	01e84800 	.word	0x01e84800

08004454 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f043 0201 	orr.w	r2, r3, #1
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004476:	b480      	push	{r7}
 8004478:	b083      	sub	sp, #12
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f023 0201 	bic.w	r2, r3, #1
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	460b      	mov	r3, r1
 80044a2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80044b0:	78fb      	ldrb	r3, [r7, #3]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d106      	bne.n	80044c4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	60da      	str	r2, [r3, #12]
 80044c2:	e00b      	b.n	80044dc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80044c4:	78fb      	ldrb	r3, [r7, #3]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d106      	bne.n	80044d8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	60da      	str	r2, [r3, #12]
 80044d6:	e001      	b.n	80044dc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e003      	b.n	80044e4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80044dc:	2032      	movs	r0, #50	; 0x32
 80044de:	f7fc fba1 	bl	8000c24 <HAL_Delay>

  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3708      	adds	r7, #8
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044ec:	b084      	sub	sp, #16
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b086      	sub	sp, #24
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
 80044f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80044fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80044fe:	2300      	movs	r3, #0
 8004500:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004506:	2300      	movs	r3, #0
 8004508:	613b      	str	r3, [r7, #16]
 800450a:	e009      	b.n	8004520 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	3340      	adds	r3, #64	; 0x40
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	2200      	movs	r2, #0
 8004518:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	3301      	adds	r3, #1
 800451e:	613b      	str	r3, [r7, #16]
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	2b0e      	cmp	r3, #14
 8004524:	d9f2      	bls.n	800450c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004528:	2b00      	cmp	r3, #0
 800452a:	d11c      	bne.n	8004566 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800453a:	f043 0302 	orr.w	r3, r3, #2
 800453e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004544:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	601a      	str	r2, [r3, #0]
 8004564:	e005      	b.n	8004572 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004578:	461a      	mov	r2, r3
 800457a:	2300      	movs	r3, #0
 800457c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004584:	4619      	mov	r1, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800458c:	461a      	mov	r2, r3
 800458e:	680b      	ldr	r3, [r1, #0]
 8004590:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004594:	2b01      	cmp	r3, #1
 8004596:	d10c      	bne.n	80045b2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800459a:	2b00      	cmp	r3, #0
 800459c:	d104      	bne.n	80045a8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800459e:	2100      	movs	r1, #0
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 f949 	bl	8004838 <USB_SetDevSpeed>
 80045a6:	e008      	b.n	80045ba <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80045a8:	2101      	movs	r1, #1
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f944 	bl	8004838 <USB_SetDevSpeed>
 80045b0:	e003      	b.n	80045ba <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80045b2:	2103      	movs	r1, #3
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f93f 	bl	8004838 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80045ba:	2110      	movs	r1, #16
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 f8f3 	bl	80047a8 <USB_FlushTxFifo>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 f911 	bl	80047f4 <USB_FlushRxFifo>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d001      	beq.n	80045dc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045e2:	461a      	mov	r2, r3
 80045e4:	2300      	movs	r3, #0
 80045e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ee:	461a      	mov	r2, r3
 80045f0:	2300      	movs	r3, #0
 80045f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045fa:	461a      	mov	r2, r3
 80045fc:	2300      	movs	r3, #0
 80045fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004600:	2300      	movs	r3, #0
 8004602:	613b      	str	r3, [r7, #16]
 8004604:	e043      	b.n	800468e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	015a      	lsls	r2, r3, #5
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	4413      	add	r3, r2
 800460e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004618:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800461c:	d118      	bne.n	8004650 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10a      	bne.n	800463a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	4413      	add	r3, r2
 800462c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004630:	461a      	mov	r2, r3
 8004632:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004636:	6013      	str	r3, [r2, #0]
 8004638:	e013      	b.n	8004662 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	015a      	lsls	r2, r3, #5
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	4413      	add	r3, r2
 8004642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004646:	461a      	mov	r2, r3
 8004648:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800464c:	6013      	str	r3, [r2, #0]
 800464e:	e008      	b.n	8004662 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	015a      	lsls	r2, r3, #5
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	4413      	add	r3, r2
 8004658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800465c:	461a      	mov	r2, r3
 800465e:	2300      	movs	r3, #0
 8004660:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	015a      	lsls	r2, r3, #5
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	4413      	add	r3, r2
 800466a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800466e:	461a      	mov	r2, r3
 8004670:	2300      	movs	r3, #0
 8004672:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	015a      	lsls	r2, r3, #5
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	4413      	add	r3, r2
 800467c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004680:	461a      	mov	r2, r3
 8004682:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004686:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	3301      	adds	r3, #1
 800468c:	613b      	str	r3, [r7, #16]
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	429a      	cmp	r2, r3
 8004694:	d3b7      	bcc.n	8004606 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004696:	2300      	movs	r3, #0
 8004698:	613b      	str	r3, [r7, #16]
 800469a:	e043      	b.n	8004724 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046b2:	d118      	bne.n	80046e6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10a      	bne.n	80046d0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	015a      	lsls	r2, r3, #5
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	4413      	add	r3, r2
 80046c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c6:	461a      	mov	r2, r3
 80046c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80046cc:	6013      	str	r3, [r2, #0]
 80046ce:	e013      	b.n	80046f8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046dc:	461a      	mov	r2, r3
 80046de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80046e2:	6013      	str	r3, [r2, #0]
 80046e4:	e008      	b.n	80046f8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	015a      	lsls	r2, r3, #5
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f2:	461a      	mov	r2, r3
 80046f4:	2300      	movs	r3, #0
 80046f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004704:	461a      	mov	r2, r3
 8004706:	2300      	movs	r3, #0
 8004708:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	015a      	lsls	r2, r3, #5
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	4413      	add	r3, r2
 8004712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004716:	461a      	mov	r2, r3
 8004718:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800471c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	3301      	adds	r3, #1
 8004722:	613b      	str	r3, [r7, #16]
 8004724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	429a      	cmp	r2, r3
 800472a:	d3b7      	bcc.n	800469c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800473a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800473e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800474c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800474e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004750:	2b00      	cmp	r3, #0
 8004752:	d105      	bne.n	8004760 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	f043 0210 	orr.w	r2, r3, #16
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	699a      	ldr	r2, [r3, #24]
 8004764:	4b0f      	ldr	r3, [pc, #60]	; (80047a4 <USB_DevInit+0x2b8>)
 8004766:	4313      	orrs	r3, r2
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800476c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800476e:	2b00      	cmp	r3, #0
 8004770:	d005      	beq.n	800477e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	f043 0208 	orr.w	r2, r3, #8
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800477e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004780:	2b01      	cmp	r3, #1
 8004782:	d107      	bne.n	8004794 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800478c:	f043 0304 	orr.w	r3, r3, #4
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004794:	7dfb      	ldrb	r3, [r7, #23]
}
 8004796:	4618      	mov	r0, r3
 8004798:	3718      	adds	r7, #24
 800479a:	46bd      	mov	sp, r7
 800479c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047a0:	b004      	add	sp, #16
 80047a2:	4770      	bx	lr
 80047a4:	803c3800 	.word	0x803c3800

080047a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80047b2:	2300      	movs	r3, #0
 80047b4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	019b      	lsls	r3, r3, #6
 80047ba:	f043 0220 	orr.w	r2, r3, #32
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	3301      	adds	r3, #1
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	4a09      	ldr	r2, [pc, #36]	; (80047f0 <USB_FlushTxFifo+0x48>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d901      	bls.n	80047d4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e006      	b.n	80047e2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	f003 0320 	and.w	r3, r3, #32
 80047dc:	2b20      	cmp	r3, #32
 80047de:	d0f0      	beq.n	80047c2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	00030d40 	.word	0x00030d40

080047f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80047fc:	2300      	movs	r3, #0
 80047fe:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2210      	movs	r2, #16
 8004804:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	3301      	adds	r3, #1
 800480a:	60fb      	str	r3, [r7, #12]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4a09      	ldr	r2, [pc, #36]	; (8004834 <USB_FlushRxFifo+0x40>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d901      	bls.n	8004818 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e006      	b.n	8004826 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	f003 0310 	and.w	r3, r3, #16
 8004820:	2b10      	cmp	r3, #16
 8004822:	d0f0      	beq.n	8004806 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3714      	adds	r7, #20
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	00030d40 	.word	0x00030d40

08004838 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	460b      	mov	r3, r1
 8004842:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	78fb      	ldrb	r3, [r7, #3]
 8004852:	68f9      	ldr	r1, [r7, #12]
 8004854:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004858:	4313      	orrs	r3, r2
 800485a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800486a:	b480      	push	{r7}
 800486c:	b087      	sub	sp, #28
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 0306 	and.w	r3, r3, #6
 8004882:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d102      	bne.n	8004890 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800488a:	2300      	movs	r3, #0
 800488c:	75fb      	strb	r3, [r7, #23]
 800488e:	e00a      	b.n	80048a6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2b02      	cmp	r3, #2
 8004894:	d002      	beq.n	800489c <USB_GetDevSpeed+0x32>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2b06      	cmp	r3, #6
 800489a:	d102      	bne.n	80048a2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800489c:	2302      	movs	r3, #2
 800489e:	75fb      	strb	r3, [r7, #23]
 80048a0:	e001      	b.n	80048a6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80048a2:	230f      	movs	r3, #15
 80048a4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80048a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	371c      	adds	r7, #28
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	785b      	ldrb	r3, [r3, #1]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d13a      	bne.n	8004946 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048d6:	69da      	ldr	r2, [r3, #28]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	f003 030f 	and.w	r3, r3, #15
 80048e0:	2101      	movs	r1, #1
 80048e2:	fa01 f303 	lsl.w	r3, r1, r3
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	68f9      	ldr	r1, [r7, #12]
 80048ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048ee:	4313      	orrs	r3, r2
 80048f0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	015a      	lsls	r2, r3, #5
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	4413      	add	r3, r2
 80048fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d155      	bne.n	80049b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	015a      	lsls	r2, r3, #5
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4413      	add	r3, r2
 8004910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	78db      	ldrb	r3, [r3, #3]
 8004922:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004924:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	059b      	lsls	r3, r3, #22
 800492a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800492c:	4313      	orrs	r3, r2
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	0151      	lsls	r1, r2, #5
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	440a      	add	r2, r1
 8004936:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800493a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800493e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004942:	6013      	str	r3, [r2, #0]
 8004944:	e036      	b.n	80049b4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800494c:	69da      	ldr	r2, [r3, #28]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	f003 030f 	and.w	r3, r3, #15
 8004956:	2101      	movs	r1, #1
 8004958:	fa01 f303 	lsl.w	r3, r1, r3
 800495c:	041b      	lsls	r3, r3, #16
 800495e:	68f9      	ldr	r1, [r7, #12]
 8004960:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004964:	4313      	orrs	r3, r2
 8004966:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	015a      	lsls	r2, r3, #5
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4413      	add	r3, r2
 8004970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d11a      	bne.n	80049b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	015a      	lsls	r2, r3, #5
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	4413      	add	r3, r2
 8004986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	78db      	ldrb	r3, [r3, #3]
 8004998:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800499a:	430b      	orrs	r3, r1
 800499c:	4313      	orrs	r3, r2
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	0151      	lsls	r1, r2, #5
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	440a      	add	r2, r1
 80049a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049b2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
	...

080049c4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	785b      	ldrb	r3, [r3, #1]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d161      	bne.n	8004aa4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	015a      	lsls	r2, r3, #5
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	4413      	add	r3, r2
 80049e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049f6:	d11f      	bne.n	8004a38 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	015a      	lsls	r2, r3, #5
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	4413      	add	r3, r2
 8004a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68ba      	ldr	r2, [r7, #8]
 8004a08:	0151      	lsls	r1, r2, #5
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	440a      	add	r2, r1
 8004a0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a12:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a16:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	015a      	lsls	r2, r3, #5
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	4413      	add	r3, r2
 8004a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	0151      	lsls	r1, r2, #5
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	440a      	add	r2, r1
 8004a2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a36:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	f003 030f 	and.w	r3, r3, #15
 8004a48:	2101      	movs	r1, #1
 8004a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	43db      	mvns	r3, r3
 8004a52:	68f9      	ldr	r1, [r7, #12]
 8004a54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a58:	4013      	ands	r3, r2
 8004a5a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a62:	69da      	ldr	r2, [r3, #28]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	f003 030f 	and.w	r3, r3, #15
 8004a6c:	2101      	movs	r1, #1
 8004a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	43db      	mvns	r3, r3
 8004a76:	68f9      	ldr	r1, [r7, #12]
 8004a78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	015a      	lsls	r2, r3, #5
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4413      	add	r3, r2
 8004a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	0159      	lsls	r1, r3, #5
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	440b      	add	r3, r1
 8004a96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	4b35      	ldr	r3, [pc, #212]	; (8004b74 <USB_DeactivateEndpoint+0x1b0>)
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	600b      	str	r3, [r1, #0]
 8004aa2:	e060      	b.n	8004b66 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	015a      	lsls	r2, r3, #5
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	4413      	add	r3, r2
 8004aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ab6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004aba:	d11f      	bne.n	8004afc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	015a      	lsls	r2, r3, #5
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	0151      	lsls	r1, r2, #5
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	440a      	add	r2, r1
 8004ad2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ad6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ada:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	015a      	lsls	r2, r3, #5
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	0151      	lsls	r1, r2, #5
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	440a      	add	r2, r1
 8004af2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004af6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004afa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	f003 030f 	and.w	r3, r3, #15
 8004b0c:	2101      	movs	r1, #1
 8004b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b12:	041b      	lsls	r3, r3, #16
 8004b14:	43db      	mvns	r3, r3
 8004b16:	68f9      	ldr	r1, [r7, #12]
 8004b18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b26:	69da      	ldr	r2, [r3, #28]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	f003 030f 	and.w	r3, r3, #15
 8004b30:	2101      	movs	r1, #1
 8004b32:	fa01 f303 	lsl.w	r3, r1, r3
 8004b36:	041b      	lsls	r3, r3, #16
 8004b38:	43db      	mvns	r3, r3
 8004b3a:	68f9      	ldr	r1, [r7, #12]
 8004b3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b40:	4013      	ands	r3, r2
 8004b42:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	015a      	lsls	r2, r3, #5
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	0159      	lsls	r1, r3, #5
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	440b      	add	r3, r1
 8004b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b5e:	4619      	mov	r1, r3
 8004b60:	4b05      	ldr	r3, [pc, #20]	; (8004b78 <USB_DeactivateEndpoint+0x1b4>)
 8004b62:	4013      	ands	r3, r2
 8004b64:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	ec337800 	.word	0xec337800
 8004b78:	eff37800 	.word	0xeff37800

08004b7c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b08a      	sub	sp, #40	; 0x28
 8004b80:	af02      	add	r7, sp, #8
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	4613      	mov	r3, r2
 8004b88:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	785b      	ldrb	r3, [r3, #1]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	f040 815c 	bne.w	8004e56 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d132      	bne.n	8004c0c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	015a      	lsls	r2, r3, #5
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	4413      	add	r3, r2
 8004bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	69ba      	ldr	r2, [r7, #24]
 8004bb6:	0151      	lsls	r1, r2, #5
 8004bb8:	69fa      	ldr	r2, [r7, #28]
 8004bba:	440a      	add	r2, r1
 8004bbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bc0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004bc4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004bc8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	015a      	lsls	r2, r3, #5
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	0151      	lsls	r1, r2, #5
 8004bdc:	69fa      	ldr	r2, [r7, #28]
 8004bde:	440a      	add	r2, r1
 8004be0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004be4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004be8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	015a      	lsls	r2, r3, #5
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	0151      	lsls	r1, r2, #5
 8004bfc:	69fa      	ldr	r2, [r7, #28]
 8004bfe:	440a      	add	r2, r1
 8004c00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c04:	0cdb      	lsrs	r3, r3, #19
 8004c06:	04db      	lsls	r3, r3, #19
 8004c08:	6113      	str	r3, [r2, #16]
 8004c0a:	e074      	b.n	8004cf6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	015a      	lsls	r2, r3, #5
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	4413      	add	r3, r2
 8004c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	69ba      	ldr	r2, [r7, #24]
 8004c1c:	0151      	lsls	r1, r2, #5
 8004c1e:	69fa      	ldr	r2, [r7, #28]
 8004c20:	440a      	add	r2, r1
 8004c22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c26:	0cdb      	lsrs	r3, r3, #19
 8004c28:	04db      	lsls	r3, r3, #19
 8004c2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	69ba      	ldr	r2, [r7, #24]
 8004c3c:	0151      	lsls	r1, r2, #5
 8004c3e:	69fa      	ldr	r2, [r7, #28]
 8004c40:	440a      	add	r2, r1
 8004c42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c46:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c4a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	015a      	lsls	r2, r3, #5
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	4413      	add	r3, r2
 8004c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c5c:	691a      	ldr	r2, [r3, #16]
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	6959      	ldr	r1, [r3, #20]
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	440b      	add	r3, r1
 8004c68:	1e59      	subs	r1, r3, #1
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c72:	04d9      	lsls	r1, r3, #19
 8004c74:	4b9d      	ldr	r3, [pc, #628]	; (8004eec <USB_EPStartXfer+0x370>)
 8004c76:	400b      	ands	r3, r1
 8004c78:	69b9      	ldr	r1, [r7, #24]
 8004c7a:	0148      	lsls	r0, r1, #5
 8004c7c:	69f9      	ldr	r1, [r7, #28]
 8004c7e:	4401      	add	r1, r0
 8004c80:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004c84:	4313      	orrs	r3, r2
 8004c86:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	015a      	lsls	r2, r3, #5
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	4413      	add	r3, r2
 8004c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c94:	691a      	ldr	r2, [r3, #16]
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c9e:	69b9      	ldr	r1, [r7, #24]
 8004ca0:	0148      	lsls	r0, r1, #5
 8004ca2:	69f9      	ldr	r1, [r7, #28]
 8004ca4:	4401      	add	r1, r0
 8004ca6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004caa:	4313      	orrs	r3, r2
 8004cac:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	78db      	ldrb	r3, [r3, #3]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d11f      	bne.n	8004cf6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	015a      	lsls	r2, r3, #5
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	69ba      	ldr	r2, [r7, #24]
 8004cc6:	0151      	lsls	r1, r2, #5
 8004cc8:	69fa      	ldr	r2, [r7, #28]
 8004cca:	440a      	add	r2, r1
 8004ccc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cd0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004cd4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	015a      	lsls	r2, r3, #5
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	4413      	add	r3, r2
 8004cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	0151      	lsls	r1, r2, #5
 8004ce8:	69fa      	ldr	r2, [r7, #28]
 8004cea:	440a      	add	r2, r1
 8004cec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cf0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cf4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004cf6:	79fb      	ldrb	r3, [r7, #7]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d14b      	bne.n	8004d94 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d009      	beq.n	8004d18 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	015a      	lsls	r2, r3, #5
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d10:	461a      	mov	r2, r3
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	78db      	ldrb	r3, [r3, #3]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d128      	bne.n	8004d72 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d110      	bne.n	8004d52 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	015a      	lsls	r2, r3, #5
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	4413      	add	r3, r2
 8004d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	69ba      	ldr	r2, [r7, #24]
 8004d40:	0151      	lsls	r1, r2, #5
 8004d42:	69fa      	ldr	r2, [r7, #28]
 8004d44:	440a      	add	r2, r1
 8004d46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d4a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d4e:	6013      	str	r3, [r2, #0]
 8004d50:	e00f      	b.n	8004d72 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	015a      	lsls	r2, r3, #5
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	4413      	add	r3, r2
 8004d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	69ba      	ldr	r2, [r7, #24]
 8004d62:	0151      	lsls	r1, r2, #5
 8004d64:	69fa      	ldr	r2, [r7, #28]
 8004d66:	440a      	add	r2, r1
 8004d68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d70:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	0151      	lsls	r1, r2, #5
 8004d84:	69fa      	ldr	r2, [r7, #28]
 8004d86:	440a      	add	r2, r1
 8004d88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d8c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d90:	6013      	str	r3, [r2, #0]
 8004d92:	e12f      	b.n	8004ff4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	015a      	lsls	r2, r3, #5
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	69ba      	ldr	r2, [r7, #24]
 8004da4:	0151      	lsls	r1, r2, #5
 8004da6:	69fa      	ldr	r2, [r7, #28]
 8004da8:	440a      	add	r2, r1
 8004daa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004db2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	78db      	ldrb	r3, [r3, #3]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d015      	beq.n	8004de8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f000 8117 	beq.w	8004ff4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	f003 030f 	and.w	r3, r3, #15
 8004dd6:	2101      	movs	r1, #1
 8004dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8004ddc:	69f9      	ldr	r1, [r7, #28]
 8004dde:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004de2:	4313      	orrs	r3, r2
 8004de4:	634b      	str	r3, [r1, #52]	; 0x34
 8004de6:	e105      	b.n	8004ff4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d110      	bne.n	8004e1a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	69ba      	ldr	r2, [r7, #24]
 8004e08:	0151      	lsls	r1, r2, #5
 8004e0a:	69fa      	ldr	r2, [r7, #28]
 8004e0c:	440a      	add	r2, r1
 8004e0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e12:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e16:	6013      	str	r3, [r2, #0]
 8004e18:	e00f      	b.n	8004e3a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	015a      	lsls	r2, r3, #5
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	4413      	add	r3, r2
 8004e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	69ba      	ldr	r2, [r7, #24]
 8004e2a:	0151      	lsls	r1, r2, #5
 8004e2c:	69fa      	ldr	r2, [r7, #28]
 8004e2e:	440a      	add	r2, r1
 8004e30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e38:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	68d9      	ldr	r1, [r3, #12]
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	781a      	ldrb	r2, [r3, #0]
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	b298      	uxth	r0, r3
 8004e48:	79fb      	ldrb	r3, [r7, #7]
 8004e4a:	9300      	str	r3, [sp, #0]
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	68f8      	ldr	r0, [r7, #12]
 8004e50:	f000 fa2b 	bl	80052aa <USB_WritePacket>
 8004e54:	e0ce      	b.n	8004ff4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	015a      	lsls	r2, r3, #5
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	69ba      	ldr	r2, [r7, #24]
 8004e66:	0151      	lsls	r1, r2, #5
 8004e68:	69fa      	ldr	r2, [r7, #28]
 8004e6a:	440a      	add	r2, r1
 8004e6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e70:	0cdb      	lsrs	r3, r3, #19
 8004e72:	04db      	lsls	r3, r3, #19
 8004e74:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	015a      	lsls	r2, r3, #5
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	0151      	lsls	r1, r2, #5
 8004e88:	69fa      	ldr	r2, [r7, #28]
 8004e8a:	440a      	add	r2, r1
 8004e8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e90:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e94:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e98:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d126      	bne.n	8004ef0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	015a      	lsls	r2, r3, #5
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eae:	691a      	ldr	r2, [r3, #16]
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eb8:	69b9      	ldr	r1, [r7, #24]
 8004eba:	0148      	lsls	r0, r1, #5
 8004ebc:	69f9      	ldr	r1, [r7, #28]
 8004ebe:	4401      	add	r1, r0
 8004ec0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	015a      	lsls	r2, r3, #5
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	4413      	add	r3, r2
 8004ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	69ba      	ldr	r2, [r7, #24]
 8004ed8:	0151      	lsls	r1, r2, #5
 8004eda:	69fa      	ldr	r2, [r7, #28]
 8004edc:	440a      	add	r2, r1
 8004ede:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ee2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ee6:	6113      	str	r3, [r2, #16]
 8004ee8:	e036      	b.n	8004f58 <USB_EPStartXfer+0x3dc>
 8004eea:	bf00      	nop
 8004eec:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	695a      	ldr	r2, [r3, #20]
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	4413      	add	r3, r2
 8004efa:	1e5a      	subs	r2, r3, #1
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f04:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	015a      	lsls	r2, r3, #5
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f12:	691a      	ldr	r2, [r3, #16]
 8004f14:	8afb      	ldrh	r3, [r7, #22]
 8004f16:	04d9      	lsls	r1, r3, #19
 8004f18:	4b39      	ldr	r3, [pc, #228]	; (8005000 <USB_EPStartXfer+0x484>)
 8004f1a:	400b      	ands	r3, r1
 8004f1c:	69b9      	ldr	r1, [r7, #24]
 8004f1e:	0148      	lsls	r0, r1, #5
 8004f20:	69f9      	ldr	r1, [r7, #28]
 8004f22:	4401      	add	r1, r0
 8004f24:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	015a      	lsls	r2, r3, #5
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	4413      	add	r3, r2
 8004f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f38:	691a      	ldr	r2, [r3, #16]
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	8af9      	ldrh	r1, [r7, #22]
 8004f40:	fb01 f303 	mul.w	r3, r1, r3
 8004f44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f48:	69b9      	ldr	r1, [r7, #24]
 8004f4a:	0148      	lsls	r0, r1, #5
 8004f4c:	69f9      	ldr	r1, [r7, #28]
 8004f4e:	4401      	add	r1, r0
 8004f50:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f54:	4313      	orrs	r3, r2
 8004f56:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004f58:	79fb      	ldrb	r3, [r7, #7]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d10d      	bne.n	8004f7a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d009      	beq.n	8004f7a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	68d9      	ldr	r1, [r3, #12]
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	015a      	lsls	r2, r3, #5
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	4413      	add	r3, r2
 8004f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f76:	460a      	mov	r2, r1
 8004f78:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	78db      	ldrb	r3, [r3, #3]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d128      	bne.n	8004fd4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d110      	bne.n	8004fb4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	015a      	lsls	r2, r3, #5
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	4413      	add	r3, r2
 8004f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	0151      	lsls	r1, r2, #5
 8004fa4:	69fa      	ldr	r2, [r7, #28]
 8004fa6:	440a      	add	r2, r1
 8004fa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fb0:	6013      	str	r3, [r2, #0]
 8004fb2:	e00f      	b.n	8004fd4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	015a      	lsls	r2, r3, #5
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	4413      	add	r3, r2
 8004fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	0151      	lsls	r1, r2, #5
 8004fc6:	69fa      	ldr	r2, [r7, #28]
 8004fc8:	440a      	add	r2, r1
 8004fca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fd2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	015a      	lsls	r2, r3, #5
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	4413      	add	r3, r2
 8004fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	69ba      	ldr	r2, [r7, #24]
 8004fe4:	0151      	lsls	r1, r2, #5
 8004fe6:	69fa      	ldr	r2, [r7, #28]
 8004fe8:	440a      	add	r2, r1
 8004fea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ff2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3720      	adds	r7, #32
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	1ff80000 	.word	0x1ff80000

08005004 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005004:	b480      	push	{r7}
 8005006:	b087      	sub	sp, #28
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	4613      	mov	r3, r2
 8005010:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	785b      	ldrb	r3, [r3, #1]
 8005020:	2b01      	cmp	r3, #1
 8005022:	f040 80cd 	bne.w	80051c0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d132      	bne.n	8005094 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	015a      	lsls	r2, r3, #5
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	4413      	add	r3, r2
 8005036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	0151      	lsls	r1, r2, #5
 8005040:	697a      	ldr	r2, [r7, #20]
 8005042:	440a      	add	r2, r1
 8005044:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005048:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800504c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005050:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	015a      	lsls	r2, r3, #5
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	4413      	add	r3, r2
 800505a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	0151      	lsls	r1, r2, #5
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	440a      	add	r2, r1
 8005068:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800506c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005070:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	015a      	lsls	r2, r3, #5
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	4413      	add	r3, r2
 800507a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	0151      	lsls	r1, r2, #5
 8005084:	697a      	ldr	r2, [r7, #20]
 8005086:	440a      	add	r2, r1
 8005088:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800508c:	0cdb      	lsrs	r3, r3, #19
 800508e:	04db      	lsls	r3, r3, #19
 8005090:	6113      	str	r3, [r2, #16]
 8005092:	e04e      	b.n	8005132 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	015a      	lsls	r2, r3, #5
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	4413      	add	r3, r2
 800509c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	0151      	lsls	r1, r2, #5
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	440a      	add	r2, r1
 80050aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ae:	0cdb      	lsrs	r3, r3, #19
 80050b0:	04db      	lsls	r3, r3, #19
 80050b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	015a      	lsls	r2, r3, #5
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	4413      	add	r3, r2
 80050bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	0151      	lsls	r1, r2, #5
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	440a      	add	r2, r1
 80050ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050d6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	695a      	ldr	r2, [r3, #20]
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d903      	bls.n	80050ec <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	689a      	ldr	r2, [r3, #8]
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	015a      	lsls	r2, r3, #5
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	4413      	add	r3, r2
 80050f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	0151      	lsls	r1, r2, #5
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	440a      	add	r2, r1
 8005102:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005106:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800510a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	015a      	lsls	r2, r3, #5
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	4413      	add	r3, r2
 8005114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005118:	691a      	ldr	r2, [r3, #16]
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005122:	6939      	ldr	r1, [r7, #16]
 8005124:	0148      	lsls	r0, r1, #5
 8005126:	6979      	ldr	r1, [r7, #20]
 8005128:	4401      	add	r1, r0
 800512a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800512e:	4313      	orrs	r3, r2
 8005130:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005132:	79fb      	ldrb	r3, [r7, #7]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d11e      	bne.n	8005176 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d009      	beq.n	8005154 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	015a      	lsls	r2, r3, #5
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	4413      	add	r3, r2
 8005148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800514c:	461a      	mov	r2, r3
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	4413      	add	r3, r2
 800515c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	0151      	lsls	r1, r2, #5
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	440a      	add	r2, r1
 800516a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800516e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005172:	6013      	str	r3, [r2, #0]
 8005174:	e092      	b.n	800529c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	015a      	lsls	r2, r3, #5
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	4413      	add	r3, r2
 800517e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	0151      	lsls	r1, r2, #5
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	440a      	add	r2, r1
 800518c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005190:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005194:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d07e      	beq.n	800529c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	f003 030f 	and.w	r3, r3, #15
 80051ae:	2101      	movs	r1, #1
 80051b0:	fa01 f303 	lsl.w	r3, r1, r3
 80051b4:	6979      	ldr	r1, [r7, #20]
 80051b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051ba:	4313      	orrs	r3, r2
 80051bc:	634b      	str	r3, [r1, #52]	; 0x34
 80051be:	e06d      	b.n	800529c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	0151      	lsls	r1, r2, #5
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	440a      	add	r2, r1
 80051d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051da:	0cdb      	lsrs	r3, r3, #19
 80051dc:	04db      	lsls	r3, r3, #19
 80051de:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	0151      	lsls	r1, r2, #5
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	440a      	add	r2, r1
 80051f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005202:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d003      	beq.n	8005214 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	689a      	ldr	r2, [r3, #8]
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	4413      	add	r3, r2
 800521c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	0151      	lsls	r1, r2, #5
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	440a      	add	r2, r1
 800522a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800522e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005232:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	015a      	lsls	r2, r3, #5
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	4413      	add	r3, r2
 800523c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005240:	691a      	ldr	r2, [r3, #16]
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800524a:	6939      	ldr	r1, [r7, #16]
 800524c:	0148      	lsls	r0, r1, #5
 800524e:	6979      	ldr	r1, [r7, #20]
 8005250:	4401      	add	r1, r0
 8005252:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005256:	4313      	orrs	r3, r2
 8005258:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800525a:	79fb      	ldrb	r3, [r7, #7]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d10d      	bne.n	800527c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d009      	beq.n	800527c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	68d9      	ldr	r1, [r3, #12]
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	015a      	lsls	r2, r3, #5
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	4413      	add	r3, r2
 8005274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005278:	460a      	mov	r2, r1
 800527a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	4413      	add	r3, r2
 8005284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	0151      	lsls	r1, r2, #5
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	440a      	add	r2, r1
 8005292:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005296:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800529a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	371c      	adds	r7, #28
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b089      	sub	sp, #36	; 0x24
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	60f8      	str	r0, [r7, #12]
 80052b2:	60b9      	str	r1, [r7, #8]
 80052b4:	4611      	mov	r1, r2
 80052b6:	461a      	mov	r2, r3
 80052b8:	460b      	mov	r3, r1
 80052ba:	71fb      	strb	r3, [r7, #7]
 80052bc:	4613      	mov	r3, r2
 80052be:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80052c8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d11a      	bne.n	8005306 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80052d0:	88bb      	ldrh	r3, [r7, #4]
 80052d2:	3303      	adds	r3, #3
 80052d4:	089b      	lsrs	r3, r3, #2
 80052d6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80052d8:	2300      	movs	r3, #0
 80052da:	61bb      	str	r3, [r7, #24]
 80052dc:	e00f      	b.n	80052fe <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80052de:	79fb      	ldrb	r3, [r7, #7]
 80052e0:	031a      	lsls	r2, r3, #12
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	4413      	add	r3, r2
 80052e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052ea:	461a      	mov	r2, r3
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	6013      	str	r3, [r2, #0]
      pSrc++;
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	3304      	adds	r3, #4
 80052f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	3301      	adds	r3, #1
 80052fc:	61bb      	str	r3, [r7, #24]
 80052fe:	69ba      	ldr	r2, [r7, #24]
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	429a      	cmp	r2, r3
 8005304:	d3eb      	bcc.n	80052de <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3724      	adds	r7, #36	; 0x24
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005314:	b480      	push	{r7}
 8005316:	b089      	sub	sp, #36	; 0x24
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	4613      	mov	r3, r2
 8005320:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800532a:	88fb      	ldrh	r3, [r7, #6]
 800532c:	3303      	adds	r3, #3
 800532e:	089b      	lsrs	r3, r3, #2
 8005330:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005332:	2300      	movs	r3, #0
 8005334:	61bb      	str	r3, [r7, #24]
 8005336:	e00b      	b.n	8005350 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	601a      	str	r2, [r3, #0]
    pDest++;
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	3304      	adds	r3, #4
 8005348:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	3301      	adds	r3, #1
 800534e:	61bb      	str	r3, [r7, #24]
 8005350:	69ba      	ldr	r2, [r7, #24]
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	429a      	cmp	r2, r3
 8005356:	d3ef      	bcc.n	8005338 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005358:	69fb      	ldr	r3, [r7, #28]
}
 800535a:	4618      	mov	r0, r3
 800535c:	3724      	adds	r7, #36	; 0x24
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr

08005366 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005366:	b480      	push	{r7}
 8005368:	b085      	sub	sp, #20
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
 800536e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	785b      	ldrb	r3, [r3, #1]
 800537e:	2b01      	cmp	r3, #1
 8005380:	d12c      	bne.n	80053dc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	015a      	lsls	r2, r3, #5
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	4413      	add	r3, r2
 800538a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	db12      	blt.n	80053ba <USB_EPSetStall+0x54>
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00f      	beq.n	80053ba <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	015a      	lsls	r2, r3, #5
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	4413      	add	r3, r2
 80053a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68ba      	ldr	r2, [r7, #8]
 80053aa:	0151      	lsls	r1, r2, #5
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	440a      	add	r2, r1
 80053b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80053b8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	015a      	lsls	r2, r3, #5
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	4413      	add	r3, r2
 80053c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68ba      	ldr	r2, [r7, #8]
 80053ca:	0151      	lsls	r1, r2, #5
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	440a      	add	r2, r1
 80053d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80053d8:	6013      	str	r3, [r2, #0]
 80053da:	e02b      	b.n	8005434 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	015a      	lsls	r2, r3, #5
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	4413      	add	r3, r2
 80053e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	db12      	blt.n	8005414 <USB_EPSetStall+0xae>
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00f      	beq.n	8005414 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	015a      	lsls	r2, r3, #5
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	4413      	add	r3, r2
 80053fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	0151      	lsls	r1, r2, #5
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	440a      	add	r2, r1
 800540a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800540e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005412:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	015a      	lsls	r2, r3, #5
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	4413      	add	r3, r2
 800541c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	0151      	lsls	r1, r2, #5
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	440a      	add	r2, r1
 800542a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800542e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005432:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3714      	adds	r7, #20
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005442:	b480      	push	{r7}
 8005444:	b085      	sub	sp, #20
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
 800544a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	785b      	ldrb	r3, [r3, #1]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d128      	bne.n	80054b0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	015a      	lsls	r2, r3, #5
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	4413      	add	r3, r2
 8005466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68ba      	ldr	r2, [r7, #8]
 800546e:	0151      	lsls	r1, r2, #5
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	440a      	add	r2, r1
 8005474:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005478:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800547c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	78db      	ldrb	r3, [r3, #3]
 8005482:	2b03      	cmp	r3, #3
 8005484:	d003      	beq.n	800548e <USB_EPClearStall+0x4c>
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	78db      	ldrb	r3, [r3, #3]
 800548a:	2b02      	cmp	r3, #2
 800548c:	d138      	bne.n	8005500 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	015a      	lsls	r2, r3, #5
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	4413      	add	r3, r2
 8005496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	0151      	lsls	r1, r2, #5
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	440a      	add	r2, r1
 80054a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054ac:	6013      	str	r3, [r2, #0]
 80054ae:	e027      	b.n	8005500 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	015a      	lsls	r2, r3, #5
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	4413      	add	r3, r2
 80054b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	0151      	lsls	r1, r2, #5
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	440a      	add	r2, r1
 80054c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054ce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	78db      	ldrb	r3, [r3, #3]
 80054d4:	2b03      	cmp	r3, #3
 80054d6:	d003      	beq.n	80054e0 <USB_EPClearStall+0x9e>
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	78db      	ldrb	r3, [r3, #3]
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d10f      	bne.n	8005500 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	0151      	lsls	r1, r2, #5
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	440a      	add	r2, r1
 80054f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054fe:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3714      	adds	r7, #20
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr

0800550e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800550e:	b480      	push	{r7}
 8005510:	b085      	sub	sp, #20
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
 8005516:	460b      	mov	r3, r1
 8005518:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800552c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005530:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	78fb      	ldrb	r3, [r7, #3]
 800553c:	011b      	lsls	r3, r3, #4
 800553e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005542:	68f9      	ldr	r1, [r7, #12]
 8005544:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005548:	4313      	orrs	r3, r2
 800554a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800555a:	b480      	push	{r7}
 800555c:	b085      	sub	sp, #20
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005574:	f023 0303 	bic.w	r3, r3, #3
 8005578:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005588:	f023 0302 	bic.w	r3, r3, #2
 800558c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3714      	adds	r7, #20
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80055b6:	f023 0303 	bic.w	r3, r3, #3
 80055ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055ca:	f043 0302 	orr.w	r3, r3, #2
 80055ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3714      	adds	r7, #20
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr

080055de <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80055de:	b480      	push	{r7}
 80055e0:	b085      	sub	sp, #20
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	4013      	ands	r3, r2
 80055f4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80055f6:	68fb      	ldr	r3, [r7, #12]
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3714      	adds	r7, #20
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	4013      	ands	r3, r2
 8005626:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	0c1b      	lsrs	r3, r3, #16
}
 800562c:	4618      	mov	r0, r3
 800562e:	3714      	adds	r7, #20
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005654:	69db      	ldr	r3, [r3, #28]
 8005656:	68ba      	ldr	r2, [r7, #8]
 8005658:	4013      	ands	r3, r2
 800565a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	b29b      	uxth	r3, r3
}
 8005660:	4618      	mov	r0, r3
 8005662:	3714      	adds	r7, #20
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	460b      	mov	r3, r1
 8005676:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800567c:	78fb      	ldrb	r3, [r7, #3]
 800567e:	015a      	lsls	r2, r3, #5
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	4413      	add	r3, r2
 8005684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005692:	695b      	ldr	r3, [r3, #20]
 8005694:	68ba      	ldr	r2, [r7, #8]
 8005696:	4013      	ands	r3, r2
 8005698:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800569a:	68bb      	ldr	r3, [r7, #8]
}
 800569c:	4618      	mov	r0, r3
 800569e:	3714      	adds	r7, #20
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b087      	sub	sp, #28
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	460b      	mov	r3, r1
 80056b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ca:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80056cc:	78fb      	ldrb	r3, [r7, #3]
 80056ce:	f003 030f 	and.w	r3, r3, #15
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	fa22 f303 	lsr.w	r3, r2, r3
 80056d8:	01db      	lsls	r3, r3, #7
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	4313      	orrs	r3, r2
 80056e0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80056e2:	78fb      	ldrb	r3, [r7, #3]
 80056e4:	015a      	lsls	r2, r3, #5
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	4413      	add	r3, r2
 80056ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	693a      	ldr	r2, [r7, #16]
 80056f2:	4013      	ands	r3, r2
 80056f4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80056f6:	68bb      	ldr	r3, [r7, #8]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	371c      	adds	r7, #28
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	695b      	ldr	r3, [r3, #20]
 8005710:	f003 0301 	and.w	r3, r3, #1
}
 8005714:	4618      	mov	r0, r3
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800573a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800573e:	f023 0307 	bic.w	r3, r3, #7
 8005742:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005752:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005756:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
	...

08005768 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005768:	b480      	push	{r7}
 800576a:	b087      	sub	sp, #28
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	460b      	mov	r3, r1
 8005772:	607a      	str	r2, [r7, #4]
 8005774:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	333c      	adds	r3, #60	; 0x3c
 800577e:	3304      	adds	r3, #4
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	4a26      	ldr	r2, [pc, #152]	; (8005820 <USB_EP0_OutStart+0xb8>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d90a      	bls.n	80057a2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005798:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800579c:	d101      	bne.n	80057a2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800579e:	2300      	movs	r3, #0
 80057a0:	e037      	b.n	8005812 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a8:	461a      	mov	r2, r3
 80057aa:	2300      	movs	r3, #0
 80057ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057d0:	f043 0318 	orr.w	r3, r3, #24
 80057d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057e4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80057e8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80057ea:	7afb      	ldrb	r3, [r7, #11]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d10f      	bne.n	8005810 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f6:	461a      	mov	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	697a      	ldr	r2, [r7, #20]
 8005806:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800580a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800580e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	371c      	adds	r7, #28
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	4f54300a 	.word	0x4f54300a

08005824 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005824:	b480      	push	{r7}
 8005826:	b085      	sub	sp, #20
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800582c:	2300      	movs	r3, #0
 800582e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	3301      	adds	r3, #1
 8005834:	60fb      	str	r3, [r7, #12]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	4a13      	ldr	r2, [pc, #76]	; (8005888 <USB_CoreReset+0x64>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d901      	bls.n	8005842 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e01b      	b.n	800587a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	2b00      	cmp	r3, #0
 8005848:	daf2      	bge.n	8005830 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800584a:	2300      	movs	r3, #0
 800584c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	f043 0201 	orr.w	r2, r3, #1
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	3301      	adds	r3, #1
 800585e:	60fb      	str	r3, [r7, #12]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	4a09      	ldr	r2, [pc, #36]	; (8005888 <USB_CoreReset+0x64>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d901      	bls.n	800586c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e006      	b.n	800587a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	f003 0301 	and.w	r3, r3, #1
 8005874:	2b01      	cmp	r3, #1
 8005876:	d0f0      	beq.n	800585a <USB_CoreReset+0x36>

  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3714      	adds	r7, #20
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	00030d40 	.word	0x00030d40

0800588c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	460b      	mov	r3, r1
 8005896:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005898:	2010      	movs	r0, #16
 800589a:	f002 f981 	bl	8007ba0 <malloc>
 800589e:	4603      	mov	r3, r0
 80058a0:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d105      	bne.n	80058b4 <USBD_HID_Init+0x28>
  {
    pdev->pClassData = NULL;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80058b0:	2302      	movs	r3, #2
 80058b2:	e01b      	b.n	80058ec <USBD_HID_Init+0x60>
  }

  pdev->pClassData = (void *)hhid;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	7c1b      	ldrb	r3, [r3, #16]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d103      	bne.n	80058cc <USBD_HID_Init+0x40>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2207      	movs	r2, #7
 80058c8:	875a      	strh	r2, [r3, #58]	; 0x3a
 80058ca:	e002      	b.n	80058d2 <USBD_HID_Init+0x46>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	220a      	movs	r2, #10
 80058d0:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

    /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80058d2:	2304      	movs	r3, #4
 80058d4:	2203      	movs	r2, #3
 80058d6:	2181      	movs	r1, #129	; 0x81
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f001 ffac 	bl	8007836 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2201      	movs	r2, #1
 80058e2:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	460b      	mov	r3, r1
 80058fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8005900:	2181      	movs	r1, #129	; 0x81
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f001 ffbd 	bl	8007882 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800591a:	2b00      	cmp	r3, #0
 800591c:	d009      	beq.n	8005932 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005924:	4618      	mov	r0, r3
 8005926:	f002 f943 	bl	8007bb0 <free>
    pdev->pClassData = NULL;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3708      	adds	r7, #8
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b086      	sub	sp, #24
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800594c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800594e:	2300      	movs	r3, #0
 8005950:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8005952:	2300      	movs	r3, #0
 8005954:	817b      	strh	r3, [r7, #10]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800595e:	2b00      	cmp	r3, #0
 8005960:	d045      	beq.n	80059ee <USBD_HID_Setup+0xb2>
 8005962:	2b20      	cmp	r3, #32
 8005964:	f040 80d4 	bne.w	8005b10 <USBD_HID_Setup+0x1d4>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	785b      	ldrb	r3, [r3, #1]
 800596c:	3b02      	subs	r3, #2
 800596e:	2b09      	cmp	r3, #9
 8005970:	d835      	bhi.n	80059de <USBD_HID_Setup+0xa2>
 8005972:	a201      	add	r2, pc, #4	; (adr r2, 8005978 <USBD_HID_Setup+0x3c>)
 8005974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005978:	080059cf 	.word	0x080059cf
 800597c:	080059af 	.word	0x080059af
 8005980:	080059df 	.word	0x080059df
 8005984:	080059df 	.word	0x080059df
 8005988:	080059df 	.word	0x080059df
 800598c:	080059df 	.word	0x080059df
 8005990:	080059df 	.word	0x080059df
 8005994:	080059df 	.word	0x080059df
 8005998:	080059bd 	.word	0x080059bd
 800599c:	080059a1 	.word	0x080059a1
    {
    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	885b      	ldrh	r3, [r3, #2]
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	461a      	mov	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	601a      	str	r2, [r3, #0]
      break;
 80059ac:	e01e      	b.n	80059ec <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2201      	movs	r2, #1
 80059b2:	4619      	mov	r1, r3
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f001 f9ed 	bl	8006d94 <USBD_CtlSendData>
      break;
 80059ba:	e017      	b.n	80059ec <USBD_HID_Setup+0xb0>

    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	885b      	ldrh	r3, [r3, #2]
 80059c0:	0a1b      	lsrs	r3, r3, #8
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	461a      	mov	r2, r3
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	605a      	str	r2, [r3, #4]
      break;
 80059cc:	e00e      	b.n	80059ec <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	3304      	adds	r3, #4
 80059d2:	2201      	movs	r2, #1
 80059d4:	4619      	mov	r1, r3
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f001 f9dc 	bl	8006d94 <USBD_CtlSendData>
      break;
 80059dc:	e006      	b.n	80059ec <USBD_HID_Setup+0xb0>

    default:
      USBD_CtlError(pdev, req);
 80059de:	6839      	ldr	r1, [r7, #0]
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f001 f966 	bl	8006cb2 <USBD_CtlError>
      ret = USBD_FAIL;
 80059e6:	2303      	movs	r3, #3
 80059e8:	75fb      	strb	r3, [r7, #23]
      break;
 80059ea:	bf00      	nop
    }
    break;
 80059ec:	e097      	b.n	8005b1e <USBD_HID_Setup+0x1e2>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	785b      	ldrb	r3, [r3, #1]
 80059f2:	2b0b      	cmp	r3, #11
 80059f4:	f200 8083 	bhi.w	8005afe <USBD_HID_Setup+0x1c2>
 80059f8:	a201      	add	r2, pc, #4	; (adr r2, 8005a00 <USBD_HID_Setup+0xc4>)
 80059fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059fe:	bf00      	nop
 8005a00:	08005a31 	.word	0x08005a31
 8005a04:	08005b0d 	.word	0x08005b0d
 8005a08:	08005aff 	.word	0x08005aff
 8005a0c:	08005aff 	.word	0x08005aff
 8005a10:	08005aff 	.word	0x08005aff
 8005a14:	08005aff 	.word	0x08005aff
 8005a18:	08005a59 	.word	0x08005a59
 8005a1c:	08005aff 	.word	0x08005aff
 8005a20:	08005aff 	.word	0x08005aff
 8005a24:	08005aff 	.word	0x08005aff
 8005a28:	08005ab1 	.word	0x08005ab1
 8005a2c:	08005ad9 	.word	0x08005ad9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a36:	2b03      	cmp	r3, #3
 8005a38:	d107      	bne.n	8005a4a <USBD_HID_Setup+0x10e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005a3a:	f107 030a 	add.w	r3, r7, #10
 8005a3e:	2202      	movs	r2, #2
 8005a40:	4619      	mov	r1, r3
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f001 f9a6 	bl	8006d94 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005a48:	e061      	b.n	8005b0e <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8005a4a:	6839      	ldr	r1, [r7, #0]
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f001 f930 	bl	8006cb2 <USBD_CtlError>
        ret = USBD_FAIL;
 8005a52:	2303      	movs	r3, #3
 8005a54:	75fb      	strb	r3, [r7, #23]
      break;
 8005a56:	e05a      	b.n	8005b0e <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == HID_REPORT_DESC)
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	885b      	ldrh	r3, [r3, #2]
 8005a5c:	0a1b      	lsrs	r3, r3, #8
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	2b22      	cmp	r3, #34	; 0x22
 8005a62:	d108      	bne.n	8005a76 <USBD_HID_Setup+0x13a>
      {
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	88db      	ldrh	r3, [r3, #6]
 8005a68:	2b4a      	cmp	r3, #74	; 0x4a
 8005a6a:	bf28      	it	cs
 8005a6c:	234a      	movcs	r3, #74	; 0x4a
 8005a6e:	82bb      	strh	r3, [r7, #20]
        pbuf = HID_MOUSE_ReportDesc;
 8005a70:	4b2d      	ldr	r3, [pc, #180]	; (8005b28 <USBD_HID_Setup+0x1ec>)
 8005a72:	613b      	str	r3, [r7, #16]
 8005a74:	e015      	b.n	8005aa2 <USBD_HID_Setup+0x166>
      }
      else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	885b      	ldrh	r3, [r3, #2]
 8005a7a:	0a1b      	lsrs	r3, r3, #8
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	2b21      	cmp	r3, #33	; 0x21
 8005a80:	d108      	bne.n	8005a94 <USBD_HID_Setup+0x158>
      {
        pbuf = USBD_HID_Desc;
 8005a82:	4b2a      	ldr	r3, [pc, #168]	; (8005b2c <USBD_HID_Setup+0x1f0>)
 8005a84:	613b      	str	r3, [r7, #16]
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	88db      	ldrh	r3, [r3, #6]
 8005a8a:	2b09      	cmp	r3, #9
 8005a8c:	bf28      	it	cs
 8005a8e:	2309      	movcs	r3, #9
 8005a90:	82bb      	strh	r3, [r7, #20]
 8005a92:	e006      	b.n	8005aa2 <USBD_HID_Setup+0x166>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8005a94:	6839      	ldr	r1, [r7, #0]
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f001 f90b 	bl	8006cb2 <USBD_CtlError>
        ret = USBD_FAIL;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	75fb      	strb	r3, [r7, #23]
        break;
 8005aa0:	e035      	b.n	8005b0e <USBD_HID_Setup+0x1d2>
      }
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005aa2:	8abb      	ldrh	r3, [r7, #20]
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	6939      	ldr	r1, [r7, #16]
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f001 f973 	bl	8006d94 <USBD_CtlSendData>
      break;
 8005aae:	e02e      	b.n	8005b0e <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ab6:	2b03      	cmp	r3, #3
 8005ab8:	d107      	bne.n	8005aca <USBD_HID_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	3308      	adds	r3, #8
 8005abe:	2201      	movs	r2, #1
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f001 f966 	bl	8006d94 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005ac8:	e021      	b.n	8005b0e <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8005aca:	6839      	ldr	r1, [r7, #0]
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f001 f8f0 	bl	8006cb2 <USBD_CtlError>
        ret = USBD_FAIL;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	75fb      	strb	r3, [r7, #23]
      break;
 8005ad6:	e01a      	b.n	8005b0e <USBD_HID_Setup+0x1d2>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ade:	2b03      	cmp	r3, #3
 8005ae0:	d106      	bne.n	8005af0 <USBD_HID_Setup+0x1b4>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	885b      	ldrh	r3, [r3, #2]
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	461a      	mov	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005aee:	e00e      	b.n	8005b0e <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8005af0:	6839      	ldr	r1, [r7, #0]
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f001 f8dd 	bl	8006cb2 <USBD_CtlError>
        ret = USBD_FAIL;
 8005af8:	2303      	movs	r3, #3
 8005afa:	75fb      	strb	r3, [r7, #23]
      break;
 8005afc:	e007      	b.n	8005b0e <USBD_HID_Setup+0x1d2>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8005afe:	6839      	ldr	r1, [r7, #0]
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f001 f8d6 	bl	8006cb2 <USBD_CtlError>
      ret = USBD_FAIL;
 8005b06:	2303      	movs	r3, #3
 8005b08:	75fb      	strb	r3, [r7, #23]
      break;
 8005b0a:	e000      	b.n	8005b0e <USBD_HID_Setup+0x1d2>
      break;
 8005b0c:	bf00      	nop
    }
    break;
 8005b0e:	e006      	b.n	8005b1e <USBD_HID_Setup+0x1e2>

  default:
    USBD_CtlError(pdev, req);
 8005b10:	6839      	ldr	r1, [r7, #0]
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f001 f8cd 	bl	8006cb2 <USBD_CtlError>
    ret = USBD_FAIL;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	75fb      	strb	r3, [r7, #23]
    break;
 8005b1c:	bf00      	nop
  }

  return (uint8_t)ret;
 8005b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3718      	adds	r7, #24
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	200000c8 	.word	0x200000c8
 8005b2c:	200000b0 	.word	0x200000b0

08005b30 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b44:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b4c:	2b03      	cmp	r3, #3
 8005b4e:	d10c      	bne.n	8005b6a <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	7b1b      	ldrb	r3, [r3, #12]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d108      	bne.n	8005b6a <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8005b5e:	88fb      	ldrh	r3, [r7, #6]
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	2181      	movs	r1, #129	; 0x81
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f001 ff34 	bl	80079d2 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3718      	adds	r7, #24
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2222      	movs	r2, #34	; 0x22
 8005b80:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8005b82:	4b03      	ldr	r3, [pc, #12]	; (8005b90 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr
 8005b90:	20000044 	.word	0x20000044

08005b94 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2222      	movs	r2, #34	; 0x22
 8005ba0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8005ba2:	4b03      	ldr	r3, [pc, #12]	; (8005bb0 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr
 8005bb0:	20000068 	.word	0x20000068

08005bb4 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2222      	movs	r2, #34	; 0x22
 8005bc0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8005bc2:	4b03      	ldr	r3, [pc, #12]	; (8005bd0 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr
 8005bd0:	2000008c 	.word	0x2000008c

08005bd4 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	460b      	mov	r3, r1
 8005bde:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005be6:	2200      	movs	r2, #0
 8005be8:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	220a      	movs	r2, #10
 8005c04:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8005c06:	4b03      	ldr	r3, [pc, #12]	; (8005c14 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr
 8005c14:	200000bc 	.word	0x200000bc

08005c18 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b086      	sub	sp, #24
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	4613      	mov	r3, r2
 8005c24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d101      	bne.n	8005c30 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e025      	b.n	8005c7c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d003      	beq.n	8005c42 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d003      	beq.n	8005c54 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d003      	beq.n	8005c62 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	79fa      	ldrb	r2, [r7, #7]
 8005c6e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f001 fd79 	bl	8007768 <USBD_LL_Init>
 8005c76:	4603      	mov	r3, r0
 8005c78:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3718      	adds	r7, #24
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d101      	bne.n	8005c9c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e010      	b.n	8005cbe <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	683a      	ldr	r2, [r7, #0]
 8005ca0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cac:	f107 020e 	add.w	r2, r7, #14
 8005cb0:	4610      	mov	r0, r2
 8005cb2:	4798      	blx	r3
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b082      	sub	sp, #8
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f001 fd96 	bl	8007800 <USBD_LL_Start>
 8005cd4:	4603      	mov	r3, r0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3708      	adds	r7, #8
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}

08005cde <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005cde:	b480      	push	{r7}
 8005ce0:	b083      	sub	sp, #12
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005d00:	2303      	movs	r3, #3
 8005d02:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d009      	beq.n	8005d22 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	78fa      	ldrb	r2, [r7, #3]
 8005d18:	4611      	mov	r1, r2
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	4798      	blx	r3
 8005d1e:	4603      	mov	r3, r0
 8005d20:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3710      	adds	r7, #16
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	460b      	mov	r3, r1
 8005d36:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d007      	beq.n	8005d52 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	78fa      	ldrb	r2, [r7, #3]
 8005d4c:	4611      	mov	r1, r2
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	4798      	blx	r3
  }

  return USBD_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3708      	adds	r7, #8
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d6c:	6839      	ldr	r1, [r7, #0]
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f000 ff65 	bl	8006c3e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005d82:	461a      	mov	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005d90:	f003 031f 	and.w	r3, r3, #31
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d01a      	beq.n	8005dce <USBD_LL_SetupStage+0x72>
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	d822      	bhi.n	8005de2 <USBD_LL_SetupStage+0x86>
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d002      	beq.n	8005da6 <USBD_LL_SetupStage+0x4a>
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d00a      	beq.n	8005dba <USBD_LL_SetupStage+0x5e>
 8005da4:	e01d      	b.n	8005de2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005dac:	4619      	mov	r1, r3
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 fa18 	bl	80061e4 <USBD_StdDevReq>
 8005db4:	4603      	mov	r3, r0
 8005db6:	73fb      	strb	r3, [r7, #15]
      break;
 8005db8:	e020      	b.n	8005dfc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 fa7c 	bl	80062c0 <USBD_StdItfReq>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	73fb      	strb	r3, [r7, #15]
      break;
 8005dcc:	e016      	b.n	8005dfc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 faba 	bl	8006350 <USBD_StdEPReq>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	73fb      	strb	r3, [r7, #15]
      break;
 8005de0:	e00c      	b.n	8005dfc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005de8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	4619      	mov	r1, r3
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f001 fd65 	bl	80078c0 <USBD_LL_StallEP>
 8005df6:	4603      	mov	r3, r0
 8005df8:	73fb      	strb	r3, [r7, #15]
      break;
 8005dfa:	bf00      	nop
  }

  return ret;
 8005dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b086      	sub	sp, #24
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	60f8      	str	r0, [r7, #12]
 8005e0e:	460b      	mov	r3, r1
 8005e10:	607a      	str	r2, [r7, #4]
 8005e12:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005e14:	7afb      	ldrb	r3, [r7, #11]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d137      	bne.n	8005e8a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005e20:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005e28:	2b03      	cmp	r3, #3
 8005e2a:	d14a      	bne.n	8005ec2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	689a      	ldr	r2, [r3, #8]
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d913      	bls.n	8005e60 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	689a      	ldr	r2, [r3, #8]
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	1ad2      	subs	r2, r2, r3
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	68da      	ldr	r2, [r3, #12]
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	bf28      	it	cs
 8005e52:	4613      	movcs	r3, r2
 8005e54:	461a      	mov	r2, r3
 8005e56:	6879      	ldr	r1, [r7, #4]
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f000 ffc7 	bl	8006dec <USBD_CtlContinueRx>
 8005e5e:	e030      	b.n	8005ec2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00a      	beq.n	8005e82 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005e72:	2b03      	cmp	r3, #3
 8005e74:	d105      	bne.n	8005e82 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	f000 ffc3 	bl	8006e0e <USBD_CtlSendStatus>
 8005e88:	e01b      	b.n	8005ec2 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d013      	beq.n	8005ebe <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005e9c:	2b03      	cmp	r3, #3
 8005e9e:	d10e      	bne.n	8005ebe <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	7afa      	ldrb	r2, [r7, #11]
 8005eaa:	4611      	mov	r1, r2
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	4798      	blx	r3
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005eb4:	7dfb      	ldrb	r3, [r7, #23]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8005eba:	7dfb      	ldrb	r3, [r7, #23]
 8005ebc:	e002      	b.n	8005ec4 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e000      	b.n	8005ec4 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3718      	adds	r7, #24
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	607a      	str	r2, [r7, #4]
 8005ed8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005eda:	7afb      	ldrb	r3, [r7, #11]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d16a      	bne.n	8005fb6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	3314      	adds	r3, #20
 8005ee4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d155      	bne.n	8005f9c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	689a      	ldr	r2, [r3, #8]
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d914      	bls.n	8005f26 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	689a      	ldr	r2, [r3, #8]
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	1ad2      	subs	r2, r2, r3
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	461a      	mov	r2, r3
 8005f10:	6879      	ldr	r1, [r7, #4]
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f000 ff59 	bl	8006dca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f18:	2300      	movs	r3, #0
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	2100      	movs	r1, #0
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f001 fd78 	bl	8007a14 <USBD_LL_PrepareReceive>
 8005f24:	e03a      	b.n	8005f9c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	68da      	ldr	r2, [r3, #12]
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d11c      	bne.n	8005f6c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	685a      	ldr	r2, [r3, #4]
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d316      	bcc.n	8005f6c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	685a      	ldr	r2, [r3, #4]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d20f      	bcs.n	8005f6c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	2100      	movs	r1, #0
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f000 ff3a 	bl	8006dca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f5e:	2300      	movs	r3, #0
 8005f60:	2200      	movs	r2, #0
 8005f62:	2100      	movs	r1, #0
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f001 fd55 	bl	8007a14 <USBD_LL_PrepareReceive>
 8005f6a:	e017      	b.n	8005f9c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00a      	beq.n	8005f8e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005f7e:	2b03      	cmp	r3, #3
 8005f80:	d105      	bne.n	8005f8e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	68f8      	ldr	r0, [r7, #12]
 8005f8c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f8e:	2180      	movs	r1, #128	; 0x80
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f001 fc95 	bl	80078c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f000 ff4c 	bl	8006e34 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d123      	bne.n	8005fee <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f7ff fe99 	bl	8005cde <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005fb4:	e01b      	b.n	8005fee <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d013      	beq.n	8005fea <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005fc8:	2b03      	cmp	r3, #3
 8005fca:	d10e      	bne.n	8005fea <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fd2:	695b      	ldr	r3, [r3, #20]
 8005fd4:	7afa      	ldrb	r2, [r7, #11]
 8005fd6:	4611      	mov	r1, r2
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	4798      	blx	r3
 8005fdc:	4603      	mov	r3, r0
 8005fde:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005fe0:	7dfb      	ldrb	r3, [r7, #23]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d003      	beq.n	8005fee <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8005fe6:	7dfb      	ldrb	r3, [r7, #23]
 8005fe8:	e002      	b.n	8005ff0 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e000      	b.n	8005ff0 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3718      	adds	r7, #24
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006024:	2b00      	cmp	r3, #0
 8006026:	d009      	beq.n	800603c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	6852      	ldr	r2, [r2, #4]
 8006034:	b2d2      	uxtb	r2, r2
 8006036:	4611      	mov	r1, r2
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800603c:	2340      	movs	r3, #64	; 0x40
 800603e:	2200      	movs	r2, #0
 8006040:	2100      	movs	r1, #0
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f001 fbf7 	bl	8007836 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2240      	movs	r2, #64	; 0x40
 8006054:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006058:	2340      	movs	r3, #64	; 0x40
 800605a:	2200      	movs	r2, #0
 800605c:	2180      	movs	r1, #128	; 0x80
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f001 fbe9 	bl	8007836 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2240      	movs	r2, #64	; 0x40
 800606e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3708      	adds	r7, #8
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800607a:	b480      	push	{r7}
 800607c:	b083      	sub	sp, #12
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
 8006082:	460b      	mov	r3, r1
 8006084:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	78fa      	ldrb	r2, [r7, #3]
 800608a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	370c      	adds	r7, #12
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr

0800609a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800609a:	b480      	push	{r7}
 800609c:	b083      	sub	sp, #12
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2204      	movs	r2, #4
 80060b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060d2:	2b04      	cmp	r3, #4
 80060d4:	d105      	bne.n	80060e2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060fe:	2b03      	cmp	r3, #3
 8006100:	d10b      	bne.n	800611a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d005      	beq.n	800611a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006114:	69db      	ldr	r3, [r3, #28]
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3708      	adds	r7, #8
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	460b      	mov	r3, r1
 800612e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	370c      	adds	r7, #12
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr

0800613e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800613e:	b480      	push	{r7}
 8006140:	b083      	sub	sp, #12
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
 8006146:	460b      	mov	r3, r1
 8006148:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr

0800616e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b082      	sub	sp, #8
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006184:	2b00      	cmp	r3, #0
 8006186:	d009      	beq.n	800619c <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	6852      	ldr	r2, [r2, #4]
 8006194:	b2d2      	uxtb	r2, r2
 8006196:	4611      	mov	r1, r2
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	4798      	blx	r3
  }

  return USBD_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3708      	adds	r7, #8
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80061a6:	b480      	push	{r7}
 80061a8:	b087      	sub	sp, #28
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	3301      	adds	r3, #1
 80061bc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80061c4:	8a3b      	ldrh	r3, [r7, #16]
 80061c6:	021b      	lsls	r3, r3, #8
 80061c8:	b21a      	sxth	r2, r3
 80061ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	b21b      	sxth	r3, r3
 80061d2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80061d4:	89fb      	ldrh	r3, [r7, #14]
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	371c      	adds	r7, #28
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
	...

080061e4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80061ee:	2300      	movs	r3, #0
 80061f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061fa:	2b40      	cmp	r3, #64	; 0x40
 80061fc:	d005      	beq.n	800620a <USBD_StdDevReq+0x26>
 80061fe:	2b40      	cmp	r3, #64	; 0x40
 8006200:	d853      	bhi.n	80062aa <USBD_StdDevReq+0xc6>
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00b      	beq.n	800621e <USBD_StdDevReq+0x3a>
 8006206:	2b20      	cmp	r3, #32
 8006208:	d14f      	bne.n	80062aa <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	6839      	ldr	r1, [r7, #0]
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	4798      	blx	r3
 8006218:	4603      	mov	r3, r0
 800621a:	73fb      	strb	r3, [r7, #15]
    break;
 800621c:	e04a      	b.n	80062b4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	785b      	ldrb	r3, [r3, #1]
 8006222:	2b09      	cmp	r3, #9
 8006224:	d83b      	bhi.n	800629e <USBD_StdDevReq+0xba>
 8006226:	a201      	add	r2, pc, #4	; (adr r2, 800622c <USBD_StdDevReq+0x48>)
 8006228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800622c:	08006281 	.word	0x08006281
 8006230:	08006295 	.word	0x08006295
 8006234:	0800629f 	.word	0x0800629f
 8006238:	0800628b 	.word	0x0800628b
 800623c:	0800629f 	.word	0x0800629f
 8006240:	0800625f 	.word	0x0800625f
 8006244:	08006255 	.word	0x08006255
 8006248:	0800629f 	.word	0x0800629f
 800624c:	08006277 	.word	0x08006277
 8006250:	08006269 	.word	0x08006269
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8006254:	6839      	ldr	r1, [r7, #0]
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 f9d8 	bl	800660c <USBD_GetDescriptor>
      break;
 800625c:	e024      	b.n	80062a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800625e:	6839      	ldr	r1, [r7, #0]
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 fb67 	bl	8006934 <USBD_SetAddress>
      break;
 8006266:	e01f      	b.n	80062a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006268:	6839      	ldr	r1, [r7, #0]
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 fba6 	bl	80069bc <USBD_SetConfig>
 8006270:	4603      	mov	r3, r0
 8006272:	73fb      	strb	r3, [r7, #15]
      break;
 8006274:	e018      	b.n	80062a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8006276:	6839      	ldr	r1, [r7, #0]
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 fc43 	bl	8006b04 <USBD_GetConfig>
      break;
 800627e:	e013      	b.n	80062a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006280:	6839      	ldr	r1, [r7, #0]
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fc73 	bl	8006b6e <USBD_GetStatus>
      break;
 8006288:	e00e      	b.n	80062a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800628a:	6839      	ldr	r1, [r7, #0]
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 fca1 	bl	8006bd4 <USBD_SetFeature>
      break;
 8006292:	e009      	b.n	80062a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006294:	6839      	ldr	r1, [r7, #0]
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 fcb0 	bl	8006bfc <USBD_ClrFeature>
      break;
 800629c:	e004      	b.n	80062a8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800629e:	6839      	ldr	r1, [r7, #0]
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 fd06 	bl	8006cb2 <USBD_CtlError>
      break;
 80062a6:	bf00      	nop
    }
    break;
 80062a8:	e004      	b.n	80062b4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80062aa:	6839      	ldr	r1, [r7, #0]
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 fd00 	bl	8006cb2 <USBD_CtlError>
    break;
 80062b2:	bf00      	nop
  }

  return ret;
 80062b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop

080062c0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80062ca:	2300      	movs	r3, #0
 80062cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062d6:	2b40      	cmp	r3, #64	; 0x40
 80062d8:	d005      	beq.n	80062e6 <USBD_StdItfReq+0x26>
 80062da:	2b40      	cmp	r3, #64	; 0x40
 80062dc:	d82e      	bhi.n	800633c <USBD_StdItfReq+0x7c>
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d001      	beq.n	80062e6 <USBD_StdItfReq+0x26>
 80062e2:	2b20      	cmp	r3, #32
 80062e4:	d12a      	bne.n	800633c <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062ec:	3b01      	subs	r3, #1
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d81d      	bhi.n	800632e <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	889b      	ldrh	r3, [r3, #4]
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d813      	bhi.n	8006324 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	6839      	ldr	r1, [r7, #0]
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	4798      	blx	r3
 800630a:	4603      	mov	r3, r0
 800630c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	88db      	ldrh	r3, [r3, #6]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d110      	bne.n	8006338 <USBD_StdItfReq+0x78>
 8006316:	7bfb      	ldrb	r3, [r7, #15]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d10d      	bne.n	8006338 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 fd76 	bl	8006e0e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006322:	e009      	b.n	8006338 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8006324:	6839      	ldr	r1, [r7, #0]
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 fcc3 	bl	8006cb2 <USBD_CtlError>
      break;
 800632c:	e004      	b.n	8006338 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800632e:	6839      	ldr	r1, [r7, #0]
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 fcbe 	bl	8006cb2 <USBD_CtlError>
      break;
 8006336:	e000      	b.n	800633a <USBD_StdItfReq+0x7a>
      break;
 8006338:	bf00      	nop
    }
    break;
 800633a:	e004      	b.n	8006346 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800633c:	6839      	ldr	r1, [r7, #0]
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 fcb7 	bl	8006cb2 <USBD_CtlError>
    break;
 8006344:	bf00      	nop
  }

  return ret;
 8006346:	7bfb      	ldrb	r3, [r7, #15]
}
 8006348:	4618      	mov	r0, r3
 800634a:	3710      	adds	r7, #16
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800635a:	2300      	movs	r3, #0
 800635c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	889b      	ldrh	r3, [r3, #4]
 8006362:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800636c:	2b40      	cmp	r3, #64	; 0x40
 800636e:	d007      	beq.n	8006380 <USBD_StdEPReq+0x30>
 8006370:	2b40      	cmp	r3, #64	; 0x40
 8006372:	f200 8140 	bhi.w	80065f6 <USBD_StdEPReq+0x2a6>
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00c      	beq.n	8006394 <USBD_StdEPReq+0x44>
 800637a:	2b20      	cmp	r3, #32
 800637c:	f040 813b 	bne.w	80065f6 <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	6839      	ldr	r1, [r7, #0]
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	4798      	blx	r3
 800638e:	4603      	mov	r3, r0
 8006390:	73fb      	strb	r3, [r7, #15]
    break;
 8006392:	e135      	b.n	8006600 <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	785b      	ldrb	r3, [r3, #1]
 8006398:	2b03      	cmp	r3, #3
 800639a:	d007      	beq.n	80063ac <USBD_StdEPReq+0x5c>
 800639c:	2b03      	cmp	r3, #3
 800639e:	f300 8124 	bgt.w	80065ea <USBD_StdEPReq+0x29a>
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d07b      	beq.n	800649e <USBD_StdEPReq+0x14e>
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d03b      	beq.n	8006422 <USBD_StdEPReq+0xd2>
 80063aa:	e11e      	b.n	80065ea <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d002      	beq.n	80063bc <USBD_StdEPReq+0x6c>
 80063b6:	2b03      	cmp	r3, #3
 80063b8:	d016      	beq.n	80063e8 <USBD_StdEPReq+0x98>
 80063ba:	e02c      	b.n	8006416 <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063bc:	7bbb      	ldrb	r3, [r7, #14]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00d      	beq.n	80063de <USBD_StdEPReq+0x8e>
 80063c2:	7bbb      	ldrb	r3, [r7, #14]
 80063c4:	2b80      	cmp	r3, #128	; 0x80
 80063c6:	d00a      	beq.n	80063de <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80063c8:	7bbb      	ldrb	r3, [r7, #14]
 80063ca:	4619      	mov	r1, r3
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f001 fa77 	bl	80078c0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80063d2:	2180      	movs	r1, #128	; 0x80
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f001 fa73 	bl	80078c0 <USBD_LL_StallEP>
 80063da:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80063dc:	e020      	b.n	8006420 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 80063de:	6839      	ldr	r1, [r7, #0]
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 fc66 	bl	8006cb2 <USBD_CtlError>
        break;
 80063e6:	e01b      	b.n	8006420 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	885b      	ldrh	r3, [r3, #2]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d10e      	bne.n	800640e <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80063f0:	7bbb      	ldrb	r3, [r7, #14]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00b      	beq.n	800640e <USBD_StdEPReq+0xbe>
 80063f6:	7bbb      	ldrb	r3, [r7, #14]
 80063f8:	2b80      	cmp	r3, #128	; 0x80
 80063fa:	d008      	beq.n	800640e <USBD_StdEPReq+0xbe>
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	88db      	ldrh	r3, [r3, #6]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d104      	bne.n	800640e <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8006404:	7bbb      	ldrb	r3, [r7, #14]
 8006406:	4619      	mov	r1, r3
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f001 fa59 	bl	80078c0 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 fcfd 	bl	8006e0e <USBD_CtlSendStatus>

        break;
 8006414:	e004      	b.n	8006420 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 8006416:	6839      	ldr	r1, [r7, #0]
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 fc4a 	bl	8006cb2 <USBD_CtlError>
        break;
 800641e:	bf00      	nop
      }
      break;
 8006420:	e0e8      	b.n	80065f4 <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006428:	2b02      	cmp	r3, #2
 800642a:	d002      	beq.n	8006432 <USBD_StdEPReq+0xe2>
 800642c:	2b03      	cmp	r3, #3
 800642e:	d016      	beq.n	800645e <USBD_StdEPReq+0x10e>
 8006430:	e02e      	b.n	8006490 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006432:	7bbb      	ldrb	r3, [r7, #14]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00d      	beq.n	8006454 <USBD_StdEPReq+0x104>
 8006438:	7bbb      	ldrb	r3, [r7, #14]
 800643a:	2b80      	cmp	r3, #128	; 0x80
 800643c:	d00a      	beq.n	8006454 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800643e:	7bbb      	ldrb	r3, [r7, #14]
 8006440:	4619      	mov	r1, r3
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f001 fa3c 	bl	80078c0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006448:	2180      	movs	r1, #128	; 0x80
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f001 fa38 	bl	80078c0 <USBD_LL_StallEP>
 8006450:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006452:	e023      	b.n	800649c <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8006454:	6839      	ldr	r1, [r7, #0]
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 fc2b 	bl	8006cb2 <USBD_CtlError>
        break;
 800645c:	e01e      	b.n	800649c <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	885b      	ldrh	r3, [r3, #2]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d119      	bne.n	800649a <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006466:	7bbb      	ldrb	r3, [r7, #14]
 8006468:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800646c:	2b00      	cmp	r3, #0
 800646e:	d004      	beq.n	800647a <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006470:	7bbb      	ldrb	r3, [r7, #14]
 8006472:	4619      	mov	r1, r3
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f001 fa42 	bl	80078fe <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 fcc7 	bl	8006e0e <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	6839      	ldr	r1, [r7, #0]
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	4798      	blx	r3
        }
        break;
 800648e:	e004      	b.n	800649a <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8006490:	6839      	ldr	r1, [r7, #0]
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 fc0d 	bl	8006cb2 <USBD_CtlError>
        break;
 8006498:	e000      	b.n	800649c <USBD_StdEPReq+0x14c>
        break;
 800649a:	bf00      	nop
      }
      break;
 800649c:	e0aa      	b.n	80065f4 <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d002      	beq.n	80064ae <USBD_StdEPReq+0x15e>
 80064a8:	2b03      	cmp	r3, #3
 80064aa:	d032      	beq.n	8006512 <USBD_StdEPReq+0x1c2>
 80064ac:	e097      	b.n	80065de <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064ae:	7bbb      	ldrb	r3, [r7, #14]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d007      	beq.n	80064c4 <USBD_StdEPReq+0x174>
 80064b4:	7bbb      	ldrb	r3, [r7, #14]
 80064b6:	2b80      	cmp	r3, #128	; 0x80
 80064b8:	d004      	beq.n	80064c4 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 80064ba:	6839      	ldr	r1, [r7, #0]
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 fbf8 	bl	8006cb2 <USBD_CtlError>
          break;
 80064c2:	e091      	b.n	80065e8 <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	da0b      	bge.n	80064e4 <USBD_StdEPReq+0x194>
 80064cc:	7bbb      	ldrb	r3, [r7, #14]
 80064ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064d2:	4613      	mov	r3, r2
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	4413      	add	r3, r2
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	3310      	adds	r3, #16
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	4413      	add	r3, r2
 80064e0:	3304      	adds	r3, #4
 80064e2:	e00b      	b.n	80064fc <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 80064e4:	7bbb      	ldrb	r3, [r7, #14]
 80064e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064ea:	4613      	mov	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4413      	add	r3, r2
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	4413      	add	r3, r2
 80064fa:	3304      	adds	r3, #4
 80064fc:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	2200      	movs	r2, #0
 8006502:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	2202      	movs	r2, #2
 8006508:	4619      	mov	r1, r3
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 fc42 	bl	8006d94 <USBD_CtlSendData>
        break;
 8006510:	e06a      	b.n	80065e8 <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8006512:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006516:	2b00      	cmp	r3, #0
 8006518:	da11      	bge.n	800653e <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800651a:	7bbb      	ldrb	r3, [r7, #14]
 800651c:	f003 020f 	and.w	r2, r3, #15
 8006520:	6879      	ldr	r1, [r7, #4]
 8006522:	4613      	mov	r3, r2
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	4413      	add	r3, r2
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	440b      	add	r3, r1
 800652c:	3324      	adds	r3, #36	; 0x24
 800652e:	881b      	ldrh	r3, [r3, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d117      	bne.n	8006564 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8006534:	6839      	ldr	r1, [r7, #0]
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 fbbb 	bl	8006cb2 <USBD_CtlError>
            break;
 800653c:	e054      	b.n	80065e8 <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800653e:	7bbb      	ldrb	r3, [r7, #14]
 8006540:	f003 020f 	and.w	r2, r3, #15
 8006544:	6879      	ldr	r1, [r7, #4]
 8006546:	4613      	mov	r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4413      	add	r3, r2
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	440b      	add	r3, r1
 8006550:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006554:	881b      	ldrh	r3, [r3, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d104      	bne.n	8006564 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 800655a:	6839      	ldr	r1, [r7, #0]
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 fba8 	bl	8006cb2 <USBD_CtlError>
            break;
 8006562:	e041      	b.n	80065e8 <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006564:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006568:	2b00      	cmp	r3, #0
 800656a:	da0b      	bge.n	8006584 <USBD_StdEPReq+0x234>
 800656c:	7bbb      	ldrb	r3, [r7, #14]
 800656e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006572:	4613      	mov	r3, r2
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	4413      	add	r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	3310      	adds	r3, #16
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	4413      	add	r3, r2
 8006580:	3304      	adds	r3, #4
 8006582:	e00b      	b.n	800659c <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006584:	7bbb      	ldrb	r3, [r7, #14]
 8006586:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800658a:	4613      	mov	r3, r2
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	4413      	add	r3, r2
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	4413      	add	r3, r2
 800659a:	3304      	adds	r3, #4
 800659c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800659e:	7bbb      	ldrb	r3, [r7, #14]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d002      	beq.n	80065aa <USBD_StdEPReq+0x25a>
 80065a4:	7bbb      	ldrb	r3, [r7, #14]
 80065a6:	2b80      	cmp	r3, #128	; 0x80
 80065a8:	d103      	bne.n	80065b2 <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	2200      	movs	r2, #0
 80065ae:	601a      	str	r2, [r3, #0]
 80065b0:	e00e      	b.n	80065d0 <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80065b2:	7bbb      	ldrb	r3, [r7, #14]
 80065b4:	4619      	mov	r1, r3
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f001 f9c0 	bl	800793c <USBD_LL_IsStallEP>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d003      	beq.n	80065ca <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	2201      	movs	r2, #1
 80065c6:	601a      	str	r2, [r3, #0]
 80065c8:	e002      	b.n	80065d0 <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	2200      	movs	r2, #0
 80065ce:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	2202      	movs	r2, #2
 80065d4:	4619      	mov	r1, r3
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 fbdc 	bl	8006d94 <USBD_CtlSendData>
          break;
 80065dc:	e004      	b.n	80065e8 <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 80065de:	6839      	ldr	r1, [r7, #0]
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 fb66 	bl	8006cb2 <USBD_CtlError>
        break;
 80065e6:	bf00      	nop
      }
      break;
 80065e8:	e004      	b.n	80065f4 <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 80065ea:	6839      	ldr	r1, [r7, #0]
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 fb60 	bl	8006cb2 <USBD_CtlError>
      break;
 80065f2:	bf00      	nop
    }
    break;
 80065f4:	e004      	b.n	8006600 <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 80065f6:	6839      	ldr	r1, [r7, #0]
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 fb5a 	bl	8006cb2 <USBD_CtlError>
    break;
 80065fe:	bf00      	nop
  }

  return ret;
 8006600:	7bfb      	ldrb	r3, [r7, #15]
}
 8006602:	4618      	mov	r0, r3
 8006604:	3710      	adds	r7, #16
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
	...

0800660c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006616:	2300      	movs	r3, #0
 8006618:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800661a:	2300      	movs	r3, #0
 800661c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800661e:	2300      	movs	r3, #0
 8006620:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	885b      	ldrh	r3, [r3, #2]
 8006626:	0a1b      	lsrs	r3, r3, #8
 8006628:	b29b      	uxth	r3, r3
 800662a:	3b01      	subs	r3, #1
 800662c:	2b0e      	cmp	r3, #14
 800662e:	f200 8152 	bhi.w	80068d6 <USBD_GetDescriptor+0x2ca>
 8006632:	a201      	add	r2, pc, #4	; (adr r2, 8006638 <USBD_GetDescriptor+0x2c>)
 8006634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006638:	080066a9 	.word	0x080066a9
 800663c:	080066c1 	.word	0x080066c1
 8006640:	08006701 	.word	0x08006701
 8006644:	080068d7 	.word	0x080068d7
 8006648:	080068d7 	.word	0x080068d7
 800664c:	08006877 	.word	0x08006877
 8006650:	080068a3 	.word	0x080068a3
 8006654:	080068d7 	.word	0x080068d7
 8006658:	080068d7 	.word	0x080068d7
 800665c:	080068d7 	.word	0x080068d7
 8006660:	080068d7 	.word	0x080068d7
 8006664:	080068d7 	.word	0x080068d7
 8006668:	080068d7 	.word	0x080068d7
 800666c:	080068d7 	.word	0x080068d7
 8006670:	08006675 	.word	0x08006675
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800667a:	69db      	ldr	r3, [r3, #28]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d00b      	beq.n	8006698 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006686:	69db      	ldr	r3, [r3, #28]
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	7c12      	ldrb	r2, [r2, #16]
 800668c:	f107 0108 	add.w	r1, r7, #8
 8006690:	4610      	mov	r0, r2
 8006692:	4798      	blx	r3
 8006694:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006696:	e126      	b.n	80068e6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8006698:	6839      	ldr	r1, [r7, #0]
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 fb09 	bl	8006cb2 <USBD_CtlError>
      err++;
 80066a0:	7afb      	ldrb	r3, [r7, #11]
 80066a2:	3301      	adds	r3, #1
 80066a4:	72fb      	strb	r3, [r7, #11]
    break;
 80066a6:	e11e      	b.n	80068e6 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	7c12      	ldrb	r2, [r2, #16]
 80066b4:	f107 0108 	add.w	r1, r7, #8
 80066b8:	4610      	mov	r0, r2
 80066ba:	4798      	blx	r3
 80066bc:	60f8      	str	r0, [r7, #12]
    break;
 80066be:	e112      	b.n	80068e6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	7c1b      	ldrb	r3, [r3, #16]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d10d      	bne.n	80066e4 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d0:	f107 0208 	add.w	r2, r7, #8
 80066d4:	4610      	mov	r0, r2
 80066d6:	4798      	blx	r3
 80066d8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	3301      	adds	r3, #1
 80066de:	2202      	movs	r2, #2
 80066e0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80066e2:	e100      	b.n	80068e6 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ec:	f107 0208 	add.w	r2, r7, #8
 80066f0:	4610      	mov	r0, r2
 80066f2:	4798      	blx	r3
 80066f4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	3301      	adds	r3, #1
 80066fa:	2202      	movs	r2, #2
 80066fc:	701a      	strb	r2, [r3, #0]
    break;
 80066fe:	e0f2      	b.n	80068e6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	885b      	ldrh	r3, [r3, #2]
 8006704:	b2db      	uxtb	r3, r3
 8006706:	2b05      	cmp	r3, #5
 8006708:	f200 80ac 	bhi.w	8006864 <USBD_GetDescriptor+0x258>
 800670c:	a201      	add	r2, pc, #4	; (adr r2, 8006714 <USBD_GetDescriptor+0x108>)
 800670e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006712:	bf00      	nop
 8006714:	0800672d 	.word	0x0800672d
 8006718:	08006761 	.word	0x08006761
 800671c:	08006795 	.word	0x08006795
 8006720:	080067c9 	.word	0x080067c9
 8006724:	080067fd 	.word	0x080067fd
 8006728:	08006831 	.word	0x08006831
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d00b      	beq.n	8006750 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	7c12      	ldrb	r2, [r2, #16]
 8006744:	f107 0108 	add.w	r1, r7, #8
 8006748:	4610      	mov	r0, r2
 800674a:	4798      	blx	r3
 800674c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800674e:	e091      	b.n	8006874 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006750:	6839      	ldr	r1, [r7, #0]
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 faad 	bl	8006cb2 <USBD_CtlError>
        err++;
 8006758:	7afb      	ldrb	r3, [r7, #11]
 800675a:	3301      	adds	r3, #1
 800675c:	72fb      	strb	r3, [r7, #11]
      break;
 800675e:	e089      	b.n	8006874 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d00b      	beq.n	8006784 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	7c12      	ldrb	r2, [r2, #16]
 8006778:	f107 0108 	add.w	r1, r7, #8
 800677c:	4610      	mov	r0, r2
 800677e:	4798      	blx	r3
 8006780:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006782:	e077      	b.n	8006874 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006784:	6839      	ldr	r1, [r7, #0]
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 fa93 	bl	8006cb2 <USBD_CtlError>
        err++;
 800678c:	7afb      	ldrb	r3, [r7, #11]
 800678e:	3301      	adds	r3, #1
 8006790:	72fb      	strb	r3, [r7, #11]
      break;
 8006792:	e06f      	b.n	8006874 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00b      	beq.n	80067b8 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	7c12      	ldrb	r2, [r2, #16]
 80067ac:	f107 0108 	add.w	r1, r7, #8
 80067b0:	4610      	mov	r0, r2
 80067b2:	4798      	blx	r3
 80067b4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067b6:	e05d      	b.n	8006874 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80067b8:	6839      	ldr	r1, [r7, #0]
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fa79 	bl	8006cb2 <USBD_CtlError>
        err++;
 80067c0:	7afb      	ldrb	r3, [r7, #11]
 80067c2:	3301      	adds	r3, #1
 80067c4:	72fb      	strb	r3, [r7, #11]
      break;
 80067c6:	e055      	b.n	8006874 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00b      	beq.n	80067ec <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	7c12      	ldrb	r2, [r2, #16]
 80067e0:	f107 0108 	add.w	r1, r7, #8
 80067e4:	4610      	mov	r0, r2
 80067e6:	4798      	blx	r3
 80067e8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067ea:	e043      	b.n	8006874 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80067ec:	6839      	ldr	r1, [r7, #0]
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 fa5f 	bl	8006cb2 <USBD_CtlError>
        err++;
 80067f4:	7afb      	ldrb	r3, [r7, #11]
 80067f6:	3301      	adds	r3, #1
 80067f8:	72fb      	strb	r3, [r7, #11]
      break;
 80067fa:	e03b      	b.n	8006874 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006802:	695b      	ldr	r3, [r3, #20]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d00b      	beq.n	8006820 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800680e:	695b      	ldr	r3, [r3, #20]
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	7c12      	ldrb	r2, [r2, #16]
 8006814:	f107 0108 	add.w	r1, r7, #8
 8006818:	4610      	mov	r0, r2
 800681a:	4798      	blx	r3
 800681c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800681e:	e029      	b.n	8006874 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006820:	6839      	ldr	r1, [r7, #0]
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 fa45 	bl	8006cb2 <USBD_CtlError>
        err++;
 8006828:	7afb      	ldrb	r3, [r7, #11]
 800682a:	3301      	adds	r3, #1
 800682c:	72fb      	strb	r3, [r7, #11]
      break;
 800682e:	e021      	b.n	8006874 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006836:	699b      	ldr	r3, [r3, #24]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d00b      	beq.n	8006854 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	7c12      	ldrb	r2, [r2, #16]
 8006848:	f107 0108 	add.w	r1, r7, #8
 800684c:	4610      	mov	r0, r2
 800684e:	4798      	blx	r3
 8006850:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006852:	e00f      	b.n	8006874 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006854:	6839      	ldr	r1, [r7, #0]
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 fa2b 	bl	8006cb2 <USBD_CtlError>
        err++;
 800685c:	7afb      	ldrb	r3, [r7, #11]
 800685e:	3301      	adds	r3, #1
 8006860:	72fb      	strb	r3, [r7, #11]
      break;
 8006862:	e007      	b.n	8006874 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8006864:	6839      	ldr	r1, [r7, #0]
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 fa23 	bl	8006cb2 <USBD_CtlError>
      err++;
 800686c:	7afb      	ldrb	r3, [r7, #11]
 800686e:	3301      	adds	r3, #1
 8006870:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8006872:	bf00      	nop
    }
    break;
 8006874:	e037      	b.n	80068e6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	7c1b      	ldrb	r3, [r3, #16]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d109      	bne.n	8006892 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006886:	f107 0208 	add.w	r2, r7, #8
 800688a:	4610      	mov	r0, r2
 800688c:	4798      	blx	r3
 800688e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006890:	e029      	b.n	80068e6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8006892:	6839      	ldr	r1, [r7, #0]
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 fa0c 	bl	8006cb2 <USBD_CtlError>
      err++;
 800689a:	7afb      	ldrb	r3, [r7, #11]
 800689c:	3301      	adds	r3, #1
 800689e:	72fb      	strb	r3, [r7, #11]
    break;
 80068a0:	e021      	b.n	80068e6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	7c1b      	ldrb	r3, [r3, #16]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d10d      	bne.n	80068c6 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b2:	f107 0208 	add.w	r2, r7, #8
 80068b6:	4610      	mov	r0, r2
 80068b8:	4798      	blx	r3
 80068ba:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	3301      	adds	r3, #1
 80068c0:	2207      	movs	r2, #7
 80068c2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80068c4:	e00f      	b.n	80068e6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80068c6:	6839      	ldr	r1, [r7, #0]
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 f9f2 	bl	8006cb2 <USBD_CtlError>
      err++;
 80068ce:	7afb      	ldrb	r3, [r7, #11]
 80068d0:	3301      	adds	r3, #1
 80068d2:	72fb      	strb	r3, [r7, #11]
    break;
 80068d4:	e007      	b.n	80068e6 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 80068d6:	6839      	ldr	r1, [r7, #0]
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 f9ea 	bl	8006cb2 <USBD_CtlError>
    err++;
 80068de:	7afb      	ldrb	r3, [r7, #11]
 80068e0:	3301      	adds	r3, #1
 80068e2:	72fb      	strb	r3, [r7, #11]
    break;
 80068e4:	bf00      	nop
  }

  if (err != 0U)
 80068e6:	7afb      	ldrb	r3, [r7, #11]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d11e      	bne.n	800692a <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	88db      	ldrh	r3, [r3, #6]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d016      	beq.n	8006922 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 80068f4:	893b      	ldrh	r3, [r7, #8]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00e      	beq.n	8006918 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	88da      	ldrh	r2, [r3, #6]
 80068fe:	893b      	ldrh	r3, [r7, #8]
 8006900:	4293      	cmp	r3, r2
 8006902:	bf28      	it	cs
 8006904:	4613      	movcs	r3, r2
 8006906:	b29b      	uxth	r3, r3
 8006908:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800690a:	893b      	ldrh	r3, [r7, #8]
 800690c:	461a      	mov	r2, r3
 800690e:	68f9      	ldr	r1, [r7, #12]
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 fa3f 	bl	8006d94 <USBD_CtlSendData>
 8006916:	e009      	b.n	800692c <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006918:	6839      	ldr	r1, [r7, #0]
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 f9c9 	bl	8006cb2 <USBD_CtlError>
 8006920:	e004      	b.n	800692c <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 fa73 	bl	8006e0e <USBD_CtlSendStatus>
 8006928:	e000      	b.n	800692c <USBD_GetDescriptor+0x320>
    return;
 800692a:	bf00      	nop
    }
  }
}
 800692c:	3710      	adds	r7, #16
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop

08006934 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	889b      	ldrh	r3, [r3, #4]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d130      	bne.n	80069a8 <USBD_SetAddress+0x74>
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	88db      	ldrh	r3, [r3, #6]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d12c      	bne.n	80069a8 <USBD_SetAddress+0x74>
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	885b      	ldrh	r3, [r3, #2]
 8006952:	2b7f      	cmp	r3, #127	; 0x7f
 8006954:	d828      	bhi.n	80069a8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	885b      	ldrh	r3, [r3, #2]
 800695a:	b2db      	uxtb	r3, r3
 800695c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006960:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006968:	2b03      	cmp	r3, #3
 800696a:	d104      	bne.n	8006976 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800696c:	6839      	ldr	r1, [r7, #0]
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 f99f 	bl	8006cb2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006974:	e01d      	b.n	80069b2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	7bfa      	ldrb	r2, [r7, #15]
 800697a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800697e:	7bfb      	ldrb	r3, [r7, #15]
 8006980:	4619      	mov	r1, r3
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f001 f806 	bl	8007994 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 fa40 	bl	8006e0e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800698e:	7bfb      	ldrb	r3, [r7, #15]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d004      	beq.n	800699e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2202      	movs	r2, #2
 8006998:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800699c:	e009      	b.n	80069b2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2201      	movs	r2, #1
 80069a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069a6:	e004      	b.n	80069b2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80069a8:	6839      	ldr	r1, [r7, #0]
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 f981 	bl	8006cb2 <USBD_CtlError>
  }
}
 80069b0:	bf00      	nop
 80069b2:	bf00      	nop
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
	...

080069bc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069c6:	2300      	movs	r3, #0
 80069c8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	885b      	ldrh	r3, [r3, #2]
 80069ce:	b2da      	uxtb	r2, r3
 80069d0:	4b4b      	ldr	r3, [pc, #300]	; (8006b00 <USBD_SetConfig+0x144>)
 80069d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80069d4:	4b4a      	ldr	r3, [pc, #296]	; (8006b00 <USBD_SetConfig+0x144>)
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d905      	bls.n	80069e8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80069dc:	6839      	ldr	r1, [r7, #0]
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 f967 	bl	8006cb2 <USBD_CtlError>
    return USBD_FAIL;
 80069e4:	2303      	movs	r3, #3
 80069e6:	e087      	b.n	8006af8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d002      	beq.n	80069f8 <USBD_SetConfig+0x3c>
 80069f2:	2b03      	cmp	r3, #3
 80069f4:	d025      	beq.n	8006a42 <USBD_SetConfig+0x86>
 80069f6:	e071      	b.n	8006adc <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80069f8:	4b41      	ldr	r3, [pc, #260]	; (8006b00 <USBD_SetConfig+0x144>)
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d01c      	beq.n	8006a3a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006a00:	4b3f      	ldr	r3, [pc, #252]	; (8006b00 <USBD_SetConfig+0x144>)
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	461a      	mov	r2, r3
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006a0a:	4b3d      	ldr	r3, [pc, #244]	; (8006b00 <USBD_SetConfig+0x144>)
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	4619      	mov	r1, r3
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f7ff f96f 	bl	8005cf4 <USBD_SetClassConfig>
 8006a16:	4603      	mov	r3, r0
 8006a18:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8006a1a:	7bfb      	ldrb	r3, [r7, #15]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d004      	beq.n	8006a2a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006a20:	6839      	ldr	r1, [r7, #0]
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 f945 	bl	8006cb2 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006a28:	e065      	b.n	8006af6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 f9ef 	bl	8006e0e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2203      	movs	r2, #3
 8006a34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006a38:	e05d      	b.n	8006af6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 f9e7 	bl	8006e0e <USBD_CtlSendStatus>
    break;
 8006a40:	e059      	b.n	8006af6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8006a42:	4b2f      	ldr	r3, [pc, #188]	; (8006b00 <USBD_SetConfig+0x144>)
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d112      	bne.n	8006a70 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2202      	movs	r2, #2
 8006a4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006a52:	4b2b      	ldr	r3, [pc, #172]	; (8006b00 <USBD_SetConfig+0x144>)
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	461a      	mov	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006a5c:	4b28      	ldr	r3, [pc, #160]	; (8006b00 <USBD_SetConfig+0x144>)
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	4619      	mov	r1, r3
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f7ff f962 	bl	8005d2c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 f9d0 	bl	8006e0e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006a6e:	e042      	b.n	8006af6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8006a70:	4b23      	ldr	r3, [pc, #140]	; (8006b00 <USBD_SetConfig+0x144>)
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	461a      	mov	r2, r3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d02a      	beq.n	8006ad4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	4619      	mov	r1, r3
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f7ff f950 	bl	8005d2c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8006a8c:	4b1c      	ldr	r3, [pc, #112]	; (8006b00 <USBD_SetConfig+0x144>)
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	461a      	mov	r2, r3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006a96:	4b1a      	ldr	r3, [pc, #104]	; (8006b00 <USBD_SetConfig+0x144>)
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f7ff f929 	bl	8005cf4 <USBD_SetClassConfig>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006aa6:	7bfb      	ldrb	r3, [r7, #15]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00f      	beq.n	8006acc <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8006aac:	6839      	ldr	r1, [r7, #0]
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f8ff 	bl	8006cb2 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	4619      	mov	r1, r3
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f7ff f935 	bl	8005d2c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2202      	movs	r2, #2
 8006ac6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006aca:	e014      	b.n	8006af6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 f99e 	bl	8006e0e <USBD_CtlSendStatus>
    break;
 8006ad2:	e010      	b.n	8006af6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 f99a 	bl	8006e0e <USBD_CtlSendStatus>
    break;
 8006ada:	e00c      	b.n	8006af6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006adc:	6839      	ldr	r1, [r7, #0]
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 f8e7 	bl	8006cb2 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006ae4:	4b06      	ldr	r3, [pc, #24]	; (8006b00 <USBD_SetConfig+0x144>)
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	4619      	mov	r1, r3
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f7ff f91e 	bl	8005d2c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006af0:	2303      	movs	r3, #3
 8006af2:	73fb      	strb	r3, [r7, #15]
    break;
 8006af4:	bf00      	nop
  }

  return ret;
 8006af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	200001f8 	.word	0x200001f8

08006b04 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	88db      	ldrh	r3, [r3, #6]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d004      	beq.n	8006b20 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006b16:	6839      	ldr	r1, [r7, #0]
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 f8ca 	bl	8006cb2 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8006b1e:	e022      	b.n	8006b66 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	dc02      	bgt.n	8006b30 <USBD_GetConfig+0x2c>
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	dc03      	bgt.n	8006b36 <USBD_GetConfig+0x32>
 8006b2e:	e015      	b.n	8006b5c <USBD_GetConfig+0x58>
 8006b30:	2b03      	cmp	r3, #3
 8006b32:	d00b      	beq.n	8006b4c <USBD_GetConfig+0x48>
 8006b34:	e012      	b.n	8006b5c <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	3308      	adds	r3, #8
 8006b40:	2201      	movs	r2, #1
 8006b42:	4619      	mov	r1, r3
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 f925 	bl	8006d94 <USBD_CtlSendData>
      break;
 8006b4a:	e00c      	b.n	8006b66 <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	3304      	adds	r3, #4
 8006b50:	2201      	movs	r2, #1
 8006b52:	4619      	mov	r1, r3
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 f91d 	bl	8006d94 <USBD_CtlSendData>
      break;
 8006b5a:	e004      	b.n	8006b66 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 8006b5c:	6839      	ldr	r1, [r7, #0]
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f8a7 	bl	8006cb2 <USBD_CtlError>
      break;
 8006b64:	bf00      	nop
}
 8006b66:	bf00      	nop
 8006b68:	3708      	adds	r7, #8
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b082      	sub	sp, #8
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
 8006b76:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	d81e      	bhi.n	8006bc2 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	88db      	ldrh	r3, [r3, #6]
 8006b88:	2b02      	cmp	r3, #2
 8006b8a:	d004      	beq.n	8006b96 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006b8c:	6839      	ldr	r1, [r7, #0]
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 f88f 	bl	8006cb2 <USBD_CtlError>
      break;
 8006b94:	e01a      	b.n	8006bcc <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d005      	beq.n	8006bb2 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	f043 0202 	orr.w	r2, r3, #2
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	330c      	adds	r3, #12
 8006bb6:	2202      	movs	r2, #2
 8006bb8:	4619      	mov	r1, r3
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 f8ea 	bl	8006d94 <USBD_CtlSendData>
    break;
 8006bc0:	e004      	b.n	8006bcc <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8006bc2:	6839      	ldr	r1, [r7, #0]
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 f874 	bl	8006cb2 <USBD_CtlError>
    break;
 8006bca:	bf00      	nop
  }
}
 8006bcc:	bf00      	nop
 8006bce:	3708      	adds	r7, #8
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	885b      	ldrh	r3, [r3, #2]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d106      	bne.n	8006bf4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2201      	movs	r2, #1
 8006bea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 f90d 	bl	8006e0e <USBD_CtlSendStatus>
  }
}
 8006bf4:	bf00      	nop
 8006bf6:	3708      	adds	r7, #8
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b082      	sub	sp, #8
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d80b      	bhi.n	8006c2a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	885b      	ldrh	r3, [r3, #2]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d10c      	bne.n	8006c34 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 f8f3 	bl	8006e0e <USBD_CtlSendStatus>
      }
      break;
 8006c28:	e004      	b.n	8006c34 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006c2a:	6839      	ldr	r1, [r7, #0]
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 f840 	bl	8006cb2 <USBD_CtlError>
      break;
 8006c32:	e000      	b.n	8006c36 <USBD_ClrFeature+0x3a>
      break;
 8006c34:	bf00      	nop
  }
}
 8006c36:	bf00      	nop
 8006c38:	3708      	adds	r7, #8
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006c3e:	b580      	push	{r7, lr}
 8006c40:	b084      	sub	sp, #16
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
 8006c46:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	781a      	ldrb	r2, [r3, #0]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	3301      	adds	r3, #1
 8006c58:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	781a      	ldrb	r2, [r3, #0]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	3301      	adds	r3, #1
 8006c66:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006c68:	68f8      	ldr	r0, [r7, #12]
 8006c6a:	f7ff fa9c 	bl	80061a6 <SWAPBYTE>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	461a      	mov	r2, r3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	3301      	adds	r3, #1
 8006c7a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006c82:	68f8      	ldr	r0, [r7, #12]
 8006c84:	f7ff fa8f 	bl	80061a6 <SWAPBYTE>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	3301      	adds	r3, #1
 8006c94:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	f7ff fa82 	bl	80061a6 <SWAPBYTE>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	80da      	strh	r2, [r3, #6]
}
 8006caa:	bf00      	nop
 8006cac:	3710      	adds	r7, #16
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b082      	sub	sp, #8
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
 8006cba:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006cbc:	2180      	movs	r1, #128	; 0x80
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 fdfe 	bl	80078c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006cc4:	2100      	movs	r1, #0
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 fdfa 	bl	80078c0 <USBD_LL_StallEP>
}
 8006ccc:	bf00      	nop
 8006cce:	3708      	adds	r7, #8
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b086      	sub	sp, #24
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d036      	beq.n	8006d58 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006cee:	6938      	ldr	r0, [r7, #16]
 8006cf0:	f000 f836 	bl	8006d60 <USBD_GetLen>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	005b      	lsls	r3, r3, #1
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006d02:	7dfb      	ldrb	r3, [r7, #23]
 8006d04:	68ba      	ldr	r2, [r7, #8]
 8006d06:	4413      	add	r3, r2
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	7812      	ldrb	r2, [r2, #0]
 8006d0c:	701a      	strb	r2, [r3, #0]
  idx++;
 8006d0e:	7dfb      	ldrb	r3, [r7, #23]
 8006d10:	3301      	adds	r3, #1
 8006d12:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006d14:	7dfb      	ldrb	r3, [r7, #23]
 8006d16:	68ba      	ldr	r2, [r7, #8]
 8006d18:	4413      	add	r3, r2
 8006d1a:	2203      	movs	r2, #3
 8006d1c:	701a      	strb	r2, [r3, #0]
  idx++;
 8006d1e:	7dfb      	ldrb	r3, [r7, #23]
 8006d20:	3301      	adds	r3, #1
 8006d22:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006d24:	e013      	b.n	8006d4e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006d26:	7dfb      	ldrb	r3, [r7, #23]
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	693a      	ldr	r2, [r7, #16]
 8006d2e:	7812      	ldrb	r2, [r2, #0]
 8006d30:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	3301      	adds	r3, #1
 8006d36:	613b      	str	r3, [r7, #16]
    idx++;
 8006d38:	7dfb      	ldrb	r3, [r7, #23]
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006d3e:	7dfb      	ldrb	r3, [r7, #23]
 8006d40:	68ba      	ldr	r2, [r7, #8]
 8006d42:	4413      	add	r3, r2
 8006d44:	2200      	movs	r2, #0
 8006d46:	701a      	strb	r2, [r3, #0]
    idx++;
 8006d48:	7dfb      	ldrb	r3, [r7, #23]
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1e7      	bne.n	8006d26 <USBD_GetString+0x52>
 8006d56:	e000      	b.n	8006d5a <USBD_GetString+0x86>
    return;
 8006d58:	bf00      	nop
  }
}
 8006d5a:	3718      	adds	r7, #24
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b085      	sub	sp, #20
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006d70:	e005      	b.n	8006d7e <USBD_GetLen+0x1e>
  {
    len++;
 8006d72:	7bfb      	ldrb	r3, [r7, #15]
 8006d74:	3301      	adds	r3, #1
 8006d76:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1f5      	bne.n	8006d72 <USBD_GetLen+0x12>
  }

  return len;
 8006d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3714      	adds	r7, #20
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2202      	movs	r2, #2
 8006da4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	68ba      	ldr	r2, [r7, #8]
 8006db8:	2100      	movs	r1, #0
 8006dba:	68f8      	ldr	r0, [r7, #12]
 8006dbc:	f000 fe09 	bl	80079d2 <USBD_LL_Transmit>

  return USBD_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3710      	adds	r7, #16
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b084      	sub	sp, #16
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	60f8      	str	r0, [r7, #12]
 8006dd2:	60b9      	str	r1, [r7, #8]
 8006dd4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	68ba      	ldr	r2, [r7, #8]
 8006dda:	2100      	movs	r1, #0
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f000 fdf8 	bl	80079d2 <USBD_LL_Transmit>

  return USBD_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3710      	adds	r7, #16
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	2100      	movs	r1, #0
 8006dfe:	68f8      	ldr	r0, [r7, #12]
 8006e00:	f000 fe08 	bl	8007a14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}

08006e0e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006e0e:	b580      	push	{r7, lr}
 8006e10:	b082      	sub	sp, #8
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2204      	movs	r2, #4
 8006e1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006e1e:	2300      	movs	r3, #0
 8006e20:	2200      	movs	r2, #0
 8006e22:	2100      	movs	r1, #0
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 fdd4 	bl	80079d2 <USBD_LL_Transmit>

  return USBD_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3708      	adds	r7, #8
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2205      	movs	r2, #5
 8006e40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e44:	2300      	movs	r3, #0
 8006e46:	2200      	movs	r2, #0
 8006e48:	2100      	movs	r1, #0
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 fde2 	bl	8007a14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3708      	adds	r7, #8
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}

08006e5a <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e5a:	b480      	push	{r7}
 8006e5c:	b085      	sub	sp, #20
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
 8006e62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	689a      	ldr	r2, [r3, #8]
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	683a      	ldr	r2, [r7, #0]
 8006e7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	683a      	ldr	r2, [r7, #0]
 8006e84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	1c5a      	adds	r2, r3, #1
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	601a      	str	r2, [r3, #0]
}
 8006e96:	bf00      	nop
 8006e98:	3714      	adds	r7, #20
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr

08006ea2 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	b085      	sub	sp, #20
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	6892      	ldr	r2, [r2, #8]
 8006eb8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	6852      	ldr	r2, [r2, #4]
 8006ec2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d103      	bne.n	8006ed6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	689a      	ldr	r2, [r3, #8]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	1e5a      	subs	r2, r3, #1
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3714      	adds	r7, #20
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr
	...

08006ef8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b086      	sub	sp, #24
 8006efc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006efe:	2300      	movs	r3, #0
 8006f00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f02:	4b4f      	ldr	r3, [pc, #316]	; (8007040 <xTaskIncrementTick+0x148>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	f040 8089 	bne.w	800701e <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006f0c:	4b4d      	ldr	r3, [pc, #308]	; (8007044 <xTaskIncrementTick+0x14c>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	3301      	adds	r3, #1
 8006f12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006f14:	4a4b      	ldr	r2, [pc, #300]	; (8007044 <xTaskIncrementTick+0x14c>)
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d120      	bne.n	8006f62 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006f20:	4b49      	ldr	r3, [pc, #292]	; (8007048 <xTaskIncrementTick+0x150>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00a      	beq.n	8006f40 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f2e:	f383 8811 	msr	BASEPRI, r3
 8006f32:	f3bf 8f6f 	isb	sy
 8006f36:	f3bf 8f4f 	dsb	sy
 8006f3a:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006f3c:	bf00      	nop
 8006f3e:	e7fe      	b.n	8006f3e <xTaskIncrementTick+0x46>
 8006f40:	4b41      	ldr	r3, [pc, #260]	; (8007048 <xTaskIncrementTick+0x150>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	60fb      	str	r3, [r7, #12]
 8006f46:	4b41      	ldr	r3, [pc, #260]	; (800704c <xTaskIncrementTick+0x154>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a3f      	ldr	r2, [pc, #252]	; (8007048 <xTaskIncrementTick+0x150>)
 8006f4c:	6013      	str	r3, [r2, #0]
 8006f4e:	4a3f      	ldr	r2, [pc, #252]	; (800704c <xTaskIncrementTick+0x154>)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6013      	str	r3, [r2, #0]
 8006f54:	4b3e      	ldr	r3, [pc, #248]	; (8007050 <xTaskIncrementTick+0x158>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	3301      	adds	r3, #1
 8006f5a:	4a3d      	ldr	r2, [pc, #244]	; (8007050 <xTaskIncrementTick+0x158>)
 8006f5c:	6013      	str	r3, [r2, #0]
 8006f5e:	f000 f8e3 	bl	8007128 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006f62:	4b3c      	ldr	r3, [pc, #240]	; (8007054 <xTaskIncrementTick+0x15c>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	693a      	ldr	r2, [r7, #16]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d349      	bcc.n	8007000 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f6c:	4b36      	ldr	r3, [pc, #216]	; (8007048 <xTaskIncrementTick+0x150>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d104      	bne.n	8006f80 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f76:	4b37      	ldr	r3, [pc, #220]	; (8007054 <xTaskIncrementTick+0x15c>)
 8006f78:	f04f 32ff 	mov.w	r2, #4294967295
 8006f7c:	601a      	str	r2, [r3, #0]
					break;
 8006f7e:	e03f      	b.n	8007000 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f80:	4b31      	ldr	r3, [pc, #196]	; (8007048 <xTaskIncrementTick+0x150>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006f90:	693a      	ldr	r2, [r7, #16]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d203      	bcs.n	8006fa0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006f98:	4a2e      	ldr	r2, [pc, #184]	; (8007054 <xTaskIncrementTick+0x15c>)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006f9e:	e02f      	b.n	8007000 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	3304      	adds	r3, #4
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7ff ff7c 	bl	8006ea2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d004      	beq.n	8006fbc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	3318      	adds	r3, #24
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f7ff ff73 	bl	8006ea2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fc0:	4b25      	ldr	r3, [pc, #148]	; (8007058 <xTaskIncrementTick+0x160>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d903      	bls.n	8006fd0 <xTaskIncrementTick+0xd8>
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fcc:	4a22      	ldr	r2, [pc, #136]	; (8007058 <xTaskIncrementTick+0x160>)
 8006fce:	6013      	str	r3, [r2, #0]
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	4413      	add	r3, r2
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	4a1f      	ldr	r2, [pc, #124]	; (800705c <xTaskIncrementTick+0x164>)
 8006fde:	441a      	add	r2, r3
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	3304      	adds	r3, #4
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	4610      	mov	r0, r2
 8006fe8:	f7ff ff37 	bl	8006e5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ff0:	4b1b      	ldr	r3, [pc, #108]	; (8007060 <xTaskIncrementTick+0x168>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d3b8      	bcc.n	8006f6c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ffe:	e7b5      	b.n	8006f6c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007000:	4b17      	ldr	r3, [pc, #92]	; (8007060 <xTaskIncrementTick+0x168>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007006:	4915      	ldr	r1, [pc, #84]	; (800705c <xTaskIncrementTick+0x164>)
 8007008:	4613      	mov	r3, r2
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	4413      	add	r3, r2
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	440b      	add	r3, r1
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2b01      	cmp	r3, #1
 8007016:	d907      	bls.n	8007028 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8007018:	2301      	movs	r3, #1
 800701a:	617b      	str	r3, [r7, #20]
 800701c:	e004      	b.n	8007028 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800701e:	4b11      	ldr	r3, [pc, #68]	; (8007064 <xTaskIncrementTick+0x16c>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	3301      	adds	r3, #1
 8007024:	4a0f      	ldr	r2, [pc, #60]	; (8007064 <xTaskIncrementTick+0x16c>)
 8007026:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007028:	4b0f      	ldr	r3, [pc, #60]	; (8007068 <xTaskIncrementTick+0x170>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d001      	beq.n	8007034 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8007030:	2301      	movs	r3, #1
 8007032:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007034:	697b      	ldr	r3, [r7, #20]
}
 8007036:	4618      	mov	r0, r3
 8007038:	3718      	adds	r7, #24
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	20000680 	.word	0x20000680
 8007044:	20000668 	.word	0x20000668
 8007048:	20000660 	.word	0x20000660
 800704c:	20000664 	.word	0x20000664
 8007050:	20000678 	.word	0x20000678
 8007054:	2000067c 	.word	0x2000067c
 8007058:	2000066c 	.word	0x2000066c
 800705c:	20000200 	.word	0x20000200
 8007060:	200001fc 	.word	0x200001fc
 8007064:	20000670 	.word	0x20000670
 8007068:	20000674 	.word	0x20000674

0800706c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800706c:	b480      	push	{r7}
 800706e:	b085      	sub	sp, #20
 8007070:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007072:	4b28      	ldr	r3, [pc, #160]	; (8007114 <vTaskSwitchContext+0xa8>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d003      	beq.n	8007082 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800707a:	4b27      	ldr	r3, [pc, #156]	; (8007118 <vTaskSwitchContext+0xac>)
 800707c:	2201      	movs	r2, #1
 800707e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007080:	e041      	b.n	8007106 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007082:	4b25      	ldr	r3, [pc, #148]	; (8007118 <vTaskSwitchContext+0xac>)
 8007084:	2200      	movs	r2, #0
 8007086:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007088:	4b24      	ldr	r3, [pc, #144]	; (800711c <vTaskSwitchContext+0xb0>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	60fb      	str	r3, [r7, #12]
 800708e:	e010      	b.n	80070b2 <vTaskSwitchContext+0x46>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d10a      	bne.n	80070ac <vTaskSwitchContext+0x40>
	__asm volatile
 8007096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800709a:	f383 8811 	msr	BASEPRI, r3
 800709e:	f3bf 8f6f 	isb	sy
 80070a2:	f3bf 8f4f 	dsb	sy
 80070a6:	607b      	str	r3, [r7, #4]
}
 80070a8:	bf00      	nop
 80070aa:	e7fe      	b.n	80070aa <vTaskSwitchContext+0x3e>
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	3b01      	subs	r3, #1
 80070b0:	60fb      	str	r3, [r7, #12]
 80070b2:	491b      	ldr	r1, [pc, #108]	; (8007120 <vTaskSwitchContext+0xb4>)
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	4613      	mov	r3, r2
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	4413      	add	r3, r2
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	440b      	add	r3, r1
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d0e4      	beq.n	8007090 <vTaskSwitchContext+0x24>
 80070c6:	68fa      	ldr	r2, [r7, #12]
 80070c8:	4613      	mov	r3, r2
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	4413      	add	r3, r2
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	4a13      	ldr	r2, [pc, #76]	; (8007120 <vTaskSwitchContext+0xb4>)
 80070d2:	4413      	add	r3, r2
 80070d4:	60bb      	str	r3, [r7, #8]
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	685a      	ldr	r2, [r3, #4]
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	605a      	str	r2, [r3, #4]
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	685a      	ldr	r2, [r3, #4]
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	3308      	adds	r3, #8
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d104      	bne.n	80070f6 <vTaskSwitchContext+0x8a>
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	685a      	ldr	r2, [r3, #4]
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	605a      	str	r2, [r3, #4]
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	4a09      	ldr	r2, [pc, #36]	; (8007124 <vTaskSwitchContext+0xb8>)
 80070fe:	6013      	str	r3, [r2, #0]
 8007100:	4a06      	ldr	r2, [pc, #24]	; (800711c <vTaskSwitchContext+0xb0>)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6013      	str	r3, [r2, #0]
}
 8007106:	bf00      	nop
 8007108:	3714      	adds	r7, #20
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	20000680 	.word	0x20000680
 8007118:	20000674 	.word	0x20000674
 800711c:	2000066c 	.word	0x2000066c
 8007120:	20000200 	.word	0x20000200
 8007124:	200001fc 	.word	0x200001fc

08007128 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800712e:	4b0c      	ldr	r3, [pc, #48]	; (8007160 <prvResetNextTaskUnblockTime+0x38>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d104      	bne.n	8007142 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007138:	4b0a      	ldr	r3, [pc, #40]	; (8007164 <prvResetNextTaskUnblockTime+0x3c>)
 800713a:	f04f 32ff 	mov.w	r2, #4294967295
 800713e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007140:	e008      	b.n	8007154 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007142:	4b07      	ldr	r3, [pc, #28]	; (8007160 <prvResetNextTaskUnblockTime+0x38>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	4a04      	ldr	r2, [pc, #16]	; (8007164 <prvResetNextTaskUnblockTime+0x3c>)
 8007152:	6013      	str	r3, [r2, #0]
}
 8007154:	bf00      	nop
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr
 8007160:	20000660 	.word	0x20000660
 8007164:	2000067c 	.word	0x2000067c
	...

08007170 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007170:	4b07      	ldr	r3, [pc, #28]	; (8007190 <pxCurrentTCBConst2>)
 8007172:	6819      	ldr	r1, [r3, #0]
 8007174:	6808      	ldr	r0, [r1, #0]
 8007176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800717a:	f380 8809 	msr	PSP, r0
 800717e:	f3bf 8f6f 	isb	sy
 8007182:	f04f 0000 	mov.w	r0, #0
 8007186:	f380 8811 	msr	BASEPRI, r0
 800718a:	4770      	bx	lr
 800718c:	f3af 8000 	nop.w

08007190 <pxCurrentTCBConst2>:
 8007190:	200001fc 	.word	0x200001fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007194:	bf00      	nop
 8007196:	bf00      	nop
	...

080071a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80071a0:	f3ef 8009 	mrs	r0, PSP
 80071a4:	f3bf 8f6f 	isb	sy
 80071a8:	4b15      	ldr	r3, [pc, #84]	; (8007200 <pxCurrentTCBConst>)
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	f01e 0f10 	tst.w	lr, #16
 80071b0:	bf08      	it	eq
 80071b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80071b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ba:	6010      	str	r0, [r2, #0]
 80071bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80071c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80071c4:	f380 8811 	msr	BASEPRI, r0
 80071c8:	f3bf 8f4f 	dsb	sy
 80071cc:	f3bf 8f6f 	isb	sy
 80071d0:	f7ff ff4c 	bl	800706c <vTaskSwitchContext>
 80071d4:	f04f 0000 	mov.w	r0, #0
 80071d8:	f380 8811 	msr	BASEPRI, r0
 80071dc:	bc09      	pop	{r0, r3}
 80071de:	6819      	ldr	r1, [r3, #0]
 80071e0:	6808      	ldr	r0, [r1, #0]
 80071e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e6:	f01e 0f10 	tst.w	lr, #16
 80071ea:	bf08      	it	eq
 80071ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80071f0:	f380 8809 	msr	PSP, r0
 80071f4:	f3bf 8f6f 	isb	sy
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop
 80071fc:	f3af 8000 	nop.w

08007200 <pxCurrentTCBConst>:
 8007200:	200001fc 	.word	0x200001fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007204:	bf00      	nop
 8007206:	bf00      	nop

08007208 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
	__asm volatile
 800720e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007212:	f383 8811 	msr	BASEPRI, r3
 8007216:	f3bf 8f6f 	isb	sy
 800721a:	f3bf 8f4f 	dsb	sy
 800721e:	607b      	str	r3, [r7, #4]
}
 8007220:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007222:	f7ff fe69 	bl	8006ef8 <xTaskIncrementTick>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d003      	beq.n	8007234 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800722c:	4b06      	ldr	r3, [pc, #24]	; (8007248 <SysTick_Handler+0x40>)
 800722e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007232:	601a      	str	r2, [r3, #0]
 8007234:	2300      	movs	r3, #0
 8007236:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800723e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007240:	bf00      	nop
 8007242:	3708      	adds	r7, #8
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}
 8007248:	e000ed04 	.word	0xe000ed04

0800724c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007250:	2200      	movs	r2, #0
 8007252:	490e      	ldr	r1, [pc, #56]	; (800728c <MX_USB_DEVICE_Init+0x40>)
 8007254:	480e      	ldr	r0, [pc, #56]	; (8007290 <MX_USB_DEVICE_Init+0x44>)
 8007256:	f7fe fcdf 	bl	8005c18 <USBD_Init>
 800725a:	4603      	mov	r3, r0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d001      	beq.n	8007264 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007260:	f7f9 fad5 	bl	800080e <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007264:	490b      	ldr	r1, [pc, #44]	; (8007294 <MX_USB_DEVICE_Init+0x48>)
 8007266:	480a      	ldr	r0, [pc, #40]	; (8007290 <MX_USB_DEVICE_Init+0x44>)
 8007268:	f7fe fd0c 	bl	8005c84 <USBD_RegisterClass>
 800726c:	4603      	mov	r3, r0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d001      	beq.n	8007276 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007272:	f7f9 facc 	bl	800080e <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007276:	4806      	ldr	r0, [pc, #24]	; (8007290 <MX_USB_DEVICE_Init+0x44>)
 8007278:	f7fe fd25 	bl	8005cc6 <USBD_Start>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d001      	beq.n	8007286 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007282:	f7f9 fac4 	bl	800080e <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007286:	bf00      	nop
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	20000114 	.word	0x20000114
 8007290:	20000750 	.word	0x20000750
 8007294:	2000000c 	.word	0x2000000c

08007298 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	4603      	mov	r3, r0
 80072a0:	6039      	str	r1, [r7, #0]
 80072a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	2212      	movs	r2, #18
 80072a8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80072aa:	4b03      	ldr	r3, [pc, #12]	; (80072b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	370c      	adds	r7, #12
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr
 80072b8:	20000134 	.word	0x20000134

080072bc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	4603      	mov	r3, r0
 80072c4:	6039      	str	r1, [r7, #0]
 80072c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	2204      	movs	r2, #4
 80072cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80072ce:	4b03      	ldr	r3, [pc, #12]	; (80072dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr
 80072dc:	20000154 	.word	0x20000154

080072e0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	4603      	mov	r3, r0
 80072e8:	6039      	str	r1, [r7, #0]
 80072ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80072ec:	79fb      	ldrb	r3, [r7, #7]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d105      	bne.n	80072fe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80072f2:	683a      	ldr	r2, [r7, #0]
 80072f4:	4907      	ldr	r1, [pc, #28]	; (8007314 <USBD_FS_ProductStrDescriptor+0x34>)
 80072f6:	4808      	ldr	r0, [pc, #32]	; (8007318 <USBD_FS_ProductStrDescriptor+0x38>)
 80072f8:	f7ff fcec 	bl	8006cd4 <USBD_GetString>
 80072fc:	e004      	b.n	8007308 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80072fe:	683a      	ldr	r2, [r7, #0]
 8007300:	4904      	ldr	r1, [pc, #16]	; (8007314 <USBD_FS_ProductStrDescriptor+0x34>)
 8007302:	4805      	ldr	r0, [pc, #20]	; (8007318 <USBD_FS_ProductStrDescriptor+0x38>)
 8007304:	f7ff fce6 	bl	8006cd4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007308:	4b02      	ldr	r3, [pc, #8]	; (8007314 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800730a:	4618      	mov	r0, r3
 800730c:	3708      	adds	r7, #8
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	20000a20 	.word	0x20000a20
 8007318:	08007d78 	.word	0x08007d78

0800731c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	4603      	mov	r3, r0
 8007324:	6039      	str	r1, [r7, #0]
 8007326:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007328:	683a      	ldr	r2, [r7, #0]
 800732a:	4904      	ldr	r1, [pc, #16]	; (800733c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800732c:	4804      	ldr	r0, [pc, #16]	; (8007340 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800732e:	f7ff fcd1 	bl	8006cd4 <USBD_GetString>
  return USBD_StrDesc;
 8007332:	4b02      	ldr	r3, [pc, #8]	; (800733c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007334:	4618      	mov	r0, r3
 8007336:	3708      	adds	r7, #8
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}
 800733c:	20000a20 	.word	0x20000a20
 8007340:	08007d90 	.word	0x08007d90

08007344 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
 800734a:	4603      	mov	r3, r0
 800734c:	6039      	str	r1, [r7, #0]
 800734e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	221a      	movs	r2, #26
 8007354:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007356:	f000 f855 	bl	8007404 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800735a:	4b02      	ldr	r3, [pc, #8]	; (8007364 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800735c:	4618      	mov	r0, r3
 800735e:	3708      	adds	r7, #8
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}
 8007364:	20000158 	.word	0x20000158

08007368 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
 800736e:	4603      	mov	r3, r0
 8007370:	6039      	str	r1, [r7, #0]
 8007372:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007374:	79fb      	ldrb	r3, [r7, #7]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d105      	bne.n	8007386 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800737a:	683a      	ldr	r2, [r7, #0]
 800737c:	4907      	ldr	r1, [pc, #28]	; (800739c <USBD_FS_ConfigStrDescriptor+0x34>)
 800737e:	4808      	ldr	r0, [pc, #32]	; (80073a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007380:	f7ff fca8 	bl	8006cd4 <USBD_GetString>
 8007384:	e004      	b.n	8007390 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007386:	683a      	ldr	r2, [r7, #0]
 8007388:	4904      	ldr	r1, [pc, #16]	; (800739c <USBD_FS_ConfigStrDescriptor+0x34>)
 800738a:	4805      	ldr	r0, [pc, #20]	; (80073a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800738c:	f7ff fca2 	bl	8006cd4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007390:	4b02      	ldr	r3, [pc, #8]	; (800739c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007392:	4618      	mov	r0, r3
 8007394:	3708      	adds	r7, #8
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	20000a20 	.word	0x20000a20
 80073a0:	08007da4 	.word	0x08007da4

080073a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b082      	sub	sp, #8
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	4603      	mov	r3, r0
 80073ac:	6039      	str	r1, [r7, #0]
 80073ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80073b0:	79fb      	ldrb	r3, [r7, #7]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d105      	bne.n	80073c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80073b6:	683a      	ldr	r2, [r7, #0]
 80073b8:	4907      	ldr	r1, [pc, #28]	; (80073d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80073ba:	4808      	ldr	r0, [pc, #32]	; (80073dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80073bc:	f7ff fc8a 	bl	8006cd4 <USBD_GetString>
 80073c0:	e004      	b.n	80073cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80073c2:	683a      	ldr	r2, [r7, #0]
 80073c4:	4904      	ldr	r1, [pc, #16]	; (80073d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80073c6:	4805      	ldr	r0, [pc, #20]	; (80073dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80073c8:	f7ff fc84 	bl	8006cd4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80073cc:	4b02      	ldr	r3, [pc, #8]	; (80073d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3708      	adds	r7, #8
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	20000a20 	.word	0x20000a20
 80073dc:	08007db0 	.word	0x08007db0

080073e0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	4603      	mov	r3, r0
 80073e8:	6039      	str	r1, [r7, #0]
 80073ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	220c      	movs	r2, #12
 80073f0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80073f2:	4b03      	ldr	r3, [pc, #12]	; (8007400 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	370c      	adds	r7, #12
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr
 8007400:	20000148 	.word	0x20000148

08007404 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800740a:	4b0f      	ldr	r3, [pc, #60]	; (8007448 <Get_SerialNum+0x44>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007410:	4b0e      	ldr	r3, [pc, #56]	; (800744c <Get_SerialNum+0x48>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007416:	4b0e      	ldr	r3, [pc, #56]	; (8007450 <Get_SerialNum+0x4c>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4413      	add	r3, r2
 8007422:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d009      	beq.n	800743e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800742a:	2208      	movs	r2, #8
 800742c:	4909      	ldr	r1, [pc, #36]	; (8007454 <Get_SerialNum+0x50>)
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	f000 f814 	bl	800745c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007434:	2204      	movs	r2, #4
 8007436:	4908      	ldr	r1, [pc, #32]	; (8007458 <Get_SerialNum+0x54>)
 8007438:	68b8      	ldr	r0, [r7, #8]
 800743a:	f000 f80f 	bl	800745c <IntToUnicode>
  }
}
 800743e:	bf00      	nop
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	1fff7a10 	.word	0x1fff7a10
 800744c:	1fff7a14 	.word	0x1fff7a14
 8007450:	1fff7a18 	.word	0x1fff7a18
 8007454:	2000015a 	.word	0x2000015a
 8007458:	2000016a 	.word	0x2000016a

0800745c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800745c:	b480      	push	{r7}
 800745e:	b087      	sub	sp, #28
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	4613      	mov	r3, r2
 8007468:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800746a:	2300      	movs	r3, #0
 800746c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800746e:	2300      	movs	r3, #0
 8007470:	75fb      	strb	r3, [r7, #23]
 8007472:	e027      	b.n	80074c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	0f1b      	lsrs	r3, r3, #28
 8007478:	2b09      	cmp	r3, #9
 800747a:	d80b      	bhi.n	8007494 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	0f1b      	lsrs	r3, r3, #28
 8007480:	b2da      	uxtb	r2, r3
 8007482:	7dfb      	ldrb	r3, [r7, #23]
 8007484:	005b      	lsls	r3, r3, #1
 8007486:	4619      	mov	r1, r3
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	440b      	add	r3, r1
 800748c:	3230      	adds	r2, #48	; 0x30
 800748e:	b2d2      	uxtb	r2, r2
 8007490:	701a      	strb	r2, [r3, #0]
 8007492:	e00a      	b.n	80074aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	0f1b      	lsrs	r3, r3, #28
 8007498:	b2da      	uxtb	r2, r3
 800749a:	7dfb      	ldrb	r3, [r7, #23]
 800749c:	005b      	lsls	r3, r3, #1
 800749e:	4619      	mov	r1, r3
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	440b      	add	r3, r1
 80074a4:	3237      	adds	r2, #55	; 0x37
 80074a6:	b2d2      	uxtb	r2, r2
 80074a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	011b      	lsls	r3, r3, #4
 80074ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80074b0:	7dfb      	ldrb	r3, [r7, #23]
 80074b2:	005b      	lsls	r3, r3, #1
 80074b4:	3301      	adds	r3, #1
 80074b6:	68ba      	ldr	r2, [r7, #8]
 80074b8:	4413      	add	r3, r2
 80074ba:	2200      	movs	r2, #0
 80074bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80074be:	7dfb      	ldrb	r3, [r7, #23]
 80074c0:	3301      	adds	r3, #1
 80074c2:	75fb      	strb	r3, [r7, #23]
 80074c4:	7dfa      	ldrb	r2, [r7, #23]
 80074c6:	79fb      	ldrb	r3, [r7, #7]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d3d3      	bcc.n	8007474 <IntToUnicode+0x18>
  }
}
 80074cc:	bf00      	nop
 80074ce:	bf00      	nop
 80074d0:	371c      	adds	r7, #28
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr
	...

080074dc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b08a      	sub	sp, #40	; 0x28
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074e4:	f107 0314 	add.w	r3, r7, #20
 80074e8:	2200      	movs	r2, #0
 80074ea:	601a      	str	r2, [r3, #0]
 80074ec:	605a      	str	r2, [r3, #4]
 80074ee:	609a      	str	r2, [r3, #8]
 80074f0:	60da      	str	r2, [r3, #12]
 80074f2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074fc:	d13a      	bne.n	8007574 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074fe:	2300      	movs	r3, #0
 8007500:	613b      	str	r3, [r7, #16]
 8007502:	4b1e      	ldr	r3, [pc, #120]	; (800757c <HAL_PCD_MspInit+0xa0>)
 8007504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007506:	4a1d      	ldr	r2, [pc, #116]	; (800757c <HAL_PCD_MspInit+0xa0>)
 8007508:	f043 0301 	orr.w	r3, r3, #1
 800750c:	6313      	str	r3, [r2, #48]	; 0x30
 800750e:	4b1b      	ldr	r3, [pc, #108]	; (800757c <HAL_PCD_MspInit+0xa0>)
 8007510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007512:	f003 0301 	and.w	r3, r3, #1
 8007516:	613b      	str	r3, [r7, #16]
 8007518:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800751a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800751e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007520:	2302      	movs	r3, #2
 8007522:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007524:	2300      	movs	r3, #0
 8007526:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007528:	2303      	movs	r3, #3
 800752a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800752c:	230a      	movs	r3, #10
 800752e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007530:	f107 0314 	add.w	r3, r7, #20
 8007534:	4619      	mov	r1, r3
 8007536:	4812      	ldr	r0, [pc, #72]	; (8007580 <HAL_PCD_MspInit+0xa4>)
 8007538:	f7f9 fc7a 	bl	8000e30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800753c:	4b0f      	ldr	r3, [pc, #60]	; (800757c <HAL_PCD_MspInit+0xa0>)
 800753e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007540:	4a0e      	ldr	r2, [pc, #56]	; (800757c <HAL_PCD_MspInit+0xa0>)
 8007542:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007546:	6353      	str	r3, [r2, #52]	; 0x34
 8007548:	2300      	movs	r3, #0
 800754a:	60fb      	str	r3, [r7, #12]
 800754c:	4b0b      	ldr	r3, [pc, #44]	; (800757c <HAL_PCD_MspInit+0xa0>)
 800754e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007550:	4a0a      	ldr	r2, [pc, #40]	; (800757c <HAL_PCD_MspInit+0xa0>)
 8007552:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007556:	6453      	str	r3, [r2, #68]	; 0x44
 8007558:	4b08      	ldr	r3, [pc, #32]	; (800757c <HAL_PCD_MspInit+0xa0>)
 800755a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800755c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007560:	60fb      	str	r3, [r7, #12]
 8007562:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8007564:	2200      	movs	r2, #0
 8007566:	2105      	movs	r1, #5
 8007568:	2043      	movs	r0, #67	; 0x43
 800756a:	f7f9 fc37 	bl	8000ddc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800756e:	2043      	movs	r0, #67	; 0x43
 8007570:	f7f9 fc50 	bl	8000e14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007574:	bf00      	nop
 8007576:	3728      	adds	r7, #40	; 0x28
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}
 800757c:	40023800 	.word	0x40023800
 8007580:	40020000 	.word	0x40020000

08007584 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007598:	4619      	mov	r1, r3
 800759a:	4610      	mov	r0, r2
 800759c:	f7fe fbde 	bl	8005d5c <USBD_LL_SetupStage>
}
 80075a0:	bf00      	nop
 80075a2:	3708      	adds	r7, #8
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	460b      	mov	r3, r1
 80075b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80075ba:	78fa      	ldrb	r2, [r7, #3]
 80075bc:	6879      	ldr	r1, [r7, #4]
 80075be:	4613      	mov	r3, r2
 80075c0:	00db      	lsls	r3, r3, #3
 80075c2:	1a9b      	subs	r3, r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	440b      	add	r3, r1
 80075c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	78fb      	ldrb	r3, [r7, #3]
 80075d0:	4619      	mov	r1, r3
 80075d2:	f7fe fc18 	bl	8005e06 <USBD_LL_DataOutStage>
}
 80075d6:	bf00      	nop
 80075d8:	3708      	adds	r7, #8
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b082      	sub	sp, #8
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
 80075e6:	460b      	mov	r3, r1
 80075e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80075f0:	78fa      	ldrb	r2, [r7, #3]
 80075f2:	6879      	ldr	r1, [r7, #4]
 80075f4:	4613      	mov	r3, r2
 80075f6:	00db      	lsls	r3, r3, #3
 80075f8:	1a9b      	subs	r3, r3, r2
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	440b      	add	r3, r1
 80075fe:	3348      	adds	r3, #72	; 0x48
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	78fb      	ldrb	r3, [r7, #3]
 8007604:	4619      	mov	r1, r3
 8007606:	f7fe fc61 	bl	8005ecc <USBD_LL_DataInStage>
}
 800760a:	bf00      	nop
 800760c:	3708      	adds	r7, #8
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}

08007612 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007612:	b580      	push	{r7, lr}
 8007614:	b082      	sub	sp, #8
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007620:	4618      	mov	r0, r3
 8007622:	f7fe fd65 	bl	80060f0 <USBD_LL_SOF>
}
 8007626:	bf00      	nop
 8007628:	3708      	adds	r7, #8
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800762e:	b580      	push	{r7, lr}
 8007630:	b084      	sub	sp, #16
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007636:	2301      	movs	r3, #1
 8007638:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d102      	bne.n	8007648 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007642:	2300      	movs	r3, #0
 8007644:	73fb      	strb	r3, [r7, #15]
 8007646:	e008      	b.n	800765a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	2b02      	cmp	r3, #2
 800764e:	d102      	bne.n	8007656 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007650:	2301      	movs	r3, #1
 8007652:	73fb      	strb	r3, [r7, #15]
 8007654:	e001      	b.n	800765a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007656:	f7f9 f8da 	bl	800080e <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007660:	7bfa      	ldrb	r2, [r7, #15]
 8007662:	4611      	mov	r1, r2
 8007664:	4618      	mov	r0, r3
 8007666:	f7fe fd08 	bl	800607a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007670:	4618      	mov	r0, r3
 8007672:	f7fe fcc1 	bl	8005ff8 <USBD_LL_Reset>
}
 8007676:	bf00      	nop
 8007678:	3710      	adds	r7, #16
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
	...

08007680 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800768e:	4618      	mov	r0, r3
 8007690:	f7fe fd03 	bl	800609a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	6812      	ldr	r2, [r2, #0]
 80076a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80076a6:	f043 0301 	orr.w	r3, r3, #1
 80076aa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6a1b      	ldr	r3, [r3, #32]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d005      	beq.n	80076c0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80076b4:	4b04      	ldr	r3, [pc, #16]	; (80076c8 <HAL_PCD_SuspendCallback+0x48>)
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	4a03      	ldr	r2, [pc, #12]	; (80076c8 <HAL_PCD_SuspendCallback+0x48>)
 80076ba:	f043 0306 	orr.w	r3, r3, #6
 80076be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80076c0:	bf00      	nop
 80076c2:	3708      	adds	r7, #8
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	e000ed00 	.word	0xe000ed00

080076cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b082      	sub	sp, #8
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80076da:	4618      	mov	r0, r3
 80076dc:	f7fe fcf2 	bl	80060c4 <USBD_LL_Resume>
}
 80076e0:	bf00      	nop
 80076e2:	3708      	adds	r7, #8
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	460b      	mov	r3, r1
 80076f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80076fa:	78fa      	ldrb	r2, [r7, #3]
 80076fc:	4611      	mov	r1, r2
 80076fe:	4618      	mov	r0, r3
 8007700:	f7fe fd1d 	bl	800613e <USBD_LL_IsoOUTIncomplete>
}
 8007704:	bf00      	nop
 8007706:	3708      	adds	r7, #8
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	460b      	mov	r3, r1
 8007716:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800771e:	78fa      	ldrb	r2, [r7, #3]
 8007720:	4611      	mov	r1, r2
 8007722:	4618      	mov	r0, r3
 8007724:	f7fe fcfe 	bl	8006124 <USBD_LL_IsoINIncomplete>
}
 8007728:	bf00      	nop
 800772a:	3708      	adds	r7, #8
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800773e:	4618      	mov	r0, r3
 8007740:	f7fe fd0a 	bl	8006158 <USBD_LL_DevConnected>
}
 8007744:	bf00      	nop
 8007746:	3708      	adds	r7, #8
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800775a:	4618      	mov	r0, r3
 800775c:	f7fe fd07 	bl	800616e <USBD_LL_DevDisconnected>
}
 8007760:	bf00      	nop
 8007762:	3708      	adds	r7, #8
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d13c      	bne.n	80077f2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007778:	4a20      	ldr	r2, [pc, #128]	; (80077fc <USBD_LL_Init+0x94>)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4a1e      	ldr	r2, [pc, #120]	; (80077fc <USBD_LL_Init+0x94>)
 8007784:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007788:	4b1c      	ldr	r3, [pc, #112]	; (80077fc <USBD_LL_Init+0x94>)
 800778a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800778e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007790:	4b1a      	ldr	r3, [pc, #104]	; (80077fc <USBD_LL_Init+0x94>)
 8007792:	2206      	movs	r2, #6
 8007794:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007796:	4b19      	ldr	r3, [pc, #100]	; (80077fc <USBD_LL_Init+0x94>)
 8007798:	2202      	movs	r2, #2
 800779a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800779c:	4b17      	ldr	r3, [pc, #92]	; (80077fc <USBD_LL_Init+0x94>)
 800779e:	2200      	movs	r2, #0
 80077a0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80077a2:	4b16      	ldr	r3, [pc, #88]	; (80077fc <USBD_LL_Init+0x94>)
 80077a4:	2202      	movs	r2, #2
 80077a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80077a8:	4b14      	ldr	r3, [pc, #80]	; (80077fc <USBD_LL_Init+0x94>)
 80077aa:	2200      	movs	r2, #0
 80077ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80077ae:	4b13      	ldr	r3, [pc, #76]	; (80077fc <USBD_LL_Init+0x94>)
 80077b0:	2200      	movs	r2, #0
 80077b2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80077b4:	4b11      	ldr	r3, [pc, #68]	; (80077fc <USBD_LL_Init+0x94>)
 80077b6:	2200      	movs	r2, #0
 80077b8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80077ba:	4b10      	ldr	r3, [pc, #64]	; (80077fc <USBD_LL_Init+0x94>)
 80077bc:	2200      	movs	r2, #0
 80077be:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80077c0:	4b0e      	ldr	r3, [pc, #56]	; (80077fc <USBD_LL_Init+0x94>)
 80077c2:	2200      	movs	r2, #0
 80077c4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80077c6:	480d      	ldr	r0, [pc, #52]	; (80077fc <USBD_LL_Init+0x94>)
 80077c8:	f7f9 fcdf 	bl	800118a <HAL_PCD_Init>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d001      	beq.n	80077d6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80077d2:	f7f9 f81c 	bl	800080e <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80077d6:	2180      	movs	r1, #128	; 0x80
 80077d8:	4808      	ldr	r0, [pc, #32]	; (80077fc <USBD_LL_Init+0x94>)
 80077da:	f7fa fe58 	bl	800248e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80077de:	2240      	movs	r2, #64	; 0x40
 80077e0:	2100      	movs	r1, #0
 80077e2:	4806      	ldr	r0, [pc, #24]	; (80077fc <USBD_LL_Init+0x94>)
 80077e4:	f7fa fe0c 	bl	8002400 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80077e8:	2280      	movs	r2, #128	; 0x80
 80077ea:	2101      	movs	r1, #1
 80077ec:	4803      	ldr	r0, [pc, #12]	; (80077fc <USBD_LL_Init+0x94>)
 80077ee:	f7fa fe07 	bl	8002400 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80077f2:	2300      	movs	r3, #0
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3708      	adds	r7, #8
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	20000c20 	.word	0x20000c20

08007800 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007808:	2300      	movs	r3, #0
 800780a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800780c:	2300      	movs	r3, #0
 800780e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007816:	4618      	mov	r0, r3
 8007818:	f7f9 fddb 	bl	80013d2 <HAL_PCD_Start>
 800781c:	4603      	mov	r3, r0
 800781e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007820:	7bfb      	ldrb	r3, [r7, #15]
 8007822:	4618      	mov	r0, r3
 8007824:	f000 f966 	bl	8007af4 <USBD_Get_USB_Status>
 8007828:	4603      	mov	r3, r0
 800782a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800782c:	7bbb      	ldrb	r3, [r7, #14]
}
 800782e:	4618      	mov	r0, r3
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}

08007836 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007836:	b580      	push	{r7, lr}
 8007838:	b084      	sub	sp, #16
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
 800783e:	4608      	mov	r0, r1
 8007840:	4611      	mov	r1, r2
 8007842:	461a      	mov	r2, r3
 8007844:	4603      	mov	r3, r0
 8007846:	70fb      	strb	r3, [r7, #3]
 8007848:	460b      	mov	r3, r1
 800784a:	70bb      	strb	r3, [r7, #2]
 800784c:	4613      	mov	r3, r2
 800784e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007850:	2300      	movs	r3, #0
 8007852:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007854:	2300      	movs	r3, #0
 8007856:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800785e:	78bb      	ldrb	r3, [r7, #2]
 8007860:	883a      	ldrh	r2, [r7, #0]
 8007862:	78f9      	ldrb	r1, [r7, #3]
 8007864:	f7fa f9ec 	bl	8001c40 <HAL_PCD_EP_Open>
 8007868:	4603      	mov	r3, r0
 800786a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800786c:	7bfb      	ldrb	r3, [r7, #15]
 800786e:	4618      	mov	r0, r3
 8007870:	f000 f940 	bl	8007af4 <USBD_Get_USB_Status>
 8007874:	4603      	mov	r3, r0
 8007876:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007878:	7bbb      	ldrb	r3, [r7, #14]
}
 800787a:	4618      	mov	r0, r3
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007882:	b580      	push	{r7, lr}
 8007884:	b084      	sub	sp, #16
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
 800788a:	460b      	mov	r3, r1
 800788c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800788e:	2300      	movs	r3, #0
 8007890:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007892:	2300      	movs	r3, #0
 8007894:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800789c:	78fa      	ldrb	r2, [r7, #3]
 800789e:	4611      	mov	r1, r2
 80078a0:	4618      	mov	r0, r3
 80078a2:	f7fa fa35 	bl	8001d10 <HAL_PCD_EP_Close>
 80078a6:	4603      	mov	r3, r0
 80078a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078aa:	7bfb      	ldrb	r3, [r7, #15]
 80078ac:	4618      	mov	r0, r3
 80078ae:	f000 f921 	bl	8007af4 <USBD_Get_USB_Status>
 80078b2:	4603      	mov	r3, r0
 80078b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3710      	adds	r7, #16
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	460b      	mov	r3, r1
 80078ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078cc:	2300      	movs	r3, #0
 80078ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078d0:	2300      	movs	r3, #0
 80078d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80078da:	78fa      	ldrb	r2, [r7, #3]
 80078dc:	4611      	mov	r1, r2
 80078de:	4618      	mov	r0, r3
 80078e0:	f7fa faf5 	bl	8001ece <HAL_PCD_EP_SetStall>
 80078e4:	4603      	mov	r3, r0
 80078e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078e8:	7bfb      	ldrb	r3, [r7, #15]
 80078ea:	4618      	mov	r0, r3
 80078ec:	f000 f902 	bl	8007af4 <USBD_Get_USB_Status>
 80078f0:	4603      	mov	r3, r0
 80078f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b084      	sub	sp, #16
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
 8007906:	460b      	mov	r3, r1
 8007908:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800790a:	2300      	movs	r3, #0
 800790c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800790e:	2300      	movs	r3, #0
 8007910:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007918:	78fa      	ldrb	r2, [r7, #3]
 800791a:	4611      	mov	r1, r2
 800791c:	4618      	mov	r0, r3
 800791e:	f7fa fb3a 	bl	8001f96 <HAL_PCD_EP_ClrStall>
 8007922:	4603      	mov	r3, r0
 8007924:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007926:	7bfb      	ldrb	r3, [r7, #15]
 8007928:	4618      	mov	r0, r3
 800792a:	f000 f8e3 	bl	8007af4 <USBD_Get_USB_Status>
 800792e:	4603      	mov	r3, r0
 8007930:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007932:	7bbb      	ldrb	r3, [r7, #14]
}
 8007934:	4618      	mov	r0, r3
 8007936:	3710      	adds	r7, #16
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800793c:	b480      	push	{r7}
 800793e:	b085      	sub	sp, #20
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	460b      	mov	r3, r1
 8007946:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800794e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007950:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007954:	2b00      	cmp	r3, #0
 8007956:	da0b      	bge.n	8007970 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007958:	78fb      	ldrb	r3, [r7, #3]
 800795a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800795e:	68f9      	ldr	r1, [r7, #12]
 8007960:	4613      	mov	r3, r2
 8007962:	00db      	lsls	r3, r3, #3
 8007964:	1a9b      	subs	r3, r3, r2
 8007966:	009b      	lsls	r3, r3, #2
 8007968:	440b      	add	r3, r1
 800796a:	333e      	adds	r3, #62	; 0x3e
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	e00b      	b.n	8007988 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007970:	78fb      	ldrb	r3, [r7, #3]
 8007972:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007976:	68f9      	ldr	r1, [r7, #12]
 8007978:	4613      	mov	r3, r2
 800797a:	00db      	lsls	r3, r3, #3
 800797c:	1a9b      	subs	r3, r3, r2
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	440b      	add	r3, r1
 8007982:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007986:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007988:	4618      	mov	r0, r3
 800798a:	3714      	adds	r7, #20
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	460b      	mov	r3, r1
 800799e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079a0:	2300      	movs	r3, #0
 80079a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079a4:	2300      	movs	r3, #0
 80079a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80079ae:	78fa      	ldrb	r2, [r7, #3]
 80079b0:	4611      	mov	r1, r2
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7fa f91f 	bl	8001bf6 <HAL_PCD_SetAddress>
 80079b8:	4603      	mov	r3, r0
 80079ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079bc:	7bfb      	ldrb	r3, [r7, #15]
 80079be:	4618      	mov	r0, r3
 80079c0:	f000 f898 	bl	8007af4 <USBD_Get_USB_Status>
 80079c4:	4603      	mov	r3, r0
 80079c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3710      	adds	r7, #16
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b086      	sub	sp, #24
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	60f8      	str	r0, [r7, #12]
 80079da:	607a      	str	r2, [r7, #4]
 80079dc:	603b      	str	r3, [r7, #0]
 80079de:	460b      	mov	r3, r1
 80079e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079e2:	2300      	movs	r3, #0
 80079e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079e6:	2300      	movs	r3, #0
 80079e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80079f0:	7af9      	ldrb	r1, [r7, #11]
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	f7fa fa20 	bl	8001e3a <HAL_PCD_EP_Transmit>
 80079fa:	4603      	mov	r3, r0
 80079fc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079fe:	7dfb      	ldrb	r3, [r7, #23]
 8007a00:	4618      	mov	r0, r3
 8007a02:	f000 f877 	bl	8007af4 <USBD_Get_USB_Status>
 8007a06:	4603      	mov	r3, r0
 8007a08:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007a0a:	7dbb      	ldrb	r3, [r7, #22]
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3718      	adds	r7, #24
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b086      	sub	sp, #24
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	607a      	str	r2, [r7, #4]
 8007a1e:	603b      	str	r3, [r7, #0]
 8007a20:	460b      	mov	r3, r1
 8007a22:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a24:	2300      	movs	r3, #0
 8007a26:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007a32:	7af9      	ldrb	r1, [r7, #11]
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	f7fa f9b4 	bl	8001da4 <HAL_PCD_EP_Receive>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a40:	7dfb      	ldrb	r3, [r7, #23]
 8007a42:	4618      	mov	r0, r3
 8007a44:	f000 f856 	bl	8007af4 <USBD_Get_USB_Status>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007a4c:	7dbb      	ldrb	r3, [r7, #22]
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3718      	adds	r7, #24
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
	...

08007a58 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	460b      	mov	r3, r1
 8007a62:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8007a64:	78fb      	ldrb	r3, [r7, #3]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d002      	beq.n	8007a70 <HAL_PCDEx_LPM_Callback+0x18>
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d01f      	beq.n	8007aae <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8007a6e:	e03b      	b.n	8007ae8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a1b      	ldr	r3, [r3, #32]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d007      	beq.n	8007a88 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8007a78:	f7f8 fd6c 	bl	8000554 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007a7c:	4b1c      	ldr	r3, [pc, #112]	; (8007af0 <HAL_PCDEx_LPM_Callback+0x98>)
 8007a7e:	691b      	ldr	r3, [r3, #16]
 8007a80:	4a1b      	ldr	r2, [pc, #108]	; (8007af0 <HAL_PCDEx_LPM_Callback+0x98>)
 8007a82:	f023 0306 	bic.w	r3, r3, #6
 8007a86:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	6812      	ldr	r2, [r2, #0]
 8007a96:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a9a:	f023 0301 	bic.w	r3, r3, #1
 8007a9e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f7fe fb0c 	bl	80060c4 <USBD_LL_Resume>
    break;
 8007aac:	e01c      	b.n	8007ae8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	6812      	ldr	r2, [r2, #0]
 8007abc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007ac0:	f043 0301 	orr.w	r3, r3, #1
 8007ac4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007acc:	4618      	mov	r0, r3
 8007ace:	f7fe fae4 	bl	800609a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a1b      	ldr	r3, [r3, #32]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d005      	beq.n	8007ae6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007ada:	4b05      	ldr	r3, [pc, #20]	; (8007af0 <HAL_PCDEx_LPM_Callback+0x98>)
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	4a04      	ldr	r2, [pc, #16]	; (8007af0 <HAL_PCDEx_LPM_Callback+0x98>)
 8007ae0:	f043 0306 	orr.w	r3, r3, #6
 8007ae4:	6113      	str	r3, [r2, #16]
    break;
 8007ae6:	bf00      	nop
}
 8007ae8:	bf00      	nop
 8007aea:	3708      	adds	r7, #8
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	e000ed00 	.word	0xe000ed00

08007af4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b085      	sub	sp, #20
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	4603      	mov	r3, r0
 8007afc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007afe:	2300      	movs	r3, #0
 8007b00:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007b02:	79fb      	ldrb	r3, [r7, #7]
 8007b04:	2b03      	cmp	r3, #3
 8007b06:	d817      	bhi.n	8007b38 <USBD_Get_USB_Status+0x44>
 8007b08:	a201      	add	r2, pc, #4	; (adr r2, 8007b10 <USBD_Get_USB_Status+0x1c>)
 8007b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b0e:	bf00      	nop
 8007b10:	08007b21 	.word	0x08007b21
 8007b14:	08007b27 	.word	0x08007b27
 8007b18:	08007b2d 	.word	0x08007b2d
 8007b1c:	08007b33 	.word	0x08007b33
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007b20:	2300      	movs	r3, #0
 8007b22:	73fb      	strb	r3, [r7, #15]
    break;
 8007b24:	e00b      	b.n	8007b3e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007b26:	2303      	movs	r3, #3
 8007b28:	73fb      	strb	r3, [r7, #15]
    break;
 8007b2a:	e008      	b.n	8007b3e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	73fb      	strb	r3, [r7, #15]
    break;
 8007b30:	e005      	b.n	8007b3e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007b32:	2303      	movs	r3, #3
 8007b34:	73fb      	strb	r3, [r7, #15]
    break;
 8007b36:	e002      	b.n	8007b3e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007b38:	2303      	movs	r3, #3
 8007b3a:	73fb      	strb	r3, [r7, #15]
    break;
 8007b3c:	bf00      	nop
  }
  return usb_status;
 8007b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3714      	adds	r7, #20
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <__errno>:
 8007b4c:	4b01      	ldr	r3, [pc, #4]	; (8007b54 <__errno+0x8>)
 8007b4e:	6818      	ldr	r0, [r3, #0]
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop
 8007b54:	20000174 	.word	0x20000174

08007b58 <__libc_init_array>:
 8007b58:	b570      	push	{r4, r5, r6, lr}
 8007b5a:	4d0d      	ldr	r5, [pc, #52]	; (8007b90 <__libc_init_array+0x38>)
 8007b5c:	4c0d      	ldr	r4, [pc, #52]	; (8007b94 <__libc_init_array+0x3c>)
 8007b5e:	1b64      	subs	r4, r4, r5
 8007b60:	10a4      	asrs	r4, r4, #2
 8007b62:	2600      	movs	r6, #0
 8007b64:	42a6      	cmp	r6, r4
 8007b66:	d109      	bne.n	8007b7c <__libc_init_array+0x24>
 8007b68:	4d0b      	ldr	r5, [pc, #44]	; (8007b98 <__libc_init_array+0x40>)
 8007b6a:	4c0c      	ldr	r4, [pc, #48]	; (8007b9c <__libc_init_array+0x44>)
 8007b6c:	f000 f8f8 	bl	8007d60 <_init>
 8007b70:	1b64      	subs	r4, r4, r5
 8007b72:	10a4      	asrs	r4, r4, #2
 8007b74:	2600      	movs	r6, #0
 8007b76:	42a6      	cmp	r6, r4
 8007b78:	d105      	bne.n	8007b86 <__libc_init_array+0x2e>
 8007b7a:	bd70      	pop	{r4, r5, r6, pc}
 8007b7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b80:	4798      	blx	r3
 8007b82:	3601      	adds	r6, #1
 8007b84:	e7ee      	b.n	8007b64 <__libc_init_array+0xc>
 8007b86:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b8a:	4798      	blx	r3
 8007b8c:	3601      	adds	r6, #1
 8007b8e:	e7f2      	b.n	8007b76 <__libc_init_array+0x1e>
 8007b90:	08007de0 	.word	0x08007de0
 8007b94:	08007de0 	.word	0x08007de0
 8007b98:	08007de0 	.word	0x08007de0
 8007b9c:	08007de4 	.word	0x08007de4

08007ba0 <malloc>:
 8007ba0:	4b02      	ldr	r3, [pc, #8]	; (8007bac <malloc+0xc>)
 8007ba2:	4601      	mov	r1, r0
 8007ba4:	6818      	ldr	r0, [r3, #0]
 8007ba6:	f000 b863 	b.w	8007c70 <_malloc_r>
 8007baa:	bf00      	nop
 8007bac:	20000174 	.word	0x20000174

08007bb0 <free>:
 8007bb0:	4b02      	ldr	r3, [pc, #8]	; (8007bbc <free+0xc>)
 8007bb2:	4601      	mov	r1, r0
 8007bb4:	6818      	ldr	r0, [r3, #0]
 8007bb6:	f000 b80b 	b.w	8007bd0 <_free_r>
 8007bba:	bf00      	nop
 8007bbc:	20000174 	.word	0x20000174

08007bc0 <memset>:
 8007bc0:	4402      	add	r2, r0
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d100      	bne.n	8007bca <memset+0xa>
 8007bc8:	4770      	bx	lr
 8007bca:	f803 1b01 	strb.w	r1, [r3], #1
 8007bce:	e7f9      	b.n	8007bc4 <memset+0x4>

08007bd0 <_free_r>:
 8007bd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007bd2:	2900      	cmp	r1, #0
 8007bd4:	d048      	beq.n	8007c68 <_free_r+0x98>
 8007bd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bda:	9001      	str	r0, [sp, #4]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	f1a1 0404 	sub.w	r4, r1, #4
 8007be2:	bfb8      	it	lt
 8007be4:	18e4      	addlt	r4, r4, r3
 8007be6:	f000 f8ad 	bl	8007d44 <__malloc_lock>
 8007bea:	4a20      	ldr	r2, [pc, #128]	; (8007c6c <_free_r+0x9c>)
 8007bec:	9801      	ldr	r0, [sp, #4]
 8007bee:	6813      	ldr	r3, [r2, #0]
 8007bf0:	4615      	mov	r5, r2
 8007bf2:	b933      	cbnz	r3, 8007c02 <_free_r+0x32>
 8007bf4:	6063      	str	r3, [r4, #4]
 8007bf6:	6014      	str	r4, [r2, #0]
 8007bf8:	b003      	add	sp, #12
 8007bfa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007bfe:	f000 b8a7 	b.w	8007d50 <__malloc_unlock>
 8007c02:	42a3      	cmp	r3, r4
 8007c04:	d90b      	bls.n	8007c1e <_free_r+0x4e>
 8007c06:	6821      	ldr	r1, [r4, #0]
 8007c08:	1862      	adds	r2, r4, r1
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	bf04      	itt	eq
 8007c0e:	681a      	ldreq	r2, [r3, #0]
 8007c10:	685b      	ldreq	r3, [r3, #4]
 8007c12:	6063      	str	r3, [r4, #4]
 8007c14:	bf04      	itt	eq
 8007c16:	1852      	addeq	r2, r2, r1
 8007c18:	6022      	streq	r2, [r4, #0]
 8007c1a:	602c      	str	r4, [r5, #0]
 8007c1c:	e7ec      	b.n	8007bf8 <_free_r+0x28>
 8007c1e:	461a      	mov	r2, r3
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	b10b      	cbz	r3, 8007c28 <_free_r+0x58>
 8007c24:	42a3      	cmp	r3, r4
 8007c26:	d9fa      	bls.n	8007c1e <_free_r+0x4e>
 8007c28:	6811      	ldr	r1, [r2, #0]
 8007c2a:	1855      	adds	r5, r2, r1
 8007c2c:	42a5      	cmp	r5, r4
 8007c2e:	d10b      	bne.n	8007c48 <_free_r+0x78>
 8007c30:	6824      	ldr	r4, [r4, #0]
 8007c32:	4421      	add	r1, r4
 8007c34:	1854      	adds	r4, r2, r1
 8007c36:	42a3      	cmp	r3, r4
 8007c38:	6011      	str	r1, [r2, #0]
 8007c3a:	d1dd      	bne.n	8007bf8 <_free_r+0x28>
 8007c3c:	681c      	ldr	r4, [r3, #0]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	6053      	str	r3, [r2, #4]
 8007c42:	4421      	add	r1, r4
 8007c44:	6011      	str	r1, [r2, #0]
 8007c46:	e7d7      	b.n	8007bf8 <_free_r+0x28>
 8007c48:	d902      	bls.n	8007c50 <_free_r+0x80>
 8007c4a:	230c      	movs	r3, #12
 8007c4c:	6003      	str	r3, [r0, #0]
 8007c4e:	e7d3      	b.n	8007bf8 <_free_r+0x28>
 8007c50:	6825      	ldr	r5, [r4, #0]
 8007c52:	1961      	adds	r1, r4, r5
 8007c54:	428b      	cmp	r3, r1
 8007c56:	bf04      	itt	eq
 8007c58:	6819      	ldreq	r1, [r3, #0]
 8007c5a:	685b      	ldreq	r3, [r3, #4]
 8007c5c:	6063      	str	r3, [r4, #4]
 8007c5e:	bf04      	itt	eq
 8007c60:	1949      	addeq	r1, r1, r5
 8007c62:	6021      	streq	r1, [r4, #0]
 8007c64:	6054      	str	r4, [r2, #4]
 8007c66:	e7c7      	b.n	8007bf8 <_free_r+0x28>
 8007c68:	b003      	add	sp, #12
 8007c6a:	bd30      	pop	{r4, r5, pc}
 8007c6c:	20000684 	.word	0x20000684

08007c70 <_malloc_r>:
 8007c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c72:	1ccd      	adds	r5, r1, #3
 8007c74:	f025 0503 	bic.w	r5, r5, #3
 8007c78:	3508      	adds	r5, #8
 8007c7a:	2d0c      	cmp	r5, #12
 8007c7c:	bf38      	it	cc
 8007c7e:	250c      	movcc	r5, #12
 8007c80:	2d00      	cmp	r5, #0
 8007c82:	4606      	mov	r6, r0
 8007c84:	db01      	blt.n	8007c8a <_malloc_r+0x1a>
 8007c86:	42a9      	cmp	r1, r5
 8007c88:	d903      	bls.n	8007c92 <_malloc_r+0x22>
 8007c8a:	230c      	movs	r3, #12
 8007c8c:	6033      	str	r3, [r6, #0]
 8007c8e:	2000      	movs	r0, #0
 8007c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c92:	f000 f857 	bl	8007d44 <__malloc_lock>
 8007c96:	4921      	ldr	r1, [pc, #132]	; (8007d1c <_malloc_r+0xac>)
 8007c98:	680a      	ldr	r2, [r1, #0]
 8007c9a:	4614      	mov	r4, r2
 8007c9c:	b99c      	cbnz	r4, 8007cc6 <_malloc_r+0x56>
 8007c9e:	4f20      	ldr	r7, [pc, #128]	; (8007d20 <_malloc_r+0xb0>)
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	b923      	cbnz	r3, 8007cae <_malloc_r+0x3e>
 8007ca4:	4621      	mov	r1, r4
 8007ca6:	4630      	mov	r0, r6
 8007ca8:	f000 f83c 	bl	8007d24 <_sbrk_r>
 8007cac:	6038      	str	r0, [r7, #0]
 8007cae:	4629      	mov	r1, r5
 8007cb0:	4630      	mov	r0, r6
 8007cb2:	f000 f837 	bl	8007d24 <_sbrk_r>
 8007cb6:	1c43      	adds	r3, r0, #1
 8007cb8:	d123      	bne.n	8007d02 <_malloc_r+0x92>
 8007cba:	230c      	movs	r3, #12
 8007cbc:	6033      	str	r3, [r6, #0]
 8007cbe:	4630      	mov	r0, r6
 8007cc0:	f000 f846 	bl	8007d50 <__malloc_unlock>
 8007cc4:	e7e3      	b.n	8007c8e <_malloc_r+0x1e>
 8007cc6:	6823      	ldr	r3, [r4, #0]
 8007cc8:	1b5b      	subs	r3, r3, r5
 8007cca:	d417      	bmi.n	8007cfc <_malloc_r+0x8c>
 8007ccc:	2b0b      	cmp	r3, #11
 8007cce:	d903      	bls.n	8007cd8 <_malloc_r+0x68>
 8007cd0:	6023      	str	r3, [r4, #0]
 8007cd2:	441c      	add	r4, r3
 8007cd4:	6025      	str	r5, [r4, #0]
 8007cd6:	e004      	b.n	8007ce2 <_malloc_r+0x72>
 8007cd8:	6863      	ldr	r3, [r4, #4]
 8007cda:	42a2      	cmp	r2, r4
 8007cdc:	bf0c      	ite	eq
 8007cde:	600b      	streq	r3, [r1, #0]
 8007ce0:	6053      	strne	r3, [r2, #4]
 8007ce2:	4630      	mov	r0, r6
 8007ce4:	f000 f834 	bl	8007d50 <__malloc_unlock>
 8007ce8:	f104 000b 	add.w	r0, r4, #11
 8007cec:	1d23      	adds	r3, r4, #4
 8007cee:	f020 0007 	bic.w	r0, r0, #7
 8007cf2:	1ac2      	subs	r2, r0, r3
 8007cf4:	d0cc      	beq.n	8007c90 <_malloc_r+0x20>
 8007cf6:	1a1b      	subs	r3, r3, r0
 8007cf8:	50a3      	str	r3, [r4, r2]
 8007cfa:	e7c9      	b.n	8007c90 <_malloc_r+0x20>
 8007cfc:	4622      	mov	r2, r4
 8007cfe:	6864      	ldr	r4, [r4, #4]
 8007d00:	e7cc      	b.n	8007c9c <_malloc_r+0x2c>
 8007d02:	1cc4      	adds	r4, r0, #3
 8007d04:	f024 0403 	bic.w	r4, r4, #3
 8007d08:	42a0      	cmp	r0, r4
 8007d0a:	d0e3      	beq.n	8007cd4 <_malloc_r+0x64>
 8007d0c:	1a21      	subs	r1, r4, r0
 8007d0e:	4630      	mov	r0, r6
 8007d10:	f000 f808 	bl	8007d24 <_sbrk_r>
 8007d14:	3001      	adds	r0, #1
 8007d16:	d1dd      	bne.n	8007cd4 <_malloc_r+0x64>
 8007d18:	e7cf      	b.n	8007cba <_malloc_r+0x4a>
 8007d1a:	bf00      	nop
 8007d1c:	20000684 	.word	0x20000684
 8007d20:	20000688 	.word	0x20000688

08007d24 <_sbrk_r>:
 8007d24:	b538      	push	{r3, r4, r5, lr}
 8007d26:	4d06      	ldr	r5, [pc, #24]	; (8007d40 <_sbrk_r+0x1c>)
 8007d28:	2300      	movs	r3, #0
 8007d2a:	4604      	mov	r4, r0
 8007d2c:	4608      	mov	r0, r1
 8007d2e:	602b      	str	r3, [r5, #0]
 8007d30:	f7f8 fec0 	bl	8000ab4 <_sbrk>
 8007d34:	1c43      	adds	r3, r0, #1
 8007d36:	d102      	bne.n	8007d3e <_sbrk_r+0x1a>
 8007d38:	682b      	ldr	r3, [r5, #0]
 8007d3a:	b103      	cbz	r3, 8007d3e <_sbrk_r+0x1a>
 8007d3c:	6023      	str	r3, [r4, #0]
 8007d3e:	bd38      	pop	{r3, r4, r5, pc}
 8007d40:	20001028 	.word	0x20001028

08007d44 <__malloc_lock>:
 8007d44:	4801      	ldr	r0, [pc, #4]	; (8007d4c <__malloc_lock+0x8>)
 8007d46:	f000 b809 	b.w	8007d5c <__retarget_lock_acquire_recursive>
 8007d4a:	bf00      	nop
 8007d4c:	20001030 	.word	0x20001030

08007d50 <__malloc_unlock>:
 8007d50:	4801      	ldr	r0, [pc, #4]	; (8007d58 <__malloc_unlock+0x8>)
 8007d52:	f000 b804 	b.w	8007d5e <__retarget_lock_release_recursive>
 8007d56:	bf00      	nop
 8007d58:	20001030 	.word	0x20001030

08007d5c <__retarget_lock_acquire_recursive>:
 8007d5c:	4770      	bx	lr

08007d5e <__retarget_lock_release_recursive>:
 8007d5e:	4770      	bx	lr

08007d60 <_init>:
 8007d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d62:	bf00      	nop
 8007d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d66:	bc08      	pop	{r3}
 8007d68:	469e      	mov	lr, r3
 8007d6a:	4770      	bx	lr

08007d6c <_fini>:
 8007d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d6e:	bf00      	nop
 8007d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d72:	bc08      	pop	{r3}
 8007d74:	469e      	mov	lr, r3
 8007d76:	4770      	bx	lr
