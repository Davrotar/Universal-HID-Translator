
emulator_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c58  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08007e28  08007e28  00017e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ed0  08007ed0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007ed0  08007ed0  00017ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ed8  08007ed8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ed8  08007ed8  00017ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007edc  08007edc  00017edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007ee0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005314  200001dc  080080bc  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200054f0  080080bc  000254f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023fe3  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000465f  00000000  00000000  000441ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019b8  00000000  00000000  00048850  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017c0  00000000  00000000  0004a208  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000068f2  00000000  00000000  0004b9c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016a27  00000000  00000000  000522ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dd60c  00000000  00000000  00068ce1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001462ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d00  00000000  00000000  00146368  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007e10 	.word	0x08007e10

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08007e10 	.word	0x08007e10

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
		int8_t x;
		int8_t y;
		int8_t wheel;
	};
	struct mouseHID_t mouseHID;
	mouseHID.buttons = 0;
 8000516:	2300      	movs	r3, #0
 8000518:	713b      	strb	r3, [r7, #4]
	mouseHID.x = 10;
 800051a:	230a      	movs	r3, #10
 800051c:	717b      	strb	r3, [r7, #5]
	mouseHID.y = 0;
 800051e:	2300      	movs	r3, #0
 8000520:	71bb      	strb	r3, [r7, #6]
	mouseHID.wheel = 0;
 8000522:	2300      	movs	r3, #0
 8000524:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000526:	f000 fb51 	bl	8000bcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052a:	f000 f829 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052e:	f000 f905 	bl	800073c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000532:	f000 f8af 	bl	8000694 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000536:	f000 f8d7 	bl	80006e8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 800053a:	f007 f8b7 	bl	80076ac <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800053e:	f004 fb7b 	bl	8004c38 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000542:	4a0b      	ldr	r2, [pc, #44]	; (8000570 <main+0x60>)
 8000544:	2100      	movs	r1, #0
 8000546:	480b      	ldr	r0, [pc, #44]	; (8000574 <main+0x64>)
 8000548:	f004 fbe0 	bl	8004d0c <osThreadNew>
 800054c:	4602      	mov	r2, r0
 800054e:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <main+0x68>)
 8000550:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000552:	f004 fba5 	bl	8004ca0 <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  mouseHID.x = 10;
 8000556:	230a      	movs	r3, #10
 8000558:	717b      	strb	r3, [r7, #5]
	  USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&mouseHID, sizeof(struct mouseHID_t));
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	2204      	movs	r2, #4
 800055e:	4619      	mov	r1, r3
 8000560:	4806      	ldr	r0, [pc, #24]	; (800057c <main+0x6c>)
 8000562:	f004 f9ff 	bl	8004964 <USBD_HID_SendReport>
	  HAL_Delay(1000);
 8000566:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800056a:	f000 fb71 	bl	8000c50 <HAL_Delay>
	  mouseHID.x = 10;
 800056e:	e7f2      	b.n	8000556 <main+0x46>
 8000570:	08007e94 	.word	0x08007e94
 8000574:	0800081d 	.word	0x0800081d
 8000578:	20004b0c 	.word	0x20004b0c
 800057c:	20004c14 	.word	0x20004c14

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b0ac      	sub	sp, #176	; 0xb0
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800058a:	2234      	movs	r2, #52	; 0x34
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f007 fb7b 	bl	8007c8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	225c      	movs	r2, #92	; 0x5c
 80005aa:	2100      	movs	r1, #0
 80005ac:	4618      	mov	r0, r3
 80005ae:	f007 fb6c 	bl	8007c8a <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b2:	2300      	movs	r3, #0
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	4b35      	ldr	r3, [pc, #212]	; (800068c <SystemClock_Config+0x10c>)
 80005b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ba:	4a34      	ldr	r2, [pc, #208]	; (800068c <SystemClock_Config+0x10c>)
 80005bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c0:	6413      	str	r3, [r2, #64]	; 0x40
 80005c2:	4b32      	ldr	r3, [pc, #200]	; (800068c <SystemClock_Config+0x10c>)
 80005c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005ce:	2300      	movs	r3, #0
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	4b2f      	ldr	r3, [pc, #188]	; (8000690 <SystemClock_Config+0x110>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005da:	4a2d      	ldr	r2, [pc, #180]	; (8000690 <SystemClock_Config+0x110>)
 80005dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e0:	6013      	str	r3, [r2, #0]
 80005e2:	4b2b      	ldr	r3, [pc, #172]	; (8000690 <SystemClock_Config+0x110>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ee:	2301      	movs	r3, #1
 80005f0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fa:	2302      	movs	r3, #2
 80005fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000600:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000604:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000608:	2304      	movs	r3, #4
 800060a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 72;
 800060e:	2348      	movs	r3, #72	; 0x48
 8000610:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000614:	2302      	movs	r3, #2
 8000616:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800061a:	2303      	movs	r3, #3
 800061c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000620:	2302      	movs	r3, #2
 8000622:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000626:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800062a:	4618      	mov	r0, r3
 800062c:	f001 ff08 	bl	8002440 <HAL_RCC_OscConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000636:	f000 f90b 	bl	8000850 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063a:	230f      	movs	r3, #15
 800063c:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063e:	2302      	movs	r3, #2
 8000640:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800064a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000650:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000654:	2102      	movs	r1, #2
 8000656:	4618      	mov	r0, r3
 8000658:	f001 f8dc 	bl	8001814 <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000662:	f000 f8f5 	bl	8000850 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000666:	f44f 7380 	mov.w	r3, #256	; 0x100
 800066a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800066c:	2300      	movs	r3, #0
 800066e:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	4618      	mov	r0, r3
 8000676:	f001 fa19 	bl	8001aac <HAL_RCCEx_PeriphCLKConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x104>
  {
    Error_Handler();
 8000680:	f000 f8e6 	bl	8000850 <Error_Handler>
  }
}
 8000684:	bf00      	nop
 8000686:	37b0      	adds	r7, #176	; 0xb0
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40023800 	.word	0x40023800
 8000690:	40007000 	.word	0x40007000

08000694 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000698:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_USART2_UART_Init+0x4c>)
 800069a:	4a12      	ldr	r2, [pc, #72]	; (80006e4 <MX_USART2_UART_Init+0x50>)
 800069c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800069e:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <MX_USART2_UART_Init+0x4c>)
 80006a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_USART2_UART_Init+0x4c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006ac:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <MX_USART2_UART_Init+0x4c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006b2:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <MX_USART2_UART_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <MX_USART2_UART_Init+0x4c>)
 80006ba:	220c      	movs	r2, #12
 80006bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006be:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <MX_USART2_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <MX_USART2_UART_Init+0x4c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <MX_USART2_UART_Init+0x4c>)
 80006cc:	f002 fb50 	bl	8002d70 <HAL_UART_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006d6:	f000 f8bb 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20004b50 	.word	0x20004b50
 80006e4:	40004400 	.word	0x40004400

080006e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_USART3_UART_Init+0x4c>)
 80006ee:	4a12      	ldr	r2, [pc, #72]	; (8000738 <MX_USART3_UART_Init+0x50>)
 80006f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006f2:	4b10      	ldr	r3, [pc, #64]	; (8000734 <MX_USART3_UART_Init+0x4c>)
 80006f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_USART3_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_USART3_UART_Init+0x4c>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000706:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <MX_USART3_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_USART3_UART_Init+0x4c>)
 800070e:	220c      	movs	r2, #12
 8000710:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <MX_USART3_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_USART3_UART_Init+0x4c>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_USART3_UART_Init+0x4c>)
 8000720:	f002 fb26 	bl	8002d70 <HAL_UART_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800072a:	f000 f891 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20004b10 	.word	0x20004b10
 8000738:	40004800 	.word	0x40004800

0800073c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	; 0x28
 8000740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 0314 	add.w	r3, r7, #20
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	613b      	str	r3, [r7, #16]
 8000756:	4b2d      	ldr	r3, [pc, #180]	; (800080c <MX_GPIO_Init+0xd0>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a2c      	ldr	r2, [pc, #176]	; (800080c <MX_GPIO_Init+0xd0>)
 800075c:	f043 0304 	orr.w	r3, r3, #4
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b2a      	ldr	r3, [pc, #168]	; (800080c <MX_GPIO_Init+0xd0>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0304 	and.w	r3, r3, #4
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	4b26      	ldr	r3, [pc, #152]	; (800080c <MX_GPIO_Init+0xd0>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a25      	ldr	r2, [pc, #148]	; (800080c <MX_GPIO_Init+0xd0>)
 8000778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b23      	ldr	r3, [pc, #140]	; (800080c <MX_GPIO_Init+0xd0>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	4b1f      	ldr	r3, [pc, #124]	; (800080c <MX_GPIO_Init+0xd0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a1e      	ldr	r2, [pc, #120]	; (800080c <MX_GPIO_Init+0xd0>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b1c      	ldr	r3, [pc, #112]	; (800080c <MX_GPIO_Init+0xd0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	4b18      	ldr	r3, [pc, #96]	; (800080c <MX_GPIO_Init+0xd0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a17      	ldr	r2, [pc, #92]	; (800080c <MX_GPIO_Init+0xd0>)
 80007b0:	f043 0302 	orr.w	r3, r3, #2
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b15      	ldr	r3, [pc, #84]	; (800080c <MX_GPIO_Init+0xd0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2120      	movs	r1, #32
 80007c6:	4812      	ldr	r0, [pc, #72]	; (8000810 <MX_GPIO_Init+0xd4>)
 80007c8:	f000 fcd8 	bl	800117c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007d2:	4b10      	ldr	r3, [pc, #64]	; (8000814 <MX_GPIO_Init+0xd8>)
 80007d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	4619      	mov	r1, r3
 80007e0:	480d      	ldr	r0, [pc, #52]	; (8000818 <MX_GPIO_Init+0xdc>)
 80007e2:	f000 fb39 	bl	8000e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007e6:	2320      	movs	r3, #32
 80007e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2300      	movs	r3, #0
 80007f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	4619      	mov	r1, r3
 80007fc:	4804      	ldr	r0, [pc, #16]	; (8000810 <MX_GPIO_Init+0xd4>)
 80007fe:	f000 fb2b 	bl	8000e58 <HAL_GPIO_Init>

}
 8000802:	bf00      	nop
 8000804:	3728      	adds	r7, #40	; 0x28
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40023800 	.word	0x40023800
 8000810:	40020000 	.word	0x40020000
 8000814:	10210000 	.word	0x10210000
 8000818:	40020800 	.word	0x40020800

0800081c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000824:	2001      	movs	r0, #1
 8000826:	f004 fb17 	bl	8004e58 <osDelay>
 800082a:	e7fb      	b.n	8000824 <StartDefaultTask+0x8>

0800082c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a04      	ldr	r2, [pc, #16]	; (800084c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d101      	bne.n	8000842 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800083e:	f000 f9e7 	bl	8000c10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40010000 	.word	0x40010000

08000850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000854:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000856:	e7fe      	b.n	8000856 <Error_Handler+0x6>

08000858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	4b12      	ldr	r3, [pc, #72]	; (80008ac <HAL_MspInit+0x54>)
 8000864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000866:	4a11      	ldr	r2, [pc, #68]	; (80008ac <HAL_MspInit+0x54>)
 8000868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800086c:	6453      	str	r3, [r2, #68]	; 0x44
 800086e:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <HAL_MspInit+0x54>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	603b      	str	r3, [r7, #0]
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <HAL_MspInit+0x54>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000882:	4a0a      	ldr	r2, [pc, #40]	; (80008ac <HAL_MspInit+0x54>)
 8000884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000888:	6413      	str	r3, [r2, #64]	; 0x40
 800088a:	4b08      	ldr	r3, [pc, #32]	; (80008ac <HAL_MspInit+0x54>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000896:	2200      	movs	r2, #0
 8000898:	210f      	movs	r1, #15
 800089a:	f06f 0001 	mvn.w	r0, #1
 800089e:	f000 fab1 	bl	8000e04 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40023800 	.word	0x40023800

080008b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08c      	sub	sp, #48	; 0x30
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a41      	ldr	r2, [pc, #260]	; (80009d4 <HAL_UART_MspInit+0x124>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d12c      	bne.n	800092c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
 80008d6:	4b40      	ldr	r3, [pc, #256]	; (80009d8 <HAL_UART_MspInit+0x128>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008da:	4a3f      	ldr	r2, [pc, #252]	; (80009d8 <HAL_UART_MspInit+0x128>)
 80008dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e0:	6413      	str	r3, [r2, #64]	; 0x40
 80008e2:	4b3d      	ldr	r3, [pc, #244]	; (80009d8 <HAL_UART_MspInit+0x128>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ea:	61bb      	str	r3, [r7, #24]
 80008ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
 80008f2:	4b39      	ldr	r3, [pc, #228]	; (80009d8 <HAL_UART_MspInit+0x128>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a38      	ldr	r2, [pc, #224]	; (80009d8 <HAL_UART_MspInit+0x128>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b36      	ldr	r3, [pc, #216]	; (80009d8 <HAL_UART_MspInit+0x128>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800090a:	230c      	movs	r3, #12
 800090c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090e:	2302      	movs	r3, #2
 8000910:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000916:	2303      	movs	r3, #3
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800091a:	2307      	movs	r3, #7
 800091c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	482d      	ldr	r0, [pc, #180]	; (80009dc <HAL_UART_MspInit+0x12c>)
 8000926:	f000 fa97 	bl	8000e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800092a:	e04f      	b.n	80009cc <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART3)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a2b      	ldr	r2, [pc, #172]	; (80009e0 <HAL_UART_MspInit+0x130>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d14a      	bne.n	80009cc <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	4b27      	ldr	r3, [pc, #156]	; (80009d8 <HAL_UART_MspInit+0x128>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	4a26      	ldr	r2, [pc, #152]	; (80009d8 <HAL_UART_MspInit+0x128>)
 8000940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000944:	6413      	str	r3, [r2, #64]	; 0x40
 8000946:	4b24      	ldr	r3, [pc, #144]	; (80009d8 <HAL_UART_MspInit+0x128>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	4b20      	ldr	r3, [pc, #128]	; (80009d8 <HAL_UART_MspInit+0x128>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a1f      	ldr	r2, [pc, #124]	; (80009d8 <HAL_UART_MspInit+0x128>)
 800095c:	f043 0304 	orr.w	r3, r3, #4
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b1d      	ldr	r3, [pc, #116]	; (80009d8 <HAL_UART_MspInit+0x128>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0304 	and.w	r3, r3, #4
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <HAL_UART_MspInit+0x128>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a18      	ldr	r2, [pc, #96]	; (80009d8 <HAL_UART_MspInit+0x128>)
 8000978:	f043 0302 	orr.w	r3, r3, #2
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <HAL_UART_MspInit+0x128>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800098a:	2320      	movs	r3, #32
 800098c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	2302      	movs	r3, #2
 8000990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000996:	2303      	movs	r3, #3
 8000998:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800099a:	2307      	movs	r3, #7
 800099c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	480f      	ldr	r0, [pc, #60]	; (80009e4 <HAL_UART_MspInit+0x134>)
 80009a6:	f000 fa57 	bl	8000e58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b0:	2302      	movs	r3, #2
 80009b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b8:	2303      	movs	r3, #3
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009bc:	2307      	movs	r3, #7
 80009be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	4619      	mov	r1, r3
 80009c6:	4808      	ldr	r0, [pc, #32]	; (80009e8 <HAL_UART_MspInit+0x138>)
 80009c8:	f000 fa46 	bl	8000e58 <HAL_GPIO_Init>
}
 80009cc:	bf00      	nop
 80009ce:	3730      	adds	r7, #48	; 0x30
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40004400 	.word	0x40004400
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40020000 	.word	0x40020000
 80009e0:	40004800 	.word	0x40004800
 80009e4:	40020800 	.word	0x40020800
 80009e8:	40020400 	.word	0x40020400

080009ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08c      	sub	sp, #48	; 0x30
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80009fc:	2200      	movs	r2, #0
 80009fe:	6879      	ldr	r1, [r7, #4]
 8000a00:	2019      	movs	r0, #25
 8000a02:	f000 f9ff 	bl	8000e04 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a06:	2019      	movs	r0, #25
 8000a08:	f000 fa18 	bl	8000e3c <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <HAL_InitTick+0xa4>)
 8000a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a14:	4a1e      	ldr	r2, [pc, #120]	; (8000a90 <HAL_InitTick+0xa4>)
 8000a16:	f043 0301 	orr.w	r3, r3, #1
 8000a1a:	6453      	str	r3, [r2, #68]	; 0x44
 8000a1c:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <HAL_InitTick+0xa4>)
 8000a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a20:	f003 0301 	and.w	r3, r3, #1
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a28:	f107 0210 	add.w	r2, r7, #16
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	4611      	mov	r1, r2
 8000a32:	4618      	mov	r0, r3
 8000a34:	f001 f808 	bl	8001a48 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000a38:	f000 fff2 	bl	8001a20 <HAL_RCC_GetPCLK2Freq>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a44:	4a13      	ldr	r2, [pc, #76]	; (8000a94 <HAL_InitTick+0xa8>)
 8000a46:	fba2 2303 	umull	r2, r3, r2, r3
 8000a4a:	0c9b      	lsrs	r3, r3, #18
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a50:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <HAL_InitTick+0xac>)
 8000a52:	4a12      	ldr	r2, [pc, #72]	; (8000a9c <HAL_InitTick+0xb0>)
 8000a54:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <HAL_InitTick+0xac>)
 8000a58:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a5c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a5e:	4a0e      	ldr	r2, [pc, #56]	; (8000a98 <HAL_InitTick+0xac>)
 8000a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a62:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <HAL_InitTick+0xac>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <HAL_InitTick+0xac>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000a70:	4809      	ldr	r0, [pc, #36]	; (8000a98 <HAL_InitTick+0xac>)
 8000a72:	f001 ff3f 	bl	80028f4 <HAL_TIM_Base_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d104      	bne.n	8000a86 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000a7c:	4806      	ldr	r0, [pc, #24]	; (8000a98 <HAL_InitTick+0xac>)
 8000a7e:	f001 ff6e 	bl	800295e <HAL_TIM_Base_Start_IT>
 8000a82:	4603      	mov	r3, r0
 8000a84:	e000      	b.n	8000a88 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3730      	adds	r7, #48	; 0x30
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40023800 	.word	0x40023800
 8000a94:	431bde83 	.word	0x431bde83
 8000a98:	20004b90 	.word	0x20004b90
 8000a9c:	40010000 	.word	0x40010000

08000aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <NMI_Handler+0x4>

08000aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <HardFault_Handler+0x4>

08000aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <MemManage_Handler+0x4>

08000ab2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <BusFault_Handler+0x4>

08000ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <UsageFault_Handler+0x4>

08000abe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ad0:	4802      	ldr	r0, [pc, #8]	; (8000adc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ad2:	f001 ff68 	bl	80029a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20004b90 	.word	0x20004b90

08000ae0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ae8:	4a14      	ldr	r2, [pc, #80]	; (8000b3c <_sbrk+0x5c>)
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <_sbrk+0x60>)
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000af4:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <_sbrk+0x64>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d102      	bne.n	8000b02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <_sbrk+0x64>)
 8000afe:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <_sbrk+0x68>)
 8000b00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <_sbrk+0x64>)
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4413      	add	r3, r2
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d207      	bcs.n	8000b20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b10:	f007 f876 	bl	8007c00 <__errno>
 8000b14:	4602      	mov	r2, r0
 8000b16:	230c      	movs	r3, #12
 8000b18:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1e:	e009      	b.n	8000b34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <_sbrk+0x64>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b26:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <_sbrk+0x64>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	4a05      	ldr	r2, [pc, #20]	; (8000b44 <_sbrk+0x64>)
 8000b30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b32:	68fb      	ldr	r3, [r7, #12]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3718      	adds	r7, #24
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20020000 	.word	0x20020000
 8000b40:	00000400 	.word	0x00000400
 8000b44:	200001f8 	.word	0x200001f8
 8000b48:	200054f0 	.word	0x200054f0

08000b4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <SystemInit+0x28>)
 8000b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b56:	4a07      	ldr	r2, [pc, #28]	; (8000b74 <SystemInit+0x28>)
 8000b58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b60:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <SystemInit+0x28>)
 8000b62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b66:	609a      	str	r2, [r3, #8]
#endif
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bb0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b7c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b7e:	e003      	b.n	8000b88 <LoopCopyDataInit>

08000b80 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b80:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b82:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b84:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b86:	3104      	adds	r1, #4

08000b88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b88:	480b      	ldr	r0, [pc, #44]	; (8000bb8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b8c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b8e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b90:	d3f6      	bcc.n	8000b80 <CopyDataInit>
  ldr  r2, =_sbss
 8000b92:	4a0b      	ldr	r2, [pc, #44]	; (8000bc0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b94:	e002      	b.n	8000b9c <LoopFillZerobss>

08000b96 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b96:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b98:	f842 3b04 	str.w	r3, [r2], #4

08000b9c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b9c:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b9e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ba0:	d3f9      	bcc.n	8000b96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ba2:	f7ff ffd3 	bl	8000b4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ba6:	f007 f831 	bl	8007c0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000baa:	f7ff fcb1 	bl	8000510 <main>
  bx  lr    
 8000bae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bb0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000bb4:	08007ee0 	.word	0x08007ee0
  ldr  r0, =_sdata
 8000bb8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000bbc:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8000bc0:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8000bc4:	200054f0 	.word	0x200054f0

08000bc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bc8:	e7fe      	b.n	8000bc8 <ADC_IRQHandler>
	...

08000bcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bd0:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <HAL_Init+0x40>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a0d      	ldr	r2, [pc, #52]	; (8000c0c <HAL_Init+0x40>)
 8000bd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bdc:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <HAL_Init+0x40>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <HAL_Init+0x40>)
 8000be2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000be6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <HAL_Init+0x40>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a07      	ldr	r2, [pc, #28]	; (8000c0c <HAL_Init+0x40>)
 8000bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf4:	2003      	movs	r0, #3
 8000bf6:	f000 f8fa 	bl	8000dee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f7ff fef6 	bl	80009ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c00:	f7ff fe2a 	bl	8000858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40023c00 	.word	0x40023c00

08000c10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_IncTick+0x20>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_IncTick+0x24>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4413      	add	r3, r2
 8000c20:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <HAL_IncTick+0x24>)
 8000c22:	6013      	str	r3, [r2, #0]
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000008 	.word	0x20000008
 8000c34:	20004bd0 	.word	0x20004bd0

08000c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c3c:	4b03      	ldr	r3, [pc, #12]	; (8000c4c <HAL_GetTick+0x14>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	20004bd0 	.word	0x20004bd0

08000c50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c58:	f7ff ffee 	bl	8000c38 <HAL_GetTick>
 8000c5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c68:	d005      	beq.n	8000c76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c6a:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <HAL_Delay+0x40>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	461a      	mov	r2, r3
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	4413      	add	r3, r2
 8000c74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c76:	bf00      	nop
 8000c78:	f7ff ffde 	bl	8000c38 <HAL_GetTick>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	68fa      	ldr	r2, [r7, #12]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d8f7      	bhi.n	8000c78 <HAL_Delay+0x28>
  {
  }
}
 8000c88:	bf00      	nop
 8000c8a:	3710      	adds	r7, #16
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000008 	.word	0x20000008

08000c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f003 0307 	and.w	r3, r3, #7
 8000ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000caa:	68ba      	ldr	r2, [r7, #8]
 8000cac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cc6:	4a04      	ldr	r2, [pc, #16]	; (8000cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	60d3      	str	r3, [r2, #12]
}
 8000ccc:	bf00      	nop
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce0:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	0a1b      	lsrs	r3, r3, #8
 8000ce6:	f003 0307 	and.w	r3, r3, #7
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	db0b      	blt.n	8000d22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	f003 021f 	and.w	r2, r3, #31
 8000d10:	4907      	ldr	r1, [pc, #28]	; (8000d30 <__NVIC_EnableIRQ+0x38>)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	095b      	lsrs	r3, r3, #5
 8000d18:	2001      	movs	r0, #1
 8000d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000e100 	.word	0xe000e100

08000d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	6039      	str	r1, [r7, #0]
 8000d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	db0a      	blt.n	8000d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	490c      	ldr	r1, [pc, #48]	; (8000d80 <__NVIC_SetPriority+0x4c>)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	0112      	lsls	r2, r2, #4
 8000d54:	b2d2      	uxtb	r2, r2
 8000d56:	440b      	add	r3, r1
 8000d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d5c:	e00a      	b.n	8000d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4908      	ldr	r1, [pc, #32]	; (8000d84 <__NVIC_SetPriority+0x50>)
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	3b04      	subs	r3, #4
 8000d6c:	0112      	lsls	r2, r2, #4
 8000d6e:	b2d2      	uxtb	r2, r2
 8000d70:	440b      	add	r3, r1
 8000d72:	761a      	strb	r2, [r3, #24]
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000e100 	.word	0xe000e100
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b089      	sub	sp, #36	; 0x24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	f1c3 0307 	rsb	r3, r3, #7
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	bf28      	it	cs
 8000da6:	2304      	movcs	r3, #4
 8000da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3304      	adds	r3, #4
 8000dae:	2b06      	cmp	r3, #6
 8000db0:	d902      	bls.n	8000db8 <NVIC_EncodePriority+0x30>
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3b03      	subs	r3, #3
 8000db6:	e000      	b.n	8000dba <NVIC_EncodePriority+0x32>
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43da      	mvns	r2, r3
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	401a      	ands	r2, r3
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dda:	43d9      	mvns	r1, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	4313      	orrs	r3, r2
         );
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3724      	adds	r7, #36	; 0x24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f7ff ff4c 	bl	8000c94 <__NVIC_SetPriorityGrouping>
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
 8000e10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e16:	f7ff ff61 	bl	8000cdc <__NVIC_GetPriorityGrouping>
 8000e1a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	68b9      	ldr	r1, [r7, #8]
 8000e20:	6978      	ldr	r0, [r7, #20]
 8000e22:	f7ff ffb1 	bl	8000d88 <NVIC_EncodePriority>
 8000e26:	4602      	mov	r2, r0
 8000e28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e2c:	4611      	mov	r1, r2
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff ff80 	bl	8000d34 <__NVIC_SetPriority>
}
 8000e34:	bf00      	nop
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff ff54 	bl	8000cf8 <__NVIC_EnableIRQ>
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b089      	sub	sp, #36	; 0x24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
 8000e72:	e165      	b.n	8001140 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e74:	2201      	movs	r2, #1
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	697a      	ldr	r2, [r7, #20]
 8000e84:	4013      	ands	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	f040 8154 	bne.w	800113a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d00b      	beq.n	8000eb2 <HAL_GPIO_Init+0x5a>
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d007      	beq.n	8000eb2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ea6:	2b11      	cmp	r3, #17
 8000ea8:	d003      	beq.n	8000eb2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	2b12      	cmp	r3, #18
 8000eb0:	d130      	bne.n	8000f14 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	68da      	ldr	r2, [r3, #12]
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ee8:	2201      	movs	r2, #1
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	091b      	lsrs	r3, r3, #4
 8000efe:	f003 0201 	and.w	r2, r3, #1
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	2203      	movs	r2, #3
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	689a      	ldr	r2, [r3, #8]
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d003      	beq.n	8000f54 <HAL_GPIO_Init+0xfc>
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	2b12      	cmp	r3, #18
 8000f52:	d123      	bne.n	8000f9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	08da      	lsrs	r2, r3, #3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3208      	adds	r2, #8
 8000f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	f003 0307 	and.w	r3, r3, #7
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	220f      	movs	r2, #15
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	691a      	ldr	r2, [r3, #16]
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	08da      	lsrs	r2, r3, #3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3208      	adds	r2, #8
 8000f96:	69b9      	ldr	r1, [r7, #24]
 8000f98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 0203 	and.w	r2, r3, #3
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	f000 80ae 	beq.w	800113a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	4b5c      	ldr	r3, [pc, #368]	; (8001154 <HAL_GPIO_Init+0x2fc>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	4a5b      	ldr	r2, [pc, #364]	; (8001154 <HAL_GPIO_Init+0x2fc>)
 8000fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fec:	6453      	str	r3, [r2, #68]	; 0x44
 8000fee:	4b59      	ldr	r3, [pc, #356]	; (8001154 <HAL_GPIO_Init+0x2fc>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ffa:	4a57      	ldr	r2, [pc, #348]	; (8001158 <HAL_GPIO_Init+0x300>)
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	089b      	lsrs	r3, r3, #2
 8001000:	3302      	adds	r3, #2
 8001002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001006:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f003 0303 	and.w	r3, r3, #3
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	220f      	movs	r2, #15
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43db      	mvns	r3, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4013      	ands	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4e      	ldr	r2, [pc, #312]	; (800115c <HAL_GPIO_Init+0x304>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d025      	beq.n	8001072 <HAL_GPIO_Init+0x21a>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a4d      	ldr	r2, [pc, #308]	; (8001160 <HAL_GPIO_Init+0x308>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d01f      	beq.n	800106e <HAL_GPIO_Init+0x216>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a4c      	ldr	r2, [pc, #304]	; (8001164 <HAL_GPIO_Init+0x30c>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d019      	beq.n	800106a <HAL_GPIO_Init+0x212>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a4b      	ldr	r2, [pc, #300]	; (8001168 <HAL_GPIO_Init+0x310>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d013      	beq.n	8001066 <HAL_GPIO_Init+0x20e>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a4a      	ldr	r2, [pc, #296]	; (800116c <HAL_GPIO_Init+0x314>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d00d      	beq.n	8001062 <HAL_GPIO_Init+0x20a>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a49      	ldr	r2, [pc, #292]	; (8001170 <HAL_GPIO_Init+0x318>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d007      	beq.n	800105e <HAL_GPIO_Init+0x206>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a48      	ldr	r2, [pc, #288]	; (8001174 <HAL_GPIO_Init+0x31c>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d101      	bne.n	800105a <HAL_GPIO_Init+0x202>
 8001056:	2306      	movs	r3, #6
 8001058:	e00c      	b.n	8001074 <HAL_GPIO_Init+0x21c>
 800105a:	2307      	movs	r3, #7
 800105c:	e00a      	b.n	8001074 <HAL_GPIO_Init+0x21c>
 800105e:	2305      	movs	r3, #5
 8001060:	e008      	b.n	8001074 <HAL_GPIO_Init+0x21c>
 8001062:	2304      	movs	r3, #4
 8001064:	e006      	b.n	8001074 <HAL_GPIO_Init+0x21c>
 8001066:	2303      	movs	r3, #3
 8001068:	e004      	b.n	8001074 <HAL_GPIO_Init+0x21c>
 800106a:	2302      	movs	r3, #2
 800106c:	e002      	b.n	8001074 <HAL_GPIO_Init+0x21c>
 800106e:	2301      	movs	r3, #1
 8001070:	e000      	b.n	8001074 <HAL_GPIO_Init+0x21c>
 8001072:	2300      	movs	r3, #0
 8001074:	69fa      	ldr	r2, [r7, #28]
 8001076:	f002 0203 	and.w	r2, r2, #3
 800107a:	0092      	lsls	r2, r2, #2
 800107c:	4093      	lsls	r3, r2
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4313      	orrs	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001084:	4934      	ldr	r1, [pc, #208]	; (8001158 <HAL_GPIO_Init+0x300>)
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	089b      	lsrs	r3, r3, #2
 800108a:	3302      	adds	r3, #2
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001092:	4b39      	ldr	r3, [pc, #228]	; (8001178 <HAL_GPIO_Init+0x320>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	43db      	mvns	r3, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4013      	ands	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010b6:	4a30      	ldr	r2, [pc, #192]	; (8001178 <HAL_GPIO_Init+0x320>)
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010bc:	4b2e      	ldr	r3, [pc, #184]	; (8001178 <HAL_GPIO_Init+0x320>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d003      	beq.n	80010e0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010e0:	4a25      	ldr	r2, [pc, #148]	; (8001178 <HAL_GPIO_Init+0x320>)
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010e6:	4b24      	ldr	r3, [pc, #144]	; (8001178 <HAL_GPIO_Init+0x320>)
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	43db      	mvns	r3, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4013      	ands	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800110a:	4a1b      	ldr	r2, [pc, #108]	; (8001178 <HAL_GPIO_Init+0x320>)
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001110:	4b19      	ldr	r3, [pc, #100]	; (8001178 <HAL_GPIO_Init+0x320>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d003      	beq.n	8001134 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	4313      	orrs	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001134:	4a10      	ldr	r2, [pc, #64]	; (8001178 <HAL_GPIO_Init+0x320>)
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3301      	adds	r3, #1
 800113e:	61fb      	str	r3, [r7, #28]
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	2b0f      	cmp	r3, #15
 8001144:	f67f ae96 	bls.w	8000e74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001148:	bf00      	nop
 800114a:	3724      	adds	r7, #36	; 0x24
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	40023800 	.word	0x40023800
 8001158:	40013800 	.word	0x40013800
 800115c:	40020000 	.word	0x40020000
 8001160:	40020400 	.word	0x40020400
 8001164:	40020800 	.word	0x40020800
 8001168:	40020c00 	.word	0x40020c00
 800116c:	40021000 	.word	0x40021000
 8001170:	40021400 	.word	0x40021400
 8001174:	40021800 	.word	0x40021800
 8001178:	40013c00 	.word	0x40013c00

0800117c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	807b      	strh	r3, [r7, #2]
 8001188:	4613      	mov	r3, r2
 800118a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800118c:	787b      	ldrb	r3, [r7, #1]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001192:	887a      	ldrh	r2, [r7, #2]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001198:	e003      	b.n	80011a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800119a:	887b      	ldrh	r3, [r7, #2]
 800119c:	041a      	lsls	r2, r3, #16
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	619a      	str	r2, [r3, #24]
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011b0:	b08f      	sub	sp, #60	; 0x3c
 80011b2:	af0a      	add	r7, sp, #40	; 0x28
 80011b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d101      	bne.n	80011c0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e116      	b.n	80013ee <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d106      	bne.n	80011e0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f006 fbac 	bl	8007938 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2203      	movs	r2, #3
 80011e4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d102      	bne.n	80011fa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f002 f9f2 	bl	80035e8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	603b      	str	r3, [r7, #0]
 800120a:	687e      	ldr	r6, [r7, #4]
 800120c:	466d      	mov	r5, sp
 800120e:	f106 0410 	add.w	r4, r6, #16
 8001212:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001214:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001216:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001218:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800121a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800121e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001222:	1d33      	adds	r3, r6, #4
 8001224:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001226:	6838      	ldr	r0, [r7, #0]
 8001228:	f002 f96c 	bl	8003504 <USB_CoreInit>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d005      	beq.n	800123e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2202      	movs	r2, #2
 8001236:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e0d7      	b.n	80013ee <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2100      	movs	r1, #0
 8001244:	4618      	mov	r0, r3
 8001246:	f002 f9e0 	bl	800360a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800124a:	2300      	movs	r3, #0
 800124c:	73fb      	strb	r3, [r7, #15]
 800124e:	e04a      	b.n	80012e6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001250:	7bfa      	ldrb	r2, [r7, #15]
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	4613      	mov	r3, r2
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	1a9b      	subs	r3, r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	440b      	add	r3, r1
 800125e:	333d      	adds	r3, #61	; 0x3d
 8001260:	2201      	movs	r2, #1
 8001262:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001264:	7bfa      	ldrb	r2, [r7, #15]
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	4613      	mov	r3, r2
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	1a9b      	subs	r3, r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	440b      	add	r3, r1
 8001272:	333c      	adds	r3, #60	; 0x3c
 8001274:	7bfa      	ldrb	r2, [r7, #15]
 8001276:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001278:	7bfa      	ldrb	r2, [r7, #15]
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	b298      	uxth	r0, r3
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	4613      	mov	r3, r2
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	1a9b      	subs	r3, r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	440b      	add	r3, r1
 800128a:	3342      	adds	r3, #66	; 0x42
 800128c:	4602      	mov	r2, r0
 800128e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001290:	7bfa      	ldrb	r2, [r7, #15]
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	4613      	mov	r3, r2
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	1a9b      	subs	r3, r3, r2
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	440b      	add	r3, r1
 800129e:	333f      	adds	r3, #63	; 0x3f
 80012a0:	2200      	movs	r2, #0
 80012a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80012a4:	7bfa      	ldrb	r2, [r7, #15]
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	4613      	mov	r3, r2
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	1a9b      	subs	r3, r3, r2
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	440b      	add	r3, r1
 80012b2:	3344      	adds	r3, #68	; 0x44
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012b8:	7bfa      	ldrb	r2, [r7, #15]
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	4613      	mov	r3, r2
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	1a9b      	subs	r3, r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	440b      	add	r3, r1
 80012c6:	3348      	adds	r3, #72	; 0x48
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012cc:	7bfa      	ldrb	r2, [r7, #15]
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	4613      	mov	r3, r2
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	1a9b      	subs	r3, r3, r2
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	440b      	add	r3, r1
 80012da:	3350      	adds	r3, #80	; 0x50
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
 80012e2:	3301      	adds	r3, #1
 80012e4:	73fb      	strb	r3, [r7, #15]
 80012e6:	7bfa      	ldrb	r2, [r7, #15]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d3af      	bcc.n	8001250 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012f0:	2300      	movs	r3, #0
 80012f2:	73fb      	strb	r3, [r7, #15]
 80012f4:	e044      	b.n	8001380 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012f6:	7bfa      	ldrb	r2, [r7, #15]
 80012f8:	6879      	ldr	r1, [r7, #4]
 80012fa:	4613      	mov	r3, r2
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	1a9b      	subs	r3, r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	440b      	add	r3, r1
 8001304:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001308:	2200      	movs	r2, #0
 800130a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800130c:	7bfa      	ldrb	r2, [r7, #15]
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	4613      	mov	r3, r2
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	1a9b      	subs	r3, r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	440b      	add	r3, r1
 800131a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800131e:	7bfa      	ldrb	r2, [r7, #15]
 8001320:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001322:	7bfa      	ldrb	r2, [r7, #15]
 8001324:	6879      	ldr	r1, [r7, #4]
 8001326:	4613      	mov	r3, r2
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	1a9b      	subs	r3, r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	440b      	add	r3, r1
 8001330:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001338:	7bfa      	ldrb	r2, [r7, #15]
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	4613      	mov	r3, r2
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	1a9b      	subs	r3, r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	440b      	add	r3, r1
 8001346:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800134e:	7bfa      	ldrb	r2, [r7, #15]
 8001350:	6879      	ldr	r1, [r7, #4]
 8001352:	4613      	mov	r3, r2
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	1a9b      	subs	r3, r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	440b      	add	r3, r1
 800135c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001364:	7bfa      	ldrb	r2, [r7, #15]
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	4613      	mov	r3, r2
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	1a9b      	subs	r3, r3, r2
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	440b      	add	r3, r1
 8001372:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800137a:	7bfb      	ldrb	r3, [r7, #15]
 800137c:	3301      	adds	r3, #1
 800137e:	73fb      	strb	r3, [r7, #15]
 8001380:	7bfa      	ldrb	r2, [r7, #15]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	429a      	cmp	r2, r3
 8001388:	d3b5      	bcc.n	80012f6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	603b      	str	r3, [r7, #0]
 8001390:	687e      	ldr	r6, [r7, #4]
 8001392:	466d      	mov	r5, sp
 8001394:	f106 0410 	add.w	r4, r6, #16
 8001398:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800139a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800139c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800139e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80013a8:	1d33      	adds	r3, r6, #4
 80013aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013ac:	6838      	ldr	r0, [r7, #0]
 80013ae:	f002 f957 	bl	8003660 <USB_DevInit>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d005      	beq.n	80013c4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2202      	movs	r2, #2
 80013bc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e014      	b.n	80013ee <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2201      	movs	r2, #1
 80013d0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d102      	bne.n	80013e2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 f9f5 	bl	80017cc <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f003 f8b7 	bl	800455a <USB_DevDisconnect>

  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3714      	adds	r7, #20
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013f6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b084      	sub	sp, #16
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800140a:	2b01      	cmp	r3, #1
 800140c:	d101      	bne.n	8001412 <HAL_PCD_Start+0x1c>
 800140e:	2302      	movs	r3, #2
 8001410:	e020      	b.n	8001454 <HAL_PCD_Start+0x5e>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2201      	movs	r2, #1
 8001416:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800141e:	2b01      	cmp	r3, #1
 8001420:	d109      	bne.n	8001436 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001426:	2b01      	cmp	r3, #1
 8001428:	d005      	beq.n	8001436 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800142e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	f002 f8c3 	bl	80035c6 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f003 f867 	bl	8004518 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001452:	2300      	movs	r3, #0
}
 8001454:	4618      	mov	r0, r3
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	4608      	mov	r0, r1
 8001466:	4611      	mov	r1, r2
 8001468:	461a      	mov	r2, r3
 800146a:	4603      	mov	r3, r0
 800146c:	70fb      	strb	r3, [r7, #3]
 800146e:	460b      	mov	r3, r1
 8001470:	803b      	strh	r3, [r7, #0]
 8001472:	4613      	mov	r3, r2
 8001474:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001476:	2300      	movs	r3, #0
 8001478:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800147a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800147e:	2b00      	cmp	r3, #0
 8001480:	da0f      	bge.n	80014a2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001482:	78fb      	ldrb	r3, [r7, #3]
 8001484:	f003 020f 	and.w	r2, r3, #15
 8001488:	4613      	mov	r3, r2
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	1a9b      	subs	r3, r3, r2
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	3338      	adds	r3, #56	; 0x38
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	4413      	add	r3, r2
 8001496:	3304      	adds	r3, #4
 8001498:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2201      	movs	r2, #1
 800149e:	705a      	strb	r2, [r3, #1]
 80014a0:	e00f      	b.n	80014c2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014a2:	78fb      	ldrb	r3, [r7, #3]
 80014a4:	f003 020f 	and.w	r2, r3, #15
 80014a8:	4613      	mov	r3, r2
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	1a9b      	subs	r3, r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	4413      	add	r3, r2
 80014b8:	3304      	adds	r3, #4
 80014ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2200      	movs	r2, #0
 80014c0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80014c2:	78fb      	ldrb	r3, [r7, #3]
 80014c4:	f003 030f 	and.w	r3, r3, #15
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80014ce:	883a      	ldrh	r2, [r7, #0]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	78ba      	ldrb	r2, [r7, #2]
 80014d8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	785b      	ldrb	r3, [r3, #1]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d004      	beq.n	80014ec <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80014ec:	78bb      	ldrb	r3, [r7, #2]
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d102      	bne.n	80014f8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2200      	movs	r2, #0
 80014f6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d101      	bne.n	8001506 <HAL_PCD_EP_Open+0xaa>
 8001502:	2302      	movs	r3, #2
 8001504:	e00e      	b.n	8001524 <HAL_PCD_EP_Open+0xc8>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2201      	movs	r2, #1
 800150a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	68f9      	ldr	r1, [r7, #12]
 8001514:	4618      	mov	r0, r3
 8001516:	f002 fa62 	bl	80039de <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001522:	7afb      	ldrb	r3, [r7, #11]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001538:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800153c:	2b00      	cmp	r3, #0
 800153e:	da0f      	bge.n	8001560 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001540:	78fb      	ldrb	r3, [r7, #3]
 8001542:	f003 020f 	and.w	r2, r3, #15
 8001546:	4613      	mov	r3, r2
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	1a9b      	subs	r3, r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	3338      	adds	r3, #56	; 0x38
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	4413      	add	r3, r2
 8001554:	3304      	adds	r3, #4
 8001556:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2201      	movs	r2, #1
 800155c:	705a      	strb	r2, [r3, #1]
 800155e:	e00f      	b.n	8001580 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001560:	78fb      	ldrb	r3, [r7, #3]
 8001562:	f003 020f 	and.w	r2, r3, #15
 8001566:	4613      	mov	r3, r2
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	1a9b      	subs	r3, r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	4413      	add	r3, r2
 8001576:	3304      	adds	r3, #4
 8001578:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2200      	movs	r2, #0
 800157e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001580:	78fb      	ldrb	r3, [r7, #3]
 8001582:	f003 030f 	and.w	r3, r3, #15
 8001586:	b2da      	uxtb	r2, r3
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001592:	2b01      	cmp	r3, #1
 8001594:	d101      	bne.n	800159a <HAL_PCD_EP_Close+0x6e>
 8001596:	2302      	movs	r3, #2
 8001598:	e00e      	b.n	80015b8 <HAL_PCD_EP_Close+0x8c>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2201      	movs	r2, #1
 800159e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	68f9      	ldr	r1, [r7, #12]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f002 fa9f 	bl	8003aec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	607a      	str	r2, [r7, #4]
 80015ca:	603b      	str	r3, [r7, #0]
 80015cc:	460b      	mov	r3, r1
 80015ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015d0:	7afb      	ldrb	r3, [r7, #11]
 80015d2:	f003 020f 	and.w	r2, r3, #15
 80015d6:	4613      	mov	r3, r2
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	1a9b      	subs	r3, r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	3338      	adds	r3, #56	; 0x38
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	4413      	add	r3, r2
 80015e4:	3304      	adds	r3, #4
 80015e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	683a      	ldr	r2, [r7, #0]
 80015f2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	2200      	movs	r2, #0
 80015f8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	2201      	movs	r2, #1
 80015fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001600:	7afb      	ldrb	r3, [r7, #11]
 8001602:	f003 030f 	and.w	r3, r3, #15
 8001606:	b2da      	uxtb	r2, r3
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d102      	bne.n	800161a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800161a:	7afb      	ldrb	r3, [r7, #11]
 800161c:	f003 030f 	and.w	r3, r3, #15
 8001620:	2b00      	cmp	r3, #0
 8001622:	d109      	bne.n	8001638 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6818      	ldr	r0, [r3, #0]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	b2db      	uxtb	r3, r3
 800162e:	461a      	mov	r2, r3
 8001630:	6979      	ldr	r1, [r7, #20]
 8001632:	f002 fd7b 	bl	800412c <USB_EP0StartXfer>
 8001636:	e008      	b.n	800164a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	6818      	ldr	r0, [r3, #0]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	691b      	ldr	r3, [r3, #16]
 8001640:	b2db      	uxtb	r3, r3
 8001642:	461a      	mov	r2, r3
 8001644:	6979      	ldr	r1, [r7, #20]
 8001646:	f002 fb2d 	bl	8003ca4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001660:	78fb      	ldrb	r3, [r7, #3]
 8001662:	f003 020f 	and.w	r2, r3, #15
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	429a      	cmp	r2, r3
 800166c:	d901      	bls.n	8001672 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e050      	b.n	8001714 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001672:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001676:	2b00      	cmp	r3, #0
 8001678:	da0f      	bge.n	800169a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800167a:	78fb      	ldrb	r3, [r7, #3]
 800167c:	f003 020f 	and.w	r2, r3, #15
 8001680:	4613      	mov	r3, r2
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	1a9b      	subs	r3, r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	3338      	adds	r3, #56	; 0x38
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	4413      	add	r3, r2
 800168e:	3304      	adds	r3, #4
 8001690:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2201      	movs	r2, #1
 8001696:	705a      	strb	r2, [r3, #1]
 8001698:	e00d      	b.n	80016b6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800169a:	78fa      	ldrb	r2, [r7, #3]
 800169c:	4613      	mov	r3, r2
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	1a9b      	subs	r3, r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	4413      	add	r3, r2
 80016ac:	3304      	adds	r3, #4
 80016ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2200      	movs	r2, #0
 80016b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2201      	movs	r2, #1
 80016ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016bc:	78fb      	ldrb	r3, [r7, #3]
 80016be:	f003 030f 	and.w	r3, r3, #15
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d101      	bne.n	80016d6 <HAL_PCD_EP_SetStall+0x82>
 80016d2:	2302      	movs	r3, #2
 80016d4:	e01e      	b.n	8001714 <HAL_PCD_EP_SetStall+0xc0>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2201      	movs	r2, #1
 80016da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68f9      	ldr	r1, [r7, #12]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f002 fea9 	bl	800443c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80016ea:	78fb      	ldrb	r3, [r7, #3]
 80016ec:	f003 030f 	and.w	r3, r3, #15
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d10a      	bne.n	800170a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6818      	ldr	r0, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	b2d9      	uxtb	r1, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001704:	461a      	mov	r2, r3
 8001706:	f002 ff49 	bl	800459c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001712:	2300      	movs	r3, #0
}
 8001714:	4618      	mov	r0, r3
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	70fb      	strb	r3, [r7, #3]
 8001728:	4613      	mov	r3, r2
 800172a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8001734:	78fb      	ldrb	r3, [r7, #3]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d107      	bne.n	800174a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800173a:	883b      	ldrh	r3, [r7, #0]
 800173c:	0419      	lsls	r1, r3, #16
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68ba      	ldr	r2, [r7, #8]
 8001744:	430a      	orrs	r2, r1
 8001746:	629a      	str	r2, [r3, #40]	; 0x28
 8001748:	e028      	b.n	800179c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001750:	0c1b      	lsrs	r3, r3, #16
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	4413      	add	r3, r2
 8001756:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001758:	2300      	movs	r3, #0
 800175a:	73fb      	strb	r3, [r7, #15]
 800175c:	e00d      	b.n	800177a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	7bfb      	ldrb	r3, [r7, #15]
 8001764:	3340      	adds	r3, #64	; 0x40
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4413      	add	r3, r2
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	0c1b      	lsrs	r3, r3, #16
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	4413      	add	r3, r2
 8001772:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	3301      	adds	r3, #1
 8001778:	73fb      	strb	r3, [r7, #15]
 800177a:	7bfa      	ldrb	r2, [r7, #15]
 800177c:	78fb      	ldrb	r3, [r7, #3]
 800177e:	3b01      	subs	r3, #1
 8001780:	429a      	cmp	r2, r3
 8001782:	d3ec      	bcc.n	800175e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001784:	883b      	ldrh	r3, [r7, #0]
 8001786:	0418      	lsls	r0, r3, #16
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6819      	ldr	r1, [r3, #0]
 800178c:	78fb      	ldrb	r3, [r7, #3]
 800178e:	3b01      	subs	r3, #1
 8001790:	68ba      	ldr	r2, [r7, #8]
 8001792:	4302      	orrs	r2, r0
 8001794:	3340      	adds	r3, #64	; 0x40
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	440b      	add	r3, r1
 800179a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
 80017b2:	460b      	mov	r3, r1
 80017b4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	887a      	ldrh	r2, [r7, #2]
 80017bc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2201      	movs	r2, #1
 80017de:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017fe:	f043 0303 	orr.w	r3, r3, #3
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001806:	2300      	movs	r3, #0
}
 8001808:	4618      	mov	r0, r3
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d101      	bne.n	8001828 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e0cc      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001828:	4b68      	ldr	r3, [pc, #416]	; (80019cc <HAL_RCC_ClockConfig+0x1b8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 030f 	and.w	r3, r3, #15
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	429a      	cmp	r2, r3
 8001834:	d90c      	bls.n	8001850 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001836:	4b65      	ldr	r3, [pc, #404]	; (80019cc <HAL_RCC_ClockConfig+0x1b8>)
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800183e:	4b63      	ldr	r3, [pc, #396]	; (80019cc <HAL_RCC_ClockConfig+0x1b8>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 030f 	and.w	r3, r3, #15
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	429a      	cmp	r2, r3
 800184a:	d001      	beq.n	8001850 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e0b8      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d020      	beq.n	800189e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	2b00      	cmp	r3, #0
 8001866:	d005      	beq.n	8001874 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001868:	4b59      	ldr	r3, [pc, #356]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	4a58      	ldr	r2, [pc, #352]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 800186e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001872:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0308 	and.w	r3, r3, #8
 800187c:	2b00      	cmp	r3, #0
 800187e:	d005      	beq.n	800188c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001880:	4b53      	ldr	r3, [pc, #332]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	4a52      	ldr	r2, [pc, #328]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800188a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800188c:	4b50      	ldr	r3, [pc, #320]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	494d      	ldr	r1, [pc, #308]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	4313      	orrs	r3, r2
 800189c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d044      	beq.n	8001934 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d107      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b2:	4b47      	ldr	r3, [pc, #284]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d119      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e07f      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d003      	beq.n	80018d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ce:	2b03      	cmp	r3, #3
 80018d0:	d107      	bne.n	80018e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018d2:	4b3f      	ldr	r3, [pc, #252]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d109      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e06f      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e2:	4b3b      	ldr	r3, [pc, #236]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e067      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018f2:	4b37      	ldr	r3, [pc, #220]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f023 0203 	bic.w	r2, r3, #3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	4934      	ldr	r1, [pc, #208]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001900:	4313      	orrs	r3, r2
 8001902:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001904:	f7ff f998 	bl	8000c38 <HAL_GetTick>
 8001908:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800190a:	e00a      	b.n	8001922 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800190c:	f7ff f994 	bl	8000c38 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	f241 3288 	movw	r2, #5000	; 0x1388
 800191a:	4293      	cmp	r3, r2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e04f      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001922:	4b2b      	ldr	r3, [pc, #172]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 020c 	and.w	r2, r3, #12
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	429a      	cmp	r2, r3
 8001932:	d1eb      	bne.n	800190c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001934:	4b25      	ldr	r3, [pc, #148]	; (80019cc <HAL_RCC_ClockConfig+0x1b8>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 030f 	and.w	r3, r3, #15
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	429a      	cmp	r2, r3
 8001940:	d20c      	bcs.n	800195c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001942:	4b22      	ldr	r3, [pc, #136]	; (80019cc <HAL_RCC_ClockConfig+0x1b8>)
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800194a:	4b20      	ldr	r3, [pc, #128]	; (80019cc <HAL_RCC_ClockConfig+0x1b8>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 030f 	and.w	r3, r3, #15
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	429a      	cmp	r2, r3
 8001956:	d001      	beq.n	800195c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e032      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	2b00      	cmp	r3, #0
 8001966:	d008      	beq.n	800197a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001968:	4b19      	ldr	r3, [pc, #100]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	4916      	ldr	r1, [pc, #88]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001976:	4313      	orrs	r3, r2
 8001978:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0308 	and.w	r3, r3, #8
 8001982:	2b00      	cmp	r3, #0
 8001984:	d009      	beq.n	800199a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001986:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	490e      	ldr	r1, [pc, #56]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001996:	4313      	orrs	r3, r2
 8001998:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800199a:	f000 fbb1 	bl	8002100 <HAL_RCC_GetSysClockFreq>
 800199e:	4601      	mov	r1, r0
 80019a0:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	091b      	lsrs	r3, r3, #4
 80019a6:	f003 030f 	and.w	r3, r3, #15
 80019aa:	4a0a      	ldr	r2, [pc, #40]	; (80019d4 <HAL_RCC_ClockConfig+0x1c0>)
 80019ac:	5cd3      	ldrb	r3, [r2, r3]
 80019ae:	fa21 f303 	lsr.w	r3, r1, r3
 80019b2:	4a09      	ldr	r2, [pc, #36]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 80019b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019b6:	4b09      	ldr	r3, [pc, #36]	; (80019dc <HAL_RCC_ClockConfig+0x1c8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff f816 	bl	80009ec <HAL_InitTick>

  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40023c00 	.word	0x40023c00
 80019d0:	40023800 	.word	0x40023800
 80019d4:	08007eb8 	.word	0x08007eb8
 80019d8:	20000000 	.word	0x20000000
 80019dc:	20000004 	.word	0x20000004

080019e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019e4:	4b03      	ldr	r3, [pc, #12]	; (80019f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80019e6:	681b      	ldr	r3, [r3, #0]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	20000000 	.word	0x20000000

080019f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019fc:	f7ff fff0 	bl	80019e0 <HAL_RCC_GetHCLKFreq>
 8001a00:	4601      	mov	r1, r0
 8001a02:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	0a9b      	lsrs	r3, r3, #10
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	4a03      	ldr	r2, [pc, #12]	; (8001a1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a0e:	5cd3      	ldrb	r3, [r2, r3]
 8001a10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	08007ec8 	.word	0x08007ec8

08001a20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a24:	f7ff ffdc 	bl	80019e0 <HAL_RCC_GetHCLKFreq>
 8001a28:	4601      	mov	r1, r0
 8001a2a:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	0b5b      	lsrs	r3, r3, #13
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	4a03      	ldr	r2, [pc, #12]	; (8001a44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a36:	5cd3      	ldrb	r3, [r2, r3]
 8001a38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40023800 	.word	0x40023800
 8001a44:	08007ec8 	.word	0x08007ec8

08001a48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	220f      	movs	r2, #15
 8001a56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <HAL_RCC_GetClockConfig+0x5c>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f003 0203 	and.w	r2, r3, #3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a64:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <HAL_RCC_GetClockConfig+0x5c>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <HAL_RCC_GetClockConfig+0x5c>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a7c:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <HAL_RCC_GetClockConfig+0x5c>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	08db      	lsrs	r3, r3, #3
 8001a82:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a8a:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <HAL_RCC_GetClockConfig+0x60>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 020f 	and.w	r2, r3, #15
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	601a      	str	r2, [r3, #0]
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40023c00 	.word	0x40023c00

08001aac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08c      	sub	sp, #48	; 0x30
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d010      	beq.n	8001b06 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001ae4:	4b6f      	ldr	r3, [pc, #444]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ae6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001aea:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af2:	496c      	ldr	r1, [pc, #432]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001b02:	2301      	movs	r3, #1
 8001b04:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d010      	beq.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001b12:	4b64      	ldr	r3, [pc, #400]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b18:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b20:	4960      	ldr	r1, [pc, #384]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d101      	bne.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001b30:	2301      	movs	r3, #1
 8001b32:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d017      	beq.n	8001b70 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001b40:	4b58      	ldr	r3, [pc, #352]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	4955      	ldr	r1, [pc, #340]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b5e:	d101      	bne.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001b60:	2301      	movs	r3, #1
 8001b62:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0308 	and.w	r3, r3, #8
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d017      	beq.n	8001bac <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001b7c:	4b49      	ldr	r3, [pc, #292]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b8a:	4946      	ldr	r1, [pc, #280]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b9a:	d101      	bne.n	8001ba0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0320 	and.w	r3, r3, #32
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 808a 	beq.w	8001cce <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	4b39      	ldr	r3, [pc, #228]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	4a38      	ldr	r2, [pc, #224]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bca:	4b36      	ldr	r3, [pc, #216]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001bd6:	4b34      	ldr	r3, [pc, #208]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a33      	ldr	r2, [pc, #204]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001be2:	f7ff f829 	bl	8000c38 <HAL_GetTick>
 8001be6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001be8:	e008      	b.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001bea:	f7ff f825 	bl	8000c38 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e278      	b.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001bfc:	4b2a      	ldr	r3, [pc, #168]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0f0      	beq.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c08:	4b26      	ldr	r3, [pc, #152]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c10:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c12:	6a3b      	ldr	r3, [r7, #32]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d02f      	beq.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c20:	6a3a      	ldr	r2, [r7, #32]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d028      	beq.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c26:	4b1f      	ldr	r3, [pc, #124]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c2e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c30:	4b1e      	ldr	r3, [pc, #120]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c36:	4b1d      	ldr	r3, [pc, #116]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001c3c:	4a19      	ldr	r2, [pc, #100]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c3e:	6a3b      	ldr	r3, [r7, #32]
 8001c40:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001c42:	4b18      	ldr	r3, [pc, #96]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d114      	bne.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001c4e:	f7fe fff3 	bl	8000c38 <HAL_GetTick>
 8001c52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c54:	e00a      	b.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c56:	f7fe ffef 	bl	8000c38 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e240      	b.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c6c:	4b0d      	ldr	r3, [pc, #52]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0ee      	beq.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001c84:	d114      	bne.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001c86:	4b07      	ldr	r3, [pc, #28]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001c96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c9a:	4902      	ldr	r1, [pc, #8]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	608b      	str	r3, [r1, #8]
 8001ca0:	e00c      	b.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001ca2:	bf00      	nop
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40007000 	.word	0x40007000
 8001cac:	42470e40 	.word	0x42470e40
 8001cb0:	4b4a      	ldr	r3, [pc, #296]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	4a49      	ldr	r2, [pc, #292]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001cb6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001cba:	6093      	str	r3, [r2, #8]
 8001cbc:	4b47      	ldr	r3, [pc, #284]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001cbe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cc8:	4944      	ldr	r1, [pc, #272]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0310 	and.w	r3, r3, #16
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d004      	beq.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001ce0:	4b3f      	ldr	r3, [pc, #252]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001ce2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d00a      	beq.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001cf0:	4b3a      	ldr	r3, [pc, #232]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cf6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfe:	4937      	ldr	r1, [pc, #220]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00a      	beq.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001d12:	4b32      	ldr	r3, [pc, #200]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d18:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d20:	492e      	ldr	r1, [pc, #184]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d011      	beq.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001d34:	4b29      	ldr	r3, [pc, #164]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d3a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d42:	4926      	ldr	r1, [pc, #152]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d52:	d101      	bne.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001d54:	2301      	movs	r3, #1
 8001d56:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d00a      	beq.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001d64:	4b1d      	ldr	r3, [pc, #116]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d6a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d72:	491a      	ldr	r1, [pc, #104]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d011      	beq.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001d86:	4b15      	ldr	r3, [pc, #84]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d8c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d94:	4911      	ldr	r1, [pc, #68]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001da0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001da4:	d101      	bne.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001da6:	2301      	movs	r3, #1
 8001da8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d005      	beq.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001db8:	f040 80ff 	bne.w	8001fba <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001dbc:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001dc2:	f7fe ff39 	bl	8000c38 <HAL_GetTick>
 8001dc6:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001dc8:	e00e      	b.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001dca:	f7fe ff35 	bl	8000c38 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d907      	bls.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e188      	b.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	424711e0 	.word	0x424711e0
 8001de4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001de8:	4b7e      	ldr	r3, [pc, #504]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1ea      	bne.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d003      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d009      	beq.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d028      	beq.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d124      	bne.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001e1c:	4b71      	ldr	r3, [pc, #452]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e22:	0c1b      	lsrs	r3, r3, #16
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	3301      	adds	r3, #1
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001e2e:	4b6d      	ldr	r3, [pc, #436]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e34:	0e1b      	lsrs	r3, r3, #24
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	019b      	lsls	r3, r3, #6
 8001e46:	431a      	orrs	r2, r3
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	085b      	lsrs	r3, r3, #1
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	041b      	lsls	r3, r3, #16
 8001e50:	431a      	orrs	r2, r3
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	061b      	lsls	r3, r3, #24
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	695b      	ldr	r3, [r3, #20]
 8001e5c:	071b      	lsls	r3, r3, #28
 8001e5e:	4961      	ldr	r1, [pc, #388]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0304 	and.w	r3, r3, #4
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d004      	beq.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e7a:	d00a      	beq.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d035      	beq.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e90:	d130      	bne.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001e92:	4b54      	ldr	r3, [pc, #336]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e98:	0c1b      	lsrs	r3, r3, #16
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001ea4:	4b4f      	ldr	r3, [pc, #316]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001eaa:	0f1b      	lsrs	r3, r3, #28
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	019b      	lsls	r3, r3, #6
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	085b      	lsrs	r3, r3, #1
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	041b      	lsls	r3, r3, #16
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	061b      	lsls	r3, r3, #24
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	071b      	lsls	r3, r3, #28
 8001ed4:	4943      	ldr	r1, [pc, #268]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001edc:	4b41      	ldr	r3, [pc, #260]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ede:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ee2:	f023 021f 	bic.w	r2, r3, #31
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eea:	3b01      	subs	r3, #1
 8001eec:	493d      	ldr	r1, [pc, #244]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d029      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f08:	d124      	bne.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001f0a:	4b36      	ldr	r3, [pc, #216]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f10:	0c1b      	lsrs	r3, r3, #16
 8001f12:	f003 0303 	and.w	r3, r3, #3
 8001f16:	3301      	adds	r3, #1
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001f1c:	4b31      	ldr	r3, [pc, #196]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f22:	0f1b      	lsrs	r3, r3, #28
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	019b      	lsls	r3, r3, #6
 8001f34:	431a      	orrs	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	085b      	lsrs	r3, r3, #1
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	041b      	lsls	r3, r3, #16
 8001f40:	431a      	orrs	r2, r3
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	061b      	lsls	r3, r3, #24
 8001f46:	431a      	orrs	r2, r3
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	071b      	lsls	r3, r3, #28
 8001f4c:	4925      	ldr	r1, [pc, #148]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d016      	beq.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	019b      	lsls	r3, r3, #6
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	085b      	lsrs	r3, r3, #1
 8001f72:	3b01      	subs	r3, #1
 8001f74:	041b      	lsls	r3, r3, #16
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	061b      	lsls	r3, r3, #24
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	071b      	lsls	r3, r3, #28
 8001f86:	4917      	ldr	r1, [pc, #92]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001f8e:	4b16      	ldr	r3, [pc, #88]	; (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001f90:	2201      	movs	r2, #1
 8001f92:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f94:	f7fe fe50 	bl	8000c38 <HAL_GetTick>
 8001f98:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001f9c:	f7fe fe4c 	bl	8000c38 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e09f      	b.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001fae:	4b0d      	ldr	r3, [pc, #52]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0f0      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	f040 8095 	bne.w	80020ec <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001fc8:	f7fe fe36 	bl	8000c38 <HAL_GetTick>
 8001fcc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001fce:	e00f      	b.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001fd0:	f7fe fe32 	bl	8000c38 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d908      	bls.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e085      	b.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001fe2:	bf00      	nop
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	42470068 	.word	0x42470068
 8001fec:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001ff0:	4b41      	ldr	r3, [pc, #260]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ff8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ffc:	d0e8      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0304 	and.w	r3, r3, #4
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	2b00      	cmp	r3, #0
 8002010:	d009      	beq.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800201a:	2b00      	cmp	r3, #0
 800201c:	d02b      	beq.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002022:	2b00      	cmp	r3, #0
 8002024:	d127      	bne.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002026:	4b34      	ldr	r3, [pc, #208]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800202c:	0c1b      	lsrs	r3, r3, #16
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	3301      	adds	r3, #1
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	699a      	ldr	r2, [r3, #24]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	69db      	ldr	r3, [r3, #28]
 8002040:	019b      	lsls	r3, r3, #6
 8002042:	431a      	orrs	r2, r3
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	085b      	lsrs	r3, r3, #1
 8002048:	3b01      	subs	r3, #1
 800204a:	041b      	lsls	r3, r3, #16
 800204c:	431a      	orrs	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002052:	061b      	lsls	r3, r3, #24
 8002054:	4928      	ldr	r1, [pc, #160]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002056:	4313      	orrs	r3, r2
 8002058:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800205c:	4b26      	ldr	r3, [pc, #152]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800205e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002062:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206a:	3b01      	subs	r3, #1
 800206c:	021b      	lsls	r3, r3, #8
 800206e:	4922      	ldr	r1, [pc, #136]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002070:	4313      	orrs	r3, r2
 8002072:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207e:	2b00      	cmp	r3, #0
 8002080:	d01d      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002086:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800208a:	d118      	bne.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800208c:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800208e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002092:	0e1b      	lsrs	r3, r3, #24
 8002094:	f003 030f 	and.w	r3, r3, #15
 8002098:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	699a      	ldr	r2, [r3, #24]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	019b      	lsls	r3, r3, #6
 80020a4:	431a      	orrs	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	085b      	lsrs	r3, r3, #1
 80020ac:	3b01      	subs	r3, #1
 80020ae:	041b      	lsls	r3, r3, #16
 80020b0:	431a      	orrs	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	061b      	lsls	r3, r3, #24
 80020b6:	4910      	ldr	r1, [pc, #64]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80020be:	4b0f      	ldr	r3, [pc, #60]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80020c0:	2201      	movs	r2, #1
 80020c2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80020c4:	f7fe fdb8 	bl	8000c38 <HAL_GetTick>
 80020c8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80020ca:	e008      	b.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80020cc:	f7fe fdb4 	bl	8000c38 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e007      	b.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020ea:	d1ef      	bne.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3730      	adds	r7, #48	; 0x30
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40023800 	.word	0x40023800
 80020fc:	42470070 	.word	0x42470070

08002100 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002102:	b087      	sub	sp, #28
 8002104:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002106:	2300      	movs	r3, #0
 8002108:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800210a:	2300      	movs	r3, #0
 800210c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800210e:	2300      	movs	r3, #0
 8002110:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002112:	2300      	movs	r3, #0
 8002114:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002116:	2300      	movs	r3, #0
 8002118:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800211a:	4bc6      	ldr	r3, [pc, #792]	; (8002434 <HAL_RCC_GetSysClockFreq+0x334>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 030c 	and.w	r3, r3, #12
 8002122:	2b0c      	cmp	r3, #12
 8002124:	f200 817e 	bhi.w	8002424 <HAL_RCC_GetSysClockFreq+0x324>
 8002128:	a201      	add	r2, pc, #4	; (adr r2, 8002130 <HAL_RCC_GetSysClockFreq+0x30>)
 800212a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800212e:	bf00      	nop
 8002130:	08002165 	.word	0x08002165
 8002134:	08002425 	.word	0x08002425
 8002138:	08002425 	.word	0x08002425
 800213c:	08002425 	.word	0x08002425
 8002140:	0800216b 	.word	0x0800216b
 8002144:	08002425 	.word	0x08002425
 8002148:	08002425 	.word	0x08002425
 800214c:	08002425 	.word	0x08002425
 8002150:	08002171 	.word	0x08002171
 8002154:	08002425 	.word	0x08002425
 8002158:	08002425 	.word	0x08002425
 800215c:	08002425 	.word	0x08002425
 8002160:	080022cd 	.word	0x080022cd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002164:	4bb4      	ldr	r3, [pc, #720]	; (8002438 <HAL_RCC_GetSysClockFreq+0x338>)
 8002166:	613b      	str	r3, [r7, #16]
       break;
 8002168:	e15f      	b.n	800242a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800216a:	4bb4      	ldr	r3, [pc, #720]	; (800243c <HAL_RCC_GetSysClockFreq+0x33c>)
 800216c:	613b      	str	r3, [r7, #16]
      break;
 800216e:	e15c      	b.n	800242a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002170:	4bb0      	ldr	r3, [pc, #704]	; (8002434 <HAL_RCC_GetSysClockFreq+0x334>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002178:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800217a:	4bae      	ldr	r3, [pc, #696]	; (8002434 <HAL_RCC_GetSysClockFreq+0x334>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d04a      	beq.n	800221c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002186:	4bab      	ldr	r3, [pc, #684]	; (8002434 <HAL_RCC_GetSysClockFreq+0x334>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	099b      	lsrs	r3, r3, #6
 800218c:	f04f 0400 	mov.w	r4, #0
 8002190:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002194:	f04f 0200 	mov.w	r2, #0
 8002198:	ea03 0501 	and.w	r5, r3, r1
 800219c:	ea04 0602 	and.w	r6, r4, r2
 80021a0:	4629      	mov	r1, r5
 80021a2:	4632      	mov	r2, r6
 80021a4:	f04f 0300 	mov.w	r3, #0
 80021a8:	f04f 0400 	mov.w	r4, #0
 80021ac:	0154      	lsls	r4, r2, #5
 80021ae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021b2:	014b      	lsls	r3, r1, #5
 80021b4:	4619      	mov	r1, r3
 80021b6:	4622      	mov	r2, r4
 80021b8:	1b49      	subs	r1, r1, r5
 80021ba:	eb62 0206 	sbc.w	r2, r2, r6
 80021be:	f04f 0300 	mov.w	r3, #0
 80021c2:	f04f 0400 	mov.w	r4, #0
 80021c6:	0194      	lsls	r4, r2, #6
 80021c8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80021cc:	018b      	lsls	r3, r1, #6
 80021ce:	1a5b      	subs	r3, r3, r1
 80021d0:	eb64 0402 	sbc.w	r4, r4, r2
 80021d4:	f04f 0100 	mov.w	r1, #0
 80021d8:	f04f 0200 	mov.w	r2, #0
 80021dc:	00e2      	lsls	r2, r4, #3
 80021de:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80021e2:	00d9      	lsls	r1, r3, #3
 80021e4:	460b      	mov	r3, r1
 80021e6:	4614      	mov	r4, r2
 80021e8:	195b      	adds	r3, r3, r5
 80021ea:	eb44 0406 	adc.w	r4, r4, r6
 80021ee:	f04f 0100 	mov.w	r1, #0
 80021f2:	f04f 0200 	mov.w	r2, #0
 80021f6:	0262      	lsls	r2, r4, #9
 80021f8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80021fc:	0259      	lsls	r1, r3, #9
 80021fe:	460b      	mov	r3, r1
 8002200:	4614      	mov	r4, r2
 8002202:	4618      	mov	r0, r3
 8002204:	4621      	mov	r1, r4
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f04f 0400 	mov.w	r4, #0
 800220c:	461a      	mov	r2, r3
 800220e:	4623      	mov	r3, r4
 8002210:	f7fd fffe 	bl	8000210 <__aeabi_uldivmod>
 8002214:	4603      	mov	r3, r0
 8002216:	460c      	mov	r4, r1
 8002218:	617b      	str	r3, [r7, #20]
 800221a:	e049      	b.n	80022b0 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800221c:	4b85      	ldr	r3, [pc, #532]	; (8002434 <HAL_RCC_GetSysClockFreq+0x334>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	099b      	lsrs	r3, r3, #6
 8002222:	f04f 0400 	mov.w	r4, #0
 8002226:	f240 11ff 	movw	r1, #511	; 0x1ff
 800222a:	f04f 0200 	mov.w	r2, #0
 800222e:	ea03 0501 	and.w	r5, r3, r1
 8002232:	ea04 0602 	and.w	r6, r4, r2
 8002236:	4629      	mov	r1, r5
 8002238:	4632      	mov	r2, r6
 800223a:	f04f 0300 	mov.w	r3, #0
 800223e:	f04f 0400 	mov.w	r4, #0
 8002242:	0154      	lsls	r4, r2, #5
 8002244:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002248:	014b      	lsls	r3, r1, #5
 800224a:	4619      	mov	r1, r3
 800224c:	4622      	mov	r2, r4
 800224e:	1b49      	subs	r1, r1, r5
 8002250:	eb62 0206 	sbc.w	r2, r2, r6
 8002254:	f04f 0300 	mov.w	r3, #0
 8002258:	f04f 0400 	mov.w	r4, #0
 800225c:	0194      	lsls	r4, r2, #6
 800225e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002262:	018b      	lsls	r3, r1, #6
 8002264:	1a5b      	subs	r3, r3, r1
 8002266:	eb64 0402 	sbc.w	r4, r4, r2
 800226a:	f04f 0100 	mov.w	r1, #0
 800226e:	f04f 0200 	mov.w	r2, #0
 8002272:	00e2      	lsls	r2, r4, #3
 8002274:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002278:	00d9      	lsls	r1, r3, #3
 800227a:	460b      	mov	r3, r1
 800227c:	4614      	mov	r4, r2
 800227e:	195b      	adds	r3, r3, r5
 8002280:	eb44 0406 	adc.w	r4, r4, r6
 8002284:	f04f 0100 	mov.w	r1, #0
 8002288:	f04f 0200 	mov.w	r2, #0
 800228c:	02a2      	lsls	r2, r4, #10
 800228e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002292:	0299      	lsls	r1, r3, #10
 8002294:	460b      	mov	r3, r1
 8002296:	4614      	mov	r4, r2
 8002298:	4618      	mov	r0, r3
 800229a:	4621      	mov	r1, r4
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f04f 0400 	mov.w	r4, #0
 80022a2:	461a      	mov	r2, r3
 80022a4:	4623      	mov	r3, r4
 80022a6:	f7fd ffb3 	bl	8000210 <__aeabi_uldivmod>
 80022aa:	4603      	mov	r3, r0
 80022ac:	460c      	mov	r4, r1
 80022ae:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022b0:	4b60      	ldr	r3, [pc, #384]	; (8002434 <HAL_RCC_GetSysClockFreq+0x334>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	0c1b      	lsrs	r3, r3, #16
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	3301      	adds	r3, #1
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c8:	613b      	str	r3, [r7, #16]
      break;
 80022ca:	e0ae      	b.n	800242a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022cc:	4b59      	ldr	r3, [pc, #356]	; (8002434 <HAL_RCC_GetSysClockFreq+0x334>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022d4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022d6:	4b57      	ldr	r3, [pc, #348]	; (8002434 <HAL_RCC_GetSysClockFreq+0x334>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d04a      	beq.n	8002378 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022e2:	4b54      	ldr	r3, [pc, #336]	; (8002434 <HAL_RCC_GetSysClockFreq+0x334>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	099b      	lsrs	r3, r3, #6
 80022e8:	f04f 0400 	mov.w	r4, #0
 80022ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80022f0:	f04f 0200 	mov.w	r2, #0
 80022f4:	ea03 0501 	and.w	r5, r3, r1
 80022f8:	ea04 0602 	and.w	r6, r4, r2
 80022fc:	4629      	mov	r1, r5
 80022fe:	4632      	mov	r2, r6
 8002300:	f04f 0300 	mov.w	r3, #0
 8002304:	f04f 0400 	mov.w	r4, #0
 8002308:	0154      	lsls	r4, r2, #5
 800230a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800230e:	014b      	lsls	r3, r1, #5
 8002310:	4619      	mov	r1, r3
 8002312:	4622      	mov	r2, r4
 8002314:	1b49      	subs	r1, r1, r5
 8002316:	eb62 0206 	sbc.w	r2, r2, r6
 800231a:	f04f 0300 	mov.w	r3, #0
 800231e:	f04f 0400 	mov.w	r4, #0
 8002322:	0194      	lsls	r4, r2, #6
 8002324:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002328:	018b      	lsls	r3, r1, #6
 800232a:	1a5b      	subs	r3, r3, r1
 800232c:	eb64 0402 	sbc.w	r4, r4, r2
 8002330:	f04f 0100 	mov.w	r1, #0
 8002334:	f04f 0200 	mov.w	r2, #0
 8002338:	00e2      	lsls	r2, r4, #3
 800233a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800233e:	00d9      	lsls	r1, r3, #3
 8002340:	460b      	mov	r3, r1
 8002342:	4614      	mov	r4, r2
 8002344:	195b      	adds	r3, r3, r5
 8002346:	eb44 0406 	adc.w	r4, r4, r6
 800234a:	f04f 0100 	mov.w	r1, #0
 800234e:	f04f 0200 	mov.w	r2, #0
 8002352:	0262      	lsls	r2, r4, #9
 8002354:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002358:	0259      	lsls	r1, r3, #9
 800235a:	460b      	mov	r3, r1
 800235c:	4614      	mov	r4, r2
 800235e:	4618      	mov	r0, r3
 8002360:	4621      	mov	r1, r4
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f04f 0400 	mov.w	r4, #0
 8002368:	461a      	mov	r2, r3
 800236a:	4623      	mov	r3, r4
 800236c:	f7fd ff50 	bl	8000210 <__aeabi_uldivmod>
 8002370:	4603      	mov	r3, r0
 8002372:	460c      	mov	r4, r1
 8002374:	617b      	str	r3, [r7, #20]
 8002376:	e049      	b.n	800240c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002378:	4b2e      	ldr	r3, [pc, #184]	; (8002434 <HAL_RCC_GetSysClockFreq+0x334>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	099b      	lsrs	r3, r3, #6
 800237e:	f04f 0400 	mov.w	r4, #0
 8002382:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002386:	f04f 0200 	mov.w	r2, #0
 800238a:	ea03 0501 	and.w	r5, r3, r1
 800238e:	ea04 0602 	and.w	r6, r4, r2
 8002392:	4629      	mov	r1, r5
 8002394:	4632      	mov	r2, r6
 8002396:	f04f 0300 	mov.w	r3, #0
 800239a:	f04f 0400 	mov.w	r4, #0
 800239e:	0154      	lsls	r4, r2, #5
 80023a0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80023a4:	014b      	lsls	r3, r1, #5
 80023a6:	4619      	mov	r1, r3
 80023a8:	4622      	mov	r2, r4
 80023aa:	1b49      	subs	r1, r1, r5
 80023ac:	eb62 0206 	sbc.w	r2, r2, r6
 80023b0:	f04f 0300 	mov.w	r3, #0
 80023b4:	f04f 0400 	mov.w	r4, #0
 80023b8:	0194      	lsls	r4, r2, #6
 80023ba:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80023be:	018b      	lsls	r3, r1, #6
 80023c0:	1a5b      	subs	r3, r3, r1
 80023c2:	eb64 0402 	sbc.w	r4, r4, r2
 80023c6:	f04f 0100 	mov.w	r1, #0
 80023ca:	f04f 0200 	mov.w	r2, #0
 80023ce:	00e2      	lsls	r2, r4, #3
 80023d0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80023d4:	00d9      	lsls	r1, r3, #3
 80023d6:	460b      	mov	r3, r1
 80023d8:	4614      	mov	r4, r2
 80023da:	195b      	adds	r3, r3, r5
 80023dc:	eb44 0406 	adc.w	r4, r4, r6
 80023e0:	f04f 0100 	mov.w	r1, #0
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	02a2      	lsls	r2, r4, #10
 80023ea:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80023ee:	0299      	lsls	r1, r3, #10
 80023f0:	460b      	mov	r3, r1
 80023f2:	4614      	mov	r4, r2
 80023f4:	4618      	mov	r0, r3
 80023f6:	4621      	mov	r1, r4
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f04f 0400 	mov.w	r4, #0
 80023fe:	461a      	mov	r2, r3
 8002400:	4623      	mov	r3, r4
 8002402:	f7fd ff05 	bl	8000210 <__aeabi_uldivmod>
 8002406:	4603      	mov	r3, r0
 8002408:	460c      	mov	r4, r1
 800240a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800240c:	4b09      	ldr	r3, [pc, #36]	; (8002434 <HAL_RCC_GetSysClockFreq+0x334>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	0f1b      	lsrs	r3, r3, #28
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002420:	613b      	str	r3, [r7, #16]
      break;
 8002422:	e002      	b.n	800242a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002424:	4b04      	ldr	r3, [pc, #16]	; (8002438 <HAL_RCC_GetSysClockFreq+0x338>)
 8002426:	613b      	str	r3, [r7, #16]
      break;
 8002428:	bf00      	nop
    }
  }
  return sysclockfreq;
 800242a:	693b      	ldr	r3, [r7, #16]
}
 800242c:	4618      	mov	r0, r3
 800242e:	371c      	adds	r7, #28
 8002430:	46bd      	mov	sp, r7
 8002432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002434:	40023800 	.word	0x40023800
 8002438:	00f42400 	.word	0x00f42400
 800243c:	007a1200 	.word	0x007a1200

08002440 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002448:	2300      	movs	r3, #0
 800244a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	2b00      	cmp	r3, #0
 8002456:	f000 8083 	beq.w	8002560 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800245a:	4b95      	ldr	r3, [pc, #596]	; (80026b0 <HAL_RCC_OscConfig+0x270>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 030c 	and.w	r3, r3, #12
 8002462:	2b04      	cmp	r3, #4
 8002464:	d019      	beq.n	800249a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002466:	4b92      	ldr	r3, [pc, #584]	; (80026b0 <HAL_RCC_OscConfig+0x270>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800246e:	2b08      	cmp	r3, #8
 8002470:	d106      	bne.n	8002480 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002472:	4b8f      	ldr	r3, [pc, #572]	; (80026b0 <HAL_RCC_OscConfig+0x270>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800247a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800247e:	d00c      	beq.n	800249a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002480:	4b8b      	ldr	r3, [pc, #556]	; (80026b0 <HAL_RCC_OscConfig+0x270>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002488:	2b0c      	cmp	r3, #12
 800248a:	d112      	bne.n	80024b2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800248c:	4b88      	ldr	r3, [pc, #544]	; (80026b0 <HAL_RCC_OscConfig+0x270>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002494:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002498:	d10b      	bne.n	80024b2 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800249a:	4b85      	ldr	r3, [pc, #532]	; (80026b0 <HAL_RCC_OscConfig+0x270>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d05b      	beq.n	800255e <HAL_RCC_OscConfig+0x11e>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d157      	bne.n	800255e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e216      	b.n	80028e0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ba:	d106      	bne.n	80024ca <HAL_RCC_OscConfig+0x8a>
 80024bc:	4b7c      	ldr	r3, [pc, #496]	; (80026b0 <HAL_RCC_OscConfig+0x270>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a7b      	ldr	r2, [pc, #492]	; (80026b0 <HAL_RCC_OscConfig+0x270>)
 80024c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c6:	6013      	str	r3, [r2, #0]
 80024c8:	e01d      	b.n	8002506 <HAL_RCC_OscConfig+0xc6>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024d2:	d10c      	bne.n	80024ee <HAL_RCC_OscConfig+0xae>
 80024d4:	4b76      	ldr	r3, [pc, #472]	; (80026b0 <HAL_RCC_OscConfig+0x270>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a75      	ldr	r2, [pc, #468]	; (80026b0 <HAL_RCC_OscConfig+0x270>)
 80024da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024de:	6013      	str	r3, [r2, #0]
 80024e0:	4b73      	ldr	r3, [pc, #460]	; (80026b0 <HAL_RCC_OscConfig+0x270>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a72      	ldr	r2, [pc, #456]	; (80026b0 <HAL_RCC_OscConfig+0x270>)
 80024e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ea:	6013      	str	r3, [r2, #0]
 80024ec:	e00b      	b.n	8002506 <HAL_RCC_OscConfig+0xc6>
 80024ee:	4b70      	ldr	r3, [pc, #448]	; (80026b0 <HAL_RCC_OscConfig+0x270>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a6f      	ldr	r2, [pc, #444]	; (80026b0 <HAL_RCC_OscConfig+0x270>)
 80024f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	4b6d      	ldr	r3, [pc, #436]	; (80026b0 <HAL_RCC_OscConfig+0x270>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a6c      	ldr	r2, [pc, #432]	; (80026b0 <HAL_RCC_OscConfig+0x270>)
 8002500:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002504:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d013      	beq.n	8002536 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250e:	f7fe fb93 	bl	8000c38 <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002516:	f7fe fb8f 	bl	8000c38 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b64      	cmp	r3, #100	; 0x64
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e1db      	b.n	80028e0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002528:	4b61      	ldr	r3, [pc, #388]	; (80026b0 <HAL_RCC_OscConfig+0x270>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0f0      	beq.n	8002516 <HAL_RCC_OscConfig+0xd6>
 8002534:	e014      	b.n	8002560 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002536:	f7fe fb7f 	bl	8000c38 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800253e:	f7fe fb7b 	bl	8000c38 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b64      	cmp	r3, #100	; 0x64
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e1c7      	b.n	80028e0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002550:	4b57      	ldr	r3, [pc, #348]	; (80026b0 <HAL_RCC_OscConfig+0x270>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1f0      	bne.n	800253e <HAL_RCC_OscConfig+0xfe>
 800255c:	e000      	b.n	8002560 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800255e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d06f      	beq.n	800264c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800256c:	4b50      	ldr	r3, [pc, #320]	; (80026b0 <HAL_RCC_OscConfig+0x270>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f003 030c 	and.w	r3, r3, #12
 8002574:	2b00      	cmp	r3, #0
 8002576:	d017      	beq.n	80025a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002578:	4b4d      	ldr	r3, [pc, #308]	; (80026b0 <HAL_RCC_OscConfig+0x270>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002580:	2b08      	cmp	r3, #8
 8002582:	d105      	bne.n	8002590 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002584:	4b4a      	ldr	r3, [pc, #296]	; (80026b0 <HAL_RCC_OscConfig+0x270>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00b      	beq.n	80025a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002590:	4b47      	ldr	r3, [pc, #284]	; (80026b0 <HAL_RCC_OscConfig+0x270>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002598:	2b0c      	cmp	r3, #12
 800259a:	d11c      	bne.n	80025d6 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800259c:	4b44      	ldr	r3, [pc, #272]	; (80026b0 <HAL_RCC_OscConfig+0x270>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d116      	bne.n	80025d6 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025a8:	4b41      	ldr	r3, [pc, #260]	; (80026b0 <HAL_RCC_OscConfig+0x270>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d005      	beq.n	80025c0 <HAL_RCC_OscConfig+0x180>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d001      	beq.n	80025c0 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e18f      	b.n	80028e0 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c0:	4b3b      	ldr	r3, [pc, #236]	; (80026b0 <HAL_RCC_OscConfig+0x270>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	4938      	ldr	r1, [pc, #224]	; (80026b0 <HAL_RCC_OscConfig+0x270>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025d4:	e03a      	b.n	800264c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d020      	beq.n	8002620 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025de:	4b35      	ldr	r3, [pc, #212]	; (80026b4 <HAL_RCC_OscConfig+0x274>)
 80025e0:	2201      	movs	r2, #1
 80025e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e4:	f7fe fb28 	bl	8000c38 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025ec:	f7fe fb24 	bl	8000c38 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e170      	b.n	80028e0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fe:	4b2c      	ldr	r3, [pc, #176]	; (80026b0 <HAL_RCC_OscConfig+0x270>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0f0      	beq.n	80025ec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800260a:	4b29      	ldr	r3, [pc, #164]	; (80026b0 <HAL_RCC_OscConfig+0x270>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	4925      	ldr	r1, [pc, #148]	; (80026b0 <HAL_RCC_OscConfig+0x270>)
 800261a:	4313      	orrs	r3, r2
 800261c:	600b      	str	r3, [r1, #0]
 800261e:	e015      	b.n	800264c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002620:	4b24      	ldr	r3, [pc, #144]	; (80026b4 <HAL_RCC_OscConfig+0x274>)
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002626:	f7fe fb07 	bl	8000c38 <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800262e:	f7fe fb03 	bl	8000c38 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e14f      	b.n	80028e0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002640:	4b1b      	ldr	r3, [pc, #108]	; (80026b0 <HAL_RCC_OscConfig+0x270>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1f0      	bne.n	800262e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0308 	and.w	r3, r3, #8
 8002654:	2b00      	cmp	r3, #0
 8002656:	d037      	beq.n	80026c8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d016      	beq.n	800268e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002660:	4b15      	ldr	r3, [pc, #84]	; (80026b8 <HAL_RCC_OscConfig+0x278>)
 8002662:	2201      	movs	r2, #1
 8002664:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002666:	f7fe fae7 	bl	8000c38 <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800266e:	f7fe fae3 	bl	8000c38 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e12f      	b.n	80028e0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002680:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <HAL_RCC_OscConfig+0x270>)
 8002682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d0f0      	beq.n	800266e <HAL_RCC_OscConfig+0x22e>
 800268c:	e01c      	b.n	80026c8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800268e:	4b0a      	ldr	r3, [pc, #40]	; (80026b8 <HAL_RCC_OscConfig+0x278>)
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002694:	f7fe fad0 	bl	8000c38 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800269a:	e00f      	b.n	80026bc <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800269c:	f7fe facc 	bl	8000c38 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d908      	bls.n	80026bc <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e118      	b.n	80028e0 <HAL_RCC_OscConfig+0x4a0>
 80026ae:	bf00      	nop
 80026b0:	40023800 	.word	0x40023800
 80026b4:	42470000 	.word	0x42470000
 80026b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026bc:	4b8a      	ldr	r3, [pc, #552]	; (80028e8 <HAL_RCC_OscConfig+0x4a8>)
 80026be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1e9      	bne.n	800269c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 8097 	beq.w	8002804 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026d6:	2300      	movs	r3, #0
 80026d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026da:	4b83      	ldr	r3, [pc, #524]	; (80028e8 <HAL_RCC_OscConfig+0x4a8>)
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10f      	bne.n	8002706 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	4b7f      	ldr	r3, [pc, #508]	; (80028e8 <HAL_RCC_OscConfig+0x4a8>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	4a7e      	ldr	r2, [pc, #504]	; (80028e8 <HAL_RCC_OscConfig+0x4a8>)
 80026f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026f4:	6413      	str	r3, [r2, #64]	; 0x40
 80026f6:	4b7c      	ldr	r3, [pc, #496]	; (80028e8 <HAL_RCC_OscConfig+0x4a8>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002702:	2301      	movs	r3, #1
 8002704:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002706:	4b79      	ldr	r3, [pc, #484]	; (80028ec <HAL_RCC_OscConfig+0x4ac>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270e:	2b00      	cmp	r3, #0
 8002710:	d118      	bne.n	8002744 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002712:	4b76      	ldr	r3, [pc, #472]	; (80028ec <HAL_RCC_OscConfig+0x4ac>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a75      	ldr	r2, [pc, #468]	; (80028ec <HAL_RCC_OscConfig+0x4ac>)
 8002718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800271c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800271e:	f7fe fa8b 	bl	8000c38 <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002726:	f7fe fa87 	bl	8000c38 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e0d3      	b.n	80028e0 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002738:	4b6c      	ldr	r3, [pc, #432]	; (80028ec <HAL_RCC_OscConfig+0x4ac>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002740:	2b00      	cmp	r3, #0
 8002742:	d0f0      	beq.n	8002726 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d106      	bne.n	800275a <HAL_RCC_OscConfig+0x31a>
 800274c:	4b66      	ldr	r3, [pc, #408]	; (80028e8 <HAL_RCC_OscConfig+0x4a8>)
 800274e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002750:	4a65      	ldr	r2, [pc, #404]	; (80028e8 <HAL_RCC_OscConfig+0x4a8>)
 8002752:	f043 0301 	orr.w	r3, r3, #1
 8002756:	6713      	str	r3, [r2, #112]	; 0x70
 8002758:	e01c      	b.n	8002794 <HAL_RCC_OscConfig+0x354>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	2b05      	cmp	r3, #5
 8002760:	d10c      	bne.n	800277c <HAL_RCC_OscConfig+0x33c>
 8002762:	4b61      	ldr	r3, [pc, #388]	; (80028e8 <HAL_RCC_OscConfig+0x4a8>)
 8002764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002766:	4a60      	ldr	r2, [pc, #384]	; (80028e8 <HAL_RCC_OscConfig+0x4a8>)
 8002768:	f043 0304 	orr.w	r3, r3, #4
 800276c:	6713      	str	r3, [r2, #112]	; 0x70
 800276e:	4b5e      	ldr	r3, [pc, #376]	; (80028e8 <HAL_RCC_OscConfig+0x4a8>)
 8002770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002772:	4a5d      	ldr	r2, [pc, #372]	; (80028e8 <HAL_RCC_OscConfig+0x4a8>)
 8002774:	f043 0301 	orr.w	r3, r3, #1
 8002778:	6713      	str	r3, [r2, #112]	; 0x70
 800277a:	e00b      	b.n	8002794 <HAL_RCC_OscConfig+0x354>
 800277c:	4b5a      	ldr	r3, [pc, #360]	; (80028e8 <HAL_RCC_OscConfig+0x4a8>)
 800277e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002780:	4a59      	ldr	r2, [pc, #356]	; (80028e8 <HAL_RCC_OscConfig+0x4a8>)
 8002782:	f023 0301 	bic.w	r3, r3, #1
 8002786:	6713      	str	r3, [r2, #112]	; 0x70
 8002788:	4b57      	ldr	r3, [pc, #348]	; (80028e8 <HAL_RCC_OscConfig+0x4a8>)
 800278a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278c:	4a56      	ldr	r2, [pc, #344]	; (80028e8 <HAL_RCC_OscConfig+0x4a8>)
 800278e:	f023 0304 	bic.w	r3, r3, #4
 8002792:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d015      	beq.n	80027c8 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800279c:	f7fe fa4c 	bl	8000c38 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a2:	e00a      	b.n	80027ba <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027a4:	f7fe fa48 	bl	8000c38 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e092      	b.n	80028e0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ba:	4b4b      	ldr	r3, [pc, #300]	; (80028e8 <HAL_RCC_OscConfig+0x4a8>)
 80027bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0ee      	beq.n	80027a4 <HAL_RCC_OscConfig+0x364>
 80027c6:	e014      	b.n	80027f2 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c8:	f7fe fa36 	bl	8000c38 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ce:	e00a      	b.n	80027e6 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027d0:	f7fe fa32 	bl	8000c38 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	f241 3288 	movw	r2, #5000	; 0x1388
 80027de:	4293      	cmp	r3, r2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e07c      	b.n	80028e0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e6:	4b40      	ldr	r3, [pc, #256]	; (80028e8 <HAL_RCC_OscConfig+0x4a8>)
 80027e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1ee      	bne.n	80027d0 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027f2:	7dfb      	ldrb	r3, [r7, #23]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d105      	bne.n	8002804 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f8:	4b3b      	ldr	r3, [pc, #236]	; (80028e8 <HAL_RCC_OscConfig+0x4a8>)
 80027fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fc:	4a3a      	ldr	r2, [pc, #232]	; (80028e8 <HAL_RCC_OscConfig+0x4a8>)
 80027fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002802:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d068      	beq.n	80028de <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800280c:	4b36      	ldr	r3, [pc, #216]	; (80028e8 <HAL_RCC_OscConfig+0x4a8>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f003 030c 	and.w	r3, r3, #12
 8002814:	2b08      	cmp	r3, #8
 8002816:	d060      	beq.n	80028da <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	2b02      	cmp	r3, #2
 800281e:	d145      	bne.n	80028ac <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002820:	4b33      	ldr	r3, [pc, #204]	; (80028f0 <HAL_RCC_OscConfig+0x4b0>)
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002826:	f7fe fa07 	bl	8000c38 <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800282e:	f7fe fa03 	bl	8000c38 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e04f      	b.n	80028e0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002840:	4b29      	ldr	r3, [pc, #164]	; (80028e8 <HAL_RCC_OscConfig+0x4a8>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1f0      	bne.n	800282e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	69da      	ldr	r2, [r3, #28]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	431a      	orrs	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	019b      	lsls	r3, r3, #6
 800285c:	431a      	orrs	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002862:	085b      	lsrs	r3, r3, #1
 8002864:	3b01      	subs	r3, #1
 8002866:	041b      	lsls	r3, r3, #16
 8002868:	431a      	orrs	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286e:	061b      	lsls	r3, r3, #24
 8002870:	431a      	orrs	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	071b      	lsls	r3, r3, #28
 8002878:	491b      	ldr	r1, [pc, #108]	; (80028e8 <HAL_RCC_OscConfig+0x4a8>)
 800287a:	4313      	orrs	r3, r2
 800287c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800287e:	4b1c      	ldr	r3, [pc, #112]	; (80028f0 <HAL_RCC_OscConfig+0x4b0>)
 8002880:	2201      	movs	r2, #1
 8002882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002884:	f7fe f9d8 	bl	8000c38 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800288c:	f7fe f9d4 	bl	8000c38 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e020      	b.n	80028e0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800289e:	4b12      	ldr	r3, [pc, #72]	; (80028e8 <HAL_RCC_OscConfig+0x4a8>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0f0      	beq.n	800288c <HAL_RCC_OscConfig+0x44c>
 80028aa:	e018      	b.n	80028de <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ac:	4b10      	ldr	r3, [pc, #64]	; (80028f0 <HAL_RCC_OscConfig+0x4b0>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b2:	f7fe f9c1 	bl	8000c38 <HAL_GetTick>
 80028b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b8:	e008      	b.n	80028cc <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ba:	f7fe f9bd 	bl	8000c38 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e009      	b.n	80028e0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028cc:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <HAL_RCC_OscConfig+0x4a8>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1f0      	bne.n	80028ba <HAL_RCC_OscConfig+0x47a>
 80028d8:	e001      	b.n	80028de <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e000      	b.n	80028e0 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3718      	adds	r7, #24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40023800 	.word	0x40023800
 80028ec:	40007000 	.word	0x40007000
 80028f0:	42470060 	.word	0x42470060

080028f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e01d      	b.n	8002942 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d106      	bne.n	8002920 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f815 	bl	800294a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2202      	movs	r2, #2
 8002924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3304      	adds	r3, #4
 8002930:	4619      	mov	r1, r3
 8002932:	4610      	mov	r0, r2
 8002934:	f000 f968 	bl	8002c08 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800295e:	b480      	push	{r7}
 8002960:	b085      	sub	sp, #20
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68da      	ldr	r2, [r3, #12]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f042 0201 	orr.w	r2, r2, #1
 8002974:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2b06      	cmp	r3, #6
 8002986:	d007      	beq.n	8002998 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 0201 	orr.w	r2, r2, #1
 8002996:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b082      	sub	sp, #8
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d122      	bne.n	8002a02 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d11b      	bne.n	8002a02 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f06f 0202 	mvn.w	r2, #2
 80029d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	f003 0303 	and.w	r3, r3, #3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d003      	beq.n	80029f0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 f8ee 	bl	8002bca <HAL_TIM_IC_CaptureCallback>
 80029ee:	e005      	b.n	80029fc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 f8e0 	bl	8002bb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f8f1 	bl	8002bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	f003 0304 	and.w	r3, r3, #4
 8002a0c:	2b04      	cmp	r3, #4
 8002a0e:	d122      	bne.n	8002a56 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d11b      	bne.n	8002a56 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f06f 0204 	mvn.w	r2, #4
 8002a26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 f8c4 	bl	8002bca <HAL_TIM_IC_CaptureCallback>
 8002a42:	e005      	b.n	8002a50 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 f8b6 	bl	8002bb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f8c7 	bl	8002bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	f003 0308 	and.w	r3, r3, #8
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d122      	bne.n	8002aaa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	d11b      	bne.n	8002aaa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f06f 0208 	mvn.w	r2, #8
 8002a7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2204      	movs	r2, #4
 8002a80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	f003 0303 	and.w	r3, r3, #3
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 f89a 	bl	8002bca <HAL_TIM_IC_CaptureCallback>
 8002a96:	e005      	b.n	8002aa4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 f88c 	bl	8002bb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f89d 	bl	8002bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	f003 0310 	and.w	r3, r3, #16
 8002ab4:	2b10      	cmp	r3, #16
 8002ab6:	d122      	bne.n	8002afe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	f003 0310 	and.w	r3, r3, #16
 8002ac2:	2b10      	cmp	r3, #16
 8002ac4:	d11b      	bne.n	8002afe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f06f 0210 	mvn.w	r2, #16
 8002ace:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2208      	movs	r2, #8
 8002ad4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	69db      	ldr	r3, [r3, #28]
 8002adc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 f870 	bl	8002bca <HAL_TIM_IC_CaptureCallback>
 8002aea:	e005      	b.n	8002af8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 f862 	bl	8002bb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f873 	bl	8002bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d10e      	bne.n	8002b2a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d107      	bne.n	8002b2a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f06f 0201 	mvn.w	r2, #1
 8002b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f7fd fe81 	bl	800082c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b34:	2b80      	cmp	r3, #128	; 0x80
 8002b36:	d10e      	bne.n	8002b56 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b42:	2b80      	cmp	r3, #128	; 0x80
 8002b44:	d107      	bne.n	8002b56 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 f903 	bl	8002d5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b60:	2b40      	cmp	r3, #64	; 0x40
 8002b62:	d10e      	bne.n	8002b82 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6e:	2b40      	cmp	r3, #64	; 0x40
 8002b70:	d107      	bne.n	8002b82 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 f838 	bl	8002bf2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	f003 0320 	and.w	r3, r3, #32
 8002b8c:	2b20      	cmp	r3, #32
 8002b8e:	d10e      	bne.n	8002bae <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	f003 0320 	and.w	r3, r3, #32
 8002b9a:	2b20      	cmp	r3, #32
 8002b9c:	d107      	bne.n	8002bae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f06f 0220 	mvn.w	r2, #32
 8002ba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 f8cd 	bl	8002d48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bae:	bf00      	nop
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bfa:	bf00      	nop
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
	...

08002c08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a40      	ldr	r2, [pc, #256]	; (8002d1c <TIM_Base_SetConfig+0x114>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d013      	beq.n	8002c48 <TIM_Base_SetConfig+0x40>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c26:	d00f      	beq.n	8002c48 <TIM_Base_SetConfig+0x40>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a3d      	ldr	r2, [pc, #244]	; (8002d20 <TIM_Base_SetConfig+0x118>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d00b      	beq.n	8002c48 <TIM_Base_SetConfig+0x40>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a3c      	ldr	r2, [pc, #240]	; (8002d24 <TIM_Base_SetConfig+0x11c>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d007      	beq.n	8002c48 <TIM_Base_SetConfig+0x40>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a3b      	ldr	r2, [pc, #236]	; (8002d28 <TIM_Base_SetConfig+0x120>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d003      	beq.n	8002c48 <TIM_Base_SetConfig+0x40>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a3a      	ldr	r2, [pc, #232]	; (8002d2c <TIM_Base_SetConfig+0x124>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d108      	bne.n	8002c5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a2f      	ldr	r2, [pc, #188]	; (8002d1c <TIM_Base_SetConfig+0x114>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d02b      	beq.n	8002cba <TIM_Base_SetConfig+0xb2>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c68:	d027      	beq.n	8002cba <TIM_Base_SetConfig+0xb2>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a2c      	ldr	r2, [pc, #176]	; (8002d20 <TIM_Base_SetConfig+0x118>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d023      	beq.n	8002cba <TIM_Base_SetConfig+0xb2>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a2b      	ldr	r2, [pc, #172]	; (8002d24 <TIM_Base_SetConfig+0x11c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d01f      	beq.n	8002cba <TIM_Base_SetConfig+0xb2>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a2a      	ldr	r2, [pc, #168]	; (8002d28 <TIM_Base_SetConfig+0x120>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d01b      	beq.n	8002cba <TIM_Base_SetConfig+0xb2>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a29      	ldr	r2, [pc, #164]	; (8002d2c <TIM_Base_SetConfig+0x124>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d017      	beq.n	8002cba <TIM_Base_SetConfig+0xb2>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a28      	ldr	r2, [pc, #160]	; (8002d30 <TIM_Base_SetConfig+0x128>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d013      	beq.n	8002cba <TIM_Base_SetConfig+0xb2>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a27      	ldr	r2, [pc, #156]	; (8002d34 <TIM_Base_SetConfig+0x12c>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d00f      	beq.n	8002cba <TIM_Base_SetConfig+0xb2>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a26      	ldr	r2, [pc, #152]	; (8002d38 <TIM_Base_SetConfig+0x130>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d00b      	beq.n	8002cba <TIM_Base_SetConfig+0xb2>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a25      	ldr	r2, [pc, #148]	; (8002d3c <TIM_Base_SetConfig+0x134>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d007      	beq.n	8002cba <TIM_Base_SetConfig+0xb2>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a24      	ldr	r2, [pc, #144]	; (8002d40 <TIM_Base_SetConfig+0x138>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d003      	beq.n	8002cba <TIM_Base_SetConfig+0xb2>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a23      	ldr	r2, [pc, #140]	; (8002d44 <TIM_Base_SetConfig+0x13c>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d108      	bne.n	8002ccc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a0a      	ldr	r2, [pc, #40]	; (8002d1c <TIM_Base_SetConfig+0x114>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d003      	beq.n	8002d00 <TIM_Base_SetConfig+0xf8>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a0c      	ldr	r2, [pc, #48]	; (8002d2c <TIM_Base_SetConfig+0x124>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d103      	bne.n	8002d08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	691a      	ldr	r2, [r3, #16]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	615a      	str	r2, [r3, #20]
}
 8002d0e:	bf00      	nop
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	40010000 	.word	0x40010000
 8002d20:	40000400 	.word	0x40000400
 8002d24:	40000800 	.word	0x40000800
 8002d28:	40000c00 	.word	0x40000c00
 8002d2c:	40010400 	.word	0x40010400
 8002d30:	40014000 	.word	0x40014000
 8002d34:	40014400 	.word	0x40014400
 8002d38:	40014800 	.word	0x40014800
 8002d3c:	40001800 	.word	0x40001800
 8002d40:	40001c00 	.word	0x40001c00
 8002d44:	40002000 	.word	0x40002000

08002d48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e03f      	b.n	8002e02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d106      	bne.n	8002d9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f7fd fd8a 	bl	80008b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2224      	movs	r2, #36	; 0x24
 8002da0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002db2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 f829 	bl	8002e0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	691a      	ldr	r2, [r3, #16]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	695a      	ldr	r2, [r3, #20]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68da      	ldr	r2, [r3, #12]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002de8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2220      	movs	r2, #32
 8002df4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
	...

08002e0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e10:	b085      	sub	sp, #20
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68da      	ldr	r2, [r3, #12]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	431a      	orrs	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002e4e:	f023 030c 	bic.w	r3, r3, #12
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6812      	ldr	r2, [r2, #0]
 8002e56:	68f9      	ldr	r1, [r7, #12]
 8002e58:	430b      	orrs	r3, r1
 8002e5a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	699a      	ldr	r2, [r3, #24]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e7a:	f040 818b 	bne.w	8003194 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4ac1      	ldr	r2, [pc, #772]	; (8003188 <UART_SetConfig+0x37c>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d005      	beq.n	8002e94 <UART_SetConfig+0x88>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4abf      	ldr	r2, [pc, #764]	; (800318c <UART_SetConfig+0x380>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	f040 80bd 	bne.w	800300e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e94:	f7fe fdc4 	bl	8001a20 <HAL_RCC_GetPCLK2Freq>
 8002e98:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	461d      	mov	r5, r3
 8002e9e:	f04f 0600 	mov.w	r6, #0
 8002ea2:	46a8      	mov	r8, r5
 8002ea4:	46b1      	mov	r9, r6
 8002ea6:	eb18 0308 	adds.w	r3, r8, r8
 8002eaa:	eb49 0409 	adc.w	r4, r9, r9
 8002eae:	4698      	mov	r8, r3
 8002eb0:	46a1      	mov	r9, r4
 8002eb2:	eb18 0805 	adds.w	r8, r8, r5
 8002eb6:	eb49 0906 	adc.w	r9, r9, r6
 8002eba:	f04f 0100 	mov.w	r1, #0
 8002ebe:	f04f 0200 	mov.w	r2, #0
 8002ec2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002ec6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002eca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002ece:	4688      	mov	r8, r1
 8002ed0:	4691      	mov	r9, r2
 8002ed2:	eb18 0005 	adds.w	r0, r8, r5
 8002ed6:	eb49 0106 	adc.w	r1, r9, r6
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	461d      	mov	r5, r3
 8002ee0:	f04f 0600 	mov.w	r6, #0
 8002ee4:	196b      	adds	r3, r5, r5
 8002ee6:	eb46 0406 	adc.w	r4, r6, r6
 8002eea:	461a      	mov	r2, r3
 8002eec:	4623      	mov	r3, r4
 8002eee:	f7fd f98f 	bl	8000210 <__aeabi_uldivmod>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	460c      	mov	r4, r1
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	4ba5      	ldr	r3, [pc, #660]	; (8003190 <UART_SetConfig+0x384>)
 8002efa:	fba3 2302 	umull	r2, r3, r3, r2
 8002efe:	095b      	lsrs	r3, r3, #5
 8002f00:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	461d      	mov	r5, r3
 8002f08:	f04f 0600 	mov.w	r6, #0
 8002f0c:	46a9      	mov	r9, r5
 8002f0e:	46b2      	mov	sl, r6
 8002f10:	eb19 0309 	adds.w	r3, r9, r9
 8002f14:	eb4a 040a 	adc.w	r4, sl, sl
 8002f18:	4699      	mov	r9, r3
 8002f1a:	46a2      	mov	sl, r4
 8002f1c:	eb19 0905 	adds.w	r9, r9, r5
 8002f20:	eb4a 0a06 	adc.w	sl, sl, r6
 8002f24:	f04f 0100 	mov.w	r1, #0
 8002f28:	f04f 0200 	mov.w	r2, #0
 8002f2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f30:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f34:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f38:	4689      	mov	r9, r1
 8002f3a:	4692      	mov	sl, r2
 8002f3c:	eb19 0005 	adds.w	r0, r9, r5
 8002f40:	eb4a 0106 	adc.w	r1, sl, r6
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	461d      	mov	r5, r3
 8002f4a:	f04f 0600 	mov.w	r6, #0
 8002f4e:	196b      	adds	r3, r5, r5
 8002f50:	eb46 0406 	adc.w	r4, r6, r6
 8002f54:	461a      	mov	r2, r3
 8002f56:	4623      	mov	r3, r4
 8002f58:	f7fd f95a 	bl	8000210 <__aeabi_uldivmod>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	460c      	mov	r4, r1
 8002f60:	461a      	mov	r2, r3
 8002f62:	4b8b      	ldr	r3, [pc, #556]	; (8003190 <UART_SetConfig+0x384>)
 8002f64:	fba3 1302 	umull	r1, r3, r3, r2
 8002f68:	095b      	lsrs	r3, r3, #5
 8002f6a:	2164      	movs	r1, #100	; 0x64
 8002f6c:	fb01 f303 	mul.w	r3, r1, r3
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	3332      	adds	r3, #50	; 0x32
 8002f76:	4a86      	ldr	r2, [pc, #536]	; (8003190 <UART_SetConfig+0x384>)
 8002f78:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7c:	095b      	lsrs	r3, r3, #5
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f84:	4498      	add	r8, r3
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	461d      	mov	r5, r3
 8002f8a:	f04f 0600 	mov.w	r6, #0
 8002f8e:	46a9      	mov	r9, r5
 8002f90:	46b2      	mov	sl, r6
 8002f92:	eb19 0309 	adds.w	r3, r9, r9
 8002f96:	eb4a 040a 	adc.w	r4, sl, sl
 8002f9a:	4699      	mov	r9, r3
 8002f9c:	46a2      	mov	sl, r4
 8002f9e:	eb19 0905 	adds.w	r9, r9, r5
 8002fa2:	eb4a 0a06 	adc.w	sl, sl, r6
 8002fa6:	f04f 0100 	mov.w	r1, #0
 8002faa:	f04f 0200 	mov.w	r2, #0
 8002fae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fb2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002fb6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002fba:	4689      	mov	r9, r1
 8002fbc:	4692      	mov	sl, r2
 8002fbe:	eb19 0005 	adds.w	r0, r9, r5
 8002fc2:	eb4a 0106 	adc.w	r1, sl, r6
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	461d      	mov	r5, r3
 8002fcc:	f04f 0600 	mov.w	r6, #0
 8002fd0:	196b      	adds	r3, r5, r5
 8002fd2:	eb46 0406 	adc.w	r4, r6, r6
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	4623      	mov	r3, r4
 8002fda:	f7fd f919 	bl	8000210 <__aeabi_uldivmod>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	460c      	mov	r4, r1
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	4b6a      	ldr	r3, [pc, #424]	; (8003190 <UART_SetConfig+0x384>)
 8002fe6:	fba3 1302 	umull	r1, r3, r3, r2
 8002fea:	095b      	lsrs	r3, r3, #5
 8002fec:	2164      	movs	r1, #100	; 0x64
 8002fee:	fb01 f303 	mul.w	r3, r1, r3
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	3332      	adds	r3, #50	; 0x32
 8002ff8:	4a65      	ldr	r2, [pc, #404]	; (8003190 <UART_SetConfig+0x384>)
 8002ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffe:	095b      	lsrs	r3, r3, #5
 8003000:	f003 0207 	and.w	r2, r3, #7
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4442      	add	r2, r8
 800300a:	609a      	str	r2, [r3, #8]
 800300c:	e26f      	b.n	80034ee <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800300e:	f7fe fcf3 	bl	80019f8 <HAL_RCC_GetPCLK1Freq>
 8003012:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	461d      	mov	r5, r3
 8003018:	f04f 0600 	mov.w	r6, #0
 800301c:	46a8      	mov	r8, r5
 800301e:	46b1      	mov	r9, r6
 8003020:	eb18 0308 	adds.w	r3, r8, r8
 8003024:	eb49 0409 	adc.w	r4, r9, r9
 8003028:	4698      	mov	r8, r3
 800302a:	46a1      	mov	r9, r4
 800302c:	eb18 0805 	adds.w	r8, r8, r5
 8003030:	eb49 0906 	adc.w	r9, r9, r6
 8003034:	f04f 0100 	mov.w	r1, #0
 8003038:	f04f 0200 	mov.w	r2, #0
 800303c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003040:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003044:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003048:	4688      	mov	r8, r1
 800304a:	4691      	mov	r9, r2
 800304c:	eb18 0005 	adds.w	r0, r8, r5
 8003050:	eb49 0106 	adc.w	r1, r9, r6
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	461d      	mov	r5, r3
 800305a:	f04f 0600 	mov.w	r6, #0
 800305e:	196b      	adds	r3, r5, r5
 8003060:	eb46 0406 	adc.w	r4, r6, r6
 8003064:	461a      	mov	r2, r3
 8003066:	4623      	mov	r3, r4
 8003068:	f7fd f8d2 	bl	8000210 <__aeabi_uldivmod>
 800306c:	4603      	mov	r3, r0
 800306e:	460c      	mov	r4, r1
 8003070:	461a      	mov	r2, r3
 8003072:	4b47      	ldr	r3, [pc, #284]	; (8003190 <UART_SetConfig+0x384>)
 8003074:	fba3 2302 	umull	r2, r3, r3, r2
 8003078:	095b      	lsrs	r3, r3, #5
 800307a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	461d      	mov	r5, r3
 8003082:	f04f 0600 	mov.w	r6, #0
 8003086:	46a9      	mov	r9, r5
 8003088:	46b2      	mov	sl, r6
 800308a:	eb19 0309 	adds.w	r3, r9, r9
 800308e:	eb4a 040a 	adc.w	r4, sl, sl
 8003092:	4699      	mov	r9, r3
 8003094:	46a2      	mov	sl, r4
 8003096:	eb19 0905 	adds.w	r9, r9, r5
 800309a:	eb4a 0a06 	adc.w	sl, sl, r6
 800309e:	f04f 0100 	mov.w	r1, #0
 80030a2:	f04f 0200 	mov.w	r2, #0
 80030a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80030ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80030b2:	4689      	mov	r9, r1
 80030b4:	4692      	mov	sl, r2
 80030b6:	eb19 0005 	adds.w	r0, r9, r5
 80030ba:	eb4a 0106 	adc.w	r1, sl, r6
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	461d      	mov	r5, r3
 80030c4:	f04f 0600 	mov.w	r6, #0
 80030c8:	196b      	adds	r3, r5, r5
 80030ca:	eb46 0406 	adc.w	r4, r6, r6
 80030ce:	461a      	mov	r2, r3
 80030d0:	4623      	mov	r3, r4
 80030d2:	f7fd f89d 	bl	8000210 <__aeabi_uldivmod>
 80030d6:	4603      	mov	r3, r0
 80030d8:	460c      	mov	r4, r1
 80030da:	461a      	mov	r2, r3
 80030dc:	4b2c      	ldr	r3, [pc, #176]	; (8003190 <UART_SetConfig+0x384>)
 80030de:	fba3 1302 	umull	r1, r3, r3, r2
 80030e2:	095b      	lsrs	r3, r3, #5
 80030e4:	2164      	movs	r1, #100	; 0x64
 80030e6:	fb01 f303 	mul.w	r3, r1, r3
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	3332      	adds	r3, #50	; 0x32
 80030f0:	4a27      	ldr	r2, [pc, #156]	; (8003190 <UART_SetConfig+0x384>)
 80030f2:	fba2 2303 	umull	r2, r3, r2, r3
 80030f6:	095b      	lsrs	r3, r3, #5
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030fe:	4498      	add	r8, r3
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	461d      	mov	r5, r3
 8003104:	f04f 0600 	mov.w	r6, #0
 8003108:	46a9      	mov	r9, r5
 800310a:	46b2      	mov	sl, r6
 800310c:	eb19 0309 	adds.w	r3, r9, r9
 8003110:	eb4a 040a 	adc.w	r4, sl, sl
 8003114:	4699      	mov	r9, r3
 8003116:	46a2      	mov	sl, r4
 8003118:	eb19 0905 	adds.w	r9, r9, r5
 800311c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003120:	f04f 0100 	mov.w	r1, #0
 8003124:	f04f 0200 	mov.w	r2, #0
 8003128:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800312c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003130:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003134:	4689      	mov	r9, r1
 8003136:	4692      	mov	sl, r2
 8003138:	eb19 0005 	adds.w	r0, r9, r5
 800313c:	eb4a 0106 	adc.w	r1, sl, r6
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	461d      	mov	r5, r3
 8003146:	f04f 0600 	mov.w	r6, #0
 800314a:	196b      	adds	r3, r5, r5
 800314c:	eb46 0406 	adc.w	r4, r6, r6
 8003150:	461a      	mov	r2, r3
 8003152:	4623      	mov	r3, r4
 8003154:	f7fd f85c 	bl	8000210 <__aeabi_uldivmod>
 8003158:	4603      	mov	r3, r0
 800315a:	460c      	mov	r4, r1
 800315c:	461a      	mov	r2, r3
 800315e:	4b0c      	ldr	r3, [pc, #48]	; (8003190 <UART_SetConfig+0x384>)
 8003160:	fba3 1302 	umull	r1, r3, r3, r2
 8003164:	095b      	lsrs	r3, r3, #5
 8003166:	2164      	movs	r1, #100	; 0x64
 8003168:	fb01 f303 	mul.w	r3, r1, r3
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	3332      	adds	r3, #50	; 0x32
 8003172:	4a07      	ldr	r2, [pc, #28]	; (8003190 <UART_SetConfig+0x384>)
 8003174:	fba2 2303 	umull	r2, r3, r2, r3
 8003178:	095b      	lsrs	r3, r3, #5
 800317a:	f003 0207 	and.w	r2, r3, #7
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4442      	add	r2, r8
 8003184:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003186:	e1b2      	b.n	80034ee <UART_SetConfig+0x6e2>
 8003188:	40011000 	.word	0x40011000
 800318c:	40011400 	.word	0x40011400
 8003190:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4ad7      	ldr	r2, [pc, #860]	; (80034f8 <UART_SetConfig+0x6ec>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d005      	beq.n	80031aa <UART_SetConfig+0x39e>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4ad6      	ldr	r2, [pc, #856]	; (80034fc <UART_SetConfig+0x6f0>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	f040 80d1 	bne.w	800334c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80031aa:	f7fe fc39 	bl	8001a20 <HAL_RCC_GetPCLK2Freq>
 80031ae:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	469a      	mov	sl, r3
 80031b4:	f04f 0b00 	mov.w	fp, #0
 80031b8:	46d0      	mov	r8, sl
 80031ba:	46d9      	mov	r9, fp
 80031bc:	eb18 0308 	adds.w	r3, r8, r8
 80031c0:	eb49 0409 	adc.w	r4, r9, r9
 80031c4:	4698      	mov	r8, r3
 80031c6:	46a1      	mov	r9, r4
 80031c8:	eb18 080a 	adds.w	r8, r8, sl
 80031cc:	eb49 090b 	adc.w	r9, r9, fp
 80031d0:	f04f 0100 	mov.w	r1, #0
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80031dc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80031e0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80031e4:	4688      	mov	r8, r1
 80031e6:	4691      	mov	r9, r2
 80031e8:	eb1a 0508 	adds.w	r5, sl, r8
 80031ec:	eb4b 0609 	adc.w	r6, fp, r9
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	4619      	mov	r1, r3
 80031f6:	f04f 0200 	mov.w	r2, #0
 80031fa:	f04f 0300 	mov.w	r3, #0
 80031fe:	f04f 0400 	mov.w	r4, #0
 8003202:	0094      	lsls	r4, r2, #2
 8003204:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003208:	008b      	lsls	r3, r1, #2
 800320a:	461a      	mov	r2, r3
 800320c:	4623      	mov	r3, r4
 800320e:	4628      	mov	r0, r5
 8003210:	4631      	mov	r1, r6
 8003212:	f7fc fffd 	bl	8000210 <__aeabi_uldivmod>
 8003216:	4603      	mov	r3, r0
 8003218:	460c      	mov	r4, r1
 800321a:	461a      	mov	r2, r3
 800321c:	4bb8      	ldr	r3, [pc, #736]	; (8003500 <UART_SetConfig+0x6f4>)
 800321e:	fba3 2302 	umull	r2, r3, r3, r2
 8003222:	095b      	lsrs	r3, r3, #5
 8003224:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	469b      	mov	fp, r3
 800322c:	f04f 0c00 	mov.w	ip, #0
 8003230:	46d9      	mov	r9, fp
 8003232:	46e2      	mov	sl, ip
 8003234:	eb19 0309 	adds.w	r3, r9, r9
 8003238:	eb4a 040a 	adc.w	r4, sl, sl
 800323c:	4699      	mov	r9, r3
 800323e:	46a2      	mov	sl, r4
 8003240:	eb19 090b 	adds.w	r9, r9, fp
 8003244:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003248:	f04f 0100 	mov.w	r1, #0
 800324c:	f04f 0200 	mov.w	r2, #0
 8003250:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003254:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003258:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800325c:	4689      	mov	r9, r1
 800325e:	4692      	mov	sl, r2
 8003260:	eb1b 0509 	adds.w	r5, fp, r9
 8003264:	eb4c 060a 	adc.w	r6, ip, sl
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	4619      	mov	r1, r3
 800326e:	f04f 0200 	mov.w	r2, #0
 8003272:	f04f 0300 	mov.w	r3, #0
 8003276:	f04f 0400 	mov.w	r4, #0
 800327a:	0094      	lsls	r4, r2, #2
 800327c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003280:	008b      	lsls	r3, r1, #2
 8003282:	461a      	mov	r2, r3
 8003284:	4623      	mov	r3, r4
 8003286:	4628      	mov	r0, r5
 8003288:	4631      	mov	r1, r6
 800328a:	f7fc ffc1 	bl	8000210 <__aeabi_uldivmod>
 800328e:	4603      	mov	r3, r0
 8003290:	460c      	mov	r4, r1
 8003292:	461a      	mov	r2, r3
 8003294:	4b9a      	ldr	r3, [pc, #616]	; (8003500 <UART_SetConfig+0x6f4>)
 8003296:	fba3 1302 	umull	r1, r3, r3, r2
 800329a:	095b      	lsrs	r3, r3, #5
 800329c:	2164      	movs	r1, #100	; 0x64
 800329e:	fb01 f303 	mul.w	r3, r1, r3
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	3332      	adds	r3, #50	; 0x32
 80032a8:	4a95      	ldr	r2, [pc, #596]	; (8003500 <UART_SetConfig+0x6f4>)
 80032aa:	fba2 2303 	umull	r2, r3, r2, r3
 80032ae:	095b      	lsrs	r3, r3, #5
 80032b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032b4:	4498      	add	r8, r3
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	469b      	mov	fp, r3
 80032ba:	f04f 0c00 	mov.w	ip, #0
 80032be:	46d9      	mov	r9, fp
 80032c0:	46e2      	mov	sl, ip
 80032c2:	eb19 0309 	adds.w	r3, r9, r9
 80032c6:	eb4a 040a 	adc.w	r4, sl, sl
 80032ca:	4699      	mov	r9, r3
 80032cc:	46a2      	mov	sl, r4
 80032ce:	eb19 090b 	adds.w	r9, r9, fp
 80032d2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80032d6:	f04f 0100 	mov.w	r1, #0
 80032da:	f04f 0200 	mov.w	r2, #0
 80032de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80032e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80032ea:	4689      	mov	r9, r1
 80032ec:	4692      	mov	sl, r2
 80032ee:	eb1b 0509 	adds.w	r5, fp, r9
 80032f2:	eb4c 060a 	adc.w	r6, ip, sl
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	4619      	mov	r1, r3
 80032fc:	f04f 0200 	mov.w	r2, #0
 8003300:	f04f 0300 	mov.w	r3, #0
 8003304:	f04f 0400 	mov.w	r4, #0
 8003308:	0094      	lsls	r4, r2, #2
 800330a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800330e:	008b      	lsls	r3, r1, #2
 8003310:	461a      	mov	r2, r3
 8003312:	4623      	mov	r3, r4
 8003314:	4628      	mov	r0, r5
 8003316:	4631      	mov	r1, r6
 8003318:	f7fc ff7a 	bl	8000210 <__aeabi_uldivmod>
 800331c:	4603      	mov	r3, r0
 800331e:	460c      	mov	r4, r1
 8003320:	461a      	mov	r2, r3
 8003322:	4b77      	ldr	r3, [pc, #476]	; (8003500 <UART_SetConfig+0x6f4>)
 8003324:	fba3 1302 	umull	r1, r3, r3, r2
 8003328:	095b      	lsrs	r3, r3, #5
 800332a:	2164      	movs	r1, #100	; 0x64
 800332c:	fb01 f303 	mul.w	r3, r1, r3
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	011b      	lsls	r3, r3, #4
 8003334:	3332      	adds	r3, #50	; 0x32
 8003336:	4a72      	ldr	r2, [pc, #456]	; (8003500 <UART_SetConfig+0x6f4>)
 8003338:	fba2 2303 	umull	r2, r3, r2, r3
 800333c:	095b      	lsrs	r3, r3, #5
 800333e:	f003 020f 	and.w	r2, r3, #15
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4442      	add	r2, r8
 8003348:	609a      	str	r2, [r3, #8]
 800334a:	e0d0      	b.n	80034ee <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800334c:	f7fe fb54 	bl	80019f8 <HAL_RCC_GetPCLK1Freq>
 8003350:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	469a      	mov	sl, r3
 8003356:	f04f 0b00 	mov.w	fp, #0
 800335a:	46d0      	mov	r8, sl
 800335c:	46d9      	mov	r9, fp
 800335e:	eb18 0308 	adds.w	r3, r8, r8
 8003362:	eb49 0409 	adc.w	r4, r9, r9
 8003366:	4698      	mov	r8, r3
 8003368:	46a1      	mov	r9, r4
 800336a:	eb18 080a 	adds.w	r8, r8, sl
 800336e:	eb49 090b 	adc.w	r9, r9, fp
 8003372:	f04f 0100 	mov.w	r1, #0
 8003376:	f04f 0200 	mov.w	r2, #0
 800337a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800337e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003382:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003386:	4688      	mov	r8, r1
 8003388:	4691      	mov	r9, r2
 800338a:	eb1a 0508 	adds.w	r5, sl, r8
 800338e:	eb4b 0609 	adc.w	r6, fp, r9
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	4619      	mov	r1, r3
 8003398:	f04f 0200 	mov.w	r2, #0
 800339c:	f04f 0300 	mov.w	r3, #0
 80033a0:	f04f 0400 	mov.w	r4, #0
 80033a4:	0094      	lsls	r4, r2, #2
 80033a6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80033aa:	008b      	lsls	r3, r1, #2
 80033ac:	461a      	mov	r2, r3
 80033ae:	4623      	mov	r3, r4
 80033b0:	4628      	mov	r0, r5
 80033b2:	4631      	mov	r1, r6
 80033b4:	f7fc ff2c 	bl	8000210 <__aeabi_uldivmod>
 80033b8:	4603      	mov	r3, r0
 80033ba:	460c      	mov	r4, r1
 80033bc:	461a      	mov	r2, r3
 80033be:	4b50      	ldr	r3, [pc, #320]	; (8003500 <UART_SetConfig+0x6f4>)
 80033c0:	fba3 2302 	umull	r2, r3, r3, r2
 80033c4:	095b      	lsrs	r3, r3, #5
 80033c6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	469b      	mov	fp, r3
 80033ce:	f04f 0c00 	mov.w	ip, #0
 80033d2:	46d9      	mov	r9, fp
 80033d4:	46e2      	mov	sl, ip
 80033d6:	eb19 0309 	adds.w	r3, r9, r9
 80033da:	eb4a 040a 	adc.w	r4, sl, sl
 80033de:	4699      	mov	r9, r3
 80033e0:	46a2      	mov	sl, r4
 80033e2:	eb19 090b 	adds.w	r9, r9, fp
 80033e6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80033ea:	f04f 0100 	mov.w	r1, #0
 80033ee:	f04f 0200 	mov.w	r2, #0
 80033f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033fe:	4689      	mov	r9, r1
 8003400:	4692      	mov	sl, r2
 8003402:	eb1b 0509 	adds.w	r5, fp, r9
 8003406:	eb4c 060a 	adc.w	r6, ip, sl
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	4619      	mov	r1, r3
 8003410:	f04f 0200 	mov.w	r2, #0
 8003414:	f04f 0300 	mov.w	r3, #0
 8003418:	f04f 0400 	mov.w	r4, #0
 800341c:	0094      	lsls	r4, r2, #2
 800341e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003422:	008b      	lsls	r3, r1, #2
 8003424:	461a      	mov	r2, r3
 8003426:	4623      	mov	r3, r4
 8003428:	4628      	mov	r0, r5
 800342a:	4631      	mov	r1, r6
 800342c:	f7fc fef0 	bl	8000210 <__aeabi_uldivmod>
 8003430:	4603      	mov	r3, r0
 8003432:	460c      	mov	r4, r1
 8003434:	461a      	mov	r2, r3
 8003436:	4b32      	ldr	r3, [pc, #200]	; (8003500 <UART_SetConfig+0x6f4>)
 8003438:	fba3 1302 	umull	r1, r3, r3, r2
 800343c:	095b      	lsrs	r3, r3, #5
 800343e:	2164      	movs	r1, #100	; 0x64
 8003440:	fb01 f303 	mul.w	r3, r1, r3
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	3332      	adds	r3, #50	; 0x32
 800344a:	4a2d      	ldr	r2, [pc, #180]	; (8003500 <UART_SetConfig+0x6f4>)
 800344c:	fba2 2303 	umull	r2, r3, r2, r3
 8003450:	095b      	lsrs	r3, r3, #5
 8003452:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003456:	4498      	add	r8, r3
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	469b      	mov	fp, r3
 800345c:	f04f 0c00 	mov.w	ip, #0
 8003460:	46d9      	mov	r9, fp
 8003462:	46e2      	mov	sl, ip
 8003464:	eb19 0309 	adds.w	r3, r9, r9
 8003468:	eb4a 040a 	adc.w	r4, sl, sl
 800346c:	4699      	mov	r9, r3
 800346e:	46a2      	mov	sl, r4
 8003470:	eb19 090b 	adds.w	r9, r9, fp
 8003474:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003478:	f04f 0100 	mov.w	r1, #0
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003484:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003488:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800348c:	4689      	mov	r9, r1
 800348e:	4692      	mov	sl, r2
 8003490:	eb1b 0509 	adds.w	r5, fp, r9
 8003494:	eb4c 060a 	adc.w	r6, ip, sl
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	4619      	mov	r1, r3
 800349e:	f04f 0200 	mov.w	r2, #0
 80034a2:	f04f 0300 	mov.w	r3, #0
 80034a6:	f04f 0400 	mov.w	r4, #0
 80034aa:	0094      	lsls	r4, r2, #2
 80034ac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80034b0:	008b      	lsls	r3, r1, #2
 80034b2:	461a      	mov	r2, r3
 80034b4:	4623      	mov	r3, r4
 80034b6:	4628      	mov	r0, r5
 80034b8:	4631      	mov	r1, r6
 80034ba:	f7fc fea9 	bl	8000210 <__aeabi_uldivmod>
 80034be:	4603      	mov	r3, r0
 80034c0:	460c      	mov	r4, r1
 80034c2:	461a      	mov	r2, r3
 80034c4:	4b0e      	ldr	r3, [pc, #56]	; (8003500 <UART_SetConfig+0x6f4>)
 80034c6:	fba3 1302 	umull	r1, r3, r3, r2
 80034ca:	095b      	lsrs	r3, r3, #5
 80034cc:	2164      	movs	r1, #100	; 0x64
 80034ce:	fb01 f303 	mul.w	r3, r1, r3
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	3332      	adds	r3, #50	; 0x32
 80034d8:	4a09      	ldr	r2, [pc, #36]	; (8003500 <UART_SetConfig+0x6f4>)
 80034da:	fba2 2303 	umull	r2, r3, r2, r3
 80034de:	095b      	lsrs	r3, r3, #5
 80034e0:	f003 020f 	and.w	r2, r3, #15
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4442      	add	r2, r8
 80034ea:	609a      	str	r2, [r3, #8]
}
 80034ec:	e7ff      	b.n	80034ee <UART_SetConfig+0x6e2>
 80034ee:	bf00      	nop
 80034f0:	3714      	adds	r7, #20
 80034f2:	46bd      	mov	sp, r7
 80034f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034f8:	40011000 	.word	0x40011000
 80034fc:	40011400 	.word	0x40011400
 8003500:	51eb851f 	.word	0x51eb851f

08003504 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003504:	b084      	sub	sp, #16
 8003506:	b580      	push	{r7, lr}
 8003508:	b084      	sub	sp, #16
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
 800350e:	f107 001c 	add.w	r0, r7, #28
 8003512:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003518:	2b01      	cmp	r3, #1
 800351a:	d122      	bne.n	8003562 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003520:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003530:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003546:	2b01      	cmp	r3, #1
 8003548:	d105      	bne.n	8003556 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f001 f87e 	bl	8004658 <USB_CoreReset>
 800355c:	4603      	mov	r3, r0
 800355e:	73fb      	strb	r3, [r7, #15]
 8003560:	e01a      	b.n	8003598 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f001 f872 	bl	8004658 <USB_CoreReset>
 8003574:	4603      	mov	r3, r0
 8003576:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800357a:	2b00      	cmp	r3, #0
 800357c:	d106      	bne.n	800358c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003582:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	639a      	str	r2, [r3, #56]	; 0x38
 800358a:	e005      	b.n	8003598 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003590:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359a:	2b01      	cmp	r3, #1
 800359c:	d10b      	bne.n	80035b6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f043 0206 	orr.w	r2, r3, #6
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f043 0220 	orr.w	r2, r3, #32
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80035b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80035c2:	b004      	add	sp, #16
 80035c4:	4770      	bx	lr

080035c6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b083      	sub	sp, #12
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f043 0201 	orr.w	r2, r3, #1
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f023 0201 	bic.w	r2, r3, #1
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b082      	sub	sp, #8
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
 8003612:	460b      	mov	r3, r1
 8003614:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003622:	78fb      	ldrb	r3, [r7, #3]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d106      	bne.n	8003636 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	60da      	str	r2, [r3, #12]
 8003634:	e00b      	b.n	800364e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003636:	78fb      	ldrb	r3, [r7, #3]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d106      	bne.n	800364a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	60da      	str	r2, [r3, #12]
 8003648:	e001      	b.n	800364e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e003      	b.n	8003656 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800364e:	2032      	movs	r0, #50	; 0x32
 8003650:	f7fd fafe 	bl	8000c50 <HAL_Delay>

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
	...

08003660 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003660:	b084      	sub	sp, #16
 8003662:	b580      	push	{r7, lr}
 8003664:	b086      	sub	sp, #24
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
 800366a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800366e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003672:	2300      	movs	r3, #0
 8003674:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800367a:	2300      	movs	r3, #0
 800367c:	613b      	str	r3, [r7, #16]
 800367e:	e009      	b.n	8003694 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	3340      	adds	r3, #64	; 0x40
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	2200      	movs	r2, #0
 800368c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	3301      	adds	r3, #1
 8003692:	613b      	str	r3, [r7, #16]
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	2b0e      	cmp	r3, #14
 8003698:	d9f2      	bls.n	8003680 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800369a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800369c:	2b00      	cmp	r3, #0
 800369e:	d11c      	bne.n	80036da <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036ae:	f043 0302 	orr.w	r3, r3, #2
 80036b2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	601a      	str	r2, [r3, #0]
 80036d8:	e005      	b.n	80036e6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80036ec:	461a      	mov	r2, r3
 80036ee:	2300      	movs	r3, #0
 80036f0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036f8:	4619      	mov	r1, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003700:	461a      	mov	r2, r3
 8003702:	680b      	ldr	r3, [r1, #0]
 8003704:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003708:	2b01      	cmp	r3, #1
 800370a:	d10c      	bne.n	8003726 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800370c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800370e:	2b00      	cmp	r3, #0
 8003710:	d104      	bne.n	800371c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003712:	2100      	movs	r1, #0
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f949 	bl	80039ac <USB_SetDevSpeed>
 800371a:	e008      	b.n	800372e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800371c:	2101      	movs	r1, #1
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 f944 	bl	80039ac <USB_SetDevSpeed>
 8003724:	e003      	b.n	800372e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003726:	2103      	movs	r1, #3
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 f93f 	bl	80039ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800372e:	2110      	movs	r1, #16
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 f8f3 	bl	800391c <USB_FlushTxFifo>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f911 	bl	8003968 <USB_FlushRxFifo>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d001      	beq.n	8003750 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003756:	461a      	mov	r2, r3
 8003758:	2300      	movs	r3, #0
 800375a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003762:	461a      	mov	r2, r3
 8003764:	2300      	movs	r3, #0
 8003766:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800376e:	461a      	mov	r2, r3
 8003770:	2300      	movs	r3, #0
 8003772:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003774:	2300      	movs	r3, #0
 8003776:	613b      	str	r3, [r7, #16]
 8003778:	e043      	b.n	8003802 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	015a      	lsls	r2, r3, #5
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	4413      	add	r3, r2
 8003782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800378c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003790:	d118      	bne.n	80037c4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d10a      	bne.n	80037ae <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	015a      	lsls	r2, r3, #5
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4413      	add	r3, r2
 80037a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037a4:	461a      	mov	r2, r3
 80037a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80037aa:	6013      	str	r3, [r2, #0]
 80037ac:	e013      	b.n	80037d6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	015a      	lsls	r2, r3, #5
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	4413      	add	r3, r2
 80037b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ba:	461a      	mov	r2, r3
 80037bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80037c0:	6013      	str	r3, [r2, #0]
 80037c2:	e008      	b.n	80037d6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	015a      	lsls	r2, r3, #5
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	4413      	add	r3, r2
 80037cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037d0:	461a      	mov	r2, r3
 80037d2:	2300      	movs	r3, #0
 80037d4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	015a      	lsls	r2, r3, #5
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	4413      	add	r3, r2
 80037de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037e2:	461a      	mov	r2, r3
 80037e4:	2300      	movs	r3, #0
 80037e6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	015a      	lsls	r2, r3, #5
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4413      	add	r3, r2
 80037f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037f4:	461a      	mov	r2, r3
 80037f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	3301      	adds	r3, #1
 8003800:	613b      	str	r3, [r7, #16]
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	429a      	cmp	r2, r3
 8003808:	d3b7      	bcc.n	800377a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800380a:	2300      	movs	r3, #0
 800380c:	613b      	str	r3, [r7, #16]
 800380e:	e043      	b.n	8003898 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	015a      	lsls	r2, r3, #5
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	4413      	add	r3, r2
 8003818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003822:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003826:	d118      	bne.n	800385a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10a      	bne.n	8003844 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	015a      	lsls	r2, r3, #5
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	4413      	add	r3, r2
 8003836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800383a:	461a      	mov	r2, r3
 800383c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003840:	6013      	str	r3, [r2, #0]
 8003842:	e013      	b.n	800386c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	015a      	lsls	r2, r3, #5
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	4413      	add	r3, r2
 800384c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003850:	461a      	mov	r2, r3
 8003852:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003856:	6013      	str	r3, [r2, #0]
 8003858:	e008      	b.n	800386c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	015a      	lsls	r2, r3, #5
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	4413      	add	r3, r2
 8003862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003866:	461a      	mov	r2, r3
 8003868:	2300      	movs	r3, #0
 800386a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	015a      	lsls	r2, r3, #5
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	4413      	add	r3, r2
 8003874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003878:	461a      	mov	r2, r3
 800387a:	2300      	movs	r3, #0
 800387c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	015a      	lsls	r2, r3, #5
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	4413      	add	r3, r2
 8003886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800388a:	461a      	mov	r2, r3
 800388c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003890:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	3301      	adds	r3, #1
 8003896:	613b      	str	r3, [r7, #16]
 8003898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	429a      	cmp	r2, r3
 800389e:	d3b7      	bcc.n	8003810 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038b2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80038c0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80038c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d105      	bne.n	80038d4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	f043 0210 	orr.w	r2, r3, #16
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	699a      	ldr	r2, [r3, #24]
 80038d8:	4b0f      	ldr	r3, [pc, #60]	; (8003918 <USB_DevInit+0x2b8>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80038e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d005      	beq.n	80038f2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	f043 0208 	orr.w	r2, r3, #8
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80038f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d107      	bne.n	8003908 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003900:	f043 0304 	orr.w	r3, r3, #4
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003908:	7dfb      	ldrb	r3, [r7, #23]
}
 800390a:	4618      	mov	r0, r3
 800390c:	3718      	adds	r7, #24
 800390e:	46bd      	mov	sp, r7
 8003910:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003914:	b004      	add	sp, #16
 8003916:	4770      	bx	lr
 8003918:	803c3800 	.word	0x803c3800

0800391c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003926:	2300      	movs	r3, #0
 8003928:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	019b      	lsls	r3, r3, #6
 800392e:	f043 0220 	orr.w	r2, r3, #32
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	3301      	adds	r3, #1
 800393a:	60fb      	str	r3, [r7, #12]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	4a09      	ldr	r2, [pc, #36]	; (8003964 <USB_FlushTxFifo+0x48>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d901      	bls.n	8003948 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e006      	b.n	8003956 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	f003 0320 	and.w	r3, r3, #32
 8003950:	2b20      	cmp	r3, #32
 8003952:	d0f0      	beq.n	8003936 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3714      	adds	r7, #20
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	00030d40 	.word	0x00030d40

08003968 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003970:	2300      	movs	r3, #0
 8003972:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2210      	movs	r2, #16
 8003978:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	3301      	adds	r3, #1
 800397e:	60fb      	str	r3, [r7, #12]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	4a09      	ldr	r2, [pc, #36]	; (80039a8 <USB_FlushRxFifo+0x40>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d901      	bls.n	800398c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e006      	b.n	800399a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	f003 0310 	and.w	r3, r3, #16
 8003994:	2b10      	cmp	r3, #16
 8003996:	d0f0      	beq.n	800397a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	00030d40 	.word	0x00030d40

080039ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	460b      	mov	r3, r1
 80039b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	78fb      	ldrb	r3, [r7, #3]
 80039c6:	68f9      	ldr	r1, [r7, #12]
 80039c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039cc:	4313      	orrs	r3, r2
 80039ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3714      	adds	r7, #20
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80039de:	b480      	push	{r7}
 80039e0:	b085      	sub	sp, #20
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
 80039e6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	785b      	ldrb	r3, [r3, #1]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d13a      	bne.n	8003a70 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a00:	69da      	ldr	r2, [r3, #28]
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	f003 030f 	and.w	r3, r3, #15
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	68f9      	ldr	r1, [r7, #12]
 8003a14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	015a      	lsls	r2, r3, #5
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4413      	add	r3, r2
 8003a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d155      	bne.n	8003ade <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	015a      	lsls	r2, r3, #5
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	4413      	add	r3, r2
 8003a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	78db      	ldrb	r3, [r3, #3]
 8003a4c:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a4e:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	059b      	lsls	r3, r3, #22
 8003a54:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a56:	4313      	orrs	r3, r2
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	0151      	lsls	r1, r2, #5
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	440a      	add	r2, r1
 8003a60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a6c:	6013      	str	r3, [r2, #0]
 8003a6e:	e036      	b.n	8003ade <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a76:	69da      	ldr	r2, [r3, #28]
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	f003 030f 	and.w	r3, r3, #15
 8003a80:	2101      	movs	r1, #1
 8003a82:	fa01 f303 	lsl.w	r3, r1, r3
 8003a86:	041b      	lsls	r3, r3, #16
 8003a88:	68f9      	ldr	r1, [r7, #12]
 8003a8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	015a      	lsls	r2, r3, #5
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	4413      	add	r3, r2
 8003a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d11a      	bne.n	8003ade <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	015a      	lsls	r2, r3, #5
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	4413      	add	r3, r2
 8003ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	78db      	ldrb	r3, [r3, #3]
 8003ac2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003ac4:	430b      	orrs	r3, r1
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	68ba      	ldr	r2, [r7, #8]
 8003aca:	0151      	lsls	r1, r2, #5
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	440a      	add	r2, r1
 8003ad0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ad8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003adc:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3714      	adds	r7, #20
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	785b      	ldrb	r3, [r3, #1]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d161      	bne.n	8003bcc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	015a      	lsls	r2, r3, #5
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b1e:	d11f      	bne.n	8003b60 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	0151      	lsls	r1, r2, #5
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	440a      	add	r2, r1
 8003b36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b3e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	015a      	lsls	r2, r3, #5
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4413      	add	r3, r2
 8003b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68ba      	ldr	r2, [r7, #8]
 8003b50:	0151      	lsls	r1, r2, #5
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	440a      	add	r2, r1
 8003b56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b5e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	f003 030f 	and.w	r3, r3, #15
 8003b70:	2101      	movs	r1, #1
 8003b72:	fa01 f303 	lsl.w	r3, r1, r3
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	43db      	mvns	r3, r3
 8003b7a:	68f9      	ldr	r1, [r7, #12]
 8003b7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b80:	4013      	ands	r3, r2
 8003b82:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b8a:	69da      	ldr	r2, [r3, #28]
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	f003 030f 	and.w	r3, r3, #15
 8003b94:	2101      	movs	r1, #1
 8003b96:	fa01 f303 	lsl.w	r3, r1, r3
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	43db      	mvns	r3, r3
 8003b9e:	68f9      	ldr	r1, [r7, #12]
 8003ba0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	015a      	lsls	r2, r3, #5
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4413      	add	r3, r2
 8003bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	0159      	lsls	r1, r3, #5
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	440b      	add	r3, r1
 8003bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	4b35      	ldr	r3, [pc, #212]	; (8003c9c <USB_DeactivateEndpoint+0x1b0>)
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	600b      	str	r3, [r1, #0]
 8003bca:	e060      	b.n	8003c8e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	015a      	lsls	r2, r3, #5
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003be2:	d11f      	bne.n	8003c24 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	015a      	lsls	r2, r3, #5
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	4413      	add	r3, r2
 8003bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	0151      	lsls	r1, r2, #5
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	440a      	add	r2, r1
 8003bfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bfe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c02:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	015a      	lsls	r2, r3, #5
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	0151      	lsls	r1, r2, #5
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	440a      	add	r2, r1
 8003c1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c22:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	f003 030f 	and.w	r3, r3, #15
 8003c34:	2101      	movs	r1, #1
 8003c36:	fa01 f303 	lsl.w	r3, r1, r3
 8003c3a:	041b      	lsls	r3, r3, #16
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	68f9      	ldr	r1, [r7, #12]
 8003c40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c44:	4013      	ands	r3, r2
 8003c46:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c4e:	69da      	ldr	r2, [r3, #28]
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	f003 030f 	and.w	r3, r3, #15
 8003c58:	2101      	movs	r1, #1
 8003c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c5e:	041b      	lsls	r3, r3, #16
 8003c60:	43db      	mvns	r3, r3
 8003c62:	68f9      	ldr	r1, [r7, #12]
 8003c64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c68:	4013      	ands	r3, r2
 8003c6a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	015a      	lsls	r2, r3, #5
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4413      	add	r3, r2
 8003c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	0159      	lsls	r1, r3, #5
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	440b      	add	r3, r1
 8003c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c86:	4619      	mov	r1, r3
 8003c88:	4b05      	ldr	r3, [pc, #20]	; (8003ca0 <USB_DeactivateEndpoint+0x1b4>)
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3714      	adds	r7, #20
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	ec337800 	.word	0xec337800
 8003ca0:	eff37800 	.word	0xeff37800

08003ca4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b08a      	sub	sp, #40	; 0x28
 8003ca8:	af02      	add	r7, sp, #8
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	785b      	ldrb	r3, [r3, #1]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	f040 815c 	bne.w	8003f7e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d132      	bne.n	8003d34 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	015a      	lsls	r2, r3, #5
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	0151      	lsls	r1, r2, #5
 8003ce0:	69fa      	ldr	r2, [r7, #28]
 8003ce2:	440a      	add	r2, r1
 8003ce4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ce8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003cec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003cf0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	015a      	lsls	r2, r3, #5
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	0151      	lsls	r1, r2, #5
 8003d04:	69fa      	ldr	r2, [r7, #28]
 8003d06:	440a      	add	r2, r1
 8003d08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	015a      	lsls	r2, r3, #5
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	4413      	add	r3, r2
 8003d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	0151      	lsls	r1, r2, #5
 8003d24:	69fa      	ldr	r2, [r7, #28]
 8003d26:	440a      	add	r2, r1
 8003d28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d2c:	0cdb      	lsrs	r3, r3, #19
 8003d2e:	04db      	lsls	r3, r3, #19
 8003d30:	6113      	str	r3, [r2, #16]
 8003d32:	e074      	b.n	8003e1e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	015a      	lsls	r2, r3, #5
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	0151      	lsls	r1, r2, #5
 8003d46:	69fa      	ldr	r2, [r7, #28]
 8003d48:	440a      	add	r2, r1
 8003d4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d4e:	0cdb      	lsrs	r3, r3, #19
 8003d50:	04db      	lsls	r3, r3, #19
 8003d52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	015a      	lsls	r2, r3, #5
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	0151      	lsls	r1, r2, #5
 8003d66:	69fa      	ldr	r2, [r7, #28]
 8003d68:	440a      	add	r2, r1
 8003d6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d6e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d72:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	015a      	lsls	r2, r3, #5
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	4413      	add	r3, r2
 8003d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d84:	691a      	ldr	r2, [r3, #16]
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	6959      	ldr	r1, [r3, #20]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	440b      	add	r3, r1
 8003d90:	1e59      	subs	r1, r3, #1
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d9a:	04d9      	lsls	r1, r3, #19
 8003d9c:	4b9d      	ldr	r3, [pc, #628]	; (8004014 <USB_EPStartXfer+0x370>)
 8003d9e:	400b      	ands	r3, r1
 8003da0:	69b9      	ldr	r1, [r7, #24]
 8003da2:	0148      	lsls	r0, r1, #5
 8003da4:	69f9      	ldr	r1, [r7, #28]
 8003da6:	4401      	add	r1, r0
 8003da8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003dac:	4313      	orrs	r3, r2
 8003dae:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	015a      	lsls	r2, r3, #5
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	4413      	add	r3, r2
 8003db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dbc:	691a      	ldr	r2, [r3, #16]
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dc6:	69b9      	ldr	r1, [r7, #24]
 8003dc8:	0148      	lsls	r0, r1, #5
 8003dca:	69f9      	ldr	r1, [r7, #28]
 8003dcc:	4401      	add	r1, r0
 8003dce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	78db      	ldrb	r3, [r3, #3]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d11f      	bne.n	8003e1e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	015a      	lsls	r2, r3, #5
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	4413      	add	r3, r2
 8003de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	0151      	lsls	r1, r2, #5
 8003df0:	69fa      	ldr	r2, [r7, #28]
 8003df2:	440a      	add	r2, r1
 8003df4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003df8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003dfc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	015a      	lsls	r2, r3, #5
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	4413      	add	r3, r2
 8003e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	0151      	lsls	r1, r2, #5
 8003e10:	69fa      	ldr	r2, [r7, #28]
 8003e12:	440a      	add	r2, r1
 8003e14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e1c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003e1e:	79fb      	ldrb	r3, [r7, #7]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d14b      	bne.n	8003ebc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d009      	beq.n	8003e40 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	015a      	lsls	r2, r3, #5
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	4413      	add	r3, r2
 8003e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e38:	461a      	mov	r2, r3
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	78db      	ldrb	r3, [r3, #3]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d128      	bne.n	8003e9a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d110      	bne.n	8003e7a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	015a      	lsls	r2, r3, #5
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	4413      	add	r3, r2
 8003e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	0151      	lsls	r1, r2, #5
 8003e6a:	69fa      	ldr	r2, [r7, #28]
 8003e6c:	440a      	add	r2, r1
 8003e6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e76:	6013      	str	r3, [r2, #0]
 8003e78:	e00f      	b.n	8003e9a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	015a      	lsls	r2, r3, #5
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	4413      	add	r3, r2
 8003e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	0151      	lsls	r1, r2, #5
 8003e8c:	69fa      	ldr	r2, [r7, #28]
 8003e8e:	440a      	add	r2, r1
 8003e90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e98:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	015a      	lsls	r2, r3, #5
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	0151      	lsls	r1, r2, #5
 8003eac:	69fa      	ldr	r2, [r7, #28]
 8003eae:	440a      	add	r2, r1
 8003eb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eb4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003eb8:	6013      	str	r3, [r2, #0]
 8003eba:	e12f      	b.n	800411c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	015a      	lsls	r2, r3, #5
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	0151      	lsls	r1, r2, #5
 8003ece:	69fa      	ldr	r2, [r7, #28]
 8003ed0:	440a      	add	r2, r1
 8003ed2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ed6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003eda:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	78db      	ldrb	r3, [r3, #3]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d015      	beq.n	8003f10 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f000 8117 	beq.w	800411c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ef4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	f003 030f 	and.w	r3, r3, #15
 8003efe:	2101      	movs	r1, #1
 8003f00:	fa01 f303 	lsl.w	r3, r1, r3
 8003f04:	69f9      	ldr	r1, [r7, #28]
 8003f06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	634b      	str	r3, [r1, #52]	; 0x34
 8003f0e:	e105      	b.n	800411c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d110      	bne.n	8003f42 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	015a      	lsls	r2, r3, #5
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	4413      	add	r3, r2
 8003f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	0151      	lsls	r1, r2, #5
 8003f32:	69fa      	ldr	r2, [r7, #28]
 8003f34:	440a      	add	r2, r1
 8003f36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f3e:	6013      	str	r3, [r2, #0]
 8003f40:	e00f      	b.n	8003f62 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	015a      	lsls	r2, r3, #5
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	4413      	add	r3, r2
 8003f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	0151      	lsls	r1, r2, #5
 8003f54:	69fa      	ldr	r2, [r7, #28]
 8003f56:	440a      	add	r2, r1
 8003f58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f60:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	68d9      	ldr	r1, [r3, #12]
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	781a      	ldrb	r2, [r3, #0]
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	b298      	uxth	r0, r3
 8003f70:	79fb      	ldrb	r3, [r7, #7]
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	4603      	mov	r3, r0
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f000 fa2b 	bl	80043d2 <USB_WritePacket>
 8003f7c:	e0ce      	b.n	800411c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	015a      	lsls	r2, r3, #5
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	4413      	add	r3, r2
 8003f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	0151      	lsls	r1, r2, #5
 8003f90:	69fa      	ldr	r2, [r7, #28]
 8003f92:	440a      	add	r2, r1
 8003f94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f98:	0cdb      	lsrs	r3, r3, #19
 8003f9a:	04db      	lsls	r3, r3, #19
 8003f9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	015a      	lsls	r2, r3, #5
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	0151      	lsls	r1, r2, #5
 8003fb0:	69fa      	ldr	r2, [r7, #28]
 8003fb2:	440a      	add	r2, r1
 8003fb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fb8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003fbc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003fc0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d126      	bne.n	8004018 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	015a      	lsls	r2, r3, #5
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd6:	691a      	ldr	r2, [r3, #16]
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fe0:	69b9      	ldr	r1, [r7, #24]
 8003fe2:	0148      	lsls	r0, r1, #5
 8003fe4:	69f9      	ldr	r1, [r7, #28]
 8003fe6:	4401      	add	r1, r0
 8003fe8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003fec:	4313      	orrs	r3, r2
 8003fee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	015a      	lsls	r2, r3, #5
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	0151      	lsls	r1, r2, #5
 8004002:	69fa      	ldr	r2, [r7, #28]
 8004004:	440a      	add	r2, r1
 8004006:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800400a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800400e:	6113      	str	r3, [r2, #16]
 8004010:	e036      	b.n	8004080 <USB_EPStartXfer+0x3dc>
 8004012:	bf00      	nop
 8004014:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	695a      	ldr	r2, [r3, #20]
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	4413      	add	r3, r2
 8004022:	1e5a      	subs	r2, r3, #1
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	fbb2 f3f3 	udiv	r3, r2, r3
 800402c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	015a      	lsls	r2, r3, #5
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	4413      	add	r3, r2
 8004036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800403a:	691a      	ldr	r2, [r3, #16]
 800403c:	8afb      	ldrh	r3, [r7, #22]
 800403e:	04d9      	lsls	r1, r3, #19
 8004040:	4b39      	ldr	r3, [pc, #228]	; (8004128 <USB_EPStartXfer+0x484>)
 8004042:	400b      	ands	r3, r1
 8004044:	69b9      	ldr	r1, [r7, #24]
 8004046:	0148      	lsls	r0, r1, #5
 8004048:	69f9      	ldr	r1, [r7, #28]
 800404a:	4401      	add	r1, r0
 800404c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004050:	4313      	orrs	r3, r2
 8004052:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	015a      	lsls	r2, r3, #5
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	4413      	add	r3, r2
 800405c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004060:	691a      	ldr	r2, [r3, #16]
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	8af9      	ldrh	r1, [r7, #22]
 8004068:	fb01 f303 	mul.w	r3, r1, r3
 800406c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004070:	69b9      	ldr	r1, [r7, #24]
 8004072:	0148      	lsls	r0, r1, #5
 8004074:	69f9      	ldr	r1, [r7, #28]
 8004076:	4401      	add	r1, r0
 8004078:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800407c:	4313      	orrs	r3, r2
 800407e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004080:	79fb      	ldrb	r3, [r7, #7]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d10d      	bne.n	80040a2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d009      	beq.n	80040a2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	68d9      	ldr	r1, [r3, #12]
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	015a      	lsls	r2, r3, #5
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	4413      	add	r3, r2
 800409a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800409e:	460a      	mov	r2, r1
 80040a0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	78db      	ldrb	r3, [r3, #3]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d128      	bne.n	80040fc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d110      	bne.n	80040dc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	015a      	lsls	r2, r3, #5
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	4413      	add	r3, r2
 80040c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	69ba      	ldr	r2, [r7, #24]
 80040ca:	0151      	lsls	r1, r2, #5
 80040cc:	69fa      	ldr	r2, [r7, #28]
 80040ce:	440a      	add	r2, r1
 80040d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040d8:	6013      	str	r3, [r2, #0]
 80040da:	e00f      	b.n	80040fc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	0151      	lsls	r1, r2, #5
 80040ee:	69fa      	ldr	r2, [r7, #28]
 80040f0:	440a      	add	r2, r1
 80040f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040fa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	015a      	lsls	r2, r3, #5
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	4413      	add	r3, r2
 8004104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	69ba      	ldr	r2, [r7, #24]
 800410c:	0151      	lsls	r1, r2, #5
 800410e:	69fa      	ldr	r2, [r7, #28]
 8004110:	440a      	add	r2, r1
 8004112:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004116:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800411a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3720      	adds	r7, #32
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	1ff80000 	.word	0x1ff80000

0800412c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800412c:	b480      	push	{r7}
 800412e:	b087      	sub	sp, #28
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	4613      	mov	r3, r2
 8004138:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	785b      	ldrb	r3, [r3, #1]
 8004148:	2b01      	cmp	r3, #1
 800414a:	f040 80cd 	bne.w	80042e8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d132      	bne.n	80041bc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	015a      	lsls	r2, r3, #5
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	4413      	add	r3, r2
 800415e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	0151      	lsls	r1, r2, #5
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	440a      	add	r2, r1
 800416c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004170:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004174:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004178:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	015a      	lsls	r2, r3, #5
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	4413      	add	r3, r2
 8004182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	0151      	lsls	r1, r2, #5
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	440a      	add	r2, r1
 8004190:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004194:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004198:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	015a      	lsls	r2, r3, #5
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	4413      	add	r3, r2
 80041a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	0151      	lsls	r1, r2, #5
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	440a      	add	r2, r1
 80041b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041b4:	0cdb      	lsrs	r3, r3, #19
 80041b6:	04db      	lsls	r3, r3, #19
 80041b8:	6113      	str	r3, [r2, #16]
 80041ba:	e04e      	b.n	800425a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	015a      	lsls	r2, r3, #5
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	4413      	add	r3, r2
 80041c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	0151      	lsls	r1, r2, #5
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	440a      	add	r2, r1
 80041d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041d6:	0cdb      	lsrs	r3, r3, #19
 80041d8:	04db      	lsls	r3, r3, #19
 80041da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	015a      	lsls	r2, r3, #5
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	4413      	add	r3, r2
 80041e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	0151      	lsls	r1, r2, #5
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	440a      	add	r2, r1
 80041f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80041fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80041fe:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	695a      	ldr	r2, [r3, #20]
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	429a      	cmp	r2, r3
 800420a:	d903      	bls.n	8004214 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	689a      	ldr	r2, [r3, #8]
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	015a      	lsls	r2, r3, #5
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	4413      	add	r3, r2
 800421c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	0151      	lsls	r1, r2, #5
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	440a      	add	r2, r1
 800422a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800422e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004232:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	015a      	lsls	r2, r3, #5
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	4413      	add	r3, r2
 800423c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004240:	691a      	ldr	r2, [r3, #16]
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800424a:	6939      	ldr	r1, [r7, #16]
 800424c:	0148      	lsls	r0, r1, #5
 800424e:	6979      	ldr	r1, [r7, #20]
 8004250:	4401      	add	r1, r0
 8004252:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004256:	4313      	orrs	r3, r2
 8004258:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800425a:	79fb      	ldrb	r3, [r7, #7]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d11e      	bne.n	800429e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d009      	beq.n	800427c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	015a      	lsls	r2, r3, #5
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	4413      	add	r3, r2
 8004270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004274:	461a      	mov	r2, r3
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	015a      	lsls	r2, r3, #5
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	4413      	add	r3, r2
 8004284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	0151      	lsls	r1, r2, #5
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	440a      	add	r2, r1
 8004292:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004296:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800429a:	6013      	str	r3, [r2, #0]
 800429c:	e092      	b.n	80043c4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	015a      	lsls	r2, r3, #5
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	4413      	add	r3, r2
 80042a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	0151      	lsls	r1, r2, #5
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	440a      	add	r2, r1
 80042b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042bc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d07e      	beq.n	80043c4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	f003 030f 	and.w	r3, r3, #15
 80042d6:	2101      	movs	r1, #1
 80042d8:	fa01 f303 	lsl.w	r3, r1, r3
 80042dc:	6979      	ldr	r1, [r7, #20]
 80042de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042e2:	4313      	orrs	r3, r2
 80042e4:	634b      	str	r3, [r1, #52]	; 0x34
 80042e6:	e06d      	b.n	80043c4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	015a      	lsls	r2, r3, #5
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	4413      	add	r3, r2
 80042f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	0151      	lsls	r1, r2, #5
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	440a      	add	r2, r1
 80042fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004302:	0cdb      	lsrs	r3, r3, #19
 8004304:	04db      	lsls	r3, r3, #19
 8004306:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	015a      	lsls	r2, r3, #5
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	4413      	add	r3, r2
 8004310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	0151      	lsls	r1, r2, #5
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	440a      	add	r2, r1
 800431e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004322:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004326:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800432a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d003      	beq.n	800433c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	689a      	ldr	r2, [r3, #8]
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	015a      	lsls	r2, r3, #5
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	4413      	add	r3, r2
 8004344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	0151      	lsls	r1, r2, #5
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	440a      	add	r2, r1
 8004352:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004356:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800435a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	015a      	lsls	r2, r3, #5
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	4413      	add	r3, r2
 8004364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004368:	691a      	ldr	r2, [r3, #16]
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004372:	6939      	ldr	r1, [r7, #16]
 8004374:	0148      	lsls	r0, r1, #5
 8004376:	6979      	ldr	r1, [r7, #20]
 8004378:	4401      	add	r1, r0
 800437a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800437e:	4313      	orrs	r3, r2
 8004380:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004382:	79fb      	ldrb	r3, [r7, #7]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d10d      	bne.n	80043a4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d009      	beq.n	80043a4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	68d9      	ldr	r1, [r3, #12]
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	015a      	lsls	r2, r3, #5
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	4413      	add	r3, r2
 800439c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a0:	460a      	mov	r2, r1
 80043a2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	015a      	lsls	r2, r3, #5
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	4413      	add	r3, r2
 80043ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	0151      	lsls	r1, r2, #5
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	440a      	add	r2, r1
 80043ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	371c      	adds	r7, #28
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b089      	sub	sp, #36	; 0x24
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	60f8      	str	r0, [r7, #12]
 80043da:	60b9      	str	r1, [r7, #8]
 80043dc:	4611      	mov	r1, r2
 80043de:	461a      	mov	r2, r3
 80043e0:	460b      	mov	r3, r1
 80043e2:	71fb      	strb	r3, [r7, #7]
 80043e4:	4613      	mov	r3, r2
 80043e6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80043f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d11a      	bne.n	800442e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80043f8:	88bb      	ldrh	r3, [r7, #4]
 80043fa:	3303      	adds	r3, #3
 80043fc:	089b      	lsrs	r3, r3, #2
 80043fe:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004400:	2300      	movs	r3, #0
 8004402:	61bb      	str	r3, [r7, #24]
 8004404:	e00f      	b.n	8004426 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004406:	79fb      	ldrb	r3, [r7, #7]
 8004408:	031a      	lsls	r2, r3, #12
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	4413      	add	r3, r2
 800440e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004412:	461a      	mov	r2, r3
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6013      	str	r3, [r2, #0]
      pSrc++;
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	3304      	adds	r3, #4
 800441e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	3301      	adds	r3, #1
 8004424:	61bb      	str	r3, [r7, #24]
 8004426:	69ba      	ldr	r2, [r7, #24]
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	429a      	cmp	r2, r3
 800442c:	d3eb      	bcc.n	8004406 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3724      	adds	r7, #36	; 0x24
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	785b      	ldrb	r3, [r3, #1]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d12c      	bne.n	80044b2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	015a      	lsls	r2, r3, #5
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	4413      	add	r3, r2
 8004460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	db12      	blt.n	8004490 <USB_EPSetStall+0x54>
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00f      	beq.n	8004490 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	015a      	lsls	r2, r3, #5
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	4413      	add	r3, r2
 8004478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	0151      	lsls	r1, r2, #5
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	440a      	add	r2, r1
 8004486:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800448a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800448e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4413      	add	r3, r2
 8004498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	0151      	lsls	r1, r2, #5
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	440a      	add	r2, r1
 80044a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80044ae:	6013      	str	r3, [r2, #0]
 80044b0:	e02b      	b.n	800450a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	015a      	lsls	r2, r3, #5
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	4413      	add	r3, r2
 80044ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	db12      	blt.n	80044ea <USB_EPSetStall+0xae>
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00f      	beq.n	80044ea <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	015a      	lsls	r2, r3, #5
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	4413      	add	r3, r2
 80044d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68ba      	ldr	r2, [r7, #8]
 80044da:	0151      	lsls	r1, r2, #5
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	440a      	add	r2, r1
 80044e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80044e8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	015a      	lsls	r2, r3, #5
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	4413      	add	r3, r2
 80044f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	0151      	lsls	r1, r2, #5
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	440a      	add	r2, r1
 8004500:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004504:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004508:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004532:	f023 0303 	bic.w	r3, r3, #3
 8004536:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004546:	f023 0302 	bic.w	r3, r3, #2
 800454a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3714      	adds	r7, #20
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800455a:	b480      	push	{r7}
 800455c:	b085      	sub	sp, #20
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004574:	f023 0303 	bic.w	r3, r3, #3
 8004578:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004588:	f043 0302 	orr.w	r3, r3, #2
 800458c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3714      	adds	r7, #20
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800459c:	b480      	push	{r7}
 800459e:	b087      	sub	sp, #28
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	460b      	mov	r3, r1
 80045a6:	607a      	str	r2, [r7, #4]
 80045a8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	333c      	adds	r3, #60	; 0x3c
 80045b2:	3304      	adds	r3, #4
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	4a26      	ldr	r2, [pc, #152]	; (8004654 <USB_EP0_OutStart+0xb8>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d90a      	bls.n	80045d6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045d0:	d101      	bne.n	80045d6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80045d2:	2300      	movs	r3, #0
 80045d4:	e037      	b.n	8004646 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045dc:	461a      	mov	r2, r3
 80045de:	2300      	movs	r3, #0
 80045e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004604:	f043 0318 	orr.w	r3, r3, #24
 8004608:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004618:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800461c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800461e:	7afb      	ldrb	r3, [r7, #11]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d10f      	bne.n	8004644 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800462a:	461a      	mov	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800463e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004642:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	371c      	adds	r7, #28
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	4f54300a 	.word	0x4f54300a

08004658 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004660:	2300      	movs	r3, #0
 8004662:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	3301      	adds	r3, #1
 8004668:	60fb      	str	r3, [r7, #12]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	4a13      	ldr	r2, [pc, #76]	; (80046bc <USB_CoreReset+0x64>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d901      	bls.n	8004676 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e01b      	b.n	80046ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	2b00      	cmp	r3, #0
 800467c:	daf2      	bge.n	8004664 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800467e:	2300      	movs	r3, #0
 8004680:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	f043 0201 	orr.w	r2, r3, #1
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	3301      	adds	r3, #1
 8004692:	60fb      	str	r3, [r7, #12]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	4a09      	ldr	r2, [pc, #36]	; (80046bc <USB_CoreReset+0x64>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d901      	bls.n	80046a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e006      	b.n	80046ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d0f0      	beq.n	800468e <USB_CoreReset+0x36>

  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3714      	adds	r7, #20
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	00030d40 	.word	0x00030d40

080046c0 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	460b      	mov	r3, r1
 80046ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80046cc:	2010      	movs	r0, #16
 80046ce:	f003 fac1 	bl	8007c54 <malloc>
 80046d2:	4603      	mov	r3, r0
 80046d4:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d105      	bne.n	80046e8 <USBD_HID_Init+0x28>
  {
    pdev->pClassData = NULL;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80046e4:	2302      	movs	r3, #2
 80046e6:	e01b      	b.n	8004720 <USBD_HID_Init+0x60>
  }

  pdev->pClassData = (void *)hhid;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	7c1b      	ldrb	r3, [r3, #16]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d103      	bne.n	8004700 <USBD_HID_Init+0x40>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2207      	movs	r2, #7
 80046fc:	875a      	strh	r2, [r3, #58]	; 0x3a
 80046fe:	e002      	b.n	8004706 <USBD_HID_Init+0x46>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	220a      	movs	r2, #10
 8004704:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

    /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8004706:	2304      	movs	r3, #4
 8004708:	2203      	movs	r2, #3
 800470a:	2181      	movs	r1, #129	; 0x81
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f003 f9c6 	bl	8007a9e <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	3710      	adds	r7, #16
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	460b      	mov	r3, r1
 8004732:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8004734:	2181      	movs	r1, #129	; 0x81
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f003 f9d7 	bl	8007aea <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800474e:	2b00      	cmp	r3, #0
 8004750:	d009      	beq.n	8004766 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004758:	4618      	mov	r0, r3
 800475a:	f003 fa83 	bl	8007c64 <free>
    pdev->pClassData = NULL;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3708      	adds	r7, #8
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004780:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8004782:	2300      	movs	r3, #0
 8004784:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8004786:	2300      	movs	r3, #0
 8004788:	817b      	strh	r3, [r7, #10]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004792:	2b00      	cmp	r3, #0
 8004794:	d045      	beq.n	8004822 <USBD_HID_Setup+0xb2>
 8004796:	2b20      	cmp	r3, #32
 8004798:	f040 80d4 	bne.w	8004944 <USBD_HID_Setup+0x1d4>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	785b      	ldrb	r3, [r3, #1]
 80047a0:	3b02      	subs	r3, #2
 80047a2:	2b09      	cmp	r3, #9
 80047a4:	d835      	bhi.n	8004812 <USBD_HID_Setup+0xa2>
 80047a6:	a201      	add	r2, pc, #4	; (adr r2, 80047ac <USBD_HID_Setup+0x3c>)
 80047a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ac:	08004803 	.word	0x08004803
 80047b0:	080047e3 	.word	0x080047e3
 80047b4:	08004813 	.word	0x08004813
 80047b8:	08004813 	.word	0x08004813
 80047bc:	08004813 	.word	0x08004813
 80047c0:	08004813 	.word	0x08004813
 80047c4:	08004813 	.word	0x08004813
 80047c8:	08004813 	.word	0x08004813
 80047cc:	080047f1 	.word	0x080047f1
 80047d0:	080047d5 	.word	0x080047d5
    {
    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	885b      	ldrh	r3, [r3, #2]
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	461a      	mov	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	601a      	str	r2, [r3, #0]
      break;
 80047e0:	e01e      	b.n	8004820 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2201      	movs	r2, #1
 80047e6:	4619      	mov	r1, r3
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 fa03 	bl	8004bf4 <USBD_CtlSendData>
      break;
 80047ee:	e017      	b.n	8004820 <USBD_HID_Setup+0xb0>

    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	885b      	ldrh	r3, [r3, #2]
 80047f4:	0a1b      	lsrs	r3, r3, #8
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	461a      	mov	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	605a      	str	r2, [r3, #4]
      break;
 8004800:	e00e      	b.n	8004820 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	3304      	adds	r3, #4
 8004806:	2201      	movs	r2, #1
 8004808:	4619      	mov	r1, r3
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f9f2 	bl	8004bf4 <USBD_CtlSendData>
      break;
 8004810:	e006      	b.n	8004820 <USBD_HID_Setup+0xb0>

    default:
      USBD_CtlError(pdev, req);
 8004812:	6839      	ldr	r1, [r7, #0]
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 f97c 	bl	8004b12 <USBD_CtlError>
      ret = USBD_FAIL;
 800481a:	2303      	movs	r3, #3
 800481c:	75fb      	strb	r3, [r7, #23]
      break;
 800481e:	bf00      	nop
    }
    break;
 8004820:	e097      	b.n	8004952 <USBD_HID_Setup+0x1e2>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	785b      	ldrb	r3, [r3, #1]
 8004826:	2b0b      	cmp	r3, #11
 8004828:	f200 8083 	bhi.w	8004932 <USBD_HID_Setup+0x1c2>
 800482c:	a201      	add	r2, pc, #4	; (adr r2, 8004834 <USBD_HID_Setup+0xc4>)
 800482e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004832:	bf00      	nop
 8004834:	08004865 	.word	0x08004865
 8004838:	08004941 	.word	0x08004941
 800483c:	08004933 	.word	0x08004933
 8004840:	08004933 	.word	0x08004933
 8004844:	08004933 	.word	0x08004933
 8004848:	08004933 	.word	0x08004933
 800484c:	0800488d 	.word	0x0800488d
 8004850:	08004933 	.word	0x08004933
 8004854:	08004933 	.word	0x08004933
 8004858:	08004933 	.word	0x08004933
 800485c:	080048e5 	.word	0x080048e5
 8004860:	0800490d 	.word	0x0800490d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800486a:	2b03      	cmp	r3, #3
 800486c:	d107      	bne.n	800487e <USBD_HID_Setup+0x10e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800486e:	f107 030a 	add.w	r3, r7, #10
 8004872:	2202      	movs	r2, #2
 8004874:	4619      	mov	r1, r3
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f9bc 	bl	8004bf4 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800487c:	e061      	b.n	8004942 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 800487e:	6839      	ldr	r1, [r7, #0]
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 f946 	bl	8004b12 <USBD_CtlError>
        ret = USBD_FAIL;
 8004886:	2303      	movs	r3, #3
 8004888:	75fb      	strb	r3, [r7, #23]
      break;
 800488a:	e05a      	b.n	8004942 <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == HID_REPORT_DESC)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	885b      	ldrh	r3, [r3, #2]
 8004890:	0a1b      	lsrs	r3, r3, #8
 8004892:	b29b      	uxth	r3, r3
 8004894:	2b22      	cmp	r3, #34	; 0x22
 8004896:	d108      	bne.n	80048aa <USBD_HID_Setup+0x13a>
      {
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	88db      	ldrh	r3, [r3, #6]
 800489c:	2b4a      	cmp	r3, #74	; 0x4a
 800489e:	bf28      	it	cs
 80048a0:	234a      	movcs	r3, #74	; 0x4a
 80048a2:	82bb      	strh	r3, [r7, #20]
        pbuf = HID_MOUSE_ReportDesc;
 80048a4:	4b2d      	ldr	r3, [pc, #180]	; (800495c <USBD_HID_Setup+0x1ec>)
 80048a6:	613b      	str	r3, [r7, #16]
 80048a8:	e015      	b.n	80048d6 <USBD_HID_Setup+0x166>
      }
      else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	885b      	ldrh	r3, [r3, #2]
 80048ae:	0a1b      	lsrs	r3, r3, #8
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	2b21      	cmp	r3, #33	; 0x21
 80048b4:	d108      	bne.n	80048c8 <USBD_HID_Setup+0x158>
      {
        pbuf = USBD_HID_Desc;
 80048b6:	4b2a      	ldr	r3, [pc, #168]	; (8004960 <USBD_HID_Setup+0x1f0>)
 80048b8:	613b      	str	r3, [r7, #16]
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	88db      	ldrh	r3, [r3, #6]
 80048be:	2b09      	cmp	r3, #9
 80048c0:	bf28      	it	cs
 80048c2:	2309      	movcs	r3, #9
 80048c4:	82bb      	strh	r3, [r7, #20]
 80048c6:	e006      	b.n	80048d6 <USBD_HID_Setup+0x166>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80048c8:	6839      	ldr	r1, [r7, #0]
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f921 	bl	8004b12 <USBD_CtlError>
        ret = USBD_FAIL;
 80048d0:	2303      	movs	r3, #3
 80048d2:	75fb      	strb	r3, [r7, #23]
        break;
 80048d4:	e035      	b.n	8004942 <USBD_HID_Setup+0x1d2>
      }
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80048d6:	8abb      	ldrh	r3, [r7, #20]
 80048d8:	461a      	mov	r2, r3
 80048da:	6939      	ldr	r1, [r7, #16]
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 f989 	bl	8004bf4 <USBD_CtlSendData>
      break;
 80048e2:	e02e      	b.n	8004942 <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80048ea:	2b03      	cmp	r3, #3
 80048ec:	d107      	bne.n	80048fe <USBD_HID_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	3308      	adds	r3, #8
 80048f2:	2201      	movs	r2, #1
 80048f4:	4619      	mov	r1, r3
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f97c 	bl	8004bf4 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80048fc:	e021      	b.n	8004942 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 80048fe:	6839      	ldr	r1, [r7, #0]
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 f906 	bl	8004b12 <USBD_CtlError>
        ret = USBD_FAIL;
 8004906:	2303      	movs	r3, #3
 8004908:	75fb      	strb	r3, [r7, #23]
      break;
 800490a:	e01a      	b.n	8004942 <USBD_HID_Setup+0x1d2>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004912:	2b03      	cmp	r3, #3
 8004914:	d106      	bne.n	8004924 <USBD_HID_Setup+0x1b4>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	885b      	ldrh	r3, [r3, #2]
 800491a:	b2db      	uxtb	r3, r3
 800491c:	461a      	mov	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004922:	e00e      	b.n	8004942 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8004924:	6839      	ldr	r1, [r7, #0]
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f8f3 	bl	8004b12 <USBD_CtlError>
        ret = USBD_FAIL;
 800492c:	2303      	movs	r3, #3
 800492e:	75fb      	strb	r3, [r7, #23]
      break;
 8004930:	e007      	b.n	8004942 <USBD_HID_Setup+0x1d2>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8004932:	6839      	ldr	r1, [r7, #0]
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 f8ec 	bl	8004b12 <USBD_CtlError>
      ret = USBD_FAIL;
 800493a:	2303      	movs	r3, #3
 800493c:	75fb      	strb	r3, [r7, #23]
      break;
 800493e:	e000      	b.n	8004942 <USBD_HID_Setup+0x1d2>
      break;
 8004940:	bf00      	nop
    }
    break;
 8004942:	e006      	b.n	8004952 <USBD_HID_Setup+0x1e2>

  default:
    USBD_CtlError(pdev, req);
 8004944:	6839      	ldr	r1, [r7, #0]
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f8e3 	bl	8004b12 <USBD_CtlError>
    ret = USBD_FAIL;
 800494c:	2303      	movs	r3, #3
 800494e:	75fb      	strb	r3, [r7, #23]
    break;
 8004950:	bf00      	nop
  }

  return (uint8_t)ret;
 8004952:	7dfb      	ldrb	r3, [r7, #23]
}
 8004954:	4618      	mov	r0, r3
 8004956:	3718      	adds	r7, #24
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	200000c8 	.word	0x200000c8
 8004960:	200000b0 	.word	0x200000b0

08004964 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	4613      	mov	r3, r2
 8004970:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004978:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004980:	2b03      	cmp	r3, #3
 8004982:	d10c      	bne.n	800499e <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	7b1b      	ldrb	r3, [r3, #12]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d108      	bne.n	800499e <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	2201      	movs	r2, #1
 8004990:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8004992:	88fb      	ldrh	r3, [r7, #6]
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	2181      	movs	r1, #129	; 0x81
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f003 f8e4 	bl	8007b66 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3718      	adds	r7, #24
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2222      	movs	r2, #34	; 0x22
 80049b4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 80049b6:	4b03      	ldr	r3, [pc, #12]	; (80049c4 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	20000044 	.word	0x20000044

080049c8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2222      	movs	r2, #34	; 0x22
 80049d4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 80049d6:	4b03      	ldr	r3, [pc, #12]	; (80049e4 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80049d8:	4618      	mov	r0, r3
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr
 80049e4:	20000068 	.word	0x20000068

080049e8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2222      	movs	r2, #34	; 0x22
 80049f4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 80049f6:	4b03      	ldr	r3, [pc, #12]	; (8004a04 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr
 8004a04:	2000008c 	.word	0x2000008c

08004a08 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	460b      	mov	r3, r1
 8004a12:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	220a      	movs	r2, #10
 8004a38:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8004a3a:	4b03      	ldr	r3, [pc, #12]	; (8004a48 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr
 8004a48:	200000bc 	.word	0x200000bc

08004a4c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	4613      	mov	r3, r2
 8004a58:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d101      	bne.n	8004a64 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e025      	b.n	8004ab0 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d003      	beq.n	8004a88 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d003      	beq.n	8004a96 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	79fa      	ldrb	r2, [r7, #7]
 8004aa2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f002 ff93 	bl	80079d0 <USBD_LL_Init>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004aae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3718      	adds	r7, #24
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d101      	bne.n	8004ad0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e010      	b.n	8004af2 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae0:	f107 020e 	add.w	r2, r7, #14
 8004ae4:	4610      	mov	r0, r2
 8004ae6:	4798      	blx	r3
 8004ae8:	4602      	mov	r2, r0
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b082      	sub	sp, #8
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f002 ffb0 	bl	8007a68 <USBD_LL_Start>
 8004b08:	4603      	mov	r3, r0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b082      	sub	sp, #8
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
 8004b1a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004b1c:	2180      	movs	r1, #128	; 0x80
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f003 f802 	bl	8007b28 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8004b24:	2100      	movs	r1, #0
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f002 fffe 	bl	8007b28 <USBD_LL_StallEP>
}
 8004b2c:	bf00      	nop
 8004b2e:	3708      	adds	r7, #8
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8004b40:	2300      	movs	r3, #0
 8004b42:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d036      	beq.n	8004bb8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8004b4e:	6938      	ldr	r0, [r7, #16]
 8004b50:	f000 f836 	bl	8004bc0 <USBD_GetLen>
 8004b54:	4603      	mov	r3, r0
 8004b56:	3301      	adds	r3, #1
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8004b62:	7dfb      	ldrb	r3, [r7, #23]
 8004b64:	68ba      	ldr	r2, [r7, #8]
 8004b66:	4413      	add	r3, r2
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	7812      	ldrb	r2, [r2, #0]
 8004b6c:	701a      	strb	r2, [r3, #0]
  idx++;
 8004b6e:	7dfb      	ldrb	r3, [r7, #23]
 8004b70:	3301      	adds	r3, #1
 8004b72:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8004b74:	7dfb      	ldrb	r3, [r7, #23]
 8004b76:	68ba      	ldr	r2, [r7, #8]
 8004b78:	4413      	add	r3, r2
 8004b7a:	2203      	movs	r2, #3
 8004b7c:	701a      	strb	r2, [r3, #0]
  idx++;
 8004b7e:	7dfb      	ldrb	r3, [r7, #23]
 8004b80:	3301      	adds	r3, #1
 8004b82:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8004b84:	e013      	b.n	8004bae <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8004b86:	7dfb      	ldrb	r3, [r7, #23]
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	7812      	ldrb	r2, [r2, #0]
 8004b90:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	3301      	adds	r3, #1
 8004b96:	613b      	str	r3, [r7, #16]
    idx++;
 8004b98:	7dfb      	ldrb	r3, [r7, #23]
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8004b9e:	7dfb      	ldrb	r3, [r7, #23]
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	701a      	strb	r2, [r3, #0]
    idx++;
 8004ba8:	7dfb      	ldrb	r3, [r7, #23]
 8004baa:	3301      	adds	r3, #1
 8004bac:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1e7      	bne.n	8004b86 <USBD_GetString+0x52>
 8004bb6:	e000      	b.n	8004bba <USBD_GetString+0x86>
    return;
 8004bb8:	bf00      	nop
  }
}
 8004bba:	3718      	adds	r7, #24
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8004bd0:	e005      	b.n	8004bde <USBD_GetLen+0x1e>
  {
    len++;
 8004bd2:	7bfb      	ldrb	r3, [r7, #15]
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	3301      	adds	r3, #1
 8004bdc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1f5      	bne.n	8004bd2 <USBD_GetLen+0x12>
  }

  return len;
 8004be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3714      	adds	r7, #20
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2202      	movs	r2, #2
 8004c04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	68ba      	ldr	r2, [r7, #8]
 8004c18:	2100      	movs	r1, #0
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f002 ffa3 	bl	8007b66 <USBD_LL_Transmit>

  return USBD_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3710      	adds	r7, #16
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004c2a:	b480      	push	{r7}
 8004c2c:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004c2e:	bf00      	nop
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c3e:	f3ef 8305 	mrs	r3, IPSR
 8004c42:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c44:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10f      	bne.n	8004c6a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c4a:	f3ef 8310 	mrs	r3, PRIMASK
 8004c4e:	607b      	str	r3, [r7, #4]
  return(result);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d105      	bne.n	8004c62 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c56:	f3ef 8311 	mrs	r3, BASEPRI
 8004c5a:	603b      	str	r3, [r7, #0]
  return(result);
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d007      	beq.n	8004c72 <osKernelInitialize+0x3a>
 8004c62:	4b0e      	ldr	r3, [pc, #56]	; (8004c9c <osKernelInitialize+0x64>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d103      	bne.n	8004c72 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004c6a:	f06f 0305 	mvn.w	r3, #5
 8004c6e:	60fb      	str	r3, [r7, #12]
 8004c70:	e00c      	b.n	8004c8c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004c72:	4b0a      	ldr	r3, [pc, #40]	; (8004c9c <osKernelInitialize+0x64>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d105      	bne.n	8004c86 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004c7a:	4b08      	ldr	r3, [pc, #32]	; (8004c9c <osKernelInitialize+0x64>)
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004c80:	2300      	movs	r3, #0
 8004c82:	60fb      	str	r3, [r7, #12]
 8004c84:	e002      	b.n	8004c8c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004c86:	f04f 33ff 	mov.w	r3, #4294967295
 8004c8a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3714      	adds	r7, #20
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	200001fc 	.word	0x200001fc

08004ca0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ca6:	f3ef 8305 	mrs	r3, IPSR
 8004caa:	60bb      	str	r3, [r7, #8]
  return(result);
 8004cac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10f      	bne.n	8004cd2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cb2:	f3ef 8310 	mrs	r3, PRIMASK
 8004cb6:	607b      	str	r3, [r7, #4]
  return(result);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d105      	bne.n	8004cca <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004cbe:	f3ef 8311 	mrs	r3, BASEPRI
 8004cc2:	603b      	str	r3, [r7, #0]
  return(result);
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d007      	beq.n	8004cda <osKernelStart+0x3a>
 8004cca:	4b0f      	ldr	r3, [pc, #60]	; (8004d08 <osKernelStart+0x68>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d103      	bne.n	8004cda <osKernelStart+0x3a>
    stat = osErrorISR;
 8004cd2:	f06f 0305 	mvn.w	r3, #5
 8004cd6:	60fb      	str	r3, [r7, #12]
 8004cd8:	e010      	b.n	8004cfc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004cda:	4b0b      	ldr	r3, [pc, #44]	; (8004d08 <osKernelStart+0x68>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d109      	bne.n	8004cf6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004ce2:	f7ff ffa2 	bl	8004c2a <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004ce6:	4b08      	ldr	r3, [pc, #32]	; (8004d08 <osKernelStart+0x68>)
 8004ce8:	2202      	movs	r2, #2
 8004cea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004cec:	f001 f870 	bl	8005dd0 <vTaskStartScheduler>
      stat = osOK;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	60fb      	str	r3, [r7, #12]
 8004cf4:	e002      	b.n	8004cfc <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8004cfa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	200001fc 	.word	0x200001fc

08004d0c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b090      	sub	sp, #64	; 0x40
 8004d10:	af04      	add	r7, sp, #16
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d1c:	f3ef 8305 	mrs	r3, IPSR
 8004d20:	61fb      	str	r3, [r7, #28]
  return(result);
 8004d22:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f040 808f 	bne.w	8004e48 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d2a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d2e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d105      	bne.n	8004d42 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d36:	f3ef 8311 	mrs	r3, BASEPRI
 8004d3a:	617b      	str	r3, [r7, #20]
  return(result);
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d003      	beq.n	8004d4a <osThreadNew+0x3e>
 8004d42:	4b44      	ldr	r3, [pc, #272]	; (8004e54 <osThreadNew+0x148>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d07e      	beq.n	8004e48 <osThreadNew+0x13c>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d07b      	beq.n	8004e48 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004d50:	2380      	movs	r3, #128	; 0x80
 8004d52:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004d54:	2318      	movs	r3, #24
 8004d56:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d60:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d045      	beq.n	8004df4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d002      	beq.n	8004d76 <osThreadNew+0x6a>
        name = attr->name;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d002      	beq.n	8004d84 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d008      	beq.n	8004d9c <osThreadNew+0x90>
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	2b38      	cmp	r3, #56	; 0x38
 8004d8e:	d805      	bhi.n	8004d9c <osThreadNew+0x90>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f003 0301 	and.w	r3, r3, #1
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d001      	beq.n	8004da0 <osThreadNew+0x94>
        return (NULL);
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	e054      	b.n	8004e4a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	695b      	ldr	r3, [r3, #20]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d003      	beq.n	8004db0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	695b      	ldr	r3, [r3, #20]
 8004dac:	089b      	lsrs	r3, r3, #2
 8004dae:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00e      	beq.n	8004dd6 <osThreadNew+0xca>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	2b5b      	cmp	r3, #91	; 0x5b
 8004dbe:	d90a      	bls.n	8004dd6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d006      	beq.n	8004dd6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	695b      	ldr	r3, [r3, #20]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d002      	beq.n	8004dd6 <osThreadNew+0xca>
        mem = 1;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	623b      	str	r3, [r7, #32]
 8004dd4:	e010      	b.n	8004df8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10c      	bne.n	8004df8 <osThreadNew+0xec>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d108      	bne.n	8004df8 <osThreadNew+0xec>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d104      	bne.n	8004df8 <osThreadNew+0xec>
          mem = 0;
 8004dee:	2300      	movs	r3, #0
 8004df0:	623b      	str	r3, [r7, #32]
 8004df2:	e001      	b.n	8004df8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004df4:	2300      	movs	r3, #0
 8004df6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004df8:	6a3b      	ldr	r3, [r7, #32]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d110      	bne.n	8004e20 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e06:	9202      	str	r2, [sp, #8]
 8004e08:	9301      	str	r3, [sp, #4]
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f000 fe09 	bl	8005a2c <xTaskCreateStatic>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	613b      	str	r3, [r7, #16]
 8004e1e:	e013      	b.n	8004e48 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004e20:	6a3b      	ldr	r3, [r7, #32]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d110      	bne.n	8004e48 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	f107 0310 	add.w	r3, r7, #16
 8004e2e:	9301      	str	r3, [sp, #4]
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e32:	9300      	str	r3, [sp, #0]
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f000 fe51 	bl	8005ae0 <xTaskCreate>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d001      	beq.n	8004e48 <osThreadNew+0x13c>
          hTask = NULL;
 8004e44:	2300      	movs	r3, #0
 8004e46:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004e48:	693b      	ldr	r3, [r7, #16]
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3730      	adds	r7, #48	; 0x30
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	200001fc 	.word	0x200001fc

08004e58 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e60:	f3ef 8305 	mrs	r3, IPSR
 8004e64:	613b      	str	r3, [r7, #16]
  return(result);
 8004e66:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d10f      	bne.n	8004e8c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e6c:	f3ef 8310 	mrs	r3, PRIMASK
 8004e70:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d105      	bne.n	8004e84 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e78:	f3ef 8311 	mrs	r3, BASEPRI
 8004e7c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d007      	beq.n	8004e94 <osDelay+0x3c>
 8004e84:	4b0a      	ldr	r3, [pc, #40]	; (8004eb0 <osDelay+0x58>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d103      	bne.n	8004e94 <osDelay+0x3c>
    stat = osErrorISR;
 8004e8c:	f06f 0305 	mvn.w	r3, #5
 8004e90:	617b      	str	r3, [r7, #20]
 8004e92:	e007      	b.n	8004ea4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004e94:	2300      	movs	r3, #0
 8004e96:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d002      	beq.n	8004ea4 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 ff62 	bl	8005d68 <vTaskDelay>
    }
  }

  return (stat);
 8004ea4:	697b      	ldr	r3, [r7, #20]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3718      	adds	r7, #24
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	200001fc 	.word	0x200001fc

08004eb4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4a07      	ldr	r2, [pc, #28]	; (8004ee0 <vApplicationGetIdleTaskMemory+0x2c>)
 8004ec4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	4a06      	ldr	r2, [pc, #24]	; (8004ee4 <vApplicationGetIdleTaskMemory+0x30>)
 8004eca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2280      	movs	r2, #128	; 0x80
 8004ed0:	601a      	str	r2, [r3, #0]
}
 8004ed2:	bf00      	nop
 8004ed4:	3714      	adds	r7, #20
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	20000200 	.word	0x20000200
 8004ee4:	2000025c 	.word	0x2000025c

08004ee8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	4a07      	ldr	r2, [pc, #28]	; (8004f14 <vApplicationGetTimerTaskMemory+0x2c>)
 8004ef8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	4a06      	ldr	r2, [pc, #24]	; (8004f18 <vApplicationGetTimerTaskMemory+0x30>)
 8004efe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f06:	601a      	str	r2, [r3, #0]
}
 8004f08:	bf00      	nop
 8004f0a:	3714      	adds	r7, #20
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr
 8004f14:	2000045c 	.word	0x2000045c
 8004f18:	200004b8 	.word	0x200004b8

08004f1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f103 0208 	add.w	r2, r3, #8
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f04f 32ff 	mov.w	r2, #4294967295
 8004f34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f103 0208 	add.w	r2, r3, #8
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f103 0208 	add.w	r2, r3, #8
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f6a:	bf00      	nop
 8004f6c:	370c      	adds	r7, #12
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f76:	b480      	push	{r7}
 8004f78:	b085      	sub	sp, #20
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
 8004f7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	689a      	ldr	r2, [r3, #8]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	683a      	ldr	r2, [r7, #0]
 8004f9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	1c5a      	adds	r2, r3, #1
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	601a      	str	r2, [r3, #0]
}
 8004fb2:	bf00      	nop
 8004fb4:	3714      	adds	r7, #20
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b085      	sub	sp, #20
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
 8004fc6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd4:	d103      	bne.n	8004fde <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	60fb      	str	r3, [r7, #12]
 8004fdc:	e00c      	b.n	8004ff8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	3308      	adds	r3, #8
 8004fe2:	60fb      	str	r3, [r7, #12]
 8004fe4:	e002      	b.n	8004fec <vListInsert+0x2e>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	60fb      	str	r3, [r7, #12]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d2f6      	bcs.n	8004fe6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	683a      	ldr	r2, [r7, #0]
 8005006:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	683a      	ldr	r2, [r7, #0]
 8005012:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	1c5a      	adds	r2, r3, #1
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	601a      	str	r2, [r3, #0]
}
 8005024:	bf00      	nop
 8005026:	3714      	adds	r7, #20
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	6892      	ldr	r2, [r2, #8]
 8005046:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	6852      	ldr	r2, [r2, #4]
 8005050:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	429a      	cmp	r2, r3
 800505a:	d103      	bne.n	8005064 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689a      	ldr	r2, [r3, #8]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	1e5a      	subs	r2, r3, #1
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
}
 8005078:	4618      	mov	r0, r3
 800507a:	3714      	adds	r7, #20
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d109      	bne.n	80050ac <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509c:	f383 8811 	msr	BASEPRI, r3
 80050a0:	f3bf 8f6f 	isb	sy
 80050a4:	f3bf 8f4f 	dsb	sy
 80050a8:	60bb      	str	r3, [r7, #8]
 80050aa:	e7fe      	b.n	80050aa <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80050ac:	f002 f80e 	bl	80070cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b8:	68f9      	ldr	r1, [r7, #12]
 80050ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80050bc:	fb01 f303 	mul.w	r3, r1, r3
 80050c0:	441a      	add	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050dc:	3b01      	subs	r3, #1
 80050de:	68f9      	ldr	r1, [r7, #12]
 80050e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80050e2:	fb01 f303 	mul.w	r3, r1, r3
 80050e6:	441a      	add	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	22ff      	movs	r2, #255	; 0xff
 80050f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	22ff      	movs	r2, #255	; 0xff
 80050f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d114      	bne.n	800512c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d01a      	beq.n	8005140 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	3310      	adds	r3, #16
 800510e:	4618      	mov	r0, r3
 8005110:	f001 f8de 	bl	80062d0 <xTaskRemoveFromEventList>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d012      	beq.n	8005140 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800511a:	4b0d      	ldr	r3, [pc, #52]	; (8005150 <xQueueGenericReset+0xcc>)
 800511c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005120:	601a      	str	r2, [r3, #0]
 8005122:	f3bf 8f4f 	dsb	sy
 8005126:	f3bf 8f6f 	isb	sy
 800512a:	e009      	b.n	8005140 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	3310      	adds	r3, #16
 8005130:	4618      	mov	r0, r3
 8005132:	f7ff fef3 	bl	8004f1c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	3324      	adds	r3, #36	; 0x24
 800513a:	4618      	mov	r0, r3
 800513c:	f7ff feee 	bl	8004f1c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005140:	f001 fff2 	bl	8007128 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005144:	2301      	movs	r3, #1
}
 8005146:	4618      	mov	r0, r3
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	e000ed04 	.word	0xe000ed04

08005154 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005154:	b580      	push	{r7, lr}
 8005156:	b08e      	sub	sp, #56	; 0x38
 8005158:	af02      	add	r7, sp, #8
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	607a      	str	r2, [r7, #4]
 8005160:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d109      	bne.n	800517c <xQueueGenericCreateStatic+0x28>
 8005168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800516c:	f383 8811 	msr	BASEPRI, r3
 8005170:	f3bf 8f6f 	isb	sy
 8005174:	f3bf 8f4f 	dsb	sy
 8005178:	62bb      	str	r3, [r7, #40]	; 0x28
 800517a:	e7fe      	b.n	800517a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d109      	bne.n	8005196 <xQueueGenericCreateStatic+0x42>
 8005182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005186:	f383 8811 	msr	BASEPRI, r3
 800518a:	f3bf 8f6f 	isb	sy
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	627b      	str	r3, [r7, #36]	; 0x24
 8005194:	e7fe      	b.n	8005194 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d002      	beq.n	80051a2 <xQueueGenericCreateStatic+0x4e>
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d001      	beq.n	80051a6 <xQueueGenericCreateStatic+0x52>
 80051a2:	2301      	movs	r3, #1
 80051a4:	e000      	b.n	80051a8 <xQueueGenericCreateStatic+0x54>
 80051a6:	2300      	movs	r3, #0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d109      	bne.n	80051c0 <xQueueGenericCreateStatic+0x6c>
 80051ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b0:	f383 8811 	msr	BASEPRI, r3
 80051b4:	f3bf 8f6f 	isb	sy
 80051b8:	f3bf 8f4f 	dsb	sy
 80051bc:	623b      	str	r3, [r7, #32]
 80051be:	e7fe      	b.n	80051be <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d102      	bne.n	80051cc <xQueueGenericCreateStatic+0x78>
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d101      	bne.n	80051d0 <xQueueGenericCreateStatic+0x7c>
 80051cc:	2301      	movs	r3, #1
 80051ce:	e000      	b.n	80051d2 <xQueueGenericCreateStatic+0x7e>
 80051d0:	2300      	movs	r3, #0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d109      	bne.n	80051ea <xQueueGenericCreateStatic+0x96>
 80051d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051da:	f383 8811 	msr	BASEPRI, r3
 80051de:	f3bf 8f6f 	isb	sy
 80051e2:	f3bf 8f4f 	dsb	sy
 80051e6:	61fb      	str	r3, [r7, #28]
 80051e8:	e7fe      	b.n	80051e8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80051ea:	2350      	movs	r3, #80	; 0x50
 80051ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	2b50      	cmp	r3, #80	; 0x50
 80051f2:	d009      	beq.n	8005208 <xQueueGenericCreateStatic+0xb4>
 80051f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f8:	f383 8811 	msr	BASEPRI, r3
 80051fc:	f3bf 8f6f 	isb	sy
 8005200:	f3bf 8f4f 	dsb	sy
 8005204:	61bb      	str	r3, [r7, #24]
 8005206:	e7fe      	b.n	8005206 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005208:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800520e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00d      	beq.n	8005230 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800521c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005222:	9300      	str	r3, [sp, #0]
 8005224:	4613      	mov	r3, r2
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	68b9      	ldr	r1, [r7, #8]
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f000 f805 	bl	800523a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005232:	4618      	mov	r0, r3
 8005234:	3730      	adds	r7, #48	; 0x30
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b084      	sub	sp, #16
 800523e:	af00      	add	r7, sp, #0
 8005240:	60f8      	str	r0, [r7, #12]
 8005242:	60b9      	str	r1, [r7, #8]
 8005244:	607a      	str	r2, [r7, #4]
 8005246:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d103      	bne.n	8005256 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	601a      	str	r2, [r3, #0]
 8005254:	e002      	b.n	800525c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005268:	2101      	movs	r1, #1
 800526a:	69b8      	ldr	r0, [r7, #24]
 800526c:	f7ff ff0a 	bl	8005084 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	78fa      	ldrb	r2, [r7, #3]
 8005274:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005278:	bf00      	nop
 800527a:	3710      	adds	r7, #16
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b08e      	sub	sp, #56	; 0x38
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
 800528c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800528e:	2300      	movs	r3, #0
 8005290:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005298:	2b00      	cmp	r3, #0
 800529a:	d109      	bne.n	80052b0 <xQueueGenericSend+0x30>
 800529c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a0:	f383 8811 	msr	BASEPRI, r3
 80052a4:	f3bf 8f6f 	isb	sy
 80052a8:	f3bf 8f4f 	dsb	sy
 80052ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80052ae:	e7fe      	b.n	80052ae <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d103      	bne.n	80052be <xQueueGenericSend+0x3e>
 80052b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d101      	bne.n	80052c2 <xQueueGenericSend+0x42>
 80052be:	2301      	movs	r3, #1
 80052c0:	e000      	b.n	80052c4 <xQueueGenericSend+0x44>
 80052c2:	2300      	movs	r3, #0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d109      	bne.n	80052dc <xQueueGenericSend+0x5c>
 80052c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052cc:	f383 8811 	msr	BASEPRI, r3
 80052d0:	f3bf 8f6f 	isb	sy
 80052d4:	f3bf 8f4f 	dsb	sy
 80052d8:	627b      	str	r3, [r7, #36]	; 0x24
 80052da:	e7fe      	b.n	80052da <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d103      	bne.n	80052ea <xQueueGenericSend+0x6a>
 80052e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d101      	bne.n	80052ee <xQueueGenericSend+0x6e>
 80052ea:	2301      	movs	r3, #1
 80052ec:	e000      	b.n	80052f0 <xQueueGenericSend+0x70>
 80052ee:	2300      	movs	r3, #0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d109      	bne.n	8005308 <xQueueGenericSend+0x88>
 80052f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f8:	f383 8811 	msr	BASEPRI, r3
 80052fc:	f3bf 8f6f 	isb	sy
 8005300:	f3bf 8f4f 	dsb	sy
 8005304:	623b      	str	r3, [r7, #32]
 8005306:	e7fe      	b.n	8005306 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005308:	f001 f998 	bl	800663c <xTaskGetSchedulerState>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d102      	bne.n	8005318 <xQueueGenericSend+0x98>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d101      	bne.n	800531c <xQueueGenericSend+0x9c>
 8005318:	2301      	movs	r3, #1
 800531a:	e000      	b.n	800531e <xQueueGenericSend+0x9e>
 800531c:	2300      	movs	r3, #0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d109      	bne.n	8005336 <xQueueGenericSend+0xb6>
 8005322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005326:	f383 8811 	msr	BASEPRI, r3
 800532a:	f3bf 8f6f 	isb	sy
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	61fb      	str	r3, [r7, #28]
 8005334:	e7fe      	b.n	8005334 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005336:	f001 fec9 	bl	80070cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800533a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800533e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005342:	429a      	cmp	r2, r3
 8005344:	d302      	bcc.n	800534c <xQueueGenericSend+0xcc>
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	2b02      	cmp	r3, #2
 800534a:	d129      	bne.n	80053a0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800534c:	683a      	ldr	r2, [r7, #0]
 800534e:	68b9      	ldr	r1, [r7, #8]
 8005350:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005352:	f000 f9ff 	bl	8005754 <prvCopyDataToQueue>
 8005356:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535c:	2b00      	cmp	r3, #0
 800535e:	d010      	beq.n	8005382 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005362:	3324      	adds	r3, #36	; 0x24
 8005364:	4618      	mov	r0, r3
 8005366:	f000 ffb3 	bl	80062d0 <xTaskRemoveFromEventList>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d013      	beq.n	8005398 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005370:	4b3f      	ldr	r3, [pc, #252]	; (8005470 <xQueueGenericSend+0x1f0>)
 8005372:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005376:	601a      	str	r2, [r3, #0]
 8005378:	f3bf 8f4f 	dsb	sy
 800537c:	f3bf 8f6f 	isb	sy
 8005380:	e00a      	b.n	8005398 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005384:	2b00      	cmp	r3, #0
 8005386:	d007      	beq.n	8005398 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005388:	4b39      	ldr	r3, [pc, #228]	; (8005470 <xQueueGenericSend+0x1f0>)
 800538a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800538e:	601a      	str	r2, [r3, #0]
 8005390:	f3bf 8f4f 	dsb	sy
 8005394:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005398:	f001 fec6 	bl	8007128 <vPortExitCritical>
				return pdPASS;
 800539c:	2301      	movs	r3, #1
 800539e:	e063      	b.n	8005468 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d103      	bne.n	80053ae <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80053a6:	f001 febf 	bl	8007128 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80053aa:	2300      	movs	r3, #0
 80053ac:	e05c      	b.n	8005468 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80053ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d106      	bne.n	80053c2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80053b4:	f107 0314 	add.w	r3, r7, #20
 80053b8:	4618      	mov	r0, r3
 80053ba:	f000 ffeb 	bl	8006394 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80053be:	2301      	movs	r3, #1
 80053c0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80053c2:	f001 feb1 	bl	8007128 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80053c6:	f000 fd67 	bl	8005e98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80053ca:	f001 fe7f 	bl	80070cc <vPortEnterCritical>
 80053ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053d4:	b25b      	sxtb	r3, r3
 80053d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053da:	d103      	bne.n	80053e4 <xQueueGenericSend+0x164>
 80053dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053ea:	b25b      	sxtb	r3, r3
 80053ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f0:	d103      	bne.n	80053fa <xQueueGenericSend+0x17a>
 80053f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053fa:	f001 fe95 	bl	8007128 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053fe:	1d3a      	adds	r2, r7, #4
 8005400:	f107 0314 	add.w	r3, r7, #20
 8005404:	4611      	mov	r1, r2
 8005406:	4618      	mov	r0, r3
 8005408:	f000 ffda 	bl	80063c0 <xTaskCheckForTimeOut>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d124      	bne.n	800545c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005412:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005414:	f000 fa96 	bl	8005944 <prvIsQueueFull>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d018      	beq.n	8005450 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800541e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005420:	3310      	adds	r3, #16
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	4611      	mov	r1, r2
 8005426:	4618      	mov	r0, r3
 8005428:	f000 ff04 	bl	8006234 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800542c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800542e:	f000 fa21 	bl	8005874 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005432:	f000 fd3f 	bl	8005eb4 <xTaskResumeAll>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	f47f af7c 	bne.w	8005336 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800543e:	4b0c      	ldr	r3, [pc, #48]	; (8005470 <xQueueGenericSend+0x1f0>)
 8005440:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005444:	601a      	str	r2, [r3, #0]
 8005446:	f3bf 8f4f 	dsb	sy
 800544a:	f3bf 8f6f 	isb	sy
 800544e:	e772      	b.n	8005336 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005450:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005452:	f000 fa0f 	bl	8005874 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005456:	f000 fd2d 	bl	8005eb4 <xTaskResumeAll>
 800545a:	e76c      	b.n	8005336 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800545c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800545e:	f000 fa09 	bl	8005874 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005462:	f000 fd27 	bl	8005eb4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005466:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005468:	4618      	mov	r0, r3
 800546a:	3738      	adds	r7, #56	; 0x38
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	e000ed04 	.word	0xe000ed04

08005474 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b08e      	sub	sp, #56	; 0x38
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
 8005480:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005488:	2b00      	cmp	r3, #0
 800548a:	d109      	bne.n	80054a0 <xQueueGenericSendFromISR+0x2c>
 800548c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005490:	f383 8811 	msr	BASEPRI, r3
 8005494:	f3bf 8f6f 	isb	sy
 8005498:	f3bf 8f4f 	dsb	sy
 800549c:	627b      	str	r3, [r7, #36]	; 0x24
 800549e:	e7fe      	b.n	800549e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d103      	bne.n	80054ae <xQueueGenericSendFromISR+0x3a>
 80054a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <xQueueGenericSendFromISR+0x3e>
 80054ae:	2301      	movs	r3, #1
 80054b0:	e000      	b.n	80054b4 <xQueueGenericSendFromISR+0x40>
 80054b2:	2300      	movs	r3, #0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d109      	bne.n	80054cc <xQueueGenericSendFromISR+0x58>
 80054b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054bc:	f383 8811 	msr	BASEPRI, r3
 80054c0:	f3bf 8f6f 	isb	sy
 80054c4:	f3bf 8f4f 	dsb	sy
 80054c8:	623b      	str	r3, [r7, #32]
 80054ca:	e7fe      	b.n	80054ca <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d103      	bne.n	80054da <xQueueGenericSendFromISR+0x66>
 80054d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d101      	bne.n	80054de <xQueueGenericSendFromISR+0x6a>
 80054da:	2301      	movs	r3, #1
 80054dc:	e000      	b.n	80054e0 <xQueueGenericSendFromISR+0x6c>
 80054de:	2300      	movs	r3, #0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d109      	bne.n	80054f8 <xQueueGenericSendFromISR+0x84>
 80054e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e8:	f383 8811 	msr	BASEPRI, r3
 80054ec:	f3bf 8f6f 	isb	sy
 80054f0:	f3bf 8f4f 	dsb	sy
 80054f4:	61fb      	str	r3, [r7, #28]
 80054f6:	e7fe      	b.n	80054f6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80054f8:	f001 fec4 	bl	8007284 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80054fc:	f3ef 8211 	mrs	r2, BASEPRI
 8005500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005504:	f383 8811 	msr	BASEPRI, r3
 8005508:	f3bf 8f6f 	isb	sy
 800550c:	f3bf 8f4f 	dsb	sy
 8005510:	61ba      	str	r2, [r7, #24]
 8005512:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005514:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005516:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800551c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005520:	429a      	cmp	r2, r3
 8005522:	d302      	bcc.n	800552a <xQueueGenericSendFromISR+0xb6>
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	2b02      	cmp	r3, #2
 8005528:	d12c      	bne.n	8005584 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800552a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005530:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005534:	683a      	ldr	r2, [r7, #0]
 8005536:	68b9      	ldr	r1, [r7, #8]
 8005538:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800553a:	f000 f90b 	bl	8005754 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800553e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005546:	d112      	bne.n	800556e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554c:	2b00      	cmp	r3, #0
 800554e:	d016      	beq.n	800557e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005552:	3324      	adds	r3, #36	; 0x24
 8005554:	4618      	mov	r0, r3
 8005556:	f000 febb 	bl	80062d0 <xTaskRemoveFromEventList>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00e      	beq.n	800557e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00b      	beq.n	800557e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	601a      	str	r2, [r3, #0]
 800556c:	e007      	b.n	800557e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800556e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005572:	3301      	adds	r3, #1
 8005574:	b2db      	uxtb	r3, r3
 8005576:	b25a      	sxtb	r2, r3
 8005578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800557e:	2301      	movs	r3, #1
 8005580:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005582:	e001      	b.n	8005588 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005584:	2300      	movs	r3, #0
 8005586:	637b      	str	r3, [r7, #52]	; 0x34
 8005588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800558a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005594:	4618      	mov	r0, r3
 8005596:	3738      	adds	r7, #56	; 0x38
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b08c      	sub	sp, #48	; 0x30
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80055a8:	2300      	movs	r3, #0
 80055aa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80055b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d109      	bne.n	80055ca <xQueueReceive+0x2e>
	__asm volatile
 80055b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ba:	f383 8811 	msr	BASEPRI, r3
 80055be:	f3bf 8f6f 	isb	sy
 80055c2:	f3bf 8f4f 	dsb	sy
 80055c6:	623b      	str	r3, [r7, #32]
 80055c8:	e7fe      	b.n	80055c8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d103      	bne.n	80055d8 <xQueueReceive+0x3c>
 80055d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d101      	bne.n	80055dc <xQueueReceive+0x40>
 80055d8:	2301      	movs	r3, #1
 80055da:	e000      	b.n	80055de <xQueueReceive+0x42>
 80055dc:	2300      	movs	r3, #0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d109      	bne.n	80055f6 <xQueueReceive+0x5a>
 80055e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e6:	f383 8811 	msr	BASEPRI, r3
 80055ea:	f3bf 8f6f 	isb	sy
 80055ee:	f3bf 8f4f 	dsb	sy
 80055f2:	61fb      	str	r3, [r7, #28]
 80055f4:	e7fe      	b.n	80055f4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055f6:	f001 f821 	bl	800663c <xTaskGetSchedulerState>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d102      	bne.n	8005606 <xQueueReceive+0x6a>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <xQueueReceive+0x6e>
 8005606:	2301      	movs	r3, #1
 8005608:	e000      	b.n	800560c <xQueueReceive+0x70>
 800560a:	2300      	movs	r3, #0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d109      	bne.n	8005624 <xQueueReceive+0x88>
 8005610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005614:	f383 8811 	msr	BASEPRI, r3
 8005618:	f3bf 8f6f 	isb	sy
 800561c:	f3bf 8f4f 	dsb	sy
 8005620:	61bb      	str	r3, [r7, #24]
 8005622:	e7fe      	b.n	8005622 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005624:	f001 fd52 	bl	80070cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800562e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005630:	2b00      	cmp	r3, #0
 8005632:	d01f      	beq.n	8005674 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005634:	68b9      	ldr	r1, [r7, #8]
 8005636:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005638:	f000 f8f6 	bl	8005828 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800563c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563e:	1e5a      	subs	r2, r3, #1
 8005640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005642:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00f      	beq.n	800566c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800564c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564e:	3310      	adds	r3, #16
 8005650:	4618      	mov	r0, r3
 8005652:	f000 fe3d 	bl	80062d0 <xTaskRemoveFromEventList>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d007      	beq.n	800566c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800565c:	4b3c      	ldr	r3, [pc, #240]	; (8005750 <xQueueReceive+0x1b4>)
 800565e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005662:	601a      	str	r2, [r3, #0]
 8005664:	f3bf 8f4f 	dsb	sy
 8005668:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800566c:	f001 fd5c 	bl	8007128 <vPortExitCritical>
				return pdPASS;
 8005670:	2301      	movs	r3, #1
 8005672:	e069      	b.n	8005748 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d103      	bne.n	8005682 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800567a:	f001 fd55 	bl	8007128 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800567e:	2300      	movs	r3, #0
 8005680:	e062      	b.n	8005748 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005684:	2b00      	cmp	r3, #0
 8005686:	d106      	bne.n	8005696 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005688:	f107 0310 	add.w	r3, r7, #16
 800568c:	4618      	mov	r0, r3
 800568e:	f000 fe81 	bl	8006394 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005692:	2301      	movs	r3, #1
 8005694:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005696:	f001 fd47 	bl	8007128 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800569a:	f000 fbfd 	bl	8005e98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800569e:	f001 fd15 	bl	80070cc <vPortEnterCritical>
 80056a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056a8:	b25b      	sxtb	r3, r3
 80056aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ae:	d103      	bne.n	80056b8 <xQueueReceive+0x11c>
 80056b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056be:	b25b      	sxtb	r3, r3
 80056c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c4:	d103      	bne.n	80056ce <xQueueReceive+0x132>
 80056c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056ce:	f001 fd2b 	bl	8007128 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056d2:	1d3a      	adds	r2, r7, #4
 80056d4:	f107 0310 	add.w	r3, r7, #16
 80056d8:	4611      	mov	r1, r2
 80056da:	4618      	mov	r0, r3
 80056dc:	f000 fe70 	bl	80063c0 <xTaskCheckForTimeOut>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d123      	bne.n	800572e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056e8:	f000 f916 	bl	8005918 <prvIsQueueEmpty>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d017      	beq.n	8005722 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80056f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f4:	3324      	adds	r3, #36	; 0x24
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	4611      	mov	r1, r2
 80056fa:	4618      	mov	r0, r3
 80056fc:	f000 fd9a 	bl	8006234 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005700:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005702:	f000 f8b7 	bl	8005874 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005706:	f000 fbd5 	bl	8005eb4 <xTaskResumeAll>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d189      	bne.n	8005624 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005710:	4b0f      	ldr	r3, [pc, #60]	; (8005750 <xQueueReceive+0x1b4>)
 8005712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005716:	601a      	str	r2, [r3, #0]
 8005718:	f3bf 8f4f 	dsb	sy
 800571c:	f3bf 8f6f 	isb	sy
 8005720:	e780      	b.n	8005624 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005722:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005724:	f000 f8a6 	bl	8005874 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005728:	f000 fbc4 	bl	8005eb4 <xTaskResumeAll>
 800572c:	e77a      	b.n	8005624 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800572e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005730:	f000 f8a0 	bl	8005874 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005734:	f000 fbbe 	bl	8005eb4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005738:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800573a:	f000 f8ed 	bl	8005918 <prvIsQueueEmpty>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	f43f af6f 	beq.w	8005624 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005746:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005748:	4618      	mov	r0, r3
 800574a:	3730      	adds	r7, #48	; 0x30
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	e000ed04 	.word	0xe000ed04

08005754 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b086      	sub	sp, #24
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005760:	2300      	movs	r3, #0
 8005762:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005768:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10d      	bne.n	800578e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d14d      	bne.n	8005816 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	4618      	mov	r0, r3
 8005780:	f000 ff7a 	bl	8006678 <xTaskPriorityDisinherit>
 8005784:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	609a      	str	r2, [r3, #8]
 800578c:	e043      	b.n	8005816 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d119      	bne.n	80057c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6858      	ldr	r0, [r3, #4]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579c:	461a      	mov	r2, r3
 800579e:	68b9      	ldr	r1, [r7, #8]
 80057a0:	f002 fa68 	bl	8007c74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	685a      	ldr	r2, [r3, #4]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ac:	441a      	add	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	685a      	ldr	r2, [r3, #4]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d32b      	bcc.n	8005816 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	605a      	str	r2, [r3, #4]
 80057c6:	e026      	b.n	8005816 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	68d8      	ldr	r0, [r3, #12]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d0:	461a      	mov	r2, r3
 80057d2:	68b9      	ldr	r1, [r7, #8]
 80057d4:	f002 fa4e 	bl	8007c74 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	68da      	ldr	r2, [r3, #12]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e0:	425b      	negs	r3, r3
 80057e2:	441a      	add	r2, r3
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	68da      	ldr	r2, [r3, #12]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d207      	bcs.n	8005804 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	689a      	ldr	r2, [r3, #8]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fc:	425b      	negs	r3, r3
 80057fe:	441a      	add	r2, r3
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b02      	cmp	r3, #2
 8005808:	d105      	bne.n	8005816 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d002      	beq.n	8005816 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	3b01      	subs	r3, #1
 8005814:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	1c5a      	adds	r2, r3, #1
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800581e:	697b      	ldr	r3, [r7, #20]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3718      	adds	r7, #24
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005836:	2b00      	cmp	r3, #0
 8005838:	d018      	beq.n	800586c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68da      	ldr	r2, [r3, #12]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005842:	441a      	add	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	68da      	ldr	r2, [r3, #12]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	429a      	cmp	r2, r3
 8005852:	d303      	bcc.n	800585c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	68d9      	ldr	r1, [r3, #12]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005864:	461a      	mov	r2, r3
 8005866:	6838      	ldr	r0, [r7, #0]
 8005868:	f002 fa04 	bl	8007c74 <memcpy>
	}
}
 800586c:	bf00      	nop
 800586e:	3708      	adds	r7, #8
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800587c:	f001 fc26 	bl	80070cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005886:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005888:	e011      	b.n	80058ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588e:	2b00      	cmp	r3, #0
 8005890:	d012      	beq.n	80058b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	3324      	adds	r3, #36	; 0x24
 8005896:	4618      	mov	r0, r3
 8005898:	f000 fd1a 	bl	80062d0 <xTaskRemoveFromEventList>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80058a2:	f000 fded 	bl	8006480 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80058a6:	7bfb      	ldrb	r3, [r7, #15]
 80058a8:	3b01      	subs	r3, #1
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	dce9      	bgt.n	800588a <prvUnlockQueue+0x16>
 80058b6:	e000      	b.n	80058ba <prvUnlockQueue+0x46>
					break;
 80058b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	22ff      	movs	r2, #255	; 0xff
 80058be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80058c2:	f001 fc31 	bl	8007128 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80058c6:	f001 fc01 	bl	80070cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058d2:	e011      	b.n	80058f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d012      	beq.n	8005902 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	3310      	adds	r3, #16
 80058e0:	4618      	mov	r0, r3
 80058e2:	f000 fcf5 	bl	80062d0 <xTaskRemoveFromEventList>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d001      	beq.n	80058f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80058ec:	f000 fdc8 	bl	8006480 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80058f0:	7bbb      	ldrb	r3, [r7, #14]
 80058f2:	3b01      	subs	r3, #1
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	dce9      	bgt.n	80058d4 <prvUnlockQueue+0x60>
 8005900:	e000      	b.n	8005904 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005902:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	22ff      	movs	r2, #255	; 0xff
 8005908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800590c:	f001 fc0c 	bl	8007128 <vPortExitCritical>
}
 8005910:	bf00      	nop
 8005912:	3710      	adds	r7, #16
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005920:	f001 fbd4 	bl	80070cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005928:	2b00      	cmp	r3, #0
 800592a:	d102      	bne.n	8005932 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800592c:	2301      	movs	r3, #1
 800592e:	60fb      	str	r3, [r7, #12]
 8005930:	e001      	b.n	8005936 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005932:	2300      	movs	r3, #0
 8005934:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005936:	f001 fbf7 	bl	8007128 <vPortExitCritical>

	return xReturn;
 800593a:	68fb      	ldr	r3, [r7, #12]
}
 800593c:	4618      	mov	r0, r3
 800593e:	3710      	adds	r7, #16
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800594c:	f001 fbbe 	bl	80070cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005958:	429a      	cmp	r2, r3
 800595a:	d102      	bne.n	8005962 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800595c:	2301      	movs	r3, #1
 800595e:	60fb      	str	r3, [r7, #12]
 8005960:	e001      	b.n	8005966 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005962:	2300      	movs	r3, #0
 8005964:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005966:	f001 fbdf 	bl	8007128 <vPortExitCritical>

	return xReturn;
 800596a:	68fb      	ldr	r3, [r7, #12]
}
 800596c:	4618      	mov	r0, r3
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800597e:	2300      	movs	r3, #0
 8005980:	60fb      	str	r3, [r7, #12]
 8005982:	e014      	b.n	80059ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005984:	4a0e      	ldr	r2, [pc, #56]	; (80059c0 <vQueueAddToRegistry+0x4c>)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10b      	bne.n	80059a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005990:	490b      	ldr	r1, [pc, #44]	; (80059c0 <vQueueAddToRegistry+0x4c>)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	683a      	ldr	r2, [r7, #0]
 8005996:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800599a:	4a09      	ldr	r2, [pc, #36]	; (80059c0 <vQueueAddToRegistry+0x4c>)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	00db      	lsls	r3, r3, #3
 80059a0:	4413      	add	r3, r2
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80059a6:	e005      	b.n	80059b4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	3301      	adds	r3, #1
 80059ac:	60fb      	str	r3, [r7, #12]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2b07      	cmp	r3, #7
 80059b2:	d9e7      	bls.n	8005984 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80059b4:	bf00      	nop
 80059b6:	3714      	adds	r7, #20
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr
 80059c0:	20004bd4 	.word	0x20004bd4

080059c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80059d4:	f001 fb7a 	bl	80070cc <vPortEnterCritical>
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059de:	b25b      	sxtb	r3, r3
 80059e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e4:	d103      	bne.n	80059ee <vQueueWaitForMessageRestricted+0x2a>
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059f4:	b25b      	sxtb	r3, r3
 80059f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059fa:	d103      	bne.n	8005a04 <vQueueWaitForMessageRestricted+0x40>
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a04:	f001 fb90 	bl	8007128 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d106      	bne.n	8005a1e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	3324      	adds	r3, #36	; 0x24
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	68b9      	ldr	r1, [r7, #8]
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f000 fc2f 	bl	800627c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005a1e:	6978      	ldr	r0, [r7, #20]
 8005a20:	f7ff ff28 	bl	8005874 <prvUnlockQueue>
	}
 8005a24:	bf00      	nop
 8005a26:	3718      	adds	r7, #24
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b08e      	sub	sp, #56	; 0x38
 8005a30:	af04      	add	r7, sp, #16
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
 8005a38:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d109      	bne.n	8005a54 <xTaskCreateStatic+0x28>
 8005a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a44:	f383 8811 	msr	BASEPRI, r3
 8005a48:	f3bf 8f6f 	isb	sy
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	623b      	str	r3, [r7, #32]
 8005a52:	e7fe      	b.n	8005a52 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d109      	bne.n	8005a6e <xTaskCreateStatic+0x42>
 8005a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5e:	f383 8811 	msr	BASEPRI, r3
 8005a62:	f3bf 8f6f 	isb	sy
 8005a66:	f3bf 8f4f 	dsb	sy
 8005a6a:	61fb      	str	r3, [r7, #28]
 8005a6c:	e7fe      	b.n	8005a6c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005a6e:	235c      	movs	r3, #92	; 0x5c
 8005a70:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	2b5c      	cmp	r3, #92	; 0x5c
 8005a76:	d009      	beq.n	8005a8c <xTaskCreateStatic+0x60>
 8005a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7c:	f383 8811 	msr	BASEPRI, r3
 8005a80:	f3bf 8f6f 	isb	sy
 8005a84:	f3bf 8f4f 	dsb	sy
 8005a88:	61bb      	str	r3, [r7, #24]
 8005a8a:	e7fe      	b.n	8005a8a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005a8c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d01e      	beq.n	8005ad2 <xTaskCreateStatic+0xa6>
 8005a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d01b      	beq.n	8005ad2 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a9c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005aa2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005aac:	2300      	movs	r3, #0
 8005aae:	9303      	str	r3, [sp, #12]
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab2:	9302      	str	r3, [sp, #8]
 8005ab4:	f107 0314 	add.w	r3, r7, #20
 8005ab8:	9301      	str	r3, [sp, #4]
 8005aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005abc:	9300      	str	r3, [sp, #0]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	68b9      	ldr	r1, [r7, #8]
 8005ac4:	68f8      	ldr	r0, [r7, #12]
 8005ac6:	f000 f850 	bl	8005b6a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005aca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005acc:	f000 f8dc 	bl	8005c88 <prvAddNewTaskToReadyList>
 8005ad0:	e001      	b.n	8005ad6 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005ad6:	697b      	ldr	r3, [r7, #20]
	}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3728      	adds	r7, #40	; 0x28
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b08c      	sub	sp, #48	; 0x30
 8005ae4:	af04      	add	r7, sp, #16
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	603b      	str	r3, [r7, #0]
 8005aec:	4613      	mov	r3, r2
 8005aee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005af0:	88fb      	ldrh	r3, [r7, #6]
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	4618      	mov	r0, r3
 8005af6:	f001 fc03 	bl	8007300 <pvPortMalloc>
 8005afa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00e      	beq.n	8005b20 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005b02:	205c      	movs	r0, #92	; 0x5c
 8005b04:	f001 fbfc 	bl	8007300 <pvPortMalloc>
 8005b08:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d003      	beq.n	8005b18 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	631a      	str	r2, [r3, #48]	; 0x30
 8005b16:	e005      	b.n	8005b24 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005b18:	6978      	ldr	r0, [r7, #20]
 8005b1a:	f001 fcb3 	bl	8007484 <vPortFree>
 8005b1e:	e001      	b.n	8005b24 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005b20:	2300      	movs	r3, #0
 8005b22:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d017      	beq.n	8005b5a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005b32:	88fa      	ldrh	r2, [r7, #6]
 8005b34:	2300      	movs	r3, #0
 8005b36:	9303      	str	r3, [sp, #12]
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	9302      	str	r3, [sp, #8]
 8005b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3e:	9301      	str	r3, [sp, #4]
 8005b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b42:	9300      	str	r3, [sp, #0]
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	68b9      	ldr	r1, [r7, #8]
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f000 f80e 	bl	8005b6a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b4e:	69f8      	ldr	r0, [r7, #28]
 8005b50:	f000 f89a 	bl	8005c88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005b54:	2301      	movs	r3, #1
 8005b56:	61bb      	str	r3, [r7, #24]
 8005b58:	e002      	b.n	8005b60 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b5e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005b60:	69bb      	ldr	r3, [r7, #24]
	}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3720      	adds	r7, #32
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b088      	sub	sp, #32
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	60f8      	str	r0, [r7, #12]
 8005b72:	60b9      	str	r1, [r7, #8]
 8005b74:	607a      	str	r2, [r7, #4]
 8005b76:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	461a      	mov	r2, r3
 8005b82:	21a5      	movs	r1, #165	; 0xa5
 8005b84:	f002 f881 	bl	8007c8a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005b92:	3b01      	subs	r3, #1
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	4413      	add	r3, r2
 8005b98:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	f023 0307 	bic.w	r3, r3, #7
 8005ba0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	f003 0307 	and.w	r3, r3, #7
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d009      	beq.n	8005bc0 <prvInitialiseNewTask+0x56>
 8005bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb0:	f383 8811 	msr	BASEPRI, r3
 8005bb4:	f3bf 8f6f 	isb	sy
 8005bb8:	f3bf 8f4f 	dsb	sy
 8005bbc:	617b      	str	r3, [r7, #20]
 8005bbe:	e7fe      	b.n	8005bbe <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d01f      	beq.n	8005c06 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	61fb      	str	r3, [r7, #28]
 8005bca:	e012      	b.n	8005bf2 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005bcc:	68ba      	ldr	r2, [r7, #8]
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	7819      	ldrb	r1, [r3, #0]
 8005bd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	4413      	add	r3, r2
 8005bda:	3334      	adds	r3, #52	; 0x34
 8005bdc:	460a      	mov	r2, r1
 8005bde:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	4413      	add	r3, r2
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d006      	beq.n	8005bfa <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	61fb      	str	r3, [r7, #28]
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	2b0f      	cmp	r3, #15
 8005bf6:	d9e9      	bls.n	8005bcc <prvInitialiseNewTask+0x62>
 8005bf8:	e000      	b.n	8005bfc <prvInitialiseNewTask+0x92>
			{
				break;
 8005bfa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c04:	e003      	b.n	8005c0e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c10:	2b37      	cmp	r3, #55	; 0x37
 8005c12:	d901      	bls.n	8005c18 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005c14:	2337      	movs	r3, #55	; 0x37
 8005c16:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c1c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c22:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c26:	2200      	movs	r2, #0
 8005c28:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2c:	3304      	adds	r3, #4
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7ff f994 	bl	8004f5c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c36:	3318      	adds	r3, #24
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f7ff f98f 	bl	8004f5c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c42:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c46:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c52:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c56:	2200      	movs	r2, #0
 8005c58:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005c62:	683a      	ldr	r2, [r7, #0]
 8005c64:	68f9      	ldr	r1, [r7, #12]
 8005c66:	69b8      	ldr	r0, [r7, #24]
 8005c68:	f001 f90c 	bl	8006e84 <pxPortInitialiseStack>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c70:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d002      	beq.n	8005c7e <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c7e:	bf00      	nop
 8005c80:	3720      	adds	r7, #32
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
	...

08005c88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005c90:	f001 fa1c 	bl	80070cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005c94:	4b2d      	ldr	r3, [pc, #180]	; (8005d4c <prvAddNewTaskToReadyList+0xc4>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	4a2c      	ldr	r2, [pc, #176]	; (8005d4c <prvAddNewTaskToReadyList+0xc4>)
 8005c9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005c9e:	4b2c      	ldr	r3, [pc, #176]	; (8005d50 <prvAddNewTaskToReadyList+0xc8>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d109      	bne.n	8005cba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005ca6:	4a2a      	ldr	r2, [pc, #168]	; (8005d50 <prvAddNewTaskToReadyList+0xc8>)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005cac:	4b27      	ldr	r3, [pc, #156]	; (8005d4c <prvAddNewTaskToReadyList+0xc4>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d110      	bne.n	8005cd6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005cb4:	f000 fc08 	bl	80064c8 <prvInitialiseTaskLists>
 8005cb8:	e00d      	b.n	8005cd6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005cba:	4b26      	ldr	r3, [pc, #152]	; (8005d54 <prvAddNewTaskToReadyList+0xcc>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d109      	bne.n	8005cd6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005cc2:	4b23      	ldr	r3, [pc, #140]	; (8005d50 <prvAddNewTaskToReadyList+0xc8>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d802      	bhi.n	8005cd6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005cd0:	4a1f      	ldr	r2, [pc, #124]	; (8005d50 <prvAddNewTaskToReadyList+0xc8>)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005cd6:	4b20      	ldr	r3, [pc, #128]	; (8005d58 <prvAddNewTaskToReadyList+0xd0>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	3301      	adds	r3, #1
 8005cdc:	4a1e      	ldr	r2, [pc, #120]	; (8005d58 <prvAddNewTaskToReadyList+0xd0>)
 8005cde:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005ce0:	4b1d      	ldr	r3, [pc, #116]	; (8005d58 <prvAddNewTaskToReadyList+0xd0>)
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cec:	4b1b      	ldr	r3, [pc, #108]	; (8005d5c <prvAddNewTaskToReadyList+0xd4>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d903      	bls.n	8005cfc <prvAddNewTaskToReadyList+0x74>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf8:	4a18      	ldr	r2, [pc, #96]	; (8005d5c <prvAddNewTaskToReadyList+0xd4>)
 8005cfa:	6013      	str	r3, [r2, #0]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d00:	4613      	mov	r3, r2
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	4413      	add	r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4a15      	ldr	r2, [pc, #84]	; (8005d60 <prvAddNewTaskToReadyList+0xd8>)
 8005d0a:	441a      	add	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	3304      	adds	r3, #4
 8005d10:	4619      	mov	r1, r3
 8005d12:	4610      	mov	r0, r2
 8005d14:	f7ff f92f 	bl	8004f76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005d18:	f001 fa06 	bl	8007128 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005d1c:	4b0d      	ldr	r3, [pc, #52]	; (8005d54 <prvAddNewTaskToReadyList+0xcc>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00e      	beq.n	8005d42 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005d24:	4b0a      	ldr	r3, [pc, #40]	; (8005d50 <prvAddNewTaskToReadyList+0xc8>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d207      	bcs.n	8005d42 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005d32:	4b0c      	ldr	r3, [pc, #48]	; (8005d64 <prvAddNewTaskToReadyList+0xdc>)
 8005d34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d38:	601a      	str	r2, [r3, #0]
 8005d3a:	f3bf 8f4f 	dsb	sy
 8005d3e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d42:	bf00      	nop
 8005d44:	3708      	adds	r7, #8
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	20000d8c 	.word	0x20000d8c
 8005d50:	200008b8 	.word	0x200008b8
 8005d54:	20000d98 	.word	0x20000d98
 8005d58:	20000da8 	.word	0x20000da8
 8005d5c:	20000d94 	.word	0x20000d94
 8005d60:	200008bc 	.word	0x200008bc
 8005d64:	e000ed04 	.word	0xe000ed04

08005d68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005d70:	2300      	movs	r3, #0
 8005d72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d016      	beq.n	8005da8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005d7a:	4b13      	ldr	r3, [pc, #76]	; (8005dc8 <vTaskDelay+0x60>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d009      	beq.n	8005d96 <vTaskDelay+0x2e>
 8005d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d86:	f383 8811 	msr	BASEPRI, r3
 8005d8a:	f3bf 8f6f 	isb	sy
 8005d8e:	f3bf 8f4f 	dsb	sy
 8005d92:	60bb      	str	r3, [r7, #8]
 8005d94:	e7fe      	b.n	8005d94 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005d96:	f000 f87f 	bl	8005e98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005d9a:	2100      	movs	r1, #0
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 fcd7 	bl	8006750 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005da2:	f000 f887 	bl	8005eb4 <xTaskResumeAll>
 8005da6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d107      	bne.n	8005dbe <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005dae:	4b07      	ldr	r3, [pc, #28]	; (8005dcc <vTaskDelay+0x64>)
 8005db0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005db4:	601a      	str	r2, [r3, #0]
 8005db6:	f3bf 8f4f 	dsb	sy
 8005dba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005dbe:	bf00      	nop
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	20000db4 	.word	0x20000db4
 8005dcc:	e000ed04 	.word	0xe000ed04

08005dd0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b08a      	sub	sp, #40	; 0x28
 8005dd4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005dde:	463a      	mov	r2, r7
 8005de0:	1d39      	adds	r1, r7, #4
 8005de2:	f107 0308 	add.w	r3, r7, #8
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7ff f864 	bl	8004eb4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005dec:	6839      	ldr	r1, [r7, #0]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	68ba      	ldr	r2, [r7, #8]
 8005df2:	9202      	str	r2, [sp, #8]
 8005df4:	9301      	str	r3, [sp, #4]
 8005df6:	2300      	movs	r3, #0
 8005df8:	9300      	str	r3, [sp, #0]
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	460a      	mov	r2, r1
 8005dfe:	4920      	ldr	r1, [pc, #128]	; (8005e80 <vTaskStartScheduler+0xb0>)
 8005e00:	4820      	ldr	r0, [pc, #128]	; (8005e84 <vTaskStartScheduler+0xb4>)
 8005e02:	f7ff fe13 	bl	8005a2c <xTaskCreateStatic>
 8005e06:	4602      	mov	r2, r0
 8005e08:	4b1f      	ldr	r3, [pc, #124]	; (8005e88 <vTaskStartScheduler+0xb8>)
 8005e0a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005e0c:	4b1e      	ldr	r3, [pc, #120]	; (8005e88 <vTaskStartScheduler+0xb8>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d002      	beq.n	8005e1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005e14:	2301      	movs	r3, #1
 8005e16:	617b      	str	r3, [r7, #20]
 8005e18:	e001      	b.n	8005e1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d102      	bne.n	8005e2a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005e24:	f000 fce8 	bl	80067f8 <xTimerCreateTimerTask>
 8005e28:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d115      	bne.n	8005e5c <vTaskStartScheduler+0x8c>
 8005e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e34:	f383 8811 	msr	BASEPRI, r3
 8005e38:	f3bf 8f6f 	isb	sy
 8005e3c:	f3bf 8f4f 	dsb	sy
 8005e40:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005e42:	4b12      	ldr	r3, [pc, #72]	; (8005e8c <vTaskStartScheduler+0xbc>)
 8005e44:	f04f 32ff 	mov.w	r2, #4294967295
 8005e48:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005e4a:	4b11      	ldr	r3, [pc, #68]	; (8005e90 <vTaskStartScheduler+0xc0>)
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005e50:	4b10      	ldr	r3, [pc, #64]	; (8005e94 <vTaskStartScheduler+0xc4>)
 8005e52:	2200      	movs	r2, #0
 8005e54:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005e56:	f001 f89b 	bl	8006f90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005e5a:	e00d      	b.n	8005e78 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e62:	d109      	bne.n	8005e78 <vTaskStartScheduler+0xa8>
 8005e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e68:	f383 8811 	msr	BASEPRI, r3
 8005e6c:	f3bf 8f6f 	isb	sy
 8005e70:	f3bf 8f4f 	dsb	sy
 8005e74:	60fb      	str	r3, [r7, #12]
 8005e76:	e7fe      	b.n	8005e76 <vTaskStartScheduler+0xa6>
}
 8005e78:	bf00      	nop
 8005e7a:	3718      	adds	r7, #24
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	08007e34 	.word	0x08007e34
 8005e84:	08006499 	.word	0x08006499
 8005e88:	20000db0 	.word	0x20000db0
 8005e8c:	20000dac 	.word	0x20000dac
 8005e90:	20000d98 	.word	0x20000d98
 8005e94:	20000d90 	.word	0x20000d90

08005e98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005e98:	b480      	push	{r7}
 8005e9a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005e9c:	4b04      	ldr	r3, [pc, #16]	; (8005eb0 <vTaskSuspendAll+0x18>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	4a03      	ldr	r2, [pc, #12]	; (8005eb0 <vTaskSuspendAll+0x18>)
 8005ea4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005ea6:	bf00      	nop
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr
 8005eb0:	20000db4 	.word	0x20000db4

08005eb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005ec2:	4b41      	ldr	r3, [pc, #260]	; (8005fc8 <xTaskResumeAll+0x114>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d109      	bne.n	8005ede <xTaskResumeAll+0x2a>
 8005eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ece:	f383 8811 	msr	BASEPRI, r3
 8005ed2:	f3bf 8f6f 	isb	sy
 8005ed6:	f3bf 8f4f 	dsb	sy
 8005eda:	603b      	str	r3, [r7, #0]
 8005edc:	e7fe      	b.n	8005edc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005ede:	f001 f8f5 	bl	80070cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005ee2:	4b39      	ldr	r3, [pc, #228]	; (8005fc8 <xTaskResumeAll+0x114>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	4a37      	ldr	r2, [pc, #220]	; (8005fc8 <xTaskResumeAll+0x114>)
 8005eea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005eec:	4b36      	ldr	r3, [pc, #216]	; (8005fc8 <xTaskResumeAll+0x114>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d162      	bne.n	8005fba <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005ef4:	4b35      	ldr	r3, [pc, #212]	; (8005fcc <xTaskResumeAll+0x118>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d05e      	beq.n	8005fba <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005efc:	e02f      	b.n	8005f5e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005efe:	4b34      	ldr	r3, [pc, #208]	; (8005fd0 <xTaskResumeAll+0x11c>)
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	3318      	adds	r3, #24
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f7ff f890 	bl	8005030 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	3304      	adds	r3, #4
 8005f14:	4618      	mov	r0, r3
 8005f16:	f7ff f88b 	bl	8005030 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f1e:	4b2d      	ldr	r3, [pc, #180]	; (8005fd4 <xTaskResumeAll+0x120>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d903      	bls.n	8005f2e <xTaskResumeAll+0x7a>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f2a:	4a2a      	ldr	r2, [pc, #168]	; (8005fd4 <xTaskResumeAll+0x120>)
 8005f2c:	6013      	str	r3, [r2, #0]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f32:	4613      	mov	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4413      	add	r3, r2
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	4a27      	ldr	r2, [pc, #156]	; (8005fd8 <xTaskResumeAll+0x124>)
 8005f3c:	441a      	add	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	3304      	adds	r3, #4
 8005f42:	4619      	mov	r1, r3
 8005f44:	4610      	mov	r0, r2
 8005f46:	f7ff f816 	bl	8004f76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f4e:	4b23      	ldr	r3, [pc, #140]	; (8005fdc <xTaskResumeAll+0x128>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d302      	bcc.n	8005f5e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005f58:	4b21      	ldr	r3, [pc, #132]	; (8005fe0 <xTaskResumeAll+0x12c>)
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f5e:	4b1c      	ldr	r3, [pc, #112]	; (8005fd0 <xTaskResumeAll+0x11c>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d1cb      	bne.n	8005efe <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d001      	beq.n	8005f70 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005f6c:	f000 fb46 	bl	80065fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005f70:	4b1c      	ldr	r3, [pc, #112]	; (8005fe4 <xTaskResumeAll+0x130>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d010      	beq.n	8005f9e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005f7c:	f000 f846 	bl	800600c <xTaskIncrementTick>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d002      	beq.n	8005f8c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005f86:	4b16      	ldr	r3, [pc, #88]	; (8005fe0 <xTaskResumeAll+0x12c>)
 8005f88:	2201      	movs	r2, #1
 8005f8a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d1f1      	bne.n	8005f7c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005f98:	4b12      	ldr	r3, [pc, #72]	; (8005fe4 <xTaskResumeAll+0x130>)
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005f9e:	4b10      	ldr	r3, [pc, #64]	; (8005fe0 <xTaskResumeAll+0x12c>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d009      	beq.n	8005fba <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005faa:	4b0f      	ldr	r3, [pc, #60]	; (8005fe8 <xTaskResumeAll+0x134>)
 8005fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fb0:	601a      	str	r2, [r3, #0]
 8005fb2:	f3bf 8f4f 	dsb	sy
 8005fb6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005fba:	f001 f8b5 	bl	8007128 <vPortExitCritical>

	return xAlreadyYielded;
 8005fbe:	68bb      	ldr	r3, [r7, #8]
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	20000db4 	.word	0x20000db4
 8005fcc:	20000d8c 	.word	0x20000d8c
 8005fd0:	20000d4c 	.word	0x20000d4c
 8005fd4:	20000d94 	.word	0x20000d94
 8005fd8:	200008bc 	.word	0x200008bc
 8005fdc:	200008b8 	.word	0x200008b8
 8005fe0:	20000da0 	.word	0x20000da0
 8005fe4:	20000d9c 	.word	0x20000d9c
 8005fe8:	e000ed04 	.word	0xe000ed04

08005fec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005ff2:	4b05      	ldr	r3, [pc, #20]	; (8006008 <xTaskGetTickCount+0x1c>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005ff8:	687b      	ldr	r3, [r7, #4]
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	370c      	adds	r7, #12
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	20000d90 	.word	0x20000d90

0800600c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b086      	sub	sp, #24
 8006010:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006012:	2300      	movs	r3, #0
 8006014:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006016:	4b4e      	ldr	r3, [pc, #312]	; (8006150 <xTaskIncrementTick+0x144>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2b00      	cmp	r3, #0
 800601c:	f040 8088 	bne.w	8006130 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006020:	4b4c      	ldr	r3, [pc, #304]	; (8006154 <xTaskIncrementTick+0x148>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	3301      	adds	r3, #1
 8006026:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006028:	4a4a      	ldr	r2, [pc, #296]	; (8006154 <xTaskIncrementTick+0x148>)
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d11f      	bne.n	8006074 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006034:	4b48      	ldr	r3, [pc, #288]	; (8006158 <xTaskIncrementTick+0x14c>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d009      	beq.n	8006052 <xTaskIncrementTick+0x46>
 800603e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006042:	f383 8811 	msr	BASEPRI, r3
 8006046:	f3bf 8f6f 	isb	sy
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	603b      	str	r3, [r7, #0]
 8006050:	e7fe      	b.n	8006050 <xTaskIncrementTick+0x44>
 8006052:	4b41      	ldr	r3, [pc, #260]	; (8006158 <xTaskIncrementTick+0x14c>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	4b40      	ldr	r3, [pc, #256]	; (800615c <xTaskIncrementTick+0x150>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a3e      	ldr	r2, [pc, #248]	; (8006158 <xTaskIncrementTick+0x14c>)
 800605e:	6013      	str	r3, [r2, #0]
 8006060:	4a3e      	ldr	r2, [pc, #248]	; (800615c <xTaskIncrementTick+0x150>)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6013      	str	r3, [r2, #0]
 8006066:	4b3e      	ldr	r3, [pc, #248]	; (8006160 <xTaskIncrementTick+0x154>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	3301      	adds	r3, #1
 800606c:	4a3c      	ldr	r2, [pc, #240]	; (8006160 <xTaskIncrementTick+0x154>)
 800606e:	6013      	str	r3, [r2, #0]
 8006070:	f000 fac4 	bl	80065fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006074:	4b3b      	ldr	r3, [pc, #236]	; (8006164 <xTaskIncrementTick+0x158>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	429a      	cmp	r2, r3
 800607c:	d349      	bcc.n	8006112 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800607e:	4b36      	ldr	r3, [pc, #216]	; (8006158 <xTaskIncrementTick+0x14c>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d104      	bne.n	8006092 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006088:	4b36      	ldr	r3, [pc, #216]	; (8006164 <xTaskIncrementTick+0x158>)
 800608a:	f04f 32ff 	mov.w	r2, #4294967295
 800608e:	601a      	str	r2, [r3, #0]
					break;
 8006090:	e03f      	b.n	8006112 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006092:	4b31      	ldr	r3, [pc, #196]	; (8006158 <xTaskIncrementTick+0x14c>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80060a2:	693a      	ldr	r2, [r7, #16]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d203      	bcs.n	80060b2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80060aa:	4a2e      	ldr	r2, [pc, #184]	; (8006164 <xTaskIncrementTick+0x158>)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80060b0:	e02f      	b.n	8006112 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	3304      	adds	r3, #4
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7fe ffba 	bl	8005030 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d004      	beq.n	80060ce <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	3318      	adds	r3, #24
 80060c8:	4618      	mov	r0, r3
 80060ca:	f7fe ffb1 	bl	8005030 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060d2:	4b25      	ldr	r3, [pc, #148]	; (8006168 <xTaskIncrementTick+0x15c>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d903      	bls.n	80060e2 <xTaskIncrementTick+0xd6>
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060de:	4a22      	ldr	r2, [pc, #136]	; (8006168 <xTaskIncrementTick+0x15c>)
 80060e0:	6013      	str	r3, [r2, #0]
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060e6:	4613      	mov	r3, r2
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	4413      	add	r3, r2
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	4a1f      	ldr	r2, [pc, #124]	; (800616c <xTaskIncrementTick+0x160>)
 80060f0:	441a      	add	r2, r3
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	3304      	adds	r3, #4
 80060f6:	4619      	mov	r1, r3
 80060f8:	4610      	mov	r0, r2
 80060fa:	f7fe ff3c 	bl	8004f76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006102:	4b1b      	ldr	r3, [pc, #108]	; (8006170 <xTaskIncrementTick+0x164>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006108:	429a      	cmp	r2, r3
 800610a:	d3b8      	bcc.n	800607e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800610c:	2301      	movs	r3, #1
 800610e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006110:	e7b5      	b.n	800607e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006112:	4b17      	ldr	r3, [pc, #92]	; (8006170 <xTaskIncrementTick+0x164>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006118:	4914      	ldr	r1, [pc, #80]	; (800616c <xTaskIncrementTick+0x160>)
 800611a:	4613      	mov	r3, r2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	4413      	add	r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	440b      	add	r3, r1
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d907      	bls.n	800613a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800612a:	2301      	movs	r3, #1
 800612c:	617b      	str	r3, [r7, #20]
 800612e:	e004      	b.n	800613a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006130:	4b10      	ldr	r3, [pc, #64]	; (8006174 <xTaskIncrementTick+0x168>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	3301      	adds	r3, #1
 8006136:	4a0f      	ldr	r2, [pc, #60]	; (8006174 <xTaskIncrementTick+0x168>)
 8006138:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800613a:	4b0f      	ldr	r3, [pc, #60]	; (8006178 <xTaskIncrementTick+0x16c>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d001      	beq.n	8006146 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8006142:	2301      	movs	r3, #1
 8006144:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006146:	697b      	ldr	r3, [r7, #20]
}
 8006148:	4618      	mov	r0, r3
 800614a:	3718      	adds	r7, #24
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}
 8006150:	20000db4 	.word	0x20000db4
 8006154:	20000d90 	.word	0x20000d90
 8006158:	20000d44 	.word	0x20000d44
 800615c:	20000d48 	.word	0x20000d48
 8006160:	20000da4 	.word	0x20000da4
 8006164:	20000dac 	.word	0x20000dac
 8006168:	20000d94 	.word	0x20000d94
 800616c:	200008bc 	.word	0x200008bc
 8006170:	200008b8 	.word	0x200008b8
 8006174:	20000d9c 	.word	0x20000d9c
 8006178:	20000da0 	.word	0x20000da0

0800617c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006182:	4b27      	ldr	r3, [pc, #156]	; (8006220 <vTaskSwitchContext+0xa4>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d003      	beq.n	8006192 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800618a:	4b26      	ldr	r3, [pc, #152]	; (8006224 <vTaskSwitchContext+0xa8>)
 800618c:	2201      	movs	r2, #1
 800618e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006190:	e040      	b.n	8006214 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006192:	4b24      	ldr	r3, [pc, #144]	; (8006224 <vTaskSwitchContext+0xa8>)
 8006194:	2200      	movs	r2, #0
 8006196:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006198:	4b23      	ldr	r3, [pc, #140]	; (8006228 <vTaskSwitchContext+0xac>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	60fb      	str	r3, [r7, #12]
 800619e:	e00f      	b.n	80061c0 <vTaskSwitchContext+0x44>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d109      	bne.n	80061ba <vTaskSwitchContext+0x3e>
 80061a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061aa:	f383 8811 	msr	BASEPRI, r3
 80061ae:	f3bf 8f6f 	isb	sy
 80061b2:	f3bf 8f4f 	dsb	sy
 80061b6:	607b      	str	r3, [r7, #4]
 80061b8:	e7fe      	b.n	80061b8 <vTaskSwitchContext+0x3c>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	3b01      	subs	r3, #1
 80061be:	60fb      	str	r3, [r7, #12]
 80061c0:	491a      	ldr	r1, [pc, #104]	; (800622c <vTaskSwitchContext+0xb0>)
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	4613      	mov	r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4413      	add	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	440b      	add	r3, r1
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d0e5      	beq.n	80061a0 <vTaskSwitchContext+0x24>
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	4613      	mov	r3, r2
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	4413      	add	r3, r2
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	4a13      	ldr	r2, [pc, #76]	; (800622c <vTaskSwitchContext+0xb0>)
 80061e0:	4413      	add	r3, r2
 80061e2:	60bb      	str	r3, [r7, #8]
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	685a      	ldr	r2, [r3, #4]
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	605a      	str	r2, [r3, #4]
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	685a      	ldr	r2, [r3, #4]
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	3308      	adds	r3, #8
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d104      	bne.n	8006204 <vTaskSwitchContext+0x88>
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	685a      	ldr	r2, [r3, #4]
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	605a      	str	r2, [r3, #4]
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	4a09      	ldr	r2, [pc, #36]	; (8006230 <vTaskSwitchContext+0xb4>)
 800620c:	6013      	str	r3, [r2, #0]
 800620e:	4a06      	ldr	r2, [pc, #24]	; (8006228 <vTaskSwitchContext+0xac>)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6013      	str	r3, [r2, #0]
}
 8006214:	bf00      	nop
 8006216:	3714      	adds	r7, #20
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr
 8006220:	20000db4 	.word	0x20000db4
 8006224:	20000da0 	.word	0x20000da0
 8006228:	20000d94 	.word	0x20000d94
 800622c:	200008bc 	.word	0x200008bc
 8006230:	200008b8 	.word	0x200008b8

08006234 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d109      	bne.n	8006258 <vTaskPlaceOnEventList+0x24>
 8006244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006248:	f383 8811 	msr	BASEPRI, r3
 800624c:	f3bf 8f6f 	isb	sy
 8006250:	f3bf 8f4f 	dsb	sy
 8006254:	60fb      	str	r3, [r7, #12]
 8006256:	e7fe      	b.n	8006256 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006258:	4b07      	ldr	r3, [pc, #28]	; (8006278 <vTaskPlaceOnEventList+0x44>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	3318      	adds	r3, #24
 800625e:	4619      	mov	r1, r3
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f7fe feac 	bl	8004fbe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006266:	2101      	movs	r1, #1
 8006268:	6838      	ldr	r0, [r7, #0]
 800626a:	f000 fa71 	bl	8006750 <prvAddCurrentTaskToDelayedList>
}
 800626e:	bf00      	nop
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	200008b8 	.word	0x200008b8

0800627c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800627c:	b580      	push	{r7, lr}
 800627e:	b086      	sub	sp, #24
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d109      	bne.n	80062a2 <vTaskPlaceOnEventListRestricted+0x26>
 800628e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006292:	f383 8811 	msr	BASEPRI, r3
 8006296:	f3bf 8f6f 	isb	sy
 800629a:	f3bf 8f4f 	dsb	sy
 800629e:	617b      	str	r3, [r7, #20]
 80062a0:	e7fe      	b.n	80062a0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80062a2:	4b0a      	ldr	r3, [pc, #40]	; (80062cc <vTaskPlaceOnEventListRestricted+0x50>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	3318      	adds	r3, #24
 80062a8:	4619      	mov	r1, r3
 80062aa:	68f8      	ldr	r0, [r7, #12]
 80062ac:	f7fe fe63 	bl	8004f76 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d002      	beq.n	80062bc <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80062b6:	f04f 33ff 	mov.w	r3, #4294967295
 80062ba:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80062bc:	6879      	ldr	r1, [r7, #4]
 80062be:	68b8      	ldr	r0, [r7, #8]
 80062c0:	f000 fa46 	bl	8006750 <prvAddCurrentTaskToDelayedList>
	}
 80062c4:	bf00      	nop
 80062c6:	3718      	adds	r7, #24
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	200008b8 	.word	0x200008b8

080062d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b086      	sub	sp, #24
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d109      	bne.n	80062fa <xTaskRemoveFromEventList+0x2a>
 80062e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ea:	f383 8811 	msr	BASEPRI, r3
 80062ee:	f3bf 8f6f 	isb	sy
 80062f2:	f3bf 8f4f 	dsb	sy
 80062f6:	60fb      	str	r3, [r7, #12]
 80062f8:	e7fe      	b.n	80062f8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	3318      	adds	r3, #24
 80062fe:	4618      	mov	r0, r3
 8006300:	f7fe fe96 	bl	8005030 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006304:	4b1d      	ldr	r3, [pc, #116]	; (800637c <xTaskRemoveFromEventList+0xac>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d11d      	bne.n	8006348 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	3304      	adds	r3, #4
 8006310:	4618      	mov	r0, r3
 8006312:	f7fe fe8d 	bl	8005030 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800631a:	4b19      	ldr	r3, [pc, #100]	; (8006380 <xTaskRemoveFromEventList+0xb0>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	429a      	cmp	r2, r3
 8006320:	d903      	bls.n	800632a <xTaskRemoveFromEventList+0x5a>
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006326:	4a16      	ldr	r2, [pc, #88]	; (8006380 <xTaskRemoveFromEventList+0xb0>)
 8006328:	6013      	str	r3, [r2, #0]
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800632e:	4613      	mov	r3, r2
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	4413      	add	r3, r2
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	4a13      	ldr	r2, [pc, #76]	; (8006384 <xTaskRemoveFromEventList+0xb4>)
 8006338:	441a      	add	r2, r3
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	3304      	adds	r3, #4
 800633e:	4619      	mov	r1, r3
 8006340:	4610      	mov	r0, r2
 8006342:	f7fe fe18 	bl	8004f76 <vListInsertEnd>
 8006346:	e005      	b.n	8006354 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	3318      	adds	r3, #24
 800634c:	4619      	mov	r1, r3
 800634e:	480e      	ldr	r0, [pc, #56]	; (8006388 <xTaskRemoveFromEventList+0xb8>)
 8006350:	f7fe fe11 	bl	8004f76 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006358:	4b0c      	ldr	r3, [pc, #48]	; (800638c <xTaskRemoveFromEventList+0xbc>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800635e:	429a      	cmp	r2, r3
 8006360:	d905      	bls.n	800636e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006362:	2301      	movs	r3, #1
 8006364:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006366:	4b0a      	ldr	r3, [pc, #40]	; (8006390 <xTaskRemoveFromEventList+0xc0>)
 8006368:	2201      	movs	r2, #1
 800636a:	601a      	str	r2, [r3, #0]
 800636c:	e001      	b.n	8006372 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800636e:	2300      	movs	r3, #0
 8006370:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006372:	697b      	ldr	r3, [r7, #20]
}
 8006374:	4618      	mov	r0, r3
 8006376:	3718      	adds	r7, #24
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	20000db4 	.word	0x20000db4
 8006380:	20000d94 	.word	0x20000d94
 8006384:	200008bc 	.word	0x200008bc
 8006388:	20000d4c 	.word	0x20000d4c
 800638c:	200008b8 	.word	0x200008b8
 8006390:	20000da0 	.word	0x20000da0

08006394 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800639c:	4b06      	ldr	r3, [pc, #24]	; (80063b8 <vTaskInternalSetTimeOutState+0x24>)
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80063a4:	4b05      	ldr	r3, [pc, #20]	; (80063bc <vTaskInternalSetTimeOutState+0x28>)
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	605a      	str	r2, [r3, #4]
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr
 80063b8:	20000da4 	.word	0x20000da4
 80063bc:	20000d90 	.word	0x20000d90

080063c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b088      	sub	sp, #32
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d109      	bne.n	80063e4 <xTaskCheckForTimeOut+0x24>
 80063d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d4:	f383 8811 	msr	BASEPRI, r3
 80063d8:	f3bf 8f6f 	isb	sy
 80063dc:	f3bf 8f4f 	dsb	sy
 80063e0:	613b      	str	r3, [r7, #16]
 80063e2:	e7fe      	b.n	80063e2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d109      	bne.n	80063fe <xTaskCheckForTimeOut+0x3e>
 80063ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ee:	f383 8811 	msr	BASEPRI, r3
 80063f2:	f3bf 8f6f 	isb	sy
 80063f6:	f3bf 8f4f 	dsb	sy
 80063fa:	60fb      	str	r3, [r7, #12]
 80063fc:	e7fe      	b.n	80063fc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80063fe:	f000 fe65 	bl	80070cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006402:	4b1d      	ldr	r3, [pc, #116]	; (8006478 <xTaskCheckForTimeOut+0xb8>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	69ba      	ldr	r2, [r7, #24]
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800641a:	d102      	bne.n	8006422 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800641c:	2300      	movs	r3, #0
 800641e:	61fb      	str	r3, [r7, #28]
 8006420:	e023      	b.n	800646a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	4b15      	ldr	r3, [pc, #84]	; (800647c <xTaskCheckForTimeOut+0xbc>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	429a      	cmp	r2, r3
 800642c:	d007      	beq.n	800643e <xTaskCheckForTimeOut+0x7e>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	69ba      	ldr	r2, [r7, #24]
 8006434:	429a      	cmp	r2, r3
 8006436:	d302      	bcc.n	800643e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006438:	2301      	movs	r3, #1
 800643a:	61fb      	str	r3, [r7, #28]
 800643c:	e015      	b.n	800646a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	697a      	ldr	r2, [r7, #20]
 8006444:	429a      	cmp	r2, r3
 8006446:	d20b      	bcs.n	8006460 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	1ad2      	subs	r2, r2, r3
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f7ff ff9d 	bl	8006394 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800645a:	2300      	movs	r3, #0
 800645c:	61fb      	str	r3, [r7, #28]
 800645e:	e004      	b.n	800646a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	2200      	movs	r2, #0
 8006464:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006466:	2301      	movs	r3, #1
 8006468:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800646a:	f000 fe5d 	bl	8007128 <vPortExitCritical>

	return xReturn;
 800646e:	69fb      	ldr	r3, [r7, #28]
}
 8006470:	4618      	mov	r0, r3
 8006472:	3720      	adds	r7, #32
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	20000d90 	.word	0x20000d90
 800647c:	20000da4 	.word	0x20000da4

08006480 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006480:	b480      	push	{r7}
 8006482:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006484:	4b03      	ldr	r3, [pc, #12]	; (8006494 <vTaskMissedYield+0x14>)
 8006486:	2201      	movs	r2, #1
 8006488:	601a      	str	r2, [r3, #0]
}
 800648a:	bf00      	nop
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr
 8006494:	20000da0 	.word	0x20000da0

08006498 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80064a0:	f000 f852 	bl	8006548 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80064a4:	4b06      	ldr	r3, [pc, #24]	; (80064c0 <prvIdleTask+0x28>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d9f9      	bls.n	80064a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80064ac:	4b05      	ldr	r3, [pc, #20]	; (80064c4 <prvIdleTask+0x2c>)
 80064ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064b2:	601a      	str	r2, [r3, #0]
 80064b4:	f3bf 8f4f 	dsb	sy
 80064b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80064bc:	e7f0      	b.n	80064a0 <prvIdleTask+0x8>
 80064be:	bf00      	nop
 80064c0:	200008bc 	.word	0x200008bc
 80064c4:	e000ed04 	.word	0xe000ed04

080064c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064ce:	2300      	movs	r3, #0
 80064d0:	607b      	str	r3, [r7, #4]
 80064d2:	e00c      	b.n	80064ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	4613      	mov	r3, r2
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	4413      	add	r3, r2
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	4a12      	ldr	r2, [pc, #72]	; (8006528 <prvInitialiseTaskLists+0x60>)
 80064e0:	4413      	add	r3, r2
 80064e2:	4618      	mov	r0, r3
 80064e4:	f7fe fd1a 	bl	8004f1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	3301      	adds	r3, #1
 80064ec:	607b      	str	r3, [r7, #4]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2b37      	cmp	r3, #55	; 0x37
 80064f2:	d9ef      	bls.n	80064d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80064f4:	480d      	ldr	r0, [pc, #52]	; (800652c <prvInitialiseTaskLists+0x64>)
 80064f6:	f7fe fd11 	bl	8004f1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80064fa:	480d      	ldr	r0, [pc, #52]	; (8006530 <prvInitialiseTaskLists+0x68>)
 80064fc:	f7fe fd0e 	bl	8004f1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006500:	480c      	ldr	r0, [pc, #48]	; (8006534 <prvInitialiseTaskLists+0x6c>)
 8006502:	f7fe fd0b 	bl	8004f1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006506:	480c      	ldr	r0, [pc, #48]	; (8006538 <prvInitialiseTaskLists+0x70>)
 8006508:	f7fe fd08 	bl	8004f1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800650c:	480b      	ldr	r0, [pc, #44]	; (800653c <prvInitialiseTaskLists+0x74>)
 800650e:	f7fe fd05 	bl	8004f1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006512:	4b0b      	ldr	r3, [pc, #44]	; (8006540 <prvInitialiseTaskLists+0x78>)
 8006514:	4a05      	ldr	r2, [pc, #20]	; (800652c <prvInitialiseTaskLists+0x64>)
 8006516:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006518:	4b0a      	ldr	r3, [pc, #40]	; (8006544 <prvInitialiseTaskLists+0x7c>)
 800651a:	4a05      	ldr	r2, [pc, #20]	; (8006530 <prvInitialiseTaskLists+0x68>)
 800651c:	601a      	str	r2, [r3, #0]
}
 800651e:	bf00      	nop
 8006520:	3708      	adds	r7, #8
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	200008bc 	.word	0x200008bc
 800652c:	20000d1c 	.word	0x20000d1c
 8006530:	20000d30 	.word	0x20000d30
 8006534:	20000d4c 	.word	0x20000d4c
 8006538:	20000d60 	.word	0x20000d60
 800653c:	20000d78 	.word	0x20000d78
 8006540:	20000d44 	.word	0x20000d44
 8006544:	20000d48 	.word	0x20000d48

08006548 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800654e:	e019      	b.n	8006584 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006550:	f000 fdbc 	bl	80070cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006554:	4b0f      	ldr	r3, [pc, #60]	; (8006594 <prvCheckTasksWaitingTermination+0x4c>)
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	3304      	adds	r3, #4
 8006560:	4618      	mov	r0, r3
 8006562:	f7fe fd65 	bl	8005030 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006566:	4b0c      	ldr	r3, [pc, #48]	; (8006598 <prvCheckTasksWaitingTermination+0x50>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	3b01      	subs	r3, #1
 800656c:	4a0a      	ldr	r2, [pc, #40]	; (8006598 <prvCheckTasksWaitingTermination+0x50>)
 800656e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006570:	4b0a      	ldr	r3, [pc, #40]	; (800659c <prvCheckTasksWaitingTermination+0x54>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	3b01      	subs	r3, #1
 8006576:	4a09      	ldr	r2, [pc, #36]	; (800659c <prvCheckTasksWaitingTermination+0x54>)
 8006578:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800657a:	f000 fdd5 	bl	8007128 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 f80e 	bl	80065a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006584:	4b05      	ldr	r3, [pc, #20]	; (800659c <prvCheckTasksWaitingTermination+0x54>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1e1      	bne.n	8006550 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800658c:	bf00      	nop
 800658e:	3708      	adds	r7, #8
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}
 8006594:	20000d60 	.word	0x20000d60
 8006598:	20000d8c 	.word	0x20000d8c
 800659c:	20000d74 	.word	0x20000d74

080065a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d108      	bne.n	80065c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b6:	4618      	mov	r0, r3
 80065b8:	f000 ff64 	bl	8007484 <vPortFree>
				vPortFree( pxTCB );
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 ff61 	bl	8007484 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80065c2:	e017      	b.n	80065f4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d103      	bne.n	80065d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 ff58 	bl	8007484 <vPortFree>
	}
 80065d4:	e00e      	b.n	80065f4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d009      	beq.n	80065f4 <prvDeleteTCB+0x54>
 80065e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e4:	f383 8811 	msr	BASEPRI, r3
 80065e8:	f3bf 8f6f 	isb	sy
 80065ec:	f3bf 8f4f 	dsb	sy
 80065f0:	60fb      	str	r3, [r7, #12]
 80065f2:	e7fe      	b.n	80065f2 <prvDeleteTCB+0x52>
	}
 80065f4:	bf00      	nop
 80065f6:	3710      	adds	r7, #16
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006602:	4b0c      	ldr	r3, [pc, #48]	; (8006634 <prvResetNextTaskUnblockTime+0x38>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d104      	bne.n	8006616 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800660c:	4b0a      	ldr	r3, [pc, #40]	; (8006638 <prvResetNextTaskUnblockTime+0x3c>)
 800660e:	f04f 32ff 	mov.w	r2, #4294967295
 8006612:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006614:	e008      	b.n	8006628 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006616:	4b07      	ldr	r3, [pc, #28]	; (8006634 <prvResetNextTaskUnblockTime+0x38>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	4a04      	ldr	r2, [pc, #16]	; (8006638 <prvResetNextTaskUnblockTime+0x3c>)
 8006626:	6013      	str	r3, [r2, #0]
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr
 8006634:	20000d44 	.word	0x20000d44
 8006638:	20000dac 	.word	0x20000dac

0800663c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006642:	4b0b      	ldr	r3, [pc, #44]	; (8006670 <xTaskGetSchedulerState+0x34>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d102      	bne.n	8006650 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800664a:	2301      	movs	r3, #1
 800664c:	607b      	str	r3, [r7, #4]
 800664e:	e008      	b.n	8006662 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006650:	4b08      	ldr	r3, [pc, #32]	; (8006674 <xTaskGetSchedulerState+0x38>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d102      	bne.n	800665e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006658:	2302      	movs	r3, #2
 800665a:	607b      	str	r3, [r7, #4]
 800665c:	e001      	b.n	8006662 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800665e:	2300      	movs	r3, #0
 8006660:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006662:	687b      	ldr	r3, [r7, #4]
	}
 8006664:	4618      	mov	r0, r3
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr
 8006670:	20000d98 	.word	0x20000d98
 8006674:	20000db4 	.word	0x20000db4

08006678 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006684:	2300      	movs	r3, #0
 8006686:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d054      	beq.n	8006738 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800668e:	4b2d      	ldr	r3, [pc, #180]	; (8006744 <xTaskPriorityDisinherit+0xcc>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	693a      	ldr	r2, [r7, #16]
 8006694:	429a      	cmp	r2, r3
 8006696:	d009      	beq.n	80066ac <xTaskPriorityDisinherit+0x34>
 8006698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669c:	f383 8811 	msr	BASEPRI, r3
 80066a0:	f3bf 8f6f 	isb	sy
 80066a4:	f3bf 8f4f 	dsb	sy
 80066a8:	60fb      	str	r3, [r7, #12]
 80066aa:	e7fe      	b.n	80066aa <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d109      	bne.n	80066c8 <xTaskPriorityDisinherit+0x50>
 80066b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b8:	f383 8811 	msr	BASEPRI, r3
 80066bc:	f3bf 8f6f 	isb	sy
 80066c0:	f3bf 8f4f 	dsb	sy
 80066c4:	60bb      	str	r3, [r7, #8]
 80066c6:	e7fe      	b.n	80066c6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066cc:	1e5a      	subs	r2, r3, #1
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066da:	429a      	cmp	r2, r3
 80066dc:	d02c      	beq.n	8006738 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d128      	bne.n	8006738 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	3304      	adds	r3, #4
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7fe fca0 	bl	8005030 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006708:	4b0f      	ldr	r3, [pc, #60]	; (8006748 <xTaskPriorityDisinherit+0xd0>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	429a      	cmp	r2, r3
 800670e:	d903      	bls.n	8006718 <xTaskPriorityDisinherit+0xa0>
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006714:	4a0c      	ldr	r2, [pc, #48]	; (8006748 <xTaskPriorityDisinherit+0xd0>)
 8006716:	6013      	str	r3, [r2, #0]
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800671c:	4613      	mov	r3, r2
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	4413      	add	r3, r2
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	4a09      	ldr	r2, [pc, #36]	; (800674c <xTaskPriorityDisinherit+0xd4>)
 8006726:	441a      	add	r2, r3
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	3304      	adds	r3, #4
 800672c:	4619      	mov	r1, r3
 800672e:	4610      	mov	r0, r2
 8006730:	f7fe fc21 	bl	8004f76 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006734:	2301      	movs	r3, #1
 8006736:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006738:	697b      	ldr	r3, [r7, #20]
	}
 800673a:	4618      	mov	r0, r3
 800673c:	3718      	adds	r7, #24
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	200008b8 	.word	0x200008b8
 8006748:	20000d94 	.word	0x20000d94
 800674c:	200008bc 	.word	0x200008bc

08006750 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800675a:	4b21      	ldr	r3, [pc, #132]	; (80067e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006760:	4b20      	ldr	r3, [pc, #128]	; (80067e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	3304      	adds	r3, #4
 8006766:	4618      	mov	r0, r3
 8006768:	f7fe fc62 	bl	8005030 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006772:	d10a      	bne.n	800678a <prvAddCurrentTaskToDelayedList+0x3a>
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d007      	beq.n	800678a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800677a:	4b1a      	ldr	r3, [pc, #104]	; (80067e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	3304      	adds	r3, #4
 8006780:	4619      	mov	r1, r3
 8006782:	4819      	ldr	r0, [pc, #100]	; (80067e8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006784:	f7fe fbf7 	bl	8004f76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006788:	e026      	b.n	80067d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4413      	add	r3, r2
 8006790:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006792:	4b14      	ldr	r3, [pc, #80]	; (80067e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68ba      	ldr	r2, [r7, #8]
 8006798:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800679a:	68ba      	ldr	r2, [r7, #8]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d209      	bcs.n	80067b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067a2:	4b12      	ldr	r3, [pc, #72]	; (80067ec <prvAddCurrentTaskToDelayedList+0x9c>)
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	4b0f      	ldr	r3, [pc, #60]	; (80067e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	3304      	adds	r3, #4
 80067ac:	4619      	mov	r1, r3
 80067ae:	4610      	mov	r0, r2
 80067b0:	f7fe fc05 	bl	8004fbe <vListInsert>
}
 80067b4:	e010      	b.n	80067d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067b6:	4b0e      	ldr	r3, [pc, #56]	; (80067f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	4b0a      	ldr	r3, [pc, #40]	; (80067e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	3304      	adds	r3, #4
 80067c0:	4619      	mov	r1, r3
 80067c2:	4610      	mov	r0, r2
 80067c4:	f7fe fbfb 	bl	8004fbe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80067c8:	4b0a      	ldr	r3, [pc, #40]	; (80067f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	68ba      	ldr	r2, [r7, #8]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d202      	bcs.n	80067d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80067d2:	4a08      	ldr	r2, [pc, #32]	; (80067f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	6013      	str	r3, [r2, #0]
}
 80067d8:	bf00      	nop
 80067da:	3710      	adds	r7, #16
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	20000d90 	.word	0x20000d90
 80067e4:	200008b8 	.word	0x200008b8
 80067e8:	20000d78 	.word	0x20000d78
 80067ec:	20000d48 	.word	0x20000d48
 80067f0:	20000d44 	.word	0x20000d44
 80067f4:	20000dac 	.word	0x20000dac

080067f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b08a      	sub	sp, #40	; 0x28
 80067fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80067fe:	2300      	movs	r3, #0
 8006800:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006802:	f000 faff 	bl	8006e04 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006806:	4b1c      	ldr	r3, [pc, #112]	; (8006878 <xTimerCreateTimerTask+0x80>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d021      	beq.n	8006852 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800680e:	2300      	movs	r3, #0
 8006810:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006812:	2300      	movs	r3, #0
 8006814:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006816:	1d3a      	adds	r2, r7, #4
 8006818:	f107 0108 	add.w	r1, r7, #8
 800681c:	f107 030c 	add.w	r3, r7, #12
 8006820:	4618      	mov	r0, r3
 8006822:	f7fe fb61 	bl	8004ee8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006826:	6879      	ldr	r1, [r7, #4]
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	9202      	str	r2, [sp, #8]
 800682e:	9301      	str	r3, [sp, #4]
 8006830:	2302      	movs	r3, #2
 8006832:	9300      	str	r3, [sp, #0]
 8006834:	2300      	movs	r3, #0
 8006836:	460a      	mov	r2, r1
 8006838:	4910      	ldr	r1, [pc, #64]	; (800687c <xTimerCreateTimerTask+0x84>)
 800683a:	4811      	ldr	r0, [pc, #68]	; (8006880 <xTimerCreateTimerTask+0x88>)
 800683c:	f7ff f8f6 	bl	8005a2c <xTaskCreateStatic>
 8006840:	4602      	mov	r2, r0
 8006842:	4b10      	ldr	r3, [pc, #64]	; (8006884 <xTimerCreateTimerTask+0x8c>)
 8006844:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006846:	4b0f      	ldr	r3, [pc, #60]	; (8006884 <xTimerCreateTimerTask+0x8c>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d001      	beq.n	8006852 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800684e:	2301      	movs	r3, #1
 8006850:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d109      	bne.n	800686c <xTimerCreateTimerTask+0x74>
 8006858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685c:	f383 8811 	msr	BASEPRI, r3
 8006860:	f3bf 8f6f 	isb	sy
 8006864:	f3bf 8f4f 	dsb	sy
 8006868:	613b      	str	r3, [r7, #16]
 800686a:	e7fe      	b.n	800686a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800686c:	697b      	ldr	r3, [r7, #20]
}
 800686e:	4618      	mov	r0, r3
 8006870:	3718      	adds	r7, #24
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	20000de8 	.word	0x20000de8
 800687c:	08007e3c 	.word	0x08007e3c
 8006880:	080069b9 	.word	0x080069b9
 8006884:	20000dec 	.word	0x20000dec

08006888 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b08a      	sub	sp, #40	; 0x28
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	607a      	str	r2, [r7, #4]
 8006894:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006896:	2300      	movs	r3, #0
 8006898:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d109      	bne.n	80068b4 <xTimerGenericCommand+0x2c>
 80068a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a4:	f383 8811 	msr	BASEPRI, r3
 80068a8:	f3bf 8f6f 	isb	sy
 80068ac:	f3bf 8f4f 	dsb	sy
 80068b0:	623b      	str	r3, [r7, #32]
 80068b2:	e7fe      	b.n	80068b2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80068b4:	4b19      	ldr	r3, [pc, #100]	; (800691c <xTimerGenericCommand+0x94>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d02a      	beq.n	8006912 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	2b05      	cmp	r3, #5
 80068cc:	dc18      	bgt.n	8006900 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80068ce:	f7ff feb5 	bl	800663c <xTaskGetSchedulerState>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	d109      	bne.n	80068ec <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80068d8:	4b10      	ldr	r3, [pc, #64]	; (800691c <xTimerGenericCommand+0x94>)
 80068da:	6818      	ldr	r0, [r3, #0]
 80068dc:	f107 0110 	add.w	r1, r7, #16
 80068e0:	2300      	movs	r3, #0
 80068e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068e4:	f7fe fccc 	bl	8005280 <xQueueGenericSend>
 80068e8:	6278      	str	r0, [r7, #36]	; 0x24
 80068ea:	e012      	b.n	8006912 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80068ec:	4b0b      	ldr	r3, [pc, #44]	; (800691c <xTimerGenericCommand+0x94>)
 80068ee:	6818      	ldr	r0, [r3, #0]
 80068f0:	f107 0110 	add.w	r1, r7, #16
 80068f4:	2300      	movs	r3, #0
 80068f6:	2200      	movs	r2, #0
 80068f8:	f7fe fcc2 	bl	8005280 <xQueueGenericSend>
 80068fc:	6278      	str	r0, [r7, #36]	; 0x24
 80068fe:	e008      	b.n	8006912 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006900:	4b06      	ldr	r3, [pc, #24]	; (800691c <xTimerGenericCommand+0x94>)
 8006902:	6818      	ldr	r0, [r3, #0]
 8006904:	f107 0110 	add.w	r1, r7, #16
 8006908:	2300      	movs	r3, #0
 800690a:	683a      	ldr	r2, [r7, #0]
 800690c:	f7fe fdb2 	bl	8005474 <xQueueGenericSendFromISR>
 8006910:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006914:	4618      	mov	r0, r3
 8006916:	3728      	adds	r7, #40	; 0x28
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}
 800691c:	20000de8 	.word	0x20000de8

08006920 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b088      	sub	sp, #32
 8006924:	af02      	add	r7, sp, #8
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800692a:	4b22      	ldr	r3, [pc, #136]	; (80069b4 <prvProcessExpiredTimer+0x94>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	3304      	adds	r3, #4
 8006938:	4618      	mov	r0, r3
 800693a:	f7fe fb79 	bl	8005030 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006944:	f003 0304 	and.w	r3, r3, #4
 8006948:	2b00      	cmp	r3, #0
 800694a:	d021      	beq.n	8006990 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	699a      	ldr	r2, [r3, #24]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	18d1      	adds	r1, r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	683a      	ldr	r2, [r7, #0]
 8006958:	6978      	ldr	r0, [r7, #20]
 800695a:	f000 f8d1 	bl	8006b00 <prvInsertTimerInActiveList>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d01e      	beq.n	80069a2 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006964:	2300      	movs	r3, #0
 8006966:	9300      	str	r3, [sp, #0]
 8006968:	2300      	movs	r3, #0
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	2100      	movs	r1, #0
 800696e:	6978      	ldr	r0, [r7, #20]
 8006970:	f7ff ff8a 	bl	8006888 <xTimerGenericCommand>
 8006974:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d112      	bne.n	80069a2 <prvProcessExpiredTimer+0x82>
 800697c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006980:	f383 8811 	msr	BASEPRI, r3
 8006984:	f3bf 8f6f 	isb	sy
 8006988:	f3bf 8f4f 	dsb	sy
 800698c:	60fb      	str	r3, [r7, #12]
 800698e:	e7fe      	b.n	800698e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006996:	f023 0301 	bic.w	r3, r3, #1
 800699a:	b2da      	uxtb	r2, r3
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	6978      	ldr	r0, [r7, #20]
 80069a8:	4798      	blx	r3
}
 80069aa:	bf00      	nop
 80069ac:	3718      	adds	r7, #24
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	20000de0 	.word	0x20000de0

080069b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069c0:	f107 0308 	add.w	r3, r7, #8
 80069c4:	4618      	mov	r0, r3
 80069c6:	f000 f857 	bl	8006a78 <prvGetNextExpireTime>
 80069ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	4619      	mov	r1, r3
 80069d0:	68f8      	ldr	r0, [r7, #12]
 80069d2:	f000 f803 	bl	80069dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80069d6:	f000 f8d5 	bl	8006b84 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069da:	e7f1      	b.n	80069c0 <prvTimerTask+0x8>

080069dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80069e6:	f7ff fa57 	bl	8005e98 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80069ea:	f107 0308 	add.w	r3, r7, #8
 80069ee:	4618      	mov	r0, r3
 80069f0:	f000 f866 	bl	8006ac0 <prvSampleTimeNow>
 80069f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d130      	bne.n	8006a5e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10a      	bne.n	8006a18 <prvProcessTimerOrBlockTask+0x3c>
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d806      	bhi.n	8006a18 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006a0a:	f7ff fa53 	bl	8005eb4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006a0e:	68f9      	ldr	r1, [r7, #12]
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f7ff ff85 	bl	8006920 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006a16:	e024      	b.n	8006a62 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d008      	beq.n	8006a30 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006a1e:	4b13      	ldr	r3, [pc, #76]	; (8006a6c <prvProcessTimerOrBlockTask+0x90>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d101      	bne.n	8006a2c <prvProcessTimerOrBlockTask+0x50>
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e000      	b.n	8006a2e <prvProcessTimerOrBlockTask+0x52>
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006a30:	4b0f      	ldr	r3, [pc, #60]	; (8006a70 <prvProcessTimerOrBlockTask+0x94>)
 8006a32:	6818      	ldr	r0, [r3, #0]
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	683a      	ldr	r2, [r7, #0]
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	f7fe ffc1 	bl	80059c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006a42:	f7ff fa37 	bl	8005eb4 <xTaskResumeAll>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d10a      	bne.n	8006a62 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006a4c:	4b09      	ldr	r3, [pc, #36]	; (8006a74 <prvProcessTimerOrBlockTask+0x98>)
 8006a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a52:	601a      	str	r2, [r3, #0]
 8006a54:	f3bf 8f4f 	dsb	sy
 8006a58:	f3bf 8f6f 	isb	sy
}
 8006a5c:	e001      	b.n	8006a62 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006a5e:	f7ff fa29 	bl	8005eb4 <xTaskResumeAll>
}
 8006a62:	bf00      	nop
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	20000de4 	.word	0x20000de4
 8006a70:	20000de8 	.word	0x20000de8
 8006a74:	e000ed04 	.word	0xe000ed04

08006a78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b085      	sub	sp, #20
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006a80:	4b0e      	ldr	r3, [pc, #56]	; (8006abc <prvGetNextExpireTime+0x44>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d101      	bne.n	8006a8e <prvGetNextExpireTime+0x16>
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	e000      	b.n	8006a90 <prvGetNextExpireTime+0x18>
 8006a8e:	2200      	movs	r2, #0
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d105      	bne.n	8006aa8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a9c:	4b07      	ldr	r3, [pc, #28]	; (8006abc <prvGetNextExpireTime+0x44>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	60fb      	str	r3, [r7, #12]
 8006aa6:	e001      	b.n	8006aac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006aac:	68fb      	ldr	r3, [r7, #12]
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3714      	adds	r7, #20
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	20000de0 	.word	0x20000de0

08006ac0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006ac8:	f7ff fa90 	bl	8005fec <xTaskGetTickCount>
 8006acc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006ace:	4b0b      	ldr	r3, [pc, #44]	; (8006afc <prvSampleTimeNow+0x3c>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d205      	bcs.n	8006ae4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006ad8:	f000 f930 	bl	8006d3c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	601a      	str	r2, [r3, #0]
 8006ae2:	e002      	b.n	8006aea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006aea:	4a04      	ldr	r2, [pc, #16]	; (8006afc <prvSampleTimeNow+0x3c>)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006af0:	68fb      	ldr	r3, [r7, #12]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	20000df0 	.word	0x20000df0

08006b00 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b086      	sub	sp, #24
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	607a      	str	r2, [r7, #4]
 8006b0c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	68ba      	ldr	r2, [r7, #8]
 8006b16:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006b1e:	68ba      	ldr	r2, [r7, #8]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d812      	bhi.n	8006b4c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	1ad2      	subs	r2, r2, r3
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d302      	bcc.n	8006b3a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006b34:	2301      	movs	r3, #1
 8006b36:	617b      	str	r3, [r7, #20]
 8006b38:	e01b      	b.n	8006b72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006b3a:	4b10      	ldr	r3, [pc, #64]	; (8006b7c <prvInsertTimerInActiveList+0x7c>)
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	3304      	adds	r3, #4
 8006b42:	4619      	mov	r1, r3
 8006b44:	4610      	mov	r0, r2
 8006b46:	f7fe fa3a 	bl	8004fbe <vListInsert>
 8006b4a:	e012      	b.n	8006b72 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d206      	bcs.n	8006b62 <prvInsertTimerInActiveList+0x62>
 8006b54:	68ba      	ldr	r2, [r7, #8]
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d302      	bcc.n	8006b62 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	617b      	str	r3, [r7, #20]
 8006b60:	e007      	b.n	8006b72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b62:	4b07      	ldr	r3, [pc, #28]	; (8006b80 <prvInsertTimerInActiveList+0x80>)
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	3304      	adds	r3, #4
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	4610      	mov	r0, r2
 8006b6e:	f7fe fa26 	bl	8004fbe <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006b72:	697b      	ldr	r3, [r7, #20]
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3718      	adds	r7, #24
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	20000de4 	.word	0x20000de4
 8006b80:	20000de0 	.word	0x20000de0

08006b84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b08e      	sub	sp, #56	; 0x38
 8006b88:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b8a:	e0c6      	b.n	8006d1a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	da17      	bge.n	8006bc2 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006b92:	1d3b      	adds	r3, r7, #4
 8006b94:	3304      	adds	r3, #4
 8006b96:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d109      	bne.n	8006bb2 <prvProcessReceivedCommands+0x2e>
 8006b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	61fb      	str	r3, [r7, #28]
 8006bb0:	e7fe      	b.n	8006bb0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bb8:	6850      	ldr	r0, [r2, #4]
 8006bba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bbc:	6892      	ldr	r2, [r2, #8]
 8006bbe:	4611      	mov	r1, r2
 8006bc0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f2c0 80a7 	blt.w	8006d18 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd0:	695b      	ldr	r3, [r3, #20]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d004      	beq.n	8006be0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd8:	3304      	adds	r3, #4
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7fe fa28 	bl	8005030 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006be0:	463b      	mov	r3, r7
 8006be2:	4618      	mov	r0, r3
 8006be4:	f7ff ff6c 	bl	8006ac0 <prvSampleTimeNow>
 8006be8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2b09      	cmp	r3, #9
 8006bee:	f200 8094 	bhi.w	8006d1a <prvProcessReceivedCommands+0x196>
 8006bf2:	a201      	add	r2, pc, #4	; (adr r2, 8006bf8 <prvProcessReceivedCommands+0x74>)
 8006bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf8:	08006c21 	.word	0x08006c21
 8006bfc:	08006c21 	.word	0x08006c21
 8006c00:	08006c21 	.word	0x08006c21
 8006c04:	08006c93 	.word	0x08006c93
 8006c08:	08006ca7 	.word	0x08006ca7
 8006c0c:	08006cef 	.word	0x08006cef
 8006c10:	08006c21 	.word	0x08006c21
 8006c14:	08006c21 	.word	0x08006c21
 8006c18:	08006c93 	.word	0x08006c93
 8006c1c:	08006ca7 	.word	0x08006ca7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c26:	f043 0301 	orr.w	r3, r3, #1
 8006c2a:	b2da      	uxtb	r2, r3
 8006c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006c32:	68ba      	ldr	r2, [r7, #8]
 8006c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c36:	699b      	ldr	r3, [r3, #24]
 8006c38:	18d1      	adds	r1, r2, r3
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c40:	f7ff ff5e 	bl	8006b00 <prvInsertTimerInActiveList>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d067      	beq.n	8006d1a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
 8006c4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c50:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c58:	f003 0304 	and.w	r3, r3, #4
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d05c      	beq.n	8006d1a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006c60:	68ba      	ldr	r2, [r7, #8]
 8006c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	441a      	add	r2, r3
 8006c68:	2300      	movs	r3, #0
 8006c6a:	9300      	str	r3, [sp, #0]
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	2100      	movs	r1, #0
 8006c70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c72:	f7ff fe09 	bl	8006888 <xTimerGenericCommand>
 8006c76:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006c78:	6a3b      	ldr	r3, [r7, #32]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d14d      	bne.n	8006d1a <prvProcessReceivedCommands+0x196>
 8006c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c82:	f383 8811 	msr	BASEPRI, r3
 8006c86:	f3bf 8f6f 	isb	sy
 8006c8a:	f3bf 8f4f 	dsb	sy
 8006c8e:	61bb      	str	r3, [r7, #24]
 8006c90:	e7fe      	b.n	8006c90 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c98:	f023 0301 	bic.w	r3, r3, #1
 8006c9c:	b2da      	uxtb	r2, r3
 8006c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006ca4:	e039      	b.n	8006d1a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cac:	f043 0301 	orr.w	r3, r3, #1
 8006cb0:	b2da      	uxtb	r2, r3
 8006cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006cb8:	68ba      	ldr	r2, [r7, #8]
 8006cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cbc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d109      	bne.n	8006cda <prvProcessReceivedCommands+0x156>
 8006cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cca:	f383 8811 	msr	BASEPRI, r3
 8006cce:	f3bf 8f6f 	isb	sy
 8006cd2:	f3bf 8f4f 	dsb	sy
 8006cd6:	617b      	str	r3, [r7, #20]
 8006cd8:	e7fe      	b.n	8006cd8 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cdc:	699a      	ldr	r2, [r3, #24]
 8006cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce0:	18d1      	adds	r1, r2, r3
 8006ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ce6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ce8:	f7ff ff0a 	bl	8006b00 <prvInsertTimerInActiveList>
					break;
 8006cec:	e015      	b.n	8006d1a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cf4:	f003 0302 	and.w	r3, r3, #2
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d103      	bne.n	8006d04 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8006cfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cfe:	f000 fbc1 	bl	8007484 <vPortFree>
 8006d02:	e00a      	b.n	8006d1a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d0a:	f023 0301 	bic.w	r3, r3, #1
 8006d0e:	b2da      	uxtb	r2, r3
 8006d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006d16:	e000      	b.n	8006d1a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006d18:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d1a:	4b07      	ldr	r3, [pc, #28]	; (8006d38 <prvProcessReceivedCommands+0x1b4>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	1d39      	adds	r1, r7, #4
 8006d20:	2200      	movs	r2, #0
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7fe fc3a 	bl	800559c <xQueueReceive>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	f47f af2e 	bne.w	8006b8c <prvProcessReceivedCommands+0x8>
	}
}
 8006d30:	bf00      	nop
 8006d32:	3730      	adds	r7, #48	; 0x30
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	20000de8 	.word	0x20000de8

08006d3c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b088      	sub	sp, #32
 8006d40:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d42:	e047      	b.n	8006dd4 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d44:	4b2d      	ldr	r3, [pc, #180]	; (8006dfc <prvSwitchTimerLists+0xc0>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d4e:	4b2b      	ldr	r3, [pc, #172]	; (8006dfc <prvSwitchTimerLists+0xc0>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	3304      	adds	r3, #4
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7fe f967 	bl	8005030 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6a1b      	ldr	r3, [r3, #32]
 8006d66:	68f8      	ldr	r0, [r7, #12]
 8006d68:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d70:	f003 0304 	and.w	r3, r3, #4
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d02d      	beq.n	8006dd4 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	693a      	ldr	r2, [r7, #16]
 8006d7e:	4413      	add	r3, r2
 8006d80:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006d82:	68ba      	ldr	r2, [r7, #8]
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d90e      	bls.n	8006da8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	68ba      	ldr	r2, [r7, #8]
 8006d8e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d96:	4b19      	ldr	r3, [pc, #100]	; (8006dfc <prvSwitchTimerLists+0xc0>)
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	3304      	adds	r3, #4
 8006d9e:	4619      	mov	r1, r3
 8006da0:	4610      	mov	r0, r2
 8006da2:	f7fe f90c 	bl	8004fbe <vListInsert>
 8006da6:	e015      	b.n	8006dd4 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006da8:	2300      	movs	r3, #0
 8006daa:	9300      	str	r3, [sp, #0]
 8006dac:	2300      	movs	r3, #0
 8006dae:	693a      	ldr	r2, [r7, #16]
 8006db0:	2100      	movs	r1, #0
 8006db2:	68f8      	ldr	r0, [r7, #12]
 8006db4:	f7ff fd68 	bl	8006888 <xTimerGenericCommand>
 8006db8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d109      	bne.n	8006dd4 <prvSwitchTimerLists+0x98>
 8006dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc4:	f383 8811 	msr	BASEPRI, r3
 8006dc8:	f3bf 8f6f 	isb	sy
 8006dcc:	f3bf 8f4f 	dsb	sy
 8006dd0:	603b      	str	r3, [r7, #0]
 8006dd2:	e7fe      	b.n	8006dd2 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006dd4:	4b09      	ldr	r3, [pc, #36]	; (8006dfc <prvSwitchTimerLists+0xc0>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1b2      	bne.n	8006d44 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006dde:	4b07      	ldr	r3, [pc, #28]	; (8006dfc <prvSwitchTimerLists+0xc0>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006de4:	4b06      	ldr	r3, [pc, #24]	; (8006e00 <prvSwitchTimerLists+0xc4>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a04      	ldr	r2, [pc, #16]	; (8006dfc <prvSwitchTimerLists+0xc0>)
 8006dea:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006dec:	4a04      	ldr	r2, [pc, #16]	; (8006e00 <prvSwitchTimerLists+0xc4>)
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	6013      	str	r3, [r2, #0]
}
 8006df2:	bf00      	nop
 8006df4:	3718      	adds	r7, #24
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	20000de0 	.word	0x20000de0
 8006e00:	20000de4 	.word	0x20000de4

08006e04 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006e0a:	f000 f95f 	bl	80070cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006e0e:	4b15      	ldr	r3, [pc, #84]	; (8006e64 <prvCheckForValidListAndQueue+0x60>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d120      	bne.n	8006e58 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006e16:	4814      	ldr	r0, [pc, #80]	; (8006e68 <prvCheckForValidListAndQueue+0x64>)
 8006e18:	f7fe f880 	bl	8004f1c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006e1c:	4813      	ldr	r0, [pc, #76]	; (8006e6c <prvCheckForValidListAndQueue+0x68>)
 8006e1e:	f7fe f87d 	bl	8004f1c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006e22:	4b13      	ldr	r3, [pc, #76]	; (8006e70 <prvCheckForValidListAndQueue+0x6c>)
 8006e24:	4a10      	ldr	r2, [pc, #64]	; (8006e68 <prvCheckForValidListAndQueue+0x64>)
 8006e26:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006e28:	4b12      	ldr	r3, [pc, #72]	; (8006e74 <prvCheckForValidListAndQueue+0x70>)
 8006e2a:	4a10      	ldr	r2, [pc, #64]	; (8006e6c <prvCheckForValidListAndQueue+0x68>)
 8006e2c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006e2e:	2300      	movs	r3, #0
 8006e30:	9300      	str	r3, [sp, #0]
 8006e32:	4b11      	ldr	r3, [pc, #68]	; (8006e78 <prvCheckForValidListAndQueue+0x74>)
 8006e34:	4a11      	ldr	r2, [pc, #68]	; (8006e7c <prvCheckForValidListAndQueue+0x78>)
 8006e36:	2110      	movs	r1, #16
 8006e38:	200a      	movs	r0, #10
 8006e3a:	f7fe f98b 	bl	8005154 <xQueueGenericCreateStatic>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	4b08      	ldr	r3, [pc, #32]	; (8006e64 <prvCheckForValidListAndQueue+0x60>)
 8006e42:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006e44:	4b07      	ldr	r3, [pc, #28]	; (8006e64 <prvCheckForValidListAndQueue+0x60>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d005      	beq.n	8006e58 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006e4c:	4b05      	ldr	r3, [pc, #20]	; (8006e64 <prvCheckForValidListAndQueue+0x60>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	490b      	ldr	r1, [pc, #44]	; (8006e80 <prvCheckForValidListAndQueue+0x7c>)
 8006e52:	4618      	mov	r0, r3
 8006e54:	f7fe fd8e 	bl	8005974 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e58:	f000 f966 	bl	8007128 <vPortExitCritical>
}
 8006e5c:	bf00      	nop
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	20000de8 	.word	0x20000de8
 8006e68:	20000db8 	.word	0x20000db8
 8006e6c:	20000dcc 	.word	0x20000dcc
 8006e70:	20000de0 	.word	0x20000de0
 8006e74:	20000de4 	.word	0x20000de4
 8006e78:	20000e94 	.word	0x20000e94
 8006e7c:	20000df4 	.word	0x20000df4
 8006e80:	08007e44 	.word	0x08007e44

08006e84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006e84:	b480      	push	{r7}
 8006e86:	b085      	sub	sp, #20
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	3b04      	subs	r3, #4
 8006e94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006e9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	3b04      	subs	r3, #4
 8006ea2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	f023 0201 	bic.w	r2, r3, #1
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	3b04      	subs	r3, #4
 8006eb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006eb4:	4a0c      	ldr	r2, [pc, #48]	; (8006ee8 <pxPortInitialiseStack+0x64>)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	3b14      	subs	r3, #20
 8006ebe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	3b04      	subs	r3, #4
 8006eca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f06f 0202 	mvn.w	r2, #2
 8006ed2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	3b20      	subs	r3, #32
 8006ed8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006eda:	68fb      	ldr	r3, [r7, #12]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3714      	adds	r7, #20
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr
 8006ee8:	08006eed 	.word	0x08006eed

08006eec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006ef6:	4b11      	ldr	r3, [pc, #68]	; (8006f3c <prvTaskExitError+0x50>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006efe:	d009      	beq.n	8006f14 <prvTaskExitError+0x28>
 8006f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f04:	f383 8811 	msr	BASEPRI, r3
 8006f08:	f3bf 8f6f 	isb	sy
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	60fb      	str	r3, [r7, #12]
 8006f12:	e7fe      	b.n	8006f12 <prvTaskExitError+0x26>
 8006f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f18:	f383 8811 	msr	BASEPRI, r3
 8006f1c:	f3bf 8f6f 	isb	sy
 8006f20:	f3bf 8f4f 	dsb	sy
 8006f24:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f26:	bf00      	nop
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d0fc      	beq.n	8006f28 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f2e:	bf00      	nop
 8006f30:	3714      	adds	r7, #20
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	20000114 	.word	0x20000114

08006f40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f40:	4b07      	ldr	r3, [pc, #28]	; (8006f60 <pxCurrentTCBConst2>)
 8006f42:	6819      	ldr	r1, [r3, #0]
 8006f44:	6808      	ldr	r0, [r1, #0]
 8006f46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f4a:	f380 8809 	msr	PSP, r0
 8006f4e:	f3bf 8f6f 	isb	sy
 8006f52:	f04f 0000 	mov.w	r0, #0
 8006f56:	f380 8811 	msr	BASEPRI, r0
 8006f5a:	4770      	bx	lr
 8006f5c:	f3af 8000 	nop.w

08006f60 <pxCurrentTCBConst2>:
 8006f60:	200008b8 	.word	0x200008b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006f64:	bf00      	nop
 8006f66:	bf00      	nop

08006f68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006f68:	4808      	ldr	r0, [pc, #32]	; (8006f8c <prvPortStartFirstTask+0x24>)
 8006f6a:	6800      	ldr	r0, [r0, #0]
 8006f6c:	6800      	ldr	r0, [r0, #0]
 8006f6e:	f380 8808 	msr	MSP, r0
 8006f72:	f04f 0000 	mov.w	r0, #0
 8006f76:	f380 8814 	msr	CONTROL, r0
 8006f7a:	b662      	cpsie	i
 8006f7c:	b661      	cpsie	f
 8006f7e:	f3bf 8f4f 	dsb	sy
 8006f82:	f3bf 8f6f 	isb	sy
 8006f86:	df00      	svc	0
 8006f88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006f8a:	bf00      	nop
 8006f8c:	e000ed08 	.word	0xe000ed08

08006f90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b086      	sub	sp, #24
 8006f94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006f96:	4b44      	ldr	r3, [pc, #272]	; (80070a8 <xPortStartScheduler+0x118>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a44      	ldr	r2, [pc, #272]	; (80070ac <xPortStartScheduler+0x11c>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d109      	bne.n	8006fb4 <xPortStartScheduler+0x24>
 8006fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa4:	f383 8811 	msr	BASEPRI, r3
 8006fa8:	f3bf 8f6f 	isb	sy
 8006fac:	f3bf 8f4f 	dsb	sy
 8006fb0:	613b      	str	r3, [r7, #16]
 8006fb2:	e7fe      	b.n	8006fb2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006fb4:	4b3c      	ldr	r3, [pc, #240]	; (80070a8 <xPortStartScheduler+0x118>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a3d      	ldr	r2, [pc, #244]	; (80070b0 <xPortStartScheduler+0x120>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d109      	bne.n	8006fd2 <xPortStartScheduler+0x42>
 8006fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc2:	f383 8811 	msr	BASEPRI, r3
 8006fc6:	f3bf 8f6f 	isb	sy
 8006fca:	f3bf 8f4f 	dsb	sy
 8006fce:	60fb      	str	r3, [r7, #12]
 8006fd0:	e7fe      	b.n	8006fd0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006fd2:	4b38      	ldr	r3, [pc, #224]	; (80070b4 <xPortStartScheduler+0x124>)
 8006fd4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	22ff      	movs	r2, #255	; 0xff
 8006fe2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006fec:	78fb      	ldrb	r3, [r7, #3]
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006ff4:	b2da      	uxtb	r2, r3
 8006ff6:	4b30      	ldr	r3, [pc, #192]	; (80070b8 <xPortStartScheduler+0x128>)
 8006ff8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006ffa:	4b30      	ldr	r3, [pc, #192]	; (80070bc <xPortStartScheduler+0x12c>)
 8006ffc:	2207      	movs	r2, #7
 8006ffe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007000:	e009      	b.n	8007016 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007002:	4b2e      	ldr	r3, [pc, #184]	; (80070bc <xPortStartScheduler+0x12c>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	3b01      	subs	r3, #1
 8007008:	4a2c      	ldr	r2, [pc, #176]	; (80070bc <xPortStartScheduler+0x12c>)
 800700a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800700c:	78fb      	ldrb	r3, [r7, #3]
 800700e:	b2db      	uxtb	r3, r3
 8007010:	005b      	lsls	r3, r3, #1
 8007012:	b2db      	uxtb	r3, r3
 8007014:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007016:	78fb      	ldrb	r3, [r7, #3]
 8007018:	b2db      	uxtb	r3, r3
 800701a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800701e:	2b80      	cmp	r3, #128	; 0x80
 8007020:	d0ef      	beq.n	8007002 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007022:	4b26      	ldr	r3, [pc, #152]	; (80070bc <xPortStartScheduler+0x12c>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f1c3 0307 	rsb	r3, r3, #7
 800702a:	2b04      	cmp	r3, #4
 800702c:	d009      	beq.n	8007042 <xPortStartScheduler+0xb2>
 800702e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007032:	f383 8811 	msr	BASEPRI, r3
 8007036:	f3bf 8f6f 	isb	sy
 800703a:	f3bf 8f4f 	dsb	sy
 800703e:	60bb      	str	r3, [r7, #8]
 8007040:	e7fe      	b.n	8007040 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007042:	4b1e      	ldr	r3, [pc, #120]	; (80070bc <xPortStartScheduler+0x12c>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	021b      	lsls	r3, r3, #8
 8007048:	4a1c      	ldr	r2, [pc, #112]	; (80070bc <xPortStartScheduler+0x12c>)
 800704a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800704c:	4b1b      	ldr	r3, [pc, #108]	; (80070bc <xPortStartScheduler+0x12c>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007054:	4a19      	ldr	r2, [pc, #100]	; (80070bc <xPortStartScheduler+0x12c>)
 8007056:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	b2da      	uxtb	r2, r3
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007060:	4b17      	ldr	r3, [pc, #92]	; (80070c0 <xPortStartScheduler+0x130>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a16      	ldr	r2, [pc, #88]	; (80070c0 <xPortStartScheduler+0x130>)
 8007066:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800706a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800706c:	4b14      	ldr	r3, [pc, #80]	; (80070c0 <xPortStartScheduler+0x130>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a13      	ldr	r2, [pc, #76]	; (80070c0 <xPortStartScheduler+0x130>)
 8007072:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007076:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007078:	f000 f8d6 	bl	8007228 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800707c:	4b11      	ldr	r3, [pc, #68]	; (80070c4 <xPortStartScheduler+0x134>)
 800707e:	2200      	movs	r2, #0
 8007080:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007082:	f000 f8f5 	bl	8007270 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007086:	4b10      	ldr	r3, [pc, #64]	; (80070c8 <xPortStartScheduler+0x138>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a0f      	ldr	r2, [pc, #60]	; (80070c8 <xPortStartScheduler+0x138>)
 800708c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007090:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007092:	f7ff ff69 	bl	8006f68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007096:	f7ff f871 	bl	800617c <vTaskSwitchContext>
	prvTaskExitError();
 800709a:	f7ff ff27 	bl	8006eec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3718      	adds	r7, #24
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	e000ed00 	.word	0xe000ed00
 80070ac:	410fc271 	.word	0x410fc271
 80070b0:	410fc270 	.word	0x410fc270
 80070b4:	e000e400 	.word	0xe000e400
 80070b8:	20000ee4 	.word	0x20000ee4
 80070bc:	20000ee8 	.word	0x20000ee8
 80070c0:	e000ed20 	.word	0xe000ed20
 80070c4:	20000114 	.word	0x20000114
 80070c8:	e000ef34 	.word	0xe000ef34

080070cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d6:	f383 8811 	msr	BASEPRI, r3
 80070da:	f3bf 8f6f 	isb	sy
 80070de:	f3bf 8f4f 	dsb	sy
 80070e2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80070e4:	4b0e      	ldr	r3, [pc, #56]	; (8007120 <vPortEnterCritical+0x54>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	3301      	adds	r3, #1
 80070ea:	4a0d      	ldr	r2, [pc, #52]	; (8007120 <vPortEnterCritical+0x54>)
 80070ec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80070ee:	4b0c      	ldr	r3, [pc, #48]	; (8007120 <vPortEnterCritical+0x54>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d10e      	bne.n	8007114 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80070f6:	4b0b      	ldr	r3, [pc, #44]	; (8007124 <vPortEnterCritical+0x58>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d009      	beq.n	8007114 <vPortEnterCritical+0x48>
 8007100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007104:	f383 8811 	msr	BASEPRI, r3
 8007108:	f3bf 8f6f 	isb	sy
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	603b      	str	r3, [r7, #0]
 8007112:	e7fe      	b.n	8007112 <vPortEnterCritical+0x46>
	}
}
 8007114:	bf00      	nop
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	20000114 	.word	0x20000114
 8007124:	e000ed04 	.word	0xe000ed04

08007128 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800712e:	4b11      	ldr	r3, [pc, #68]	; (8007174 <vPortExitCritical+0x4c>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d109      	bne.n	800714a <vPortExitCritical+0x22>
 8007136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713a:	f383 8811 	msr	BASEPRI, r3
 800713e:	f3bf 8f6f 	isb	sy
 8007142:	f3bf 8f4f 	dsb	sy
 8007146:	607b      	str	r3, [r7, #4]
 8007148:	e7fe      	b.n	8007148 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800714a:	4b0a      	ldr	r3, [pc, #40]	; (8007174 <vPortExitCritical+0x4c>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	3b01      	subs	r3, #1
 8007150:	4a08      	ldr	r2, [pc, #32]	; (8007174 <vPortExitCritical+0x4c>)
 8007152:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007154:	4b07      	ldr	r3, [pc, #28]	; (8007174 <vPortExitCritical+0x4c>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d104      	bne.n	8007166 <vPortExitCritical+0x3e>
 800715c:	2300      	movs	r3, #0
 800715e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007166:	bf00      	nop
 8007168:	370c      	adds	r7, #12
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	20000114 	.word	0x20000114
	...

08007180 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007180:	f3ef 8009 	mrs	r0, PSP
 8007184:	f3bf 8f6f 	isb	sy
 8007188:	4b15      	ldr	r3, [pc, #84]	; (80071e0 <pxCurrentTCBConst>)
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	f01e 0f10 	tst.w	lr, #16
 8007190:	bf08      	it	eq
 8007192:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007196:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800719a:	6010      	str	r0, [r2, #0]
 800719c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80071a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80071a4:	f380 8811 	msr	BASEPRI, r0
 80071a8:	f3bf 8f4f 	dsb	sy
 80071ac:	f3bf 8f6f 	isb	sy
 80071b0:	f7fe ffe4 	bl	800617c <vTaskSwitchContext>
 80071b4:	f04f 0000 	mov.w	r0, #0
 80071b8:	f380 8811 	msr	BASEPRI, r0
 80071bc:	bc09      	pop	{r0, r3}
 80071be:	6819      	ldr	r1, [r3, #0]
 80071c0:	6808      	ldr	r0, [r1, #0]
 80071c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c6:	f01e 0f10 	tst.w	lr, #16
 80071ca:	bf08      	it	eq
 80071cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80071d0:	f380 8809 	msr	PSP, r0
 80071d4:	f3bf 8f6f 	isb	sy
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop
 80071dc:	f3af 8000 	nop.w

080071e0 <pxCurrentTCBConst>:
 80071e0:	200008b8 	.word	0x200008b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80071e4:	bf00      	nop
 80071e6:	bf00      	nop

080071e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
	__asm volatile
 80071ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f2:	f383 8811 	msr	BASEPRI, r3
 80071f6:	f3bf 8f6f 	isb	sy
 80071fa:	f3bf 8f4f 	dsb	sy
 80071fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007200:	f7fe ff04 	bl	800600c <xTaskIncrementTick>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	d003      	beq.n	8007212 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800720a:	4b06      	ldr	r3, [pc, #24]	; (8007224 <SysTick_Handler+0x3c>)
 800720c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007210:	601a      	str	r2, [r3, #0]
 8007212:	2300      	movs	r3, #0
 8007214:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800721c:	bf00      	nop
 800721e:	3708      	adds	r7, #8
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	e000ed04 	.word	0xe000ed04

08007228 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007228:	b480      	push	{r7}
 800722a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800722c:	4b0b      	ldr	r3, [pc, #44]	; (800725c <vPortSetupTimerInterrupt+0x34>)
 800722e:	2200      	movs	r2, #0
 8007230:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007232:	4b0b      	ldr	r3, [pc, #44]	; (8007260 <vPortSetupTimerInterrupt+0x38>)
 8007234:	2200      	movs	r2, #0
 8007236:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007238:	4b0a      	ldr	r3, [pc, #40]	; (8007264 <vPortSetupTimerInterrupt+0x3c>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a0a      	ldr	r2, [pc, #40]	; (8007268 <vPortSetupTimerInterrupt+0x40>)
 800723e:	fba2 2303 	umull	r2, r3, r2, r3
 8007242:	099b      	lsrs	r3, r3, #6
 8007244:	4a09      	ldr	r2, [pc, #36]	; (800726c <vPortSetupTimerInterrupt+0x44>)
 8007246:	3b01      	subs	r3, #1
 8007248:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800724a:	4b04      	ldr	r3, [pc, #16]	; (800725c <vPortSetupTimerInterrupt+0x34>)
 800724c:	2207      	movs	r2, #7
 800724e:	601a      	str	r2, [r3, #0]
}
 8007250:	bf00      	nop
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	e000e010 	.word	0xe000e010
 8007260:	e000e018 	.word	0xe000e018
 8007264:	20000000 	.word	0x20000000
 8007268:	10624dd3 	.word	0x10624dd3
 800726c:	e000e014 	.word	0xe000e014

08007270 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007270:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007280 <vPortEnableVFP+0x10>
 8007274:	6801      	ldr	r1, [r0, #0]
 8007276:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800727a:	6001      	str	r1, [r0, #0]
 800727c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800727e:	bf00      	nop
 8007280:	e000ed88 	.word	0xe000ed88

08007284 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007284:	b480      	push	{r7}
 8007286:	b085      	sub	sp, #20
 8007288:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800728a:	f3ef 8305 	mrs	r3, IPSR
 800728e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2b0f      	cmp	r3, #15
 8007294:	d913      	bls.n	80072be <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007296:	4a16      	ldr	r2, [pc, #88]	; (80072f0 <vPortValidateInterruptPriority+0x6c>)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	4413      	add	r3, r2
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80072a0:	4b14      	ldr	r3, [pc, #80]	; (80072f4 <vPortValidateInterruptPriority+0x70>)
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	7afa      	ldrb	r2, [r7, #11]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d209      	bcs.n	80072be <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80072aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ae:	f383 8811 	msr	BASEPRI, r3
 80072b2:	f3bf 8f6f 	isb	sy
 80072b6:	f3bf 8f4f 	dsb	sy
 80072ba:	607b      	str	r3, [r7, #4]
 80072bc:	e7fe      	b.n	80072bc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80072be:	4b0e      	ldr	r3, [pc, #56]	; (80072f8 <vPortValidateInterruptPriority+0x74>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80072c6:	4b0d      	ldr	r3, [pc, #52]	; (80072fc <vPortValidateInterruptPriority+0x78>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d909      	bls.n	80072e2 <vPortValidateInterruptPriority+0x5e>
 80072ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d2:	f383 8811 	msr	BASEPRI, r3
 80072d6:	f3bf 8f6f 	isb	sy
 80072da:	f3bf 8f4f 	dsb	sy
 80072de:	603b      	str	r3, [r7, #0]
 80072e0:	e7fe      	b.n	80072e0 <vPortValidateInterruptPriority+0x5c>
	}
 80072e2:	bf00      	nop
 80072e4:	3714      	adds	r7, #20
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	e000e3f0 	.word	0xe000e3f0
 80072f4:	20000ee4 	.word	0x20000ee4
 80072f8:	e000ed0c 	.word	0xe000ed0c
 80072fc:	20000ee8 	.word	0x20000ee8

08007300 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b08a      	sub	sp, #40	; 0x28
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007308:	2300      	movs	r3, #0
 800730a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800730c:	f7fe fdc4 	bl	8005e98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007310:	4b57      	ldr	r3, [pc, #348]	; (8007470 <pvPortMalloc+0x170>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d101      	bne.n	800731c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007318:	f000 f90c 	bl	8007534 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800731c:	4b55      	ldr	r3, [pc, #340]	; (8007474 <pvPortMalloc+0x174>)
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4013      	ands	r3, r2
 8007324:	2b00      	cmp	r3, #0
 8007326:	f040 808c 	bne.w	8007442 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d01c      	beq.n	800736a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007330:	2208      	movs	r2, #8
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4413      	add	r3, r2
 8007336:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f003 0307 	and.w	r3, r3, #7
 800733e:	2b00      	cmp	r3, #0
 8007340:	d013      	beq.n	800736a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f023 0307 	bic.w	r3, r3, #7
 8007348:	3308      	adds	r3, #8
 800734a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f003 0307 	and.w	r3, r3, #7
 8007352:	2b00      	cmp	r3, #0
 8007354:	d009      	beq.n	800736a <pvPortMalloc+0x6a>
 8007356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800735a:	f383 8811 	msr	BASEPRI, r3
 800735e:	f3bf 8f6f 	isb	sy
 8007362:	f3bf 8f4f 	dsb	sy
 8007366:	617b      	str	r3, [r7, #20]
 8007368:	e7fe      	b.n	8007368 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d068      	beq.n	8007442 <pvPortMalloc+0x142>
 8007370:	4b41      	ldr	r3, [pc, #260]	; (8007478 <pvPortMalloc+0x178>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	429a      	cmp	r2, r3
 8007378:	d863      	bhi.n	8007442 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800737a:	4b40      	ldr	r3, [pc, #256]	; (800747c <pvPortMalloc+0x17c>)
 800737c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800737e:	4b3f      	ldr	r3, [pc, #252]	; (800747c <pvPortMalloc+0x17c>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007384:	e004      	b.n	8007390 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007388:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800738a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	429a      	cmp	r2, r3
 8007398:	d903      	bls.n	80073a2 <pvPortMalloc+0xa2>
 800739a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1f1      	bne.n	8007386 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80073a2:	4b33      	ldr	r3, [pc, #204]	; (8007470 <pvPortMalloc+0x170>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d04a      	beq.n	8007442 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80073ac:	6a3b      	ldr	r3, [r7, #32]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2208      	movs	r2, #8
 80073b2:	4413      	add	r3, r2
 80073b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80073b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	6a3b      	ldr	r3, [r7, #32]
 80073bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80073be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c0:	685a      	ldr	r2, [r3, #4]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	1ad2      	subs	r2, r2, r3
 80073c6:	2308      	movs	r3, #8
 80073c8:	005b      	lsls	r3, r3, #1
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d91e      	bls.n	800740c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80073ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4413      	add	r3, r2
 80073d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	f003 0307 	and.w	r3, r3, #7
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d009      	beq.n	80073f4 <pvPortMalloc+0xf4>
 80073e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e4:	f383 8811 	msr	BASEPRI, r3
 80073e8:	f3bf 8f6f 	isb	sy
 80073ec:	f3bf 8f4f 	dsb	sy
 80073f0:	613b      	str	r3, [r7, #16]
 80073f2:	e7fe      	b.n	80073f2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80073f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f6:	685a      	ldr	r2, [r3, #4]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	1ad2      	subs	r2, r2, r3
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007406:	69b8      	ldr	r0, [r7, #24]
 8007408:	f000 f8f6 	bl	80075f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800740c:	4b1a      	ldr	r3, [pc, #104]	; (8007478 <pvPortMalloc+0x178>)
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	1ad3      	subs	r3, r2, r3
 8007416:	4a18      	ldr	r2, [pc, #96]	; (8007478 <pvPortMalloc+0x178>)
 8007418:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800741a:	4b17      	ldr	r3, [pc, #92]	; (8007478 <pvPortMalloc+0x178>)
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	4b18      	ldr	r3, [pc, #96]	; (8007480 <pvPortMalloc+0x180>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	429a      	cmp	r2, r3
 8007424:	d203      	bcs.n	800742e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007426:	4b14      	ldr	r3, [pc, #80]	; (8007478 <pvPortMalloc+0x178>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a15      	ldr	r2, [pc, #84]	; (8007480 <pvPortMalloc+0x180>)
 800742c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800742e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007430:	685a      	ldr	r2, [r3, #4]
 8007432:	4b10      	ldr	r3, [pc, #64]	; (8007474 <pvPortMalloc+0x174>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	431a      	orrs	r2, r3
 8007438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800743c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743e:	2200      	movs	r2, #0
 8007440:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007442:	f7fe fd37 	bl	8005eb4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007446:	69fb      	ldr	r3, [r7, #28]
 8007448:	f003 0307 	and.w	r3, r3, #7
 800744c:	2b00      	cmp	r3, #0
 800744e:	d009      	beq.n	8007464 <pvPortMalloc+0x164>
 8007450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007454:	f383 8811 	msr	BASEPRI, r3
 8007458:	f3bf 8f6f 	isb	sy
 800745c:	f3bf 8f4f 	dsb	sy
 8007460:	60fb      	str	r3, [r7, #12]
 8007462:	e7fe      	b.n	8007462 <pvPortMalloc+0x162>
	return pvReturn;
 8007464:	69fb      	ldr	r3, [r7, #28]
}
 8007466:	4618      	mov	r0, r3
 8007468:	3728      	adds	r7, #40	; 0x28
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
 800746e:	bf00      	nop
 8007470:	20004af4 	.word	0x20004af4
 8007474:	20004b00 	.word	0x20004b00
 8007478:	20004af8 	.word	0x20004af8
 800747c:	20004aec 	.word	0x20004aec
 8007480:	20004afc 	.word	0x20004afc

08007484 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b086      	sub	sp, #24
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d046      	beq.n	8007524 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007496:	2308      	movs	r3, #8
 8007498:	425b      	negs	r3, r3
 800749a:	697a      	ldr	r2, [r7, #20]
 800749c:	4413      	add	r3, r2
 800749e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	685a      	ldr	r2, [r3, #4]
 80074a8:	4b20      	ldr	r3, [pc, #128]	; (800752c <vPortFree+0xa8>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4013      	ands	r3, r2
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d109      	bne.n	80074c6 <vPortFree+0x42>
 80074b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b6:	f383 8811 	msr	BASEPRI, r3
 80074ba:	f3bf 8f6f 	isb	sy
 80074be:	f3bf 8f4f 	dsb	sy
 80074c2:	60fb      	str	r3, [r7, #12]
 80074c4:	e7fe      	b.n	80074c4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d009      	beq.n	80074e2 <vPortFree+0x5e>
 80074ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d2:	f383 8811 	msr	BASEPRI, r3
 80074d6:	f3bf 8f6f 	isb	sy
 80074da:	f3bf 8f4f 	dsb	sy
 80074de:	60bb      	str	r3, [r7, #8]
 80074e0:	e7fe      	b.n	80074e0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	685a      	ldr	r2, [r3, #4]
 80074e6:	4b11      	ldr	r3, [pc, #68]	; (800752c <vPortFree+0xa8>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4013      	ands	r3, r2
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d019      	beq.n	8007524 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d115      	bne.n	8007524 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	685a      	ldr	r2, [r3, #4]
 80074fc:	4b0b      	ldr	r3, [pc, #44]	; (800752c <vPortFree+0xa8>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	43db      	mvns	r3, r3
 8007502:	401a      	ands	r2, r3
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007508:	f7fe fcc6 	bl	8005e98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	685a      	ldr	r2, [r3, #4]
 8007510:	4b07      	ldr	r3, [pc, #28]	; (8007530 <vPortFree+0xac>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4413      	add	r3, r2
 8007516:	4a06      	ldr	r2, [pc, #24]	; (8007530 <vPortFree+0xac>)
 8007518:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800751a:	6938      	ldr	r0, [r7, #16]
 800751c:	f000 f86c 	bl	80075f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007520:	f7fe fcc8 	bl	8005eb4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007524:	bf00      	nop
 8007526:	3718      	adds	r7, #24
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}
 800752c:	20004b00 	.word	0x20004b00
 8007530:	20004af8 	.word	0x20004af8

08007534 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007534:	b480      	push	{r7}
 8007536:	b085      	sub	sp, #20
 8007538:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800753a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800753e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007540:	4b27      	ldr	r3, [pc, #156]	; (80075e0 <prvHeapInit+0xac>)
 8007542:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f003 0307 	and.w	r3, r3, #7
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00c      	beq.n	8007568 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	3307      	adds	r3, #7
 8007552:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f023 0307 	bic.w	r3, r3, #7
 800755a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800755c:	68ba      	ldr	r2, [r7, #8]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	1ad3      	subs	r3, r2, r3
 8007562:	4a1f      	ldr	r2, [pc, #124]	; (80075e0 <prvHeapInit+0xac>)
 8007564:	4413      	add	r3, r2
 8007566:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800756c:	4a1d      	ldr	r2, [pc, #116]	; (80075e4 <prvHeapInit+0xb0>)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007572:	4b1c      	ldr	r3, [pc, #112]	; (80075e4 <prvHeapInit+0xb0>)
 8007574:	2200      	movs	r2, #0
 8007576:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	68ba      	ldr	r2, [r7, #8]
 800757c:	4413      	add	r3, r2
 800757e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007580:	2208      	movs	r2, #8
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	1a9b      	subs	r3, r3, r2
 8007586:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f023 0307 	bic.w	r3, r3, #7
 800758e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	4a15      	ldr	r2, [pc, #84]	; (80075e8 <prvHeapInit+0xb4>)
 8007594:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007596:	4b14      	ldr	r3, [pc, #80]	; (80075e8 <prvHeapInit+0xb4>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2200      	movs	r2, #0
 800759c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800759e:	4b12      	ldr	r3, [pc, #72]	; (80075e8 <prvHeapInit+0xb4>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2200      	movs	r2, #0
 80075a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	1ad2      	subs	r2, r2, r3
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80075b4:	4b0c      	ldr	r3, [pc, #48]	; (80075e8 <prvHeapInit+0xb4>)
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	4a0a      	ldr	r2, [pc, #40]	; (80075ec <prvHeapInit+0xb8>)
 80075c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	4a09      	ldr	r2, [pc, #36]	; (80075f0 <prvHeapInit+0xbc>)
 80075ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80075cc:	4b09      	ldr	r3, [pc, #36]	; (80075f4 <prvHeapInit+0xc0>)
 80075ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80075d2:	601a      	str	r2, [r3, #0]
}
 80075d4:	bf00      	nop
 80075d6:	3714      	adds	r7, #20
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr
 80075e0:	20000eec 	.word	0x20000eec
 80075e4:	20004aec 	.word	0x20004aec
 80075e8:	20004af4 	.word	0x20004af4
 80075ec:	20004afc 	.word	0x20004afc
 80075f0:	20004af8 	.word	0x20004af8
 80075f4:	20004b00 	.word	0x20004b00

080075f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80075f8:	b480      	push	{r7}
 80075fa:	b085      	sub	sp, #20
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007600:	4b28      	ldr	r3, [pc, #160]	; (80076a4 <prvInsertBlockIntoFreeList+0xac>)
 8007602:	60fb      	str	r3, [r7, #12]
 8007604:	e002      	b.n	800760c <prvInsertBlockIntoFreeList+0x14>
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	60fb      	str	r3, [r7, #12]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	429a      	cmp	r2, r3
 8007614:	d8f7      	bhi.n	8007606 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	68ba      	ldr	r2, [r7, #8]
 8007620:	4413      	add	r3, r2
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	429a      	cmp	r2, r3
 8007626:	d108      	bne.n	800763a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	685a      	ldr	r2, [r3, #4]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	441a      	add	r2, r3
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	68ba      	ldr	r2, [r7, #8]
 8007644:	441a      	add	r2, r3
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	429a      	cmp	r2, r3
 800764c:	d118      	bne.n	8007680 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	4b15      	ldr	r3, [pc, #84]	; (80076a8 <prvInsertBlockIntoFreeList+0xb0>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	429a      	cmp	r2, r3
 8007658:	d00d      	beq.n	8007676 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	685a      	ldr	r2, [r3, #4]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	441a      	add	r2, r3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	601a      	str	r2, [r3, #0]
 8007674:	e008      	b.n	8007688 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007676:	4b0c      	ldr	r3, [pc, #48]	; (80076a8 <prvInsertBlockIntoFreeList+0xb0>)
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	601a      	str	r2, [r3, #0]
 800767e:	e003      	b.n	8007688 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007688:	68fa      	ldr	r2, [r7, #12]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	429a      	cmp	r2, r3
 800768e:	d002      	beq.n	8007696 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007696:	bf00      	nop
 8007698:	3714      	adds	r7, #20
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	20004aec 	.word	0x20004aec
 80076a8:	20004af4 	.word	0x20004af4

080076ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80076b0:	2200      	movs	r2, #0
 80076b2:	490e      	ldr	r1, [pc, #56]	; (80076ec <MX_USB_DEVICE_Init+0x40>)
 80076b4:	480e      	ldr	r0, [pc, #56]	; (80076f0 <MX_USB_DEVICE_Init+0x44>)
 80076b6:	f7fd f9c9 	bl	8004a4c <USBD_Init>
 80076ba:	4603      	mov	r3, r0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d001      	beq.n	80076c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80076c0:	f7f9 f8c6 	bl	8000850 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80076c4:	490b      	ldr	r1, [pc, #44]	; (80076f4 <MX_USB_DEVICE_Init+0x48>)
 80076c6:	480a      	ldr	r0, [pc, #40]	; (80076f0 <MX_USB_DEVICE_Init+0x44>)
 80076c8:	f7fd f9f6 	bl	8004ab8 <USBD_RegisterClass>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d001      	beq.n	80076d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80076d2:	f7f9 f8bd 	bl	8000850 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80076d6:	4806      	ldr	r0, [pc, #24]	; (80076f0 <MX_USB_DEVICE_Init+0x44>)
 80076d8:	f7fd fa0f 	bl	8004afa <USBD_Start>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d001      	beq.n	80076e6 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80076e2:	f7f9 f8b5 	bl	8000850 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80076e6:	bf00      	nop
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop
 80076ec:	20000118 	.word	0x20000118
 80076f0:	20004c14 	.word	0x20004c14
 80076f4:	2000000c 	.word	0x2000000c

080076f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	4603      	mov	r3, r0
 8007700:	6039      	str	r1, [r7, #0]
 8007702:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	2212      	movs	r2, #18
 8007708:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800770a:	4b03      	ldr	r3, [pc, #12]	; (8007718 <USBD_FS_DeviceDescriptor+0x20>)
}
 800770c:	4618      	mov	r0, r3
 800770e:	370c      	adds	r7, #12
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr
 8007718:	20000138 	.word	0x20000138

0800771c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	4603      	mov	r3, r0
 8007724:	6039      	str	r1, [r7, #0]
 8007726:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	2204      	movs	r2, #4
 800772c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800772e:	4b03      	ldr	r3, [pc, #12]	; (800773c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007730:	4618      	mov	r0, r3
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr
 800773c:	20000158 	.word	0x20000158

08007740 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
 8007746:	4603      	mov	r3, r0
 8007748:	6039      	str	r1, [r7, #0]
 800774a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800774c:	79fb      	ldrb	r3, [r7, #7]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d105      	bne.n	800775e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007752:	683a      	ldr	r2, [r7, #0]
 8007754:	4907      	ldr	r1, [pc, #28]	; (8007774 <USBD_FS_ProductStrDescriptor+0x34>)
 8007756:	4808      	ldr	r0, [pc, #32]	; (8007778 <USBD_FS_ProductStrDescriptor+0x38>)
 8007758:	f7fd f9ec 	bl	8004b34 <USBD_GetString>
 800775c:	e004      	b.n	8007768 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800775e:	683a      	ldr	r2, [r7, #0]
 8007760:	4904      	ldr	r1, [pc, #16]	; (8007774 <USBD_FS_ProductStrDescriptor+0x34>)
 8007762:	4805      	ldr	r0, [pc, #20]	; (8007778 <USBD_FS_ProductStrDescriptor+0x38>)
 8007764:	f7fd f9e6 	bl	8004b34 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007768:	4b02      	ldr	r3, [pc, #8]	; (8007774 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800776a:	4618      	mov	r0, r3
 800776c:	3708      	adds	r7, #8
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
 8007772:	bf00      	nop
 8007774:	20004ee4 	.word	0x20004ee4
 8007778:	08007e4c 	.word	0x08007e4c

0800777c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b082      	sub	sp, #8
 8007780:	af00      	add	r7, sp, #0
 8007782:	4603      	mov	r3, r0
 8007784:	6039      	str	r1, [r7, #0]
 8007786:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007788:	683a      	ldr	r2, [r7, #0]
 800778a:	4904      	ldr	r1, [pc, #16]	; (800779c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800778c:	4804      	ldr	r0, [pc, #16]	; (80077a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800778e:	f7fd f9d1 	bl	8004b34 <USBD_GetString>
  return USBD_StrDesc;
 8007792:	4b02      	ldr	r3, [pc, #8]	; (800779c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007794:	4618      	mov	r0, r3
 8007796:	3708      	adds	r7, #8
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	20004ee4 	.word	0x20004ee4
 80077a0:	08007e64 	.word	0x08007e64

080077a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	4603      	mov	r3, r0
 80077ac:	6039      	str	r1, [r7, #0]
 80077ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	221a      	movs	r2, #26
 80077b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80077b6:	f000 f855 	bl	8007864 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80077ba:	4b02      	ldr	r3, [pc, #8]	; (80077c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3708      	adds	r7, #8
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	2000015c 	.word	0x2000015c

080077c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	4603      	mov	r3, r0
 80077d0:	6039      	str	r1, [r7, #0]
 80077d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80077d4:	79fb      	ldrb	r3, [r7, #7]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d105      	bne.n	80077e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80077da:	683a      	ldr	r2, [r7, #0]
 80077dc:	4907      	ldr	r1, [pc, #28]	; (80077fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80077de:	4808      	ldr	r0, [pc, #32]	; (8007800 <USBD_FS_ConfigStrDescriptor+0x38>)
 80077e0:	f7fd f9a8 	bl	8004b34 <USBD_GetString>
 80077e4:	e004      	b.n	80077f0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80077e6:	683a      	ldr	r2, [r7, #0]
 80077e8:	4904      	ldr	r1, [pc, #16]	; (80077fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80077ea:	4805      	ldr	r0, [pc, #20]	; (8007800 <USBD_FS_ConfigStrDescriptor+0x38>)
 80077ec:	f7fd f9a2 	bl	8004b34 <USBD_GetString>
  }
  return USBD_StrDesc;
 80077f0:	4b02      	ldr	r3, [pc, #8]	; (80077fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3708      	adds	r7, #8
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	20004ee4 	.word	0x20004ee4
 8007800:	08007e78 	.word	0x08007e78

08007804 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b082      	sub	sp, #8
 8007808:	af00      	add	r7, sp, #0
 800780a:	4603      	mov	r3, r0
 800780c:	6039      	str	r1, [r7, #0]
 800780e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007810:	79fb      	ldrb	r3, [r7, #7]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d105      	bne.n	8007822 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007816:	683a      	ldr	r2, [r7, #0]
 8007818:	4907      	ldr	r1, [pc, #28]	; (8007838 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800781a:	4808      	ldr	r0, [pc, #32]	; (800783c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800781c:	f7fd f98a 	bl	8004b34 <USBD_GetString>
 8007820:	e004      	b.n	800782c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007822:	683a      	ldr	r2, [r7, #0]
 8007824:	4904      	ldr	r1, [pc, #16]	; (8007838 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007826:	4805      	ldr	r0, [pc, #20]	; (800783c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007828:	f7fd f984 	bl	8004b34 <USBD_GetString>
  }
  return USBD_StrDesc;
 800782c:	4b02      	ldr	r3, [pc, #8]	; (8007838 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800782e:	4618      	mov	r0, r3
 8007830:	3708      	adds	r7, #8
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	20004ee4 	.word	0x20004ee4
 800783c:	08007e84 	.word	0x08007e84

08007840 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	4603      	mov	r3, r0
 8007848:	6039      	str	r1, [r7, #0]
 800784a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	220c      	movs	r2, #12
 8007850:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8007852:	4b03      	ldr	r3, [pc, #12]	; (8007860 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8007854:	4618      	mov	r0, r3
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr
 8007860:	2000014c 	.word	0x2000014c

08007864 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800786a:	4b0f      	ldr	r3, [pc, #60]	; (80078a8 <Get_SerialNum+0x44>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007870:	4b0e      	ldr	r3, [pc, #56]	; (80078ac <Get_SerialNum+0x48>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007876:	4b0e      	ldr	r3, [pc, #56]	; (80078b0 <Get_SerialNum+0x4c>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800787c:	68fa      	ldr	r2, [r7, #12]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4413      	add	r3, r2
 8007882:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d009      	beq.n	800789e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800788a:	2208      	movs	r2, #8
 800788c:	4909      	ldr	r1, [pc, #36]	; (80078b4 <Get_SerialNum+0x50>)
 800788e:	68f8      	ldr	r0, [r7, #12]
 8007890:	f000 f814 	bl	80078bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007894:	2204      	movs	r2, #4
 8007896:	4908      	ldr	r1, [pc, #32]	; (80078b8 <Get_SerialNum+0x54>)
 8007898:	68b8      	ldr	r0, [r7, #8]
 800789a:	f000 f80f 	bl	80078bc <IntToUnicode>
  }
}
 800789e:	bf00      	nop
 80078a0:	3710      	adds	r7, #16
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	1fff7a10 	.word	0x1fff7a10
 80078ac:	1fff7a14 	.word	0x1fff7a14
 80078b0:	1fff7a18 	.word	0x1fff7a18
 80078b4:	2000015e 	.word	0x2000015e
 80078b8:	2000016e 	.word	0x2000016e

080078bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80078bc:	b480      	push	{r7}
 80078be:	b087      	sub	sp, #28
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	4613      	mov	r3, r2
 80078c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80078ca:	2300      	movs	r3, #0
 80078cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80078ce:	2300      	movs	r3, #0
 80078d0:	75fb      	strb	r3, [r7, #23]
 80078d2:	e027      	b.n	8007924 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	0f1b      	lsrs	r3, r3, #28
 80078d8:	2b09      	cmp	r3, #9
 80078da:	d80b      	bhi.n	80078f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	0f1b      	lsrs	r3, r3, #28
 80078e0:	b2da      	uxtb	r2, r3
 80078e2:	7dfb      	ldrb	r3, [r7, #23]
 80078e4:	005b      	lsls	r3, r3, #1
 80078e6:	4619      	mov	r1, r3
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	440b      	add	r3, r1
 80078ec:	3230      	adds	r2, #48	; 0x30
 80078ee:	b2d2      	uxtb	r2, r2
 80078f0:	701a      	strb	r2, [r3, #0]
 80078f2:	e00a      	b.n	800790a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	0f1b      	lsrs	r3, r3, #28
 80078f8:	b2da      	uxtb	r2, r3
 80078fa:	7dfb      	ldrb	r3, [r7, #23]
 80078fc:	005b      	lsls	r3, r3, #1
 80078fe:	4619      	mov	r1, r3
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	440b      	add	r3, r1
 8007904:	3237      	adds	r2, #55	; 0x37
 8007906:	b2d2      	uxtb	r2, r2
 8007908:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	011b      	lsls	r3, r3, #4
 800790e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007910:	7dfb      	ldrb	r3, [r7, #23]
 8007912:	005b      	lsls	r3, r3, #1
 8007914:	3301      	adds	r3, #1
 8007916:	68ba      	ldr	r2, [r7, #8]
 8007918:	4413      	add	r3, r2
 800791a:	2200      	movs	r2, #0
 800791c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800791e:	7dfb      	ldrb	r3, [r7, #23]
 8007920:	3301      	adds	r3, #1
 8007922:	75fb      	strb	r3, [r7, #23]
 8007924:	7dfa      	ldrb	r2, [r7, #23]
 8007926:	79fb      	ldrb	r3, [r7, #7]
 8007928:	429a      	cmp	r2, r3
 800792a:	d3d3      	bcc.n	80078d4 <IntToUnicode+0x18>
  }
}
 800792c:	bf00      	nop
 800792e:	371c      	adds	r7, #28
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b08a      	sub	sp, #40	; 0x28
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007940:	f107 0314 	add.w	r3, r7, #20
 8007944:	2200      	movs	r2, #0
 8007946:	601a      	str	r2, [r3, #0]
 8007948:	605a      	str	r2, [r3, #4]
 800794a:	609a      	str	r2, [r3, #8]
 800794c:	60da      	str	r2, [r3, #12]
 800794e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007958:	d132      	bne.n	80079c0 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800795a:	2300      	movs	r3, #0
 800795c:	613b      	str	r3, [r7, #16]
 800795e:	4b1a      	ldr	r3, [pc, #104]	; (80079c8 <HAL_PCD_MspInit+0x90>)
 8007960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007962:	4a19      	ldr	r2, [pc, #100]	; (80079c8 <HAL_PCD_MspInit+0x90>)
 8007964:	f043 0301 	orr.w	r3, r3, #1
 8007968:	6313      	str	r3, [r2, #48]	; 0x30
 800796a:	4b17      	ldr	r3, [pc, #92]	; (80079c8 <HAL_PCD_MspInit+0x90>)
 800796c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800796e:	f003 0301 	and.w	r3, r3, #1
 8007972:	613b      	str	r3, [r7, #16]
 8007974:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007976:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800797a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800797c:	2302      	movs	r3, #2
 800797e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007980:	2300      	movs	r3, #0
 8007982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007984:	2303      	movs	r3, #3
 8007986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007988:	230a      	movs	r3, #10
 800798a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800798c:	f107 0314 	add.w	r3, r7, #20
 8007990:	4619      	mov	r1, r3
 8007992:	480e      	ldr	r0, [pc, #56]	; (80079cc <HAL_PCD_MspInit+0x94>)
 8007994:	f7f9 fa60 	bl	8000e58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007998:	4b0b      	ldr	r3, [pc, #44]	; (80079c8 <HAL_PCD_MspInit+0x90>)
 800799a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800799c:	4a0a      	ldr	r2, [pc, #40]	; (80079c8 <HAL_PCD_MspInit+0x90>)
 800799e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079a2:	6353      	str	r3, [r2, #52]	; 0x34
 80079a4:	2300      	movs	r3, #0
 80079a6:	60fb      	str	r3, [r7, #12]
 80079a8:	4b07      	ldr	r3, [pc, #28]	; (80079c8 <HAL_PCD_MspInit+0x90>)
 80079aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ac:	4a06      	ldr	r2, [pc, #24]	; (80079c8 <HAL_PCD_MspInit+0x90>)
 80079ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80079b2:	6453      	str	r3, [r2, #68]	; 0x44
 80079b4:	4b04      	ldr	r3, [pc, #16]	; (80079c8 <HAL_PCD_MspInit+0x90>)
 80079b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079bc:	60fb      	str	r3, [r7, #12]
 80079be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80079c0:	bf00      	nop
 80079c2:	3728      	adds	r7, #40	; 0x28
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	40023800 	.word	0x40023800
 80079cc:	40020000 	.word	0x40020000

080079d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d13c      	bne.n	8007a5a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80079e0:	4a20      	ldr	r2, [pc, #128]	; (8007a64 <USBD_LL_Init+0x94>)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	4a1e      	ldr	r2, [pc, #120]	; (8007a64 <USBD_LL_Init+0x94>)
 80079ec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80079f0:	4b1c      	ldr	r3, [pc, #112]	; (8007a64 <USBD_LL_Init+0x94>)
 80079f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80079f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80079f8:	4b1a      	ldr	r3, [pc, #104]	; (8007a64 <USBD_LL_Init+0x94>)
 80079fa:	2206      	movs	r2, #6
 80079fc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80079fe:	4b19      	ldr	r3, [pc, #100]	; (8007a64 <USBD_LL_Init+0x94>)
 8007a00:	2202      	movs	r2, #2
 8007a02:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007a04:	4b17      	ldr	r3, [pc, #92]	; (8007a64 <USBD_LL_Init+0x94>)
 8007a06:	2200      	movs	r2, #0
 8007a08:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007a0a:	4b16      	ldr	r3, [pc, #88]	; (8007a64 <USBD_LL_Init+0x94>)
 8007a0c:	2202      	movs	r2, #2
 8007a0e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007a10:	4b14      	ldr	r3, [pc, #80]	; (8007a64 <USBD_LL_Init+0x94>)
 8007a12:	2200      	movs	r2, #0
 8007a14:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007a16:	4b13      	ldr	r3, [pc, #76]	; (8007a64 <USBD_LL_Init+0x94>)
 8007a18:	2200      	movs	r2, #0
 8007a1a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007a1c:	4b11      	ldr	r3, [pc, #68]	; (8007a64 <USBD_LL_Init+0x94>)
 8007a1e:	2200      	movs	r2, #0
 8007a20:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007a22:	4b10      	ldr	r3, [pc, #64]	; (8007a64 <USBD_LL_Init+0x94>)
 8007a24:	2200      	movs	r2, #0
 8007a26:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007a28:	4b0e      	ldr	r3, [pc, #56]	; (8007a64 <USBD_LL_Init+0x94>)
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007a2e:	480d      	ldr	r0, [pc, #52]	; (8007a64 <USBD_LL_Init+0x94>)
 8007a30:	f7f9 fbbd 	bl	80011ae <HAL_PCD_Init>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d001      	beq.n	8007a3e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007a3a:	f7f8 ff09 	bl	8000850 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007a3e:	2180      	movs	r1, #128	; 0x80
 8007a40:	4808      	ldr	r0, [pc, #32]	; (8007a64 <USBD_LL_Init+0x94>)
 8007a42:	f7f9 feb2 	bl	80017aa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007a46:	2240      	movs	r2, #64	; 0x40
 8007a48:	2100      	movs	r1, #0
 8007a4a:	4806      	ldr	r0, [pc, #24]	; (8007a64 <USBD_LL_Init+0x94>)
 8007a4c:	f7f9 fe66 	bl	800171c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007a50:	2280      	movs	r2, #128	; 0x80
 8007a52:	2101      	movs	r1, #1
 8007a54:	4803      	ldr	r0, [pc, #12]	; (8007a64 <USBD_LL_Init+0x94>)
 8007a56:	f7f9 fe61 	bl	800171c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007a5a:	2300      	movs	r3, #0
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3708      	adds	r7, #8
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	200050e4 	.word	0x200050e4

08007a68 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a70:	2300      	movs	r3, #0
 8007a72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a74:	2300      	movs	r3, #0
 8007a76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7f9 fcb9 	bl	80013f6 <HAL_PCD_Start>
 8007a84:	4603      	mov	r3, r0
 8007a86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a88:	7bfb      	ldrb	r3, [r7, #15]
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f000 f88c 	bl	8007ba8 <USBD_Get_USB_Status>
 8007a90:	4603      	mov	r3, r0
 8007a92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a94:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b084      	sub	sp, #16
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
 8007aa6:	4608      	mov	r0, r1
 8007aa8:	4611      	mov	r1, r2
 8007aaa:	461a      	mov	r2, r3
 8007aac:	4603      	mov	r3, r0
 8007aae:	70fb      	strb	r3, [r7, #3]
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	70bb      	strb	r3, [r7, #2]
 8007ab4:	4613      	mov	r3, r2
 8007ab6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007abc:	2300      	movs	r3, #0
 8007abe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007ac6:	78bb      	ldrb	r3, [r7, #2]
 8007ac8:	883a      	ldrh	r2, [r7, #0]
 8007aca:	78f9      	ldrb	r1, [r7, #3]
 8007acc:	f7f9 fcc6 	bl	800145c <HAL_PCD_EP_Open>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ad4:	7bfb      	ldrb	r3, [r7, #15]
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f000 f866 	bl	8007ba8 <USBD_Get_USB_Status>
 8007adc:	4603      	mov	r3, r0
 8007ade:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ae0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3710      	adds	r7, #16
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b084      	sub	sp, #16
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
 8007af2:	460b      	mov	r3, r1
 8007af4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007af6:	2300      	movs	r3, #0
 8007af8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007afa:	2300      	movs	r3, #0
 8007afc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b04:	78fa      	ldrb	r2, [r7, #3]
 8007b06:	4611      	mov	r1, r2
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f7f9 fd0f 	bl	800152c <HAL_PCD_EP_Close>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b12:	7bfb      	ldrb	r3, [r7, #15]
 8007b14:	4618      	mov	r0, r3
 8007b16:	f000 f847 	bl	8007ba8 <USBD_Get_USB_Status>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3710      	adds	r7, #16
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	460b      	mov	r3, r1
 8007b32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b34:	2300      	movs	r3, #0
 8007b36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b42:	78fa      	ldrb	r2, [r7, #3]
 8007b44:	4611      	mov	r1, r2
 8007b46:	4618      	mov	r0, r3
 8007b48:	f7f9 fd84 	bl	8001654 <HAL_PCD_EP_SetStall>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b50:	7bfb      	ldrb	r3, [r7, #15]
 8007b52:	4618      	mov	r0, r3
 8007b54:	f000 f828 	bl	8007ba8 <USBD_Get_USB_Status>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3710      	adds	r7, #16
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b086      	sub	sp, #24
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	60f8      	str	r0, [r7, #12]
 8007b6e:	607a      	str	r2, [r7, #4]
 8007b70:	603b      	str	r3, [r7, #0]
 8007b72:	460b      	mov	r3, r1
 8007b74:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b76:	2300      	movs	r3, #0
 8007b78:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007b84:	7af9      	ldrb	r1, [r7, #11]
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	f7f9 fd19 	bl	80015c0 <HAL_PCD_EP_Transmit>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b92:	7dfb      	ldrb	r3, [r7, #23]
 8007b94:	4618      	mov	r0, r3
 8007b96:	f000 f807 	bl	8007ba8 <USBD_Get_USB_Status>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b9e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3718      	adds	r7, #24
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b085      	sub	sp, #20
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	4603      	mov	r3, r0
 8007bb0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007bb6:	79fb      	ldrb	r3, [r7, #7]
 8007bb8:	2b03      	cmp	r3, #3
 8007bba:	d817      	bhi.n	8007bec <USBD_Get_USB_Status+0x44>
 8007bbc:	a201      	add	r2, pc, #4	; (adr r2, 8007bc4 <USBD_Get_USB_Status+0x1c>)
 8007bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc2:	bf00      	nop
 8007bc4:	08007bd5 	.word	0x08007bd5
 8007bc8:	08007bdb 	.word	0x08007bdb
 8007bcc:	08007be1 	.word	0x08007be1
 8007bd0:	08007be7 	.word	0x08007be7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	73fb      	strb	r3, [r7, #15]
    break;
 8007bd8:	e00b      	b.n	8007bf2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007bda:	2303      	movs	r3, #3
 8007bdc:	73fb      	strb	r3, [r7, #15]
    break;
 8007bde:	e008      	b.n	8007bf2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007be0:	2301      	movs	r3, #1
 8007be2:	73fb      	strb	r3, [r7, #15]
    break;
 8007be4:	e005      	b.n	8007bf2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007be6:	2303      	movs	r3, #3
 8007be8:	73fb      	strb	r3, [r7, #15]
    break;
 8007bea:	e002      	b.n	8007bf2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007bec:	2303      	movs	r3, #3
 8007bee:	73fb      	strb	r3, [r7, #15]
    break;
 8007bf0:	bf00      	nop
  }
  return usb_status;
 8007bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3714      	adds	r7, #20
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <__errno>:
 8007c00:	4b01      	ldr	r3, [pc, #4]	; (8007c08 <__errno+0x8>)
 8007c02:	6818      	ldr	r0, [r3, #0]
 8007c04:	4770      	bx	lr
 8007c06:	bf00      	nop
 8007c08:	20000178 	.word	0x20000178

08007c0c <__libc_init_array>:
 8007c0c:	b570      	push	{r4, r5, r6, lr}
 8007c0e:	4e0d      	ldr	r6, [pc, #52]	; (8007c44 <__libc_init_array+0x38>)
 8007c10:	4c0d      	ldr	r4, [pc, #52]	; (8007c48 <__libc_init_array+0x3c>)
 8007c12:	1ba4      	subs	r4, r4, r6
 8007c14:	10a4      	asrs	r4, r4, #2
 8007c16:	2500      	movs	r5, #0
 8007c18:	42a5      	cmp	r5, r4
 8007c1a:	d109      	bne.n	8007c30 <__libc_init_array+0x24>
 8007c1c:	4e0b      	ldr	r6, [pc, #44]	; (8007c4c <__libc_init_array+0x40>)
 8007c1e:	4c0c      	ldr	r4, [pc, #48]	; (8007c50 <__libc_init_array+0x44>)
 8007c20:	f000 f8f6 	bl	8007e10 <_init>
 8007c24:	1ba4      	subs	r4, r4, r6
 8007c26:	10a4      	asrs	r4, r4, #2
 8007c28:	2500      	movs	r5, #0
 8007c2a:	42a5      	cmp	r5, r4
 8007c2c:	d105      	bne.n	8007c3a <__libc_init_array+0x2e>
 8007c2e:	bd70      	pop	{r4, r5, r6, pc}
 8007c30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007c34:	4798      	blx	r3
 8007c36:	3501      	adds	r5, #1
 8007c38:	e7ee      	b.n	8007c18 <__libc_init_array+0xc>
 8007c3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007c3e:	4798      	blx	r3
 8007c40:	3501      	adds	r5, #1
 8007c42:	e7f2      	b.n	8007c2a <__libc_init_array+0x1e>
 8007c44:	08007ed8 	.word	0x08007ed8
 8007c48:	08007ed8 	.word	0x08007ed8
 8007c4c:	08007ed8 	.word	0x08007ed8
 8007c50:	08007edc 	.word	0x08007edc

08007c54 <malloc>:
 8007c54:	4b02      	ldr	r3, [pc, #8]	; (8007c60 <malloc+0xc>)
 8007c56:	4601      	mov	r1, r0
 8007c58:	6818      	ldr	r0, [r3, #0]
 8007c5a:	f000 b86d 	b.w	8007d38 <_malloc_r>
 8007c5e:	bf00      	nop
 8007c60:	20000178 	.word	0x20000178

08007c64 <free>:
 8007c64:	4b02      	ldr	r3, [pc, #8]	; (8007c70 <free+0xc>)
 8007c66:	4601      	mov	r1, r0
 8007c68:	6818      	ldr	r0, [r3, #0]
 8007c6a:	f000 b817 	b.w	8007c9c <_free_r>
 8007c6e:	bf00      	nop
 8007c70:	20000178 	.word	0x20000178

08007c74 <memcpy>:
 8007c74:	b510      	push	{r4, lr}
 8007c76:	1e43      	subs	r3, r0, #1
 8007c78:	440a      	add	r2, r1
 8007c7a:	4291      	cmp	r1, r2
 8007c7c:	d100      	bne.n	8007c80 <memcpy+0xc>
 8007c7e:	bd10      	pop	{r4, pc}
 8007c80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c88:	e7f7      	b.n	8007c7a <memcpy+0x6>

08007c8a <memset>:
 8007c8a:	4402      	add	r2, r0
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d100      	bne.n	8007c94 <memset+0xa>
 8007c92:	4770      	bx	lr
 8007c94:	f803 1b01 	strb.w	r1, [r3], #1
 8007c98:	e7f9      	b.n	8007c8e <memset+0x4>
	...

08007c9c <_free_r>:
 8007c9c:	b538      	push	{r3, r4, r5, lr}
 8007c9e:	4605      	mov	r5, r0
 8007ca0:	2900      	cmp	r1, #0
 8007ca2:	d045      	beq.n	8007d30 <_free_r+0x94>
 8007ca4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ca8:	1f0c      	subs	r4, r1, #4
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	bfb8      	it	lt
 8007cae:	18e4      	addlt	r4, r4, r3
 8007cb0:	f000 f8ac 	bl	8007e0c <__malloc_lock>
 8007cb4:	4a1f      	ldr	r2, [pc, #124]	; (8007d34 <_free_r+0x98>)
 8007cb6:	6813      	ldr	r3, [r2, #0]
 8007cb8:	4610      	mov	r0, r2
 8007cba:	b933      	cbnz	r3, 8007cca <_free_r+0x2e>
 8007cbc:	6063      	str	r3, [r4, #4]
 8007cbe:	6014      	str	r4, [r2, #0]
 8007cc0:	4628      	mov	r0, r5
 8007cc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cc6:	f000 b8a2 	b.w	8007e0e <__malloc_unlock>
 8007cca:	42a3      	cmp	r3, r4
 8007ccc:	d90c      	bls.n	8007ce8 <_free_r+0x4c>
 8007cce:	6821      	ldr	r1, [r4, #0]
 8007cd0:	1862      	adds	r2, r4, r1
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	bf04      	itt	eq
 8007cd6:	681a      	ldreq	r2, [r3, #0]
 8007cd8:	685b      	ldreq	r3, [r3, #4]
 8007cda:	6063      	str	r3, [r4, #4]
 8007cdc:	bf04      	itt	eq
 8007cde:	1852      	addeq	r2, r2, r1
 8007ce0:	6022      	streq	r2, [r4, #0]
 8007ce2:	6004      	str	r4, [r0, #0]
 8007ce4:	e7ec      	b.n	8007cc0 <_free_r+0x24>
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	685a      	ldr	r2, [r3, #4]
 8007cea:	b10a      	cbz	r2, 8007cf0 <_free_r+0x54>
 8007cec:	42a2      	cmp	r2, r4
 8007cee:	d9fa      	bls.n	8007ce6 <_free_r+0x4a>
 8007cf0:	6819      	ldr	r1, [r3, #0]
 8007cf2:	1858      	adds	r0, r3, r1
 8007cf4:	42a0      	cmp	r0, r4
 8007cf6:	d10b      	bne.n	8007d10 <_free_r+0x74>
 8007cf8:	6820      	ldr	r0, [r4, #0]
 8007cfa:	4401      	add	r1, r0
 8007cfc:	1858      	adds	r0, r3, r1
 8007cfe:	4282      	cmp	r2, r0
 8007d00:	6019      	str	r1, [r3, #0]
 8007d02:	d1dd      	bne.n	8007cc0 <_free_r+0x24>
 8007d04:	6810      	ldr	r0, [r2, #0]
 8007d06:	6852      	ldr	r2, [r2, #4]
 8007d08:	605a      	str	r2, [r3, #4]
 8007d0a:	4401      	add	r1, r0
 8007d0c:	6019      	str	r1, [r3, #0]
 8007d0e:	e7d7      	b.n	8007cc0 <_free_r+0x24>
 8007d10:	d902      	bls.n	8007d18 <_free_r+0x7c>
 8007d12:	230c      	movs	r3, #12
 8007d14:	602b      	str	r3, [r5, #0]
 8007d16:	e7d3      	b.n	8007cc0 <_free_r+0x24>
 8007d18:	6820      	ldr	r0, [r4, #0]
 8007d1a:	1821      	adds	r1, r4, r0
 8007d1c:	428a      	cmp	r2, r1
 8007d1e:	bf04      	itt	eq
 8007d20:	6811      	ldreq	r1, [r2, #0]
 8007d22:	6852      	ldreq	r2, [r2, #4]
 8007d24:	6062      	str	r2, [r4, #4]
 8007d26:	bf04      	itt	eq
 8007d28:	1809      	addeq	r1, r1, r0
 8007d2a:	6021      	streq	r1, [r4, #0]
 8007d2c:	605c      	str	r4, [r3, #4]
 8007d2e:	e7c7      	b.n	8007cc0 <_free_r+0x24>
 8007d30:	bd38      	pop	{r3, r4, r5, pc}
 8007d32:	bf00      	nop
 8007d34:	20004b04 	.word	0x20004b04

08007d38 <_malloc_r>:
 8007d38:	b570      	push	{r4, r5, r6, lr}
 8007d3a:	1ccd      	adds	r5, r1, #3
 8007d3c:	f025 0503 	bic.w	r5, r5, #3
 8007d40:	3508      	adds	r5, #8
 8007d42:	2d0c      	cmp	r5, #12
 8007d44:	bf38      	it	cc
 8007d46:	250c      	movcc	r5, #12
 8007d48:	2d00      	cmp	r5, #0
 8007d4a:	4606      	mov	r6, r0
 8007d4c:	db01      	blt.n	8007d52 <_malloc_r+0x1a>
 8007d4e:	42a9      	cmp	r1, r5
 8007d50:	d903      	bls.n	8007d5a <_malloc_r+0x22>
 8007d52:	230c      	movs	r3, #12
 8007d54:	6033      	str	r3, [r6, #0]
 8007d56:	2000      	movs	r0, #0
 8007d58:	bd70      	pop	{r4, r5, r6, pc}
 8007d5a:	f000 f857 	bl	8007e0c <__malloc_lock>
 8007d5e:	4a21      	ldr	r2, [pc, #132]	; (8007de4 <_malloc_r+0xac>)
 8007d60:	6814      	ldr	r4, [r2, #0]
 8007d62:	4621      	mov	r1, r4
 8007d64:	b991      	cbnz	r1, 8007d8c <_malloc_r+0x54>
 8007d66:	4c20      	ldr	r4, [pc, #128]	; (8007de8 <_malloc_r+0xb0>)
 8007d68:	6823      	ldr	r3, [r4, #0]
 8007d6a:	b91b      	cbnz	r3, 8007d74 <_malloc_r+0x3c>
 8007d6c:	4630      	mov	r0, r6
 8007d6e:	f000 f83d 	bl	8007dec <_sbrk_r>
 8007d72:	6020      	str	r0, [r4, #0]
 8007d74:	4629      	mov	r1, r5
 8007d76:	4630      	mov	r0, r6
 8007d78:	f000 f838 	bl	8007dec <_sbrk_r>
 8007d7c:	1c43      	adds	r3, r0, #1
 8007d7e:	d124      	bne.n	8007dca <_malloc_r+0x92>
 8007d80:	230c      	movs	r3, #12
 8007d82:	6033      	str	r3, [r6, #0]
 8007d84:	4630      	mov	r0, r6
 8007d86:	f000 f842 	bl	8007e0e <__malloc_unlock>
 8007d8a:	e7e4      	b.n	8007d56 <_malloc_r+0x1e>
 8007d8c:	680b      	ldr	r3, [r1, #0]
 8007d8e:	1b5b      	subs	r3, r3, r5
 8007d90:	d418      	bmi.n	8007dc4 <_malloc_r+0x8c>
 8007d92:	2b0b      	cmp	r3, #11
 8007d94:	d90f      	bls.n	8007db6 <_malloc_r+0x7e>
 8007d96:	600b      	str	r3, [r1, #0]
 8007d98:	50cd      	str	r5, [r1, r3]
 8007d9a:	18cc      	adds	r4, r1, r3
 8007d9c:	4630      	mov	r0, r6
 8007d9e:	f000 f836 	bl	8007e0e <__malloc_unlock>
 8007da2:	f104 000b 	add.w	r0, r4, #11
 8007da6:	1d23      	adds	r3, r4, #4
 8007da8:	f020 0007 	bic.w	r0, r0, #7
 8007dac:	1ac3      	subs	r3, r0, r3
 8007dae:	d0d3      	beq.n	8007d58 <_malloc_r+0x20>
 8007db0:	425a      	negs	r2, r3
 8007db2:	50e2      	str	r2, [r4, r3]
 8007db4:	e7d0      	b.n	8007d58 <_malloc_r+0x20>
 8007db6:	428c      	cmp	r4, r1
 8007db8:	684b      	ldr	r3, [r1, #4]
 8007dba:	bf16      	itet	ne
 8007dbc:	6063      	strne	r3, [r4, #4]
 8007dbe:	6013      	streq	r3, [r2, #0]
 8007dc0:	460c      	movne	r4, r1
 8007dc2:	e7eb      	b.n	8007d9c <_malloc_r+0x64>
 8007dc4:	460c      	mov	r4, r1
 8007dc6:	6849      	ldr	r1, [r1, #4]
 8007dc8:	e7cc      	b.n	8007d64 <_malloc_r+0x2c>
 8007dca:	1cc4      	adds	r4, r0, #3
 8007dcc:	f024 0403 	bic.w	r4, r4, #3
 8007dd0:	42a0      	cmp	r0, r4
 8007dd2:	d005      	beq.n	8007de0 <_malloc_r+0xa8>
 8007dd4:	1a21      	subs	r1, r4, r0
 8007dd6:	4630      	mov	r0, r6
 8007dd8:	f000 f808 	bl	8007dec <_sbrk_r>
 8007ddc:	3001      	adds	r0, #1
 8007dde:	d0cf      	beq.n	8007d80 <_malloc_r+0x48>
 8007de0:	6025      	str	r5, [r4, #0]
 8007de2:	e7db      	b.n	8007d9c <_malloc_r+0x64>
 8007de4:	20004b04 	.word	0x20004b04
 8007de8:	20004b08 	.word	0x20004b08

08007dec <_sbrk_r>:
 8007dec:	b538      	push	{r3, r4, r5, lr}
 8007dee:	4c06      	ldr	r4, [pc, #24]	; (8007e08 <_sbrk_r+0x1c>)
 8007df0:	2300      	movs	r3, #0
 8007df2:	4605      	mov	r5, r0
 8007df4:	4608      	mov	r0, r1
 8007df6:	6023      	str	r3, [r4, #0]
 8007df8:	f7f8 fe72 	bl	8000ae0 <_sbrk>
 8007dfc:	1c43      	adds	r3, r0, #1
 8007dfe:	d102      	bne.n	8007e06 <_sbrk_r+0x1a>
 8007e00:	6823      	ldr	r3, [r4, #0]
 8007e02:	b103      	cbz	r3, 8007e06 <_sbrk_r+0x1a>
 8007e04:	602b      	str	r3, [r5, #0]
 8007e06:	bd38      	pop	{r3, r4, r5, pc}
 8007e08:	200054ec 	.word	0x200054ec

08007e0c <__malloc_lock>:
 8007e0c:	4770      	bx	lr

08007e0e <__malloc_unlock>:
 8007e0e:	4770      	bx	lr

08007e10 <_init>:
 8007e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e12:	bf00      	nop
 8007e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e16:	bc08      	pop	{r3}
 8007e18:	469e      	mov	lr, r3
 8007e1a:	4770      	bx	lr

08007e1c <_fini>:
 8007e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e1e:	bf00      	nop
 8007e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e22:	bc08      	pop	{r3}
 8007e24:	469e      	mov	lr, r3
 8007e26:	4770      	bx	lr
